#!/usr/bin/env bash

# Reference: https://github.com/foundry-rs/foundry/blob/master/foundryup/foundryup

set -eo pipefail

BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
ZISK_DIR=${ZISK_DIR:-"$BASE_DIR/.zisk"}
ZISK_BIN_DIR="$ZISK_DIR/bin"
mkdir -p $ZISK_BIN_DIR

BINS=(cargo-zisk)

export RUSTFLAGS="-C target-cpu=native"

main() {
  need_cmd git
  need_cmd curl

  while [[ -n $1 ]]; do
    case $1 in
    --)
      shift
      break
      ;;

    -r | --repo)
      shift
      ZISKUP_REPO=$1
      ;;
    -b | --branch)
      shift
      ZISKUP_BRANCH=$1
      ;;
    -v | --version)
      shift
      ZISKUP_VERSION=$1
      ;;
    -p | --path)
      shift
      ZISKUP_LOCAL_REPO=$1
      ;;
    -P | --pr)
      shift
      ZISKUP_PR=$1
      ;;
    -C | --commit)
      shift
      ZISKUP_COMMIT=$1
      ;;
    --arch)
      shift
      ZISKUP_ARCH=$1
      ;;
    --platform)
      shift
      ZISKUP_PLATFORM=$1
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    *)
      warn "unknown option: $1"
      usage
      exit 1
      ;;
    esac
    shift
  done

  # Print the banner after successfully parsing args
  banner

  if [ -n "$ZISKUP_PR" ]; then
    if [ -z "$ZISKUP_BRANCH" ]; then
      ZISKUP_BRANCH="refs/pull/$ZISKUP_PR/head"
    else
      err "can't use --pr and --branch at the same time"
    fi
  fi

  # Installs zisk from a local repository if --path parameter is provided
  if [[ -n "$ZISKUP_LOCAL_REPO" ]]; then
    need_cmd cargo

    # Ignore branches/versions as we do not want to modify local git state
    if [ -n "$ZISKUP_REPO" ] || [ -n "$ZISKUP_BRANCH" ] || [ -n "$ZISKUP_VERSION" ]; then
      warn "--branch, --version, and --repo arguments are ignored during local install"
    fi

    # Enter local repo and build
    say "installing from $ZISKUP_LOCAL_REPO"
    cd "$ZISKUP_LOCAL_REPO"
    ensure cargo build --bins --release # need 4 speed

    for bin in "${BINS[@]}"; do
      # Remove prior installations if they exist
      rm -f "$ZISK_BIN_DIR/$bin"
      # Symlink from local repo binaries to bin dir
      ensure ln -s "$PWD/target/release/$bin" "$ZISK_BIN_DIR/$bin"
    done

    say "done"
    exit 0
  fi

  ZISKUP_REPO=${ZISKUP_REPO:-0xPolygonHermez/zisk}

  # Install by downloading binaries
  if [[ "$ZISKUP_REPO" == "0xPolygonHermez/zisk" && -z "$ZISKUP_BRANCH" && -z "$ZISKUP_COMMIT" ]]; then
    ZISKUP_VERSION=${ZISKUP_VERSION:-latest}
    ZISKUP_TAG=$ZISKUP_VERSION

    if [[ "$ZISKUP_VERSION" == [[:digit:]]* ]]; then
      # Add v prefix
      ZISKUP_VERSION="v${ZISKUP_VERSION}"
      ZISKUP_TAG="${ZISKUP_VERSION}"
    fi

    say "installing zisk (version ${ZISKUP_VERSION}, tag ${ZISKUP_TAG})"

    uname_s=$(uname -s)
    PLATFORM=$(tolower "${ZISKUP_PLATFORM:-$uname_s}")
    EXT="tar.gz"
    case $PLATFORM in
    linux) ;;
    darwin | mac*)
      PLATFORM="darwin"
      ;;
    mingw* | win*)
      EXT="zip"
      PLATFORM="win32"
      ;;
    *)
      err "unsupported platform: $PLATFORM"
      ;;
    esac

    uname_m=$(uname -m)
    ARCHITECTURE=$(tolower "${ZISKUP_ARCH:-$uname_m}")
    if [ "${ARCHITECTURE}" = "x86_64" ]; then
      # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
      if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
        ARCHITECTURE="arm64" # Rosetta.
      else
        ARCHITECTURE="amd64" # Intel.
      fi
    elif [ "${ARCHITECTURE}" = "arm64" ] || [ "${ARCHITECTURE}" = "aarch64" ]; then
      ARCHITECTURE="arm64" # Arm.
    else
      ARCHITECTURE="amd64" # Amd.
    fi

    # Compute the URL of the release tarball in the zisk repository.
    if [ "${ZISKUP_TAG}" = "latest" ]; then
      RELEASE_URL="https://github.com/${ZISKUP_REPO}/releases/latest/download/"
    else 
      RELEASE_URL="https://github.com/${ZISKUP_REPO}/releases/download/${ZISKUP_TAG}/"
    fi
    BIN_ARCHIVE_URL="${RELEASE_URL}cargo_zisk_${PLATFORM}_${ARCHITECTURE}.$EXT"
    #MAN_TARBALL_URL="${RELEASE_URL}cargo_zisk_man_${ZISKUP_VERSION}.tar.gz"

    # Download and extract the binaries archive
    say "downloading latest cargo-zisk"
    if [ "$PLATFORM" = "win32" ]; then
      tmp="$(mktemp -d 2>/dev/null || echo ".")/cargo-zisk.zip"
      ensure download "$BIN_ARCHIVE_URL" "$tmp"
      ensure unzip "$tmp" -d "$ZISK_BIN_DIR"
      rm -f "$tmp"
    else
      tmp="$(mktemp -d)/cargo_zisk.tar.gz"
      if check_cmd curl; then
        curl -H "Accept: application/octet-stream" -L -#o "$tmp" "$BIN_ARCHIVE_URL"
      else
        wget --header="Accept: application/octet-stream" --show-progress -qO "$tmp" "$BIN_ARCHIVE_URL"
      fi
      ensure tar -xzf "$tmp" -C "$ZISK_BIN_DIR"
      rm -f "$tmp"
    fi

    for bin in "${BINS[@]}"; do
      bin_path="$ZISK_BIN_DIR/$bin"

      # Print installed msg
      say "installed - $(ensure "$bin_path" sdk --version)"

      # Check if the default path of the binary is not in ZISK_BIN_DIR
      which_path="$(command -v "$bin" || true)"
      if [ -n "$which_path" ] && [ "$which_path" != "$bin_path" ]; then
        warn ""
        cat 1>&2 <<EOF
There are multiple binaries with the name '$bin' present in your 'PATH'.
This may be the result of installing '$bin' using another method,
like Cargo or other package managers.
You may need to run 'rm $which_path' or move '$ZISK_BIN_DIR'
in your 'PATH' to allow the newly installed version to take precedence!

EOF
      fi
    done

    say "installing rust toolchain"
    ensure "$bin_path" sdk install-toolchain
    say "installed rust toolchain"

    say "done!"

  # Install by cloning the repo with the provided branch/tag
  else
    need_cmd cargo
    ZISKUP_BRANCH=${ZISKUP_BRANCH:-main}
    REPO_PATH="$ZISK_DIR/$ZISKUP_REPO"

    # If repo path does not exist, grab the author from the repo, make a directory in .foundry, cd to it and clone.
    if [ ! -d "$REPO_PATH" ]; then
      AUTHOR="$(echo "$ZISKUP_REPO" | cut -d'/' -f1 -)"
      ensure mkdir -p "$ZISK_DIR/$AUTHOR"
      cd "$ZISK_DIR/$AUTHOR"
      ensure git clone "https://github.com/$ZISKUP_REPO"
    fi

    # Force checkout, discarding any local changes
    cd "$REPO_PATH"
    ensure git fetch origin "${ZISKUP_BRANCH}:remotes/origin/${ZISKUP_BRANCH}"
    ensure git checkout "origin/${ZISKUP_BRANCH}"

    # If set, checkout specific commit from branch
    if [ -n "$ZISKUP_COMMIT" ]; then
      say "installing at commit $ZISKUP_COMMIT"
      ensure git checkout "$ZISKUP_COMMIT"
    fi

    # Build the repo and install the binaries locally to the .zisk bin directory.
    ensure cargo build --bins --release
    for bin in "${BINS[@]}"; do
      for try_path in target/release/$bin target/release/$bin.exe; do
        if [ -f "$try_path" ]; then
          [ -e "$ZISK_BIN_DIR/$bin" ] && warn "overwriting existing $bin in $ZISK_BIN_DIR"
          mv -f "$try_path" "$ZISK_BIN_DIR"
        fi
      done
    done

    say "done"
  fi
}

usage() {
  cat 1>&2 <<EOF
The installer for the ZISK.

Update or revert to a specific zisk version with ease.

USAGE:
    ziskup <OPTIONS>

OPTIONS:
    -h, --help      Print help information
    -v, --version   Install a specific version
    -b, --branch    Install a specific branch
    -P, --pr        Install a specific Pull Request
    -C, --commit    Install a specific commit
    -r, --repo      Install from a remote GitHub repo (uses default branch if no other options are set)
    -p, --path      Install a local repository
    --arch          Install a specific architecture (supports amd64 and arm64)
    --platform      Install a specific platform (supports win32, linux, and darwin)
EOF
}

say() {
  printf "ziskup: %s\n" "$1"
}

warn() {
  say "warning: ${1}" >&2
}

err() {
  say "$1" >&2
  exit 1
}

tolower() {
  echo "$1" | awk '{print tolower($0)}'
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" &>/dev/null
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

# Downloads $1 into $2 or stdout
download() {
  if [ -n "$2" ]; then

    # Fetch the URL from the GitHub API
    if check_cmd curl; then
      API_RESPONSE=$(curl https://api.github.com/repos/0xPolygonHermez/zisk/releases)
    else
      API_RESPONSE=$(wget -qO- https://api.github.com/repos/0xPolygonHermez/zisk/releases)
    fi

    # Extract the browser_download_url for the given file name ($1)
    URL=$(echo "$API_RESPONSE" | jq -r --arg FILENAME "$1" '.[] | .assets[] | select(.browser_download_url == $FILENAME) | .url')

    if [ -z "$URL" ]; then
      echo "No matching URL found for file name: $1"
      return 1
    fi

    # output into $2
    if check_cmd curl; then
      curl -H "Accept: application/octet-stream" -#o "$2" -L "$URL"
    else
      wget --header="Accept: application/octet-stream" --show-progress -qO "$2" "$URL"
    fi
  else
    # Fetch the URL from the GitHub API
    if check_cmd curl; then
      API_RESPONSE=$(curl https://api.github.com/repos/0xPolygonHermez/zisk/releases)
    else
      API_RESPONSE=$(wget -qO- https://api.github.com/repos/0xPolygonHermez/zisk/releases)
    fi
    # Extract the browser_download_url for the given file name ($1)
    URL=$(echo "$API_RESPONSE" | jq -r --arg FILENAME "$1" '.[] | .assets[] | select(.browser_download_url == $FILENAME) | .url')

    if [ -z "$URL" ]; then
      echo "No matching URL found for file name: $1"
      return 1
    fi

    # output into $2
    if check_cmd curl; then
      curl -H "Accept: application/octet-stream" -L "$URL"
    else
      wget --header="Accept: application/octet-stream" --show-progress -qO- "$URL"
    fi
  fi
}

# Banner Function for zisk
banner() {
  printf "
########################################################################################
 ______     _  __
|__  (_)___| |/ /
  / /| / __| ' / 
 / /_| \__ \ . \ 
/____|_|___/_|\_\

Ziskup - The Zisk Installer

########################################################################################

"
}

main "$@"
