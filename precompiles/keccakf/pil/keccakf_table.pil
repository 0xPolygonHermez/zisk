require "std_lookup.pil"

const int KECCAKF_TABLE_ID = 126;

airtemplate KeccakfTable(const int N = 2**25, const int bits = 12) {
    // Ensure that the chosen size fits
    assert(N >= 2**(bits + bits + 1));

    const int P2_BITS = 2**bits;
    const int P2_BITS_SQUARED = P2_BITS * P2_BITS;
    const int MASK_BITS = P2_BITS - 1;

    // Columns defining the circuit gates
    col fixed A = [0..MASK_BITS]...;
    col fixed B = [0:P2_BITS..MASK_BITS:P2_BITS]...;
    col fixed GATE_OP = [0:P2_BITS_SQUARED, 1:P2_BITS_SQUARED]...;

    // Precompute a table with the two basic operations appearing in the Keccak-f permutation
    col fixed C;
    for (int i = 0; i < N; i++) {
        const int [gate_op, a, b] = [GATE_OP[i], A[i], B[i]];
        
        int c = 0;
        switch (gate_op) {
            case 0:
                // XOR operation (appearing, e.g., in the θ step)
                c = a ^ b;
            case 1:
                // ANDP (appearing in the χ step)
                c = (a ^ MASK_BITS) & b;
            default:
                error(`Invalid gate operation opcode: ${gate_op} at row ${i}`);
        }
        C[i] = c;
    }

    // --> Prove that the circuit gates are satisfied
    col witness multiplicity;
    lookup_proves(KECCAKF_TABLE_ID, [GATE_OP, A, B, C], multiplicity);
}