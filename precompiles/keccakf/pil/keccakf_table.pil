require "std_lookup.pil"

const int KECCAKF_TABLE_ID = 126;

airtemplate KeccakfTable(const int N = 2**23, const int chunks, const int bits, const int bits_reduced) {
    // Compute table size
    const int BITS_A = bits - chunks + 1;
    const int BITS_B = bits;
    const int BITS_OP = 1;
    const int TABLE_BIT_SIZE = BITS_A + BITS_B + BITS_OP;

    // Ensure that the chosen size fits
    if (N < 2**TABLE_BIT_SIZE) {
        error(`With chunks=${chunks} and bits=${bits}, N must be at least 2**${TABLE_BIT_SIZE} to fit the table, but received 2**${log2(N)}`);
    }

    const int P2_BITS_A = 2**BITS_A;
    const int P2_BITS_B = 2**BITS_B;
    const int P2_BITS_AB = P2_BITS_A * P2_BITS_B;
    const int P2_BITS_REDUCED = 2**bits_reduced;
    const int MASK_BITS_A = P2_BITS_A - 1;
    const int MASK_BITS_B = P2_BITS_B - 1;
    const int MASK_BITS_REDUCED = P2_BITS_REDUCED - 1;

    col fixed A[chunks]; // Input A (BITS_A bits)
    int offset = 0;
    for (int j = 0; j < chunks; j++) {
        A[j] = [offset..(MASK_BITS_A + offset)]...;
        offset += P2_BITS_A;
    }

    col fixed B = [0:P2_BITS_A..MASK_BITS_B:P2_BITS_A]...; // Input B (BITS_B bits)
    col fixed GATE_OP = [0:P2_BITS_AB, 1:P2_BITS_AB]...;   // Gate operation (BITS_OP bit)
    if (bits != bits_reduced) {
        col fixed air.C_REDUCED[chunks]; // Output C reduced
        col fixed air.IND[chunks];       // Valid input indicator
    }

    // Precompute a table with the two basic operations appearing in the Keccak-f permutation
    col fixed C[chunks]; // Output C (BITS_A bits)
    #pragma transpile
    for (int i = 0; i < N; i++) {
        const int b = B[i];
        const int gate_op = GATE_OP[i];
        for (int j = 0; j < chunks; j++) {
            const int a = A[j][i];
            
            int ind = 2; // Some value different from 0 and 1
            if (a < P2_BITS_REDUCED && b < P2_BITS_REDUCED) {
                // Mark only when both inputs are valid
                ind = 1;
            }

            int c = 0;
            int c_reduced = 0;
            switch (gate_op) {
                case 0:
                    // XOR operation (appearing, e.g., in the θ step)
                    c = a ^ b;
                    c_reduced = c & MASK_BITS_REDUCED;
                case 1:
                    // ANDP (appearing in the χ step)
                    c = (a ^ MASK_BITS_A) & b;
                    c_reduced = c & MASK_BITS_REDUCED;
                default:
                    error(`Invalid gate operation opcode: ${gate_op} at row ${i} and chunk ${j}`);
            }
            C[j][i] = c;
            if (bits != bits_reduced) {
                C_REDUCED[j][i] = c_reduced;
                IND[j][i] = ind;
            }
        }
    }

    // --> Prove that the circuit gates are satisfied
    col witness multiplicity[chunks];
    if (bits != bits_reduced) {
        col witness multiplicity_reduced[chunks];
        for (int j = 0; j < chunks; j++) {
            lookup_proves(KECCAKF_TABLE_ID, [0, GATE_OP, A[j], B, C[j]], multiplicity[j]);
            lookup_proves(KECCAKF_TABLE_ID, [IND[j], GATE_OP, A[j], B, C_REDUCED[j]], multiplicity_reduced[j]);
        }
    } else {
        for (int j = 0; j < chunks; j++) {
            lookup_proves(KECCAKF_TABLE_ID, [GATE_OP, A[j], B, C[j]], multiplicity[j]);
        } 
    }
}