require "std_lookup.pil"

const int KECCAKF_TABLE_ID = 126;

airtemplate KeccakfTable(const int N, const int chunks, const int bits) {
    // Operations
    const int XOR = 0;
    const int XORANDP = 1;

    // Compute table size
    const int BITS_A = bits - chunks + 1;
    const int BITS_B = bits;
    const int BITS_C = bits;
    const int BITS_OP = 1;
    const int TABLE_BIT_SIZE = BITS_A + BITS_B + BITS_C + BITS_OP;

    // Ensure that the chosen size fits
    if (N < 2**TABLE_BIT_SIZE) {
        error(`With chunks=${chunks} and bits=${bits}, N must be at least 2**${TABLE_BIT_SIZE} to fit the table, but received 2**${log2(N)}`);
    }

    const int CHUNKS_A = 2**(chunks - 1);
    const int P2_BITS_A = 2**BITS_A;
    const int P2_BITS_B = 2**BITS_B;
    const int P2_BITS_C = 2**BITS_C;
    const int P2_BITS_AB = P2_BITS_A * P2_BITS_B;
    const int P2_BITS_ABC = P2_BITS_A * P2_BITS_B * P2_BITS_C;
    const int MASK_BITS_A = P2_BITS_A - 1;
    const int MASK_BITS_B = P2_BITS_B - 1;
    const int MASK_BITS_C = P2_BITS_C - 1;

    col fixed A[CHUNKS_A]; // Input A (BITS_A bits)
    int offset = 0;
    for (int j = 0; j < CHUNKS_A; j++) {
        A[j] = [offset..(MASK_BITS_A + offset)]...;
        offset += P2_BITS_A;
    }

    col fixed B = [0:P2_BITS_A..MASK_BITS_B:P2_BITS_A]...; // Input B (BITS_B bits)
    col fixed C = [0:P2_BITS_AB..MASK_BITS_C:P2_BITS_AB]...; // Input C (BITS_C bits)
    col fixed GATE_OP = [XOR:P2_BITS_ABC, XORANDP:P2_BITS_ABC]...;   // Gate operation (BITS_OP bit)

    // Precompute a table with the two basic operations appearing in the Keccak-f permutation
    col fixed D[CHUNKS_A]; // Output D (BITS_A bits)
    #pragma transpile
    for (int i = 0; i < N; i++) {
        const int [b, c, gate_op] = [B[i], C[i], GATE_OP[i]];

        for (int j = 0; j < CHUNKS_A; j++) {
            const int a = A[j][i];

            int d = 0;
            switch (gate_op) {
                case XOR:
                    d = a ^ b ^ c;
                case XORANDP:
                    d = a ^ ((b ^ MASK_BITS_A) & c);
                default:
                    error(`Invalid gate operation opcode: ${gate_op} at row ${i} and chunk ${j}`);
            }
            D[j][i] = d;
        }
    }

    // --> Prove that the circuit gates are satisfied
    col witness multiplicity[CHUNKS_A];
    for (int j = 0; j < CHUNKS_A; j++) {
        lookup_proves(KECCAKF_TABLE_ID, [GATE_OP, A[j], B, C, D[j]], multiplicity[j]);
    }
}