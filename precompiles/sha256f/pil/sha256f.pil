require "std_constants.pil"
require "std_lookup.pil"
require "std_connection.pil"

// Precompile in charge of performing the SHA2-256 permutation (named here Sha256-f). 
// For reference: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf

const int SHA256F_SIZE_BITS = 1600;

const int SHA256F_OP = 0xF2;
const int SHA256F_CIRCUIT_ID = 0x191;

airtemplate Sha256f(const int N = 2**22, const int RC = 2, const int RB = 32, const int bits_in_parallel = 2, const int chunks = 9, const int bits = 7, const int operation_bus_id) {
    // Sha256-f circuit size
    const int CIRCUIT_SIZE = 31488;
    println(`The size of the Sha256-f circuit is ${CIRCUIT_SIZE}`);

    // Ensure that the sha256-f circuit fits
    if (N < CIRCUIT_SIZE) {
        error(`N must be at least ${CIRCUIT_SIZE} to fit the Sha256-f circuit, but received N=${N}`);
    }

    // Ensure that the sha256-f input fit in the prime field
    const int BITS_INPUT = chunks*bits;
    if (BITS_INPUT > log2(PRIME)) {
        error(`The number of bits ${BITS_INPUT} is too large for the prime ${PRIME}`);
    }

    // Compute some stats
    const int NUM_SHA256F_PER_CIRCUIT = chunks * bits;
    const int NUM_CIRCUITS = (N - 1) / CIRCUIT_SIZE;
    const int NUM_SHA256F = NUM_CIRCUITS * NUM_SHA256F_PER_CIRCUIT;
    const int NUM_PADDING_ROWS = (N - 1) % CIRCUIT_SIZE;
    println(`The number of Sha256-f per circuit is ${NUM_SHA256F_PER_CIRCUIT > log2(PRIME) ? log2(PRIME)-1 : NUM_SHA256F_PER_CIRCUIT}`);
    println(`The number of circuits that fit for the given N is ${NUM_CIRCUITS} and the total number of Sha256-f is ${NUM_SHA256F}`);
    println(`The number of padding rows is ${NUM_PADDING_ROWS}`);

    const int P2_BITS = 2**bits;
    const int P2_CHUNK_BITS = 2**(bits * chunks);
    const int MASK_CHUNK_BITS = P2_CHUNK_BITS - 1;

    col fixed L1 = [1,0...];

    // Column specifying the circuit gates
    #pragma fixed_external
    col fixed GATE_OP;
    #pragma fixed_external
    col fixed CARRY_ENABLED;

    // Columns specifying the circuit connections
    #pragma fixed_external
    col fixed CONN_A;
    #pragma fixed_external
    col fixed CONN_B;
    #pragma fixed_external
    col fixed CONN_C;
    #pragma fixed_external
    col fixed CONN_D;

    col witness free_in_a[chunks], free_in_b[chunks], free_in_c[chunks], free_in_d[chunks];

    // --> Circuit gates constraints
    for (int i = 0; i < chunks; i++) {
        lookup_assumes(SHA256F_TABLE_ID, [GATE_OP, free_in_a[i], free_in_b[i], free_in_c[i], free_in_d[i], free_in_c[i]' * CARRY_ENABLED]);
    }

    // --> Circuit connections constraints
    // Start by reconstructing the input from the chunks
    expr a = 0;
    expr b = 0;
    expr c = 0;
    expr d = 0;
    for (int i = 0; i < chunks; i++) {
        const int shift = P2_BITS**i;
        a += free_in_a[i] * shift;
        b += free_in_b[i] * shift;
        c += free_in_c[i] * shift;
        d += free_in_d[i] * shift;
    }

    // Enforce constants 0b00..000 and 0b11..111 at the first row for direct access
    // This reduces the circuit connections
    L1 * a === 0;
    L1 * (b - MASK_CHUNK_BITS) === 0;

    connection(opid: SHA256F_CIRCUIT_ID, cols: [a, b, c, d], CONN: [CONN_A, CONN_B, CONN_C, CONN_D]);

    // // --> Constraints to make sure that this coprocessor is called from the main processor
    // col witness step;
    // col witness addr;
    // col witness multiplicity;
    // lookup_proves(OPERATION_BUS_ID, [SHA256F_OP, step, 0, addr, 0, 0, 0, 0], multiplicity);

    // // --> Constraints to read inputs from memory and write outputs to memory
    // col witness bit[bits_in_parallel];
    // col witness val[bits_in_parallel];
    // // Note: We process `bits_in_parallel` bits in parallel

    // const int IN_SIZE = NUM_SHA256F_PER_CIRCUIT * SHA256F_SIZE_BITS / bits_in_parallel;
    // const int OUT_SIZE = IN_SIZE;
    // const int IN_OUT_SIZE = IN_SIZE + OUT_SIZE;
    // // Instructions to add a latch:
    // //  - When there are circuits.
    // //  - Every NUM_SHA256F_PER_CIRCUIT clocks (except for the first one).
    // //  - When there are still bits to process (i.e., we repeat the previous instruction SHA256F_SIZE_BITS times).
    // col fixed latch_num_sha256f  = [0,[[0:NUM_SHA256F_PER_CIRCUIT,1],[0:(NUM_SHA256F_PER_CIRCUIT-1),1]:(SHA256F_SIZE_BITS-1), 
    //                                         0:(CIRCUIT_SIZE - (IN_OUT_SIZE+1))]:NUM_CIRCUITS,
    //                                     0...];

    // // Instructions to add the factor:
    // //  - When there are circuits.
    // //  - Every clock, for the clock in the circuit, we add the factor 1 << clk.
    // //  - When there are still bits to process (i.e., we repeat the previous instruction SHA256F_SIZE_BITS times).
    // col fixed factor_num_sha256f;
    // if (NUM_SHA256F_PER_CIRCUIT != 1) {
    //     factor_num_sha256f = [0,[[1,2..*..2**(NUM_SHA256F_PER_CIRCUIT-1)]:SHA256F_SIZE_BITS, 
    //                               0:(CIRCUIT_SIZE - IN_OUT_SIZE)]:NUM_CIRCUITS,
    //                           0...];
    // } else {
    //     factor_num_sha256f = [0, [1:SHA256F_SIZE_BITS, 0:(CIRCUIT_SIZE - IN_OUT_SIZE)]:NUM_CIRCUITS, 0...];
    // }

    // // `bit` is a bit
    // for (int i = 0; i < bits_in_parallel; i++) {
    //     bit[i] * (1 - bit[i]) === 0;
    // }

    // // `val` accumulates bits. In each i-th latch, `val` has accumulated the i-th bit of the sha256f's 
    // for (int i = 0; i < bits_in_parallel; i++) {
    //     val[i]' === val[i] * (1 - latch_num_sha256f) + bit[i] * factor_num_sha256f;
    // }

    // // In each i-th latch, `val` has to coincide with the 'a'-th gate entry
    // for (int i = 0; i < bits_in_parallel; i++) {
    //     latch_num_sha256f * (val[i] - a'(i)) === 0;
    // }

    // // `state` accumulates RB bits of the i-th sha256f state each clock
    // // After NUM_SHA256F_PER_CIRCUIT clocks, `state` has accumulated RB bits of the NUM_SHA256F_PER_CIRCUIT sha256f's
    // expr state[RC];
    // // Initialize the state
    // for (int i = 0; i < RC; i++) {
    //     state[i] = 0;
    // }
    // // Update the state
    // const int RB_OFFSET = RB / bits_in_parallel;
    // for (int i = 0; i < RB; i++) {
    //     const int state_bit = i % bits_in_parallel;
    //     const int state_idx = (i - state_bit) / bits_in_parallel;
    //     for (int j = 0; j < RC; j++) {
    //         state[j] += bit[state_bit]'(NUM_SHA256F_PER_CIRCUIT*(RB_OFFSET * j + state_idx)) * 2**i;
    //     }
    // }

    // // `is_val` is an indicator that the value is valid
    // col witness is_val;
    // is_val * (1 - is_val) === 0;

    // // if multiplicity is not zero, then is_val should be 1
    // multiplicity * (is_val - 1) === 0;

    // // Then, if is_val = 1, it should be 1 (RB*2)*CHUNKS_TO_PROCESS times (input and ouput), separated by NUM_SHA256F_PER_CIRCUIT
    // // escept for the very last bit
    // const int CHUNKS_TO_PROCESS = SHA256F_SIZE_BITS / RB;
    // const int INPUT_CHUNKS = CHUNKS_TO_PROCESS / bits_in_parallel;
    // const int OUTPUT_CHUNKS = INPUT_CHUNKS;
    // const int IN_OUT_CHUNKS = INPUT_CHUNKS + OUTPUT_CHUNKS;
    // const int RB_SIZE = NUM_SHA256F_PER_CIRCUIT * RB;
    // const int RB_SIZE_MINUS_ONE = NUM_SHA256F_PER_CIRCUIT * (RB - 1);
    // col fixed latch_in_out = [0,[[1:NUM_SHA256F_PER_CIRCUIT,0:RB_SIZE_MINUS_ONE]:(IN_OUT_CHUNKS-1),
    //                               0:RB_SIZE,
    //                               0:(CIRCUIT_SIZE - IN_OUT_SIZE)]:NUM_CIRCUITS,
    //                           0...];
    // latch_in_out * (is_val'(RB_SIZE) - is_val) === 0;

    // // step should be the same every NUM_SHA256F_PER_CIRCUIT clock
    // is_val * (step'(RB_SIZE) - step) === 0;

    // // addr should be the previous plus one every RB_SIZE clock
    // // except when there is a change from input to output
    // col fixed addr_inc = [0,[
    //                          [8:NUM_SHA256F_PER_CIRCUIT,0:RB_SIZE_MINUS_ONE]:(INPUT_CHUNKS-1),
    //                          [(-8*(INPUT_CHUNKS-1)):NUM_SHA256F_PER_CIRCUIT,0:RB_SIZE_MINUS_ONE],
    //                          [8:NUM_SHA256F_PER_CIRCUIT,0:RB_SIZE_MINUS_ONE]:(OUTPUT_CHUNKS-1),
    //                           0:RB_SIZE,
    //                           0:(CIRCUIT_SIZE - IN_OUT_SIZE)
    //                         ]:NUM_CIRCUITS,
    //                       0...];
    // is_val * (addr'(RB_SIZE) - (addr + addr_inc)) === 0;

    // col fixed latch_in  = [0,[[1:NUM_SHA256F_PER_CIRCUIT,0:RB_SIZE_MINUS_ONE]:INPUT_CHUNKS,
    //                            0:(CIRCUIT_SIZE - IN_SIZE)]:NUM_CIRCUITS,
    //                        0...];

    // col fixed latch_out = [0,[ 0:(RB_SIZE*INPUT_CHUNKS),
    //                           [1:NUM_SHA256F_PER_CIRCUIT,0:RB_SIZE_MINUS_ONE]:OUTPUT_CHUNKS,
    //                            0:(CIRCUIT_SIZE - IN_OUT_SIZE)]:NUM_CIRCUITS,
    //                        0...];
    // precompiled_mem_load(
    //          sel: is_val * latch_in,
    //          main_step: step,
    //          addr: addr,
    //          value: state
    //         );

    // precompiled_mem_store(
    //           sel: is_val * latch_out,
    //           main_step: step,
    //           addr: addr,
    //           value: state
    //         );
}