require "std_constants.pil";
require "std_permutation.pil";

/*
 * Module for performing connection checks on columns,
 * as described in https://eprint.iacr.org/2019/953.pdf.
 *
 * This module facilitates connection checks between vectors of expressions, reducing the problem
 * to a permutation check. It provides two independent user interfaces: **Online** and **Offline**,
 * depending on whether the connections are defined dynamically or known beforehand.
 *
 * 1. **Online**:
 *    Allows dynamic construction and updating of connections. This is useful when the connections 
 *    are not predefined and need to be built incrementally during computation.
 *
 *    Methods:
 *    - `connection_init(opid, cols[])`:
 *        Initializes the connection for a given operation ID (`opid`) with a set of columns (`cols`).
 *
 *    - `connection_update_one_cell(opid, conn[])`:
 *        Connects a single cell in a column with another cell from the same or a different column.
 *
 *    - `connection_update_one_cell_batch(opid, conn[][])`:
 *        Batch version of `connection_update_one_cell`, allowing multiple cell connections to be updated at once.
 *
 *    - `connection_update_multiple_cells(opid, conn[])`:
 *        Updates connections for multiple cells in one operation.
 *
 *    - `connection_connect(opid)`:
 *        Finalizes the connection for the specified operation ID.
 *
 *    **Example**:
 *    connection_init(opid, [a, b, c, d]);
 *    connection_update_one_cell(opid, [a, 1, b, 2]);
 *    connection_update_one_cell_batch(opid, [[b, 3, c, 0], [a, 1, c, 0]]);
 *    connection_update_multiple_cells(opid, [c, 10, b, 3, a, 65, c, 9, c, 8]);
 *    connection_connect(opid);
 *
 * 2. **Offline**:
 *    Designed for scenarios where the connections are already known and can be directly provided
 *    to the connection check function.
 *
 *    **Example**:
 *      col witness a,b,c;
 *      col fixed S1,S2,S3;
 *      // Logic to define the fixed columns (e.g., hardcoded values, computed logic, or imported from file).
 *      connection(opid, [a, b, c], [S1, S2, S3]);
 *
 * **Implementation Notes**:
 * - Connection checks are internally reduced to a **permutation check** of the form:
 *         (f_0+𝛂·ID+ɣ)   · (f_1+𝛂·k_1·ID+ɣ)·...·(f_N+𝛂·k_N·ID+ɣ)
 *      ----------------------------------------------------------
 *       (f_0+𝛂·CONN_0+ɣ) · (f_1+𝛂·CONN_1+ɣ)·...·(f_N+𝛂·CONN_N+ɣ)
 *
 *   Where:
 *   - `f_i`: Columns subject to the connection check.
 *   - `𝛂, ɣ`: Uniformly and independently sampled field elements.
 *   - `ID`: Identity column.
 *   - `k_i`: Coset representatives.
 *   - `CONN_i`: Fixed columns describing the connection for `f_i`.
 */


const int DEFAULT_CONNECTION_N = 0;

/**
 * Initializes the connection for a given operation ID with a set of columns.
 *
 * @param opid               The (unique) identifier of the connection
 * @param cols               Array of columns to be connected
 * @param default_frame_size Frame at which the cells are swapped and gets repeated until the end
 * @param bus_type           The bus type to use for the connection
 * @example
 * col witness a,b,c;
 * connection_init(opid, [a, b, c]);
 */
function connection_init(const int opid, const expr cols[], int default_frame_size = DEFAULT_CONNECTION_N, const int bus_type = PIOP_BUS_DEFAULT) {
    if (default_frame_size == DEFAULT_CONNECTION_N) default_frame_size = N;

    if (default_frame_size < 1) {
        error(`The frame size of connect #${opid} must be at least 1`);
    } else if (default_frame_size > N) {
        error(`The frame size of connect #${opid} must be at most ${N}`);
    }

    const int cols_count = length(cols);

    if (cols_count < 1) {
        error(`The number of columns of connect #${opid} must be at least 1`);
    }

    container proof.std.connect alias kscont {
        int ks_count = 0;
        int ks[100];
    }

    container air.std.connect alias conn {
        int opids_count = 0;
        int opids[100];

        col fixed ID = [1,GEN[BITS]..*..]; // {1,g,g²,...,gᴺ⁻¹} --> multiplicative group of order 2**BITS = N
    }

    container air.std.connect.`id${opid}` alias connid {
        int closed;
        int bus_type;
        int default_frame_size;
        int cols_num = 0;

        expr map_cols[cols_count];
        col fixed CONN[cols_count];

        // 1st dimension: The number of connections can be as large as one wants. Until we have dynamic arrays, we fix the size to cols·rows
        // 2nd dimension:
        //      - 0: connection identifier.
        //      - 1: first column index.
        //      - 2: first row index.
        //      - 3: second column index.
        //      - 4: second row index.
        int conn_indicator[cols_count*N][5];
        int conn_index = 0;
        int counter = 0;
    }

    if (connid.cols_num == 0) {
        // Properties of each connection in the air
        connid.closed = 0;
        connid.bus_type = bus_type;
        connid.default_frame_size = default_frame_size;
        connid.cols_num = cols_count;

        // Properties of every connection in the air
        conn.opids[conn.opids_count] = opid;
        conn.opids_count = conn.opids_count + 1;
    } else {
        error(`Init of connect #${opid} has already been called`);
    }

    // Compute the ks if necessary, otherwise reuse the already computed ones
    if (cols_count > kscont.ks_count) {
        for (int i = kscont.ks_count; i < cols_count; i++) {
            // Check https://eprint.iacr.org/2019/953.pdf for details on why we need such k
            kscont.ks[i] = k_coset ** i;
        }

        // update the already computed ks
        kscont.ks_count = cols_count;
    }

    for (int i = 0; i < cols_count; i++) {
        const int k = kscont.ks[i];

        // Create a mapping of indexes to set a specific order of the columns the first time it is called
        connid.map_cols[i] = cols[i];

        // Send to the bus the original columns
        permutation_assumes(opid, [cols[i], k * conn.ID], bus_type: bus_type, name: PIOP_NAME_CONNECTION);

        // Initialize polynomial CONN[0](X) as X and CONN[i](X) as k_i·X, for i >= 0
        for (int j = 0; j < N; j++) {
            connid.CONN[i][j] = k * conn.ID[j];
        }
    }

    // At the end of the air, check if the initialized connections were ever closed
    on final air checkClosed();
}

/**
 * It connects a single cell in a column with another cell from the same or a different column.
 *
 * @param opid       The (unique) identifier of the connection
 * @param conn       Array of columns and rows of the cells to be swapped
 * @param frame_size Frame at which the cells are swapped and gets repeated until the end
 * @example
 * col witness a,b;
 * connection_init(opid, [a, b]);
 * connection_update_one_cell(opid, [a,1,b,2], N/2);
 */
function connection_update_one_cell(const int opid, const expr conn[], int frame_size = DEFAULT_CONNECTION_N) {
    if (!defined(air.std.connect.`id${opid}`)) {
        error(`Connect #${opid} has not been initialized`);
    }

    use air.std.connect.`id${opid}`;

    // If there is some default frame size and frame size is the default, use the default frame size
    if (frame_size == DEFAULT_CONNECTION_N) {
        frame_size = default_frame_size;
    }

    if (frame_size < 1) {
        error(`The frame size of connect #${opid} must be at least 1`);
    } else if (frame_size > N) {
        error(`The frame size of connect #${opid} must be at most ${N}`);
    }

    const int len = length(conn);
    if (len == 0) {
        error(`Connection #${opid} cannot be empty`);
    } else if (len != 4) {
        error(`Connection #${opid} is not well defined, expected 4 elements but got ${len}`);
    }

    const int frame_number = N / frame_size;

    const int col1_index = find_col_index(opid, conn[0]);
    const int row1_index = conn[1];

    const int col2_index = find_col_index(opid, conn[2]);
    const int row2_index = conn[3];

    if (row1_index < 0 || row1_index >= frame_size) {
        error(`The row ${row1_index} of column ${conn[0]} is out of bounds in connection #${opid}`);
    } else if (row2_index < 0 || row2_index >= frame_size) {
        error(`The row ${row2_index} of column ${conn[2]} is out of bounds in connection #${opid}`);
    }

    if (col1_index == col2_index && row1_index == row2_index) {
        println(`You are connecting the row ${row1_index} of ${conn[0]} to itself in connection #${opid}, consider removing it. Skipping...`); // Fix: Add a warn instead
        return;
    }

    // Define the connection for each frame
    for (int f = 0; f < frame_number; f++)  {
        define_connection(opid, col1_index, row1_index + f*frame_size, col2_index, row2_index + f*frame_size);
    }
}

/**
 * The same as `connection_update_one_cell`, but allows multiple cell connections to be updated at once.
 *
 * @param opid       The (unique) identifier of the connection
 * @param conn       Array of columns and rows of the cells to be swapped
 * @param frame_size Frame at which the cells are swapped and gets repeated until the end
 * @example
 * col witness b,c;
 * connection_init(opid, [b, c]);
 * connection_update_one_cell_batch(opid, [[b,3,c,0],[a,1,c,0]], N/2);
 */
function connection_update_one_cell_batch(const int opid, const expr conn[][], int frame_size = DEFAULT_CONNECTION_N) {
    if (!defined(air.std.connect.`id${opid}`)) {
        error(`Connect #${opid} has not been initialized`);
    }

    // If there is some default frame size and frame size is the default, use the default frame size
    if (frame_size == DEFAULT_CONNECTION_N) {
        frame_size = air.std.connect.`id${opid}`.default_frame_size;
    }

    if (frame_size < 1) {
        error(`The frame size of connect #${opid} must be at least 1`);
    } else if (frame_size > N) {
        error(`The frame size of connect #${opid} must be at most ${N}`);
    }

    const int len = length(conn);
    if (len == 0) {
        error(`Connection #${opid} cannot be empty`);
    }

    for (int i = 0; i < len; i++) {
        connection_update_one_cell(opid, conn[i], frame_size);
    }
}

/**
 * It connects multiple cells at once.
 *
 * Check https://youtu.be/Crzw7ccuHd0?t=1276&si=M8sVdwvKhmIZQnJZ for a pictorial representation
 *
 * @param opid       The (unique) identifier of the connection
 * @param conn       Array of columns and rows of the cells to be swapped
 * @param frame_size Frame at which the cells are swapped and gets repeated until the end
 * @example
 * col witness a,b,c,d;
 * connection_init(opid, [a, b, c, d]);
 * connection_update_multiple_cells(opid, [d,2,d,3,b,0]);
 * connection_update_multiple_cells(opid, [c,10,b,3,a,65,c,9,c,8], N/2);
 */
function connection_update_multiple_cells(const int opid, const expr conn[], int frame_size = DEFAULT_CONNECTION_N) {
    if (!defined(air.std.connect.`id${opid}`)) {
        error(`Connect #${opid} has not been initialized`);
    }

    // If there is some default frame size and frame size is the default, use the default frame size
    if (frame_size == DEFAULT_CONNECTION_N) {
        frame_size = air.std.connect.`id${opid}`.default_frame_size;
    }

    if (frame_size < 1) {
        error(`The frame size of connect #${opid} must be at least 1`);
    } else if (frame_size > N) {
        error(`The frame size of connect #${opid} must be at most ${N}`);
    }

    const int len = length(conn);
    if (len == 0) {
        error(`Connection #${opid} cannot be empty`);
    } else if (len == 2) {
        error(`Connection #${opid} must connect at least two cells`);
    } else if (len % 2 != 0) {
        error(`Connection #${opid} is not well defined`);
    }

    const int frame_number = N / frame_size;

    for (int i = 0; i < len - 2; i = i + 2) {
        const int col1_index = find_col_index(opid, conn[i]);
        const int row1_index = conn[i+1];

        const int col2_index = find_col_index(opid, conn[i+2]);
        const int row2_index = conn[i+3];

        if (row1_index < 0 || row1_index >= frame_size) {
            error(`The row ${row1_index} of column ${conn[i]} is out of bounds`);
        } else if (row2_index < 0 || row2_index >= frame_size) {
            error(`The row ${row2_index} of column ${conn[i+2]} is out of bounds`);
        }

        if (col1_index == col2_index && row1_index == row2_index) {
            println(`You are connecting the row ${row1_index} of ${conn[i]} to itself, consider removing it. Skipping...`); // Fix: Add a warn instead
            continue;
        }

        // Define the connection for each frame
        for (int f = 0; f < frame_number; f++)  {
            define_connection(opid, col1_index, row1_index + f*frame_size, col2_index, row2_index + f*frame_size);
        }
    }
}

private function define_connection(const int opid, const int col1_index, const int row1_index, const int col2_index, const int row2_index) {
    use air.std.connect.`id${opid}`;

    int alreay_connected = 0;
    for (int i = 0; i < counter; i++) {
        // const int conn[5] = conn_indicator[i]; // Fix: No implemented yet
        const int cond1 = col1_index == conn_indicator[i][1] && row1_index == conn_indicator[i][2];
        const int cond2 = col2_index == conn_indicator[i][3] && row2_index == conn_indicator[i][4];
        const int cond3 = col1_index == conn_indicator[i][3] && row1_index == conn_indicator[i][4] && col2_index == conn_indicator[i][1] && row2_index == conn_indicator[i][2];

        if ((cond1 && cond2) || cond3) {
            // Connection already defined, mapping structure does not change
            return;
        } else if (cond1 || cond2) {
            // Connecting with an already connected cell, use the same connection
            conn_indicator[counter][0] = conn_indicator[i][0];
            alreay_connected = 1;
            break;
        }
    }

    if (!alreay_connected) {
        conn_indicator[counter][0] = conn_index;
        conn_index = conn_index + 1;
    }

    // Store the connection
    conn_indicator[counter] = [counter, col1_index, row1_index, col2_index, row2_index];

    counter = counter + 1;
}

/**
 * Finalizes the connection for the specified operation ID.
 *
 * @param opid The (unique) identifier of the connection
 * @example
 * connection_connect(opid);
 */
function connection_connect(const int opid) {
    if (!defined(air.std.connect.`id${opid}`)) {
        error(`Connect #${opid} has not been initialized`);
    }

    use air.std.connect.`id${opid}`;

    // Compute the permutation of connected cells
    for (int i = 0; i < counter; i++) {
        // const int conni[5] = conn_indicator[i]; // Fix: No implemented yet
        const int conn_id = conn_indicator[i][0];
        const int col1_id = conn_indicator[i][1];
        const int row1_id = conn_indicator[i][2];
        const int col2_id = conn_indicator[i][3];
        const int row2_id = conn_indicator[i][4];

        // Find all connections with the same identifier
        int conn_cluster[N*cols_num][2];
        conn_cluster[0][0] = col1_id;
        conn_cluster[0][1] = row1_id;
        conn_cluster[1][0] = col2_id;
        conn_cluster[1][1] = row2_id;
        int cluster_index = 2;
        for (int j = i + 1; j < counter; j++) {
            // const int connj[5] = conn_indicator[j]; // Fix: No implemented yet
            if (conn_indicator[j][0] == conn_id) {
                const int col1_id_j = conn_indicator[j][1];
                const int row1_id_j = conn_indicator[j][2];
                const int col2_id_j = conn_indicator[j][3];
                const int row2_id_j = conn_indicator[j][4];

                // Put the different cells in the same cluster
                int already_in_cluster_col1 = 0;
                int already_in_cluster_col2 = 0;
                for (int k = 0; k < cluster_index; k++) {
                    if (col1_id_j == conn_cluster[k][0] && row1_id_j == conn_cluster[k][1]) {
                        already_in_cluster_col1 = 1;
                    }
                    if (col2_id_j == conn_cluster[k][0] && row2_id_j == conn_cluster[k][1]) {
                        already_in_cluster_col2 = 1;
                    }
                    if (already_in_cluster_col1 && already_in_cluster_col2) {
                        break; // Both are already in the cluster, no need to continue
                    }
                }

                if (!already_in_cluster_col1) {
                    conn_cluster[cluster_index][0] = col1_id_j;
                    conn_cluster[cluster_index][1] = row1_id_j;
                    cluster_index = cluster_index + 1;
                }

                if (!already_in_cluster_col2) {
                    conn_cluster[cluster_index][0] = col2_id_j;
                    conn_cluster[cluster_index][1] = row2_id_j;
                    cluster_index = cluster_index + 1;
                }

                // remove the element conn_indicator[j] from the list
                for (int k = j; k < counter - 1; k++) {
                    // conn_indicator[k] = conn_indicator[k+1]; // Fix: No implemented yet
                    conn_indicator[k][0] = conn_indicator[k+1][0];
                    conn_indicator[k][1] = conn_indicator[k+1][1];
                    conn_indicator[k][2] = conn_indicator[k+1][2];
                    conn_indicator[k][3] = conn_indicator[k+1][3];
                    conn_indicator[k][4] = conn_indicator[k+1][4];
                }
                counter = counter - 1;
            }
        }

        // Rotate the cells in the cluster
        for (int j = 0; j < cluster_index - 1; j++) {
            const int col1_id_clust = conn_cluster[j][0];
            const int row1_id_clust = conn_cluster[j][1];
            const int col2_id_clust = conn_cluster[j+1][0];
            const int row2_id_clust = conn_cluster[j+1][1];

            const int tmp = CONN[col1_id_clust][row1_id_clust];
            CONN[col1_id_clust][row1_id_clust] = CONN[col2_id_clust][row2_id_clust];
            CONN[col2_id_clust][row2_id_clust] = tmp;
        }
    }

    // Send to the bus the permuted columns
    for (int i = 0; i < cols_num; i++) {
        permutation_proves(opid, [map_cols[i], CONN[i]], bus_type: bus_type, name: PIOP_NAME_CONNECTION);
    }

    // Mark the connection as closed
    closed = 1;
}

private function find_col_index(const int opid, const expr column): int {
    use air.std.connect.`id${opid}`;

    for (int i = 0; i < cols_num; i++) {
        if (map_cols[i] == column) {
            return i;
        }
    }

    error(`Column ${column} was not defined in connect #${opid}`);
}

private function checkClosed() {
    for (int i = 0; i < air.std.connect.opids_count; i++) {
        const int opid = air.std.connect.opids[i];
        use air.std.connect.`id${opid}`;
        if (closed == 0) {
            error(`Connection #${opid} was never closed`);
        }
    }
}

/**
 * Connects the columns `cols` with the fixed columns `CONN`.
 *
 * @param opid     The (unique) identifier of the connection
 * @param cols     Array of columns to be connected
 * @param CONN     Fixed columns indicating the connection
 * @param bus_type The bus type to use for the connection
 * @example
 * col witness a,b,c;
 * col fixed S1,S2,S3;
 * connection(opid, [a, b, c], [S1, S2, S3]);
 */
function connection(const int opid, const expr cols[], const expr CONN[], const int bus_type = PIOP_BUS_DEFAULT) {
    const int len = length(cols);
    if (len == 0) {
        error(`Connection #${opid} cannot be empty`);
    } else if (len != length(CONN)) {
        error(`The number of columns and permutations of connect #${opid} must be the same`);
    }

    // Check that the CONN are fixed columns
    for (int i = 0; i < len; i++) {
        if (degree(CONN[i]) != 1) {
            error(`The expression ${CONN[i]} of connect #${opid} is not a fixed column`);
        }
    }

    if (!defined(air.std.connect)) {
        container air.std.connect {
            col fixed ID = [1,GEN[BITS]..*..]; // {1,g,g²,...,gᴺ⁻¹} --> multiplicative group of order 2**BITS = N
        }
    }

    // Reuse the possibly defined ks
    if (defined(proof.std.connect)) {
        use proof.std.connect;

        if (len > ks_count) {
            for (int i = ks_count; i < len; i++) {
                ks[i] = k_coset ** i;
            }

            // update the already computed ks
            ks_count = len;
        }

        // Send to the bus the original columns and the permuted columns
        for (int i = 0; i < len; i++) {
            permutation_assumes(opid, [cols[i], ks[i]*air.std.connect.ID], bus_type: bus_type, name: PIOP_NAME_CONNECTION);
            permutation_proves(opid, [cols[i], CONN[i]], bus_type: bus_type, name: PIOP_NAME_CONNECTION);
        }
    } else {
        for (int i = 0; i < len; i++) {
            const int k = k_coset ** i;

            permutation_assumes(opid, [cols[i], k*air.std.connect.ID], bus_type: bus_type, name: PIOP_NAME_CONNECTION);
            permutation_proves(opid, [cols[i], CONN[i]], bus_type: bus_type, name: PIOP_NAME_CONNECTION);
        }
    }
}
