require "std_constants.pil";
require "std_sum.pil";
require "std_prod.pil";

/*
 * Module for performing selected vector permutation checks using either:
 *   - A product check, as explained in https://eprint.iacr.org/2019/953.
 *   - A sum check, as explained in https://eprint.iacr.org/2022/1530.
 *
 * This module provides two user interfaces:
 *
 * 1. **Assumes-Proves Paradigm**:
 *    Performs a permutation check between a vector of expressions, the vector that is "assumed" and a second vector that is "proven".
 *    Both the assumed vector and the proven vector are (optionally) assumed to receive a selector `sel` that should be either equal to 0 or 1.
 *    Example:
 *        // Assume the values in `expressions_assume` under selector `sel1` and prove the values in `expressions_prove` with selector `sel2`.
 *        permutation_assumes(opid, expressions_assume, sel1);
 *        permutation_proves(opid, expressions_prove, sel2);
 *
 * 2. **Free Permutation**:
 *    Syntax where the responsibility of assuming or proving is left to the user-specified selector:
 *      - In rows where `sel = -1`, the permutation behaves as an assume.
 *      - In rows where `sel = 1`, the permutation behaves as a prove.
 *    Example:
 *        // Perform a permutation where responsibility alternates based on the value of `sel`.
 *        permutation(opid, expressions, sel);
 */

const int DEFAULT_PERMUTATION_NAME = PIOP_NAME_PERMUTATION;

// Note: This constant allows you to choose whether the permutation is proven via a product or sum check.
int DEFAULT_PERMUTATION_BUS_TYPE = PIOP_BUS_SUM;

/**
 * Performs the "assumes" part of a permutation check.
 *
 * @param opid        The operation ID that uniquely identifies this permutation operation.
 * @param expressions The vector of expressions to be assumed in the permutation check.
 * @param sel         A selector specifying which rows are subject to the permutation check.
 *                    Defaults to `1`, meaning all rows are included.
 * @param bus_type    The bus type to use for the permutation check.
 * @param name        An optional name for the PIOP consuming the permutation check. 
 *                    This is useful for debugging and tracing operations.
 */
function permutation_assumes(const int opid, const expr expressions[], const expr sel = 1, int bus_type = PIOP_BUS_DEFAULT, int name = PIOP_NAME_DEFAULT) {
    if (name == PIOP_NAME_DEFAULT) name = DEFAULT_PERMUTATION_NAME;

    if (bus_type == PIOP_BUS_DEFAULT) bus_type = DEFAULT_PERMUTATION_BUS_TYPE;

    switch (bus_type) {
        case PIOP_BUS_SUM:
            sum_assumes(name, [opid], opid, expressions, sel);
        case PIOP_BUS_PROD:
            prod_assumes(name, opid, expressions, sel);
        default:
            error(`Unknown bus type: ${bus_type}`);
    }
}

/**
 * Performs the "proves" part of a permutation check.
 *
 * @param opid        The operation ID that uniquely identifies this permutation operation.
 * @param expressions The vector of expressions to be proven in the permutation check.
 * @param sel         A selector specifying which rows are subject to the permutation check.
 *                    Defaults to `1`, meaning all rows are included.
 * @param bus_type    The bus type to use for the permutation check.
 * @param name        An optional name for the PIOP consuming the permutation check. 
 *                    This is useful for debugging and tracing operations.
 */
function permutation_proves(const int opid, const expr expressions[], const expr sel = 1, int bus_type = PIOP_BUS_DEFAULT, int name = PIOP_NAME_DEFAULT) {
    if (name == PIOP_NAME_DEFAULT) name = DEFAULT_PERMUTATION_NAME;

    if (bus_type == PIOP_BUS_DEFAULT) bus_type = DEFAULT_PERMUTATION_BUS_TYPE;

    switch (bus_type) {
        case PIOP_BUS_SUM:
            sum_proves(name, [opid], opid, expressions, sel);
        case PIOP_BUS_PROD:
            prod_proves(name, opid, expressions, sel);
        default:
            error(`Unknown bus type: ${bus_type}`);
    }
}

/**
 * Performs a raw permutation check.
 *
 * @param opid        The operation ID that uniquely identifies this permutation operation.
 * @param expressions The vector of expressions.
 * @param sel         A selector specifying which rows are subject to the permutation check.
 *                    Defaults to `1`, meaning all rows are included.
 * @param bus_type    The bus type to use for the permutation check.
 * @param name        An optional name for the PIOP consuming the permutation check. 
 *                    This is useful for debugging and tracing operations.
 */
function permutation(const int opid, const expr expressions[], const expr sel = 1, int bus_type = PIOP_BUS_DEFAULT, int name = PIOP_NAME_DEFAULT) {
    if (name == PIOP_NAME_DEFAULT) name = DEFAULT_PERMUTATION_NAME;

    if (bus_type == PIOP_BUS_DEFAULT) bus_type = DEFAULT_PERMUTATION_BUS_TYPE;

    switch (bus_type) {
        case PIOP_BUS_SUM:
            sum(name, 2, [opid], opid, expressions, sel);
        case PIOP_BUS_PROD:
            prod(name, 2, opid, expressions, sel);
        default:
            error(`Unknown bus type: ${bus_type}`);
    }
}
