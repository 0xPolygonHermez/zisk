.intel_syntax noprefix
.code64
.section .rodata
msg: .ascii "Zisk assembly emulator\n"
.set msglen, (. - msg)

.section .text
.global emulator_start
emulator_start:
	mov r11, 0 /* Registers initialization: step = 0 */
	mov r10, 0 /* Registers initialization: sp = 0 */

pc_1000: /* paddr=0x1000 verbose=Init Data a0010000: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010000 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1004: /* paddr=0x1004 verbose=Init Data a0010008: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010008 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1008: /* paddr=0x1008 verbose=Init Data a0010010: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010010 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_100c: /* paddr=0x100c verbose=Init Data a0010018: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010018 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1010: /* paddr=0x1010 verbose=Init Data a0010020: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010020 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1014: /* paddr=0x1014 verbose=Init Data a0010028: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010028 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1018: /* paddr=0x1018 verbose=Init Data a0010030: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010030 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_101c: /* paddr=0x101c verbose=Init Data a0010038: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010038 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1020: /* paddr=0x1020 verbose=Init Data a0010040: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010040 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1024: /* paddr=0x1024 verbose=Init Data a0010048: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010048 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1028: /* paddr=0x1028 verbose=Init Data a0010050: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010050 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_102c: /* paddr=0x102c verbose=Init Data a0010058: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010058 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1030: /* paddr=0x1030 verbose=Init Data a0010060: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010060 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1034: /* paddr=0x1034 verbose=Init Data a0010068: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010068 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010068 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1038: /* paddr=0x1038 verbose=Init Data a0010070: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010070 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010070 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_103c: /* paddr=0x103c verbose=Init Data a0010078: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010078 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010078 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1040: /* paddr=0x1040 verbose=Init Data a0010080: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010080 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010080 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1044: /* paddr=0x1044 verbose=Init Data a0010088: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010088 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010088 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1048: /* paddr=0x1048 verbose=Init Data a0010090: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010090 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010090 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_104c: /* paddr=0x104c verbose=Init Data a0010098: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010098 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010098 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1050: /* paddr=0x1050 verbose=Init Data a00100a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1054: /* paddr=0x1054 verbose=Init Data a00100a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1058: /* paddr=0x1058 verbose=Init Data a00100b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_105c: /* paddr=0x105c verbose=Init Data a00100b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1060: /* paddr=0x1060 verbose=Init Data a00100c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1064: /* paddr=0x1064 verbose=Init Data a00100c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1068: /* paddr=0x1068 verbose=Init Data a00100d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_106c: /* paddr=0x106c verbose=Init Data a00100d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1070: /* paddr=0x1070 verbose=Init Data a00100e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1074: /* paddr=0x1074 verbose=Init Data a00100e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1078: /* paddr=0x1078 verbose=Init Data a00100f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_107c: /* paddr=0x107c verbose=Init Data a00100f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1080: /* paddr=0x1080 verbose=Init Data a0010100: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010100 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010100 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1084: /* paddr=0x1084 verbose=Init Data a0011000: babecafebabecafe a_src=2=SRC_IMM a_offset_imm0=0xa0011000 b_src=2=SRC_IMM b_use_sp_imm1=0xbabecafe b_offset_imm0=0xbabecafe ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xbabecafebabecafe */
	mov r12, 0xbabecafebabecafe /* STORE_IND: reg_value = value */
	mov r13, 0xa0011000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1088: /* paddr=0x1088 verbose=Init Data a0011008: babecafebabecafe a_src=2=SRC_IMM a_offset_imm0=0xa0011008 b_src=2=SRC_IMM b_use_sp_imm1=0xbabecafe b_offset_imm0=0xbabecafe ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xbabecafebabecafe */
	mov r12, 0xbabecafebabecafe /* STORE_IND: reg_value = value */
	mov r13, 0xa0011008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_108c: /* paddr=0x108c verbose=Init Data a0011010: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011010 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1090: /* paddr=0x1090 verbose=Init Data a0011018: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011018 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1094: /* paddr=0x1094 verbose=Init Data a0011020: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011020 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1098: /* paddr=0x1098 verbose=Init Data a0011028: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011028 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_109c: /* paddr=0x109c verbose=Init Data a0011030: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011030 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10a0: /* paddr=0x10a0 verbose=Init Data a0011038: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011038 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10a4: /* paddr=0x10a4 verbose=Init Data a0011040: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011040 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10a8: /* paddr=0x10a8 verbose=Init Data a0011048: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011048 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10ac: /* paddr=0x10ac verbose=Init Data a0011050: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011050 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10b0: /* paddr=0x10b0 verbose=Init Data a0011058: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011058 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10b4: /* paddr=0x10b4 verbose=Init Data a0011060: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011060 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10b8: /* paddr=0x10b8 verbose=Init Data a0011068: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011068 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011068 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10bc: /* paddr=0x10bc verbose=Init Data a0011070: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011070 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011070 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10c0: /* paddr=0x10c0 verbose=Init Data a0011078: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011078 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011078 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10c4: /* paddr=0x10c4 verbose=Init Data a0011080: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011080 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011080 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10c8: /* paddr=0x10c8 verbose=Init Data a0011088: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011088 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011088 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10cc: /* paddr=0x10cc verbose=Init Data a0011090: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011090 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011090 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10d0: /* paddr=0x10d0 verbose=Init Data a0011098: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011098 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011098 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10d4: /* paddr=0x10d4 verbose=Init Data a00110a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10d8: /* paddr=0x10d8 verbose=Init Data a00110a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10dc: /* paddr=0x10dc verbose=Init Data a00110b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10e0: /* paddr=0x10e0 verbose=Init Data a00110b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10e4: /* paddr=0x10e4 verbose=Init Data a00110c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10e8: /* paddr=0x10e8 verbose=Init Data a00110c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10ec: /* paddr=0x10ec verbose=Init Data a00110d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10f0: /* paddr=0x10f0 verbose=Init Data a00110d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10f4: /* paddr=0x10f4 verbose=Init Data a00110e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10f8: /* paddr=0x10f8 verbose=Init Data a00110e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10fc: /* paddr=0x10fc verbose=Init Data a00110f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1100: /* paddr=0x1100 verbose=Init Data a00110f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1104: /* paddr=0x1104 verbose=Init Data a0011100: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011100 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011100 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1108: /* paddr=0x1108 verbose=Init Data a0011108: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011108 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011108 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_110c: /* paddr=0x110c verbose=Init Data a0011110: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011110 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011110 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1110: /* paddr=0x1110 verbose=Init Data a0011118: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011118 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011118 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1114: /* paddr=0x1114 verbose=Init Data a0011120: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011120 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011120 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1118: /* paddr=0x1118 verbose=Init Data a0011128: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011128 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011128 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_111c: /* paddr=0x111c verbose=Init Data a0011130: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011130 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011130 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1120: /* paddr=0x1120 verbose=Init Data a0011138: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011138 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011138 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1124: /* paddr=0x1124 verbose=Init Data a0011140: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011140 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011140 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1128: /* paddr=0x1128 verbose=Init Data a0011148: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011148 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011148 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_112c: /* paddr=0x112c verbose=Init Data a0011150: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011150 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011150 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1130: /* paddr=0x1130 verbose=Init Data a0011158: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011158 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011158 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1134: /* paddr=0x1134 verbose=Init Data a0011160: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011160 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011160 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1138: /* paddr=0x1138 verbose=Init Data a0011168: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011168 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011168 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_113c: /* paddr=0x113c verbose=Init Data a0011170: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011170 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011170 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1140: /* paddr=0x1140 verbose=Init Data a0011178: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011178 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011178 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1144: /* paddr=0x1144 verbose=Init Data a0011180: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011180 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011180 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1148: /* paddr=0x1148 verbose=Init Data a0011188: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011188 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011188 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_114c: /* paddr=0x114c verbose=Init Data a0011190: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011190 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011190 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1150: /* paddr=0x1150 verbose=Init Data a0011198: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011198 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011198 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1154: /* paddr=0x1154 verbose=Init Data a00111a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1158: /* paddr=0x1158 verbose=Init Data a00111a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_115c: /* paddr=0x115c verbose=Init Data a00111b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1160: /* paddr=0x1160 verbose=Init Data a00111b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1164: /* paddr=0x1164 verbose=Init Data a00111c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1168: /* paddr=0x1168 verbose=Init Data a00111c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_116c: /* paddr=0x116c verbose=Init Data a00111d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1170: /* paddr=0x1170 verbose=Init Data a00111d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1174: /* paddr=0x1174 verbose=Init Data a00111e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1178: /* paddr=0x1178 verbose=Init Data a00111e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_117c: /* paddr=0x117c verbose=Init Data a00111f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1180: /* paddr=0x1180 verbose=Init Data a00111f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1184: /* paddr=0x1184 verbose=Init Data a0011200: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011200 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011200 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1188: /* paddr=0x1188 verbose=Init Data a0011208: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011208 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011208 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_118c: /* paddr=0x118c verbose=Init Data a0011210: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011210 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011210 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1190: /* paddr=0x1190 verbose=Init Data a0011218: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011218 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011218 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1194: /* paddr=0x1194 verbose=Init Data a0011220: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011220 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011220 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1198: /* paddr=0x1198 verbose=Init Data a0011228: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011228 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011228 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_119c: /* paddr=0x119c verbose=Init Data a0011230: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011230 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011230 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11a0: /* paddr=0x11a0 verbose=Init Data a0011238: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011238 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011238 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11a4: /* paddr=0x11a4 verbose=Init Data a0011240: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011240 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011240 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11a8: /* paddr=0x11a8 verbose=Init Data a0011248: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011248 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011248 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11ac: /* paddr=0x11ac verbose=Init Data a0011250: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011250 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011250 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11b0: /* paddr=0x11b0 verbose=Init Data a0011258: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011258 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011258 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11b4: /* paddr=0x11b4 verbose=Init Data a0011260: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011260 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011260 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11b8: /* paddr=0x11b8 verbose=Init Data a0011268: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011268 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011268 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11bc: /* paddr=0x11bc verbose=Init Data a0011270: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011270 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011270 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11c0: /* paddr=0x11c0 verbose=Init Data a0011278: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011278 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011278 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11c4: /* paddr=0x11c4 verbose=Init Data a0011280: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011280 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011280 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11c8: /* paddr=0x11c8 verbose=Init Data a0011288: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011288 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011288 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11cc: /* paddr=0x11cc verbose=Init Data a0011290: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011290 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011290 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11d0: /* paddr=0x11d0 verbose=Init Data a0011298: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011298 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011298 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11d4: /* paddr=0x11d4 verbose=Init Data a00112a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11d8: /* paddr=0x11d8 verbose=Init Data a00112a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11dc: /* paddr=0x11dc verbose=Init Data a00112b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11e0: /* paddr=0x11e0 verbose=Init Data a00112b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11e4: /* paddr=0x11e4 verbose=Init Data a00112c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11e8: /* paddr=0x11e8 verbose=Init Data a00112c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11ec: /* paddr=0x11ec verbose=Init Data a00112d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11f0: /* paddr=0x11f0 verbose=Init Data a00112d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11f4: /* paddr=0x11f4 verbose=Init Data a00112e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11f8: /* paddr=0x11f8 verbose=Init Data a00112e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11fc: /* paddr=0x11fc verbose=Init Data a00112f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1200: /* paddr=0x1200 verbose=Init Data a00112f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1204: /* paddr=0x1204 verbose=Init Data a0011300: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011300 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011300 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1208: /* paddr=0x1208 verbose=Init Data a0011308: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011308 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011308 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_120c: /* paddr=0x120c verbose=Init Data a0011310: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011310 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011310 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1210: /* paddr=0x1210 verbose=Init Data a0011318: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011318 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011318 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1214: /* paddr=0x1214 verbose=Init Data a0011320: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011320 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011320 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1218: /* paddr=0x1218 verbose=Init Data a0011328: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011328 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011328 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_121c: /* paddr=0x121c verbose=Init Data a0011330: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011330 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011330 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1220: /* paddr=0x1220 verbose=Init Data a0011338: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011338 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011338 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1224: /* paddr=0x1224 verbose=Init Data a0011340: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011340 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011340 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1228: /* paddr=0x1228 verbose=Init Data a0011348: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011348 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011348 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_122c: /* paddr=0x122c verbose=Init Data a0011350: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011350 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011350 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1230: /* paddr=0x1230 verbose=Init Data a0011358: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011358 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011358 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1234: /* paddr=0x1234 verbose=Init Data a0011360: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011360 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011360 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1238: /* paddr=0x1238 verbose=Init Data a0011368: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011368 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011368 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_123c: /* paddr=0x123c verbose=Init Data a0011370: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011370 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011370 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1240: /* paddr=0x1240 verbose=Init Data a0011378: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011378 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011378 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1244: /* paddr=0x1244 verbose=Init Data a0011380: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011380 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011380 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1248: /* paddr=0x1248 verbose=Init Data a0011388: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011388 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011388 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_124c: /* paddr=0x124c verbose=Init Data a0011390: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011390 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011390 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1250: /* paddr=0x1250 verbose=Init Data a0011398: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011398 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011398 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1254: /* paddr=0x1254 verbose=Init Data a00113a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1258: /* paddr=0x1258 verbose=Init Data a00113a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_125c: /* paddr=0x125c verbose=Init Data a00113b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1260: /* paddr=0x1260 verbose=Init Data a00113b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1264: /* paddr=0x1264 verbose=Init Data a00113c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1268: /* paddr=0x1268 verbose=Init Data a00113c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_126c: /* paddr=0x126c verbose=Init Data a00113d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1270: /* paddr=0x1270 verbose=Init Data a00113d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1274: /* paddr=0x1274 verbose=Init Data a00113e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1278: /* paddr=0x1278 verbose=Init Data a00113e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_127c: /* paddr=0x127c verbose=Init Data a00113f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1280: /* paddr=0x1280 verbose=Init Data a00113f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1284: /* paddr=0x1284 verbose=Init Data a0011400: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011400 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011400 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1288: /* paddr=0x1288 verbose=Init Data a0011408: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011408 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011408 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_128c: /* paddr=0x128c verbose=Init Data a0011410: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011410 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011410 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1290: /* paddr=0x1290 verbose=Init Data a0011418: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011418 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011418 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1294: /* paddr=0x1294 verbose=Init Data a0011420: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011420 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011420 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1298: /* paddr=0x1298 verbose=Init Data a0011428: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011428 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011428 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_129c: /* paddr=0x129c verbose=Init Data a0011430: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011430 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011430 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12a0: /* paddr=0x12a0 verbose=Init Data a0011438: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011438 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011438 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12a4: /* paddr=0x12a4 verbose=Init Data a0011440: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011440 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011440 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12a8: /* paddr=0x12a8 verbose=Init Data a0011448: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011448 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011448 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12ac: /* paddr=0x12ac verbose=Init Data a0011450: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011450 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011450 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12b0: /* paddr=0x12b0 verbose=Init Data a0011458: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011458 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011458 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12b4: /* paddr=0x12b4 verbose=Init Data a0011460: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011460 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011460 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12b8: /* paddr=0x12b8 verbose=Init Data a0011468: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011468 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011468 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12bc: /* paddr=0x12bc verbose=Init Data a0011470: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011470 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011470 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12c0: /* paddr=0x12c0 verbose=Init Data a0011478: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011478 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011478 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12c4: /* paddr=0x12c4 verbose=Init Data a0011480: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011480 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011480 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12c8: /* paddr=0x12c8 verbose=Init Data a0011488: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011488 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011488 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12cc: /* paddr=0x12cc verbose=Init Data a0011490: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011490 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011490 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12d0: /* paddr=0x12d0 verbose=Init Data a0011498: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011498 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011498 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12d4: /* paddr=0x12d4 verbose=Init Data a00114a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12d8: /* paddr=0x12d8 verbose=Init Data a00114a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12dc: /* paddr=0x12dc verbose=Init Data a00114b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12e0: /* paddr=0x12e0 verbose=Init Data a00114b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12e4: /* paddr=0x12e4 verbose=Init Data a00114c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12e8: /* paddr=0x12e8 verbose=Init Data a00114c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12ec: /* paddr=0x12ec verbose=Init Data a00114d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12f0: /* paddr=0x12f0 verbose=Init Data a00114d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12f4: /* paddr=0x12f4 verbose=Init Data a00114e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12f8: /* paddr=0x12f8 verbose=Init Data a00114e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12fc: /* paddr=0x12fc verbose=Init Data a00114f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1300: /* paddr=0x1300 verbose=Init Data a00114f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1304: /* paddr=0x1304 verbose=Init Data a0011500: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011500 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011500 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1308: /* paddr=0x1308 verbose=Init Data a0011508: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011508 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011508 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_130c: /* paddr=0x130c verbose=Init Data a0011510: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011510 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011510 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1310: /* paddr=0x1310 verbose=Init Data a0011518: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011518 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011518 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1314: /* paddr=0x1314 verbose=Init Data a0011520: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011520 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011520 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1318: /* paddr=0x1318 verbose=Init Data a0011528: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011528 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011528 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_131c: /* paddr=0x131c verbose=Init Data a0011530: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011530 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011530 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1320: /* paddr=0x1320 verbose=Init Data a0011538: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011538 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011538 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1324: /* paddr=0x1324 verbose=Init Data a0011540: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011540 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011540 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1328: /* paddr=0x1328 verbose=Init Data a0011548: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011548 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011548 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_132c: /* paddr=0x132c verbose=Init Data a0011550: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011550 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011550 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1330: /* paddr=0x1330 verbose=Init Data a0011558: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011558 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011558 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1334: /* paddr=0x1334 verbose=Init Data a0011560: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011560 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011560 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1338: /* paddr=0x1338 verbose=Init Data a0011568: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011568 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011568 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_133c: /* paddr=0x133c verbose=Init Data a0011570: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011570 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011570 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1340: /* paddr=0x1340 verbose=Init Data a0011578: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011578 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011578 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1344: /* paddr=0x1344 verbose=Init Data a0011580: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011580 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011580 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1348: /* paddr=0x1348 verbose=Init Data a0011588: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011588 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011588 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_134c: /* paddr=0x134c verbose=Init Data a0011590: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011590 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011590 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1350: /* paddr=0x1350 verbose=Init Data a0011598: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011598 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011598 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1354: /* paddr=0x1354 verbose=Init Data a00115a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1358: /* paddr=0x1358 verbose=Init Data a00115a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_135c: /* paddr=0x135c verbose=Init Data a00115b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1360: /* paddr=0x1360 verbose=Init Data a00115b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1364: /* paddr=0x1364 verbose=Init Data a00115c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1368: /* paddr=0x1368 verbose=Init Data a00115c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_136c: /* paddr=0x136c verbose=Init Data a00115d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1370: /* paddr=0x1370 verbose=Init Data a00115d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1374: /* paddr=0x1374 verbose=Init Data a00115e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1378: /* paddr=0x1378 verbose=Init Data a00115e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_137c: /* paddr=0x137c verbose=Init Data a00115f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1380: /* paddr=0x1380 verbose=Init Data a00115f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1384: /* paddr=0x1384 verbose=Init Data a0011600: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011600 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011600 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1388: /* paddr=0x1388 verbose=Init Data a0011608: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011608 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011608 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_138c: /* paddr=0x138c verbose=Init Data a0011610: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011610 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011610 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1390: /* paddr=0x1390 verbose=Init Data a0011618: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011618 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011618 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1394: /* paddr=0x1394 verbose=Init Data a0011620: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011620 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011620 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1398: /* paddr=0x1398 verbose=Init Data a0011628: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011628 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011628 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_139c: /* paddr=0x139c verbose=Init Data a0011630: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011630 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011630 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13a0: /* paddr=0x13a0 verbose=Init Data a0011638: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011638 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011638 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13a4: /* paddr=0x13a4 verbose=Init Data a0011640: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011640 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011640 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13a8: /* paddr=0x13a8 verbose=Init Data a0011648: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011648 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011648 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13ac: /* paddr=0x13ac verbose=Init Data a0011650: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011650 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011650 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13b0: /* paddr=0x13b0 verbose=Init Data a0011658: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011658 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011658 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13b4: /* paddr=0x13b4 verbose=Init Data a0011660: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011660 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011660 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13b8: /* paddr=0x13b8 verbose=Init Data a0011668: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011668 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011668 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13bc: /* paddr=0x13bc verbose=Init Data a0011670: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011670 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011670 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13c0: /* paddr=0x13c0 verbose=Init Data a0011678: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011678 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011678 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13c4: /* paddr=0x13c4 verbose=Init Data a0011680: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011680 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011680 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13c8: /* paddr=0x13c8 verbose=Init Data a0011688: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011688 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011688 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13cc: /* paddr=0x13cc verbose=Init Data a0011690: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011690 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011690 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13d0: /* paddr=0x13d0 verbose=Init Data a0011698: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011698 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011698 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13d4: /* paddr=0x13d4 verbose=Init Data a00116a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13d8: /* paddr=0x13d8 verbose=Init Data a00116a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13dc: /* paddr=0x13dc verbose=Init Data a00116b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13e0: /* paddr=0x13e0 verbose=Init Data a00116b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13e4: /* paddr=0x13e4 verbose=Init Data a00116c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13e8: /* paddr=0x13e8 verbose=Init Data a00116c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13ec: /* paddr=0x13ec verbose=Init Data a00116d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13f0: /* paddr=0x13f0 verbose=Init Data a00116d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13f4: /* paddr=0x13f4 verbose=Init Data a00116e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13f8: /* paddr=0x13f8 verbose=Init Data a00116e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13fc: /* paddr=0x13fc verbose=Init Data a00116f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1400: /* paddr=0x1400 verbose=Init Data a00116f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1404: /* paddr=0x1404 verbose=Init Data a0011700: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011700 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011700 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1408: /* paddr=0x1408 verbose=Init Data a0011708: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011708 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011708 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_140c: /* paddr=0x140c verbose=Init Data a0011710: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011710 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011710 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1410: /* paddr=0x1410 verbose=Init Data a0011718: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011718 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011718 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1414: /* paddr=0x1414 verbose=Init Data a0011720: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011720 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011720 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1418: /* paddr=0x1418 verbose=Init Data a0011728: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011728 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011728 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_141c: /* paddr=0x141c verbose=Init Data a0011730: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011730 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011730 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1420: /* paddr=0x1420 verbose=Init Data a0011738: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011738 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011738 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1424: /* paddr=0x1424 verbose=Init Data a0011740: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011740 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011740 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1428: /* paddr=0x1428 verbose=Init Data a0011748: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011748 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011748 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_142c: /* paddr=0x142c verbose=Init Data a0011750: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011750 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011750 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1430: /* paddr=0x1430 verbose=Init Data a0011758: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011758 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011758 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1434: /* paddr=0x1434 verbose=Init Data a0011760: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011760 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011760 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1438: /* paddr=0x1438 verbose=Init Data a0011768: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011768 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011768 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_143c: /* paddr=0x143c verbose=Init Data a0011770: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011770 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011770 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1440: /* paddr=0x1440 verbose=Init Data a0011778: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011778 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011778 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1444: /* paddr=0x1444 verbose=Init Data a0011780: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011780 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011780 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1448: /* paddr=0x1448 verbose=Init Data a0011788: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011788 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011788 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_144c: /* paddr=0x144c verbose=Init Data a0011790: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011790 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011790 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1450: /* paddr=0x1450 verbose=Init Data a0011798: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011798 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011798 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1454: /* paddr=0x1454 verbose=Init Data a00117a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1458: /* paddr=0x1458 verbose=Init Data a00117a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_145c: /* paddr=0x145c verbose=Init Data a00117b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1460: /* paddr=0x1460 verbose=Init Data a00117b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1464: /* paddr=0x1464 verbose=Init Data a00117c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1468: /* paddr=0x1468 verbose=Init Data a00117c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_146c: /* paddr=0x146c verbose=Init Data a00117d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1470: /* paddr=0x1470 verbose=Init Data a00117d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1474: /* paddr=0x1474 verbose=Init Data a00117e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1478: /* paddr=0x1478 verbose=Init Data a00117e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_147c: /* paddr=0x147c verbose=Init Data a00117f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1480: /* paddr=0x1480 verbose=Init Data a00117f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1484: /* paddr=0x1484 verbose=Init Data a0011800: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011800 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011800 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1488: /* paddr=0x1488 verbose=Init Data a0011808: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011808 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011808 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_148c: /* paddr=0x148c verbose=Init Data a0011810: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011810 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011810 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1490: /* paddr=0x1490 verbose=Init Data a0011818: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011818 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011818 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1494: /* paddr=0x1494 verbose=Init Data a0011820: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011820 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011820 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1498: /* paddr=0x1498 verbose=Init Data a0011828: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011828 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011828 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_149c: /* paddr=0x149c verbose=Init Data a0011830: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011830 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011830 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14a0: /* paddr=0x14a0 verbose=Init Data a0011838: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011838 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011838 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14a4: /* paddr=0x14a4 verbose=Init Data a0011840: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011840 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011840 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14a8: /* paddr=0x14a8 verbose=Init Data a0011848: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011848 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011848 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14ac: /* paddr=0x14ac verbose=Init Data a0011850: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011850 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011850 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14b0: /* paddr=0x14b0 verbose=Init Data a0011858: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011858 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011858 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14b4: /* paddr=0x14b4 verbose=Init Data a0011860: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011860 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011860 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14b8: /* paddr=0x14b8 verbose=Init Data a0011868: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011868 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011868 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14bc: /* paddr=0x14bc verbose=Init Data a0011870: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011870 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011870 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14c0: /* paddr=0x14c0 verbose=Init Data a0011878: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011878 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011878 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14c4: /* paddr=0x14c4 verbose=Init Data a0011880: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011880 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011880 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14c8: /* paddr=0x14c8 verbose=Init Data a0011888: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011888 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011888 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14cc: /* paddr=0x14cc verbose=Init Data a0011890: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011890 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011890 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14d0: /* paddr=0x14d0 verbose=Init Data a0011898: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011898 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011898 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14d4: /* paddr=0x14d4 verbose=Init Data a00118a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14d8: /* paddr=0x14d8 verbose=Init Data a00118a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14dc: /* paddr=0x14dc verbose=Init Data a00118b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14e0: /* paddr=0x14e0 verbose=Init Data a00118b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14e4: /* paddr=0x14e4 verbose=Init Data a00118c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14e8: /* paddr=0x14e8 verbose=Init Data a00118c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14ec: /* paddr=0x14ec verbose=Init Data a00118d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14f0: /* paddr=0x14f0 verbose=Init Data a00118d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14f4: /* paddr=0x14f4 verbose=Init Data a00118e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14f8: /* paddr=0x14f8 verbose=Init Data a00118e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14fc: /* paddr=0x14fc verbose=Init Data a00118f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1500: /* paddr=0x1500 verbose=Init Data a00118f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1504: /* paddr=0x1504 verbose=Init Data a0011900: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011900 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011900 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1508: /* paddr=0x1508 verbose=Init Data a0011908: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011908 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011908 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_150c: /* paddr=0x150c verbose=Init Data a0011910: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011910 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011910 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1510: /* paddr=0x1510 verbose=Init Data a0011918: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011918 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011918 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1514: /* paddr=0x1514 verbose=Init Data a0011920: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011920 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011920 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1518: /* paddr=0x1518 verbose=Init Data a0011928: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011928 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011928 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_151c: /* paddr=0x151c verbose=Init Data a0011930: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011930 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011930 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1520: /* paddr=0x1520 verbose=Init Data a0011938: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011938 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011938 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1524: /* paddr=0x1524 verbose=Init Data a0011940: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011940 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011940 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1528: /* paddr=0x1528 verbose=Init Data a0011948: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011948 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011948 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_152c: /* paddr=0x152c verbose=Init Data a0011950: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011950 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011950 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1530: /* paddr=0x1530 verbose=Init Data a0011958: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011958 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011958 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1534: /* paddr=0x1534 verbose=Init Data a0011960: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011960 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011960 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1538: /* paddr=0x1538 verbose=Init Data a0011968: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011968 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011968 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_153c: /* paddr=0x153c verbose=Init Data a0011970: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011970 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011970 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1540: /* paddr=0x1540 verbose=Init Data a0011978: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011978 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011978 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1544: /* paddr=0x1544 verbose=Init Data a0011980: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011980 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011980 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1548: /* paddr=0x1548 verbose=Init Data a0011988: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011988 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011988 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_154c: /* paddr=0x154c verbose=Init Data a0011990: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011990 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011990 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1550: /* paddr=0x1550 verbose=Init Data a0011998: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011998 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011998 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1554: /* paddr=0x1554 verbose=Init Data a00119a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1558: /* paddr=0x1558 verbose=Init Data a00119a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_155c: /* paddr=0x155c verbose=Init Data a00119b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1560: /* paddr=0x1560 verbose=Init Data a00119b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1564: /* paddr=0x1564 verbose=Init Data a00119c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1568: /* paddr=0x1568 verbose=Init Data a00119c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_156c: /* paddr=0x156c verbose=Init Data a00119d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1570: /* paddr=0x1570 verbose=Init Data a00119d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1574: /* paddr=0x1574 verbose=Init Data a00119e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1578: /* paddr=0x1578 verbose=Init Data a00119e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_157c: /* paddr=0x157c verbose=Init Data a00119f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1580: /* paddr=0x1580 verbose=Init Data a00119f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1584: /* paddr=0x1584 verbose=Init Data a0011a00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1588: /* paddr=0x1588 verbose=Init Data a0011a08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_158c: /* paddr=0x158c verbose=Init Data a0011a10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1590: /* paddr=0x1590 verbose=Init Data a0011a18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1594: /* paddr=0x1594 verbose=Init Data a0011a20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1598: /* paddr=0x1598 verbose=Init Data a0011a28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_159c: /* paddr=0x159c verbose=Init Data a0011a30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15a0: /* paddr=0x15a0 verbose=Init Data a0011a38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15a4: /* paddr=0x15a4 verbose=Init Data a0011a40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15a8: /* paddr=0x15a8 verbose=Init Data a0011a48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15ac: /* paddr=0x15ac verbose=Init Data a0011a50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15b0: /* paddr=0x15b0 verbose=Init Data a0011a58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15b4: /* paddr=0x15b4 verbose=Init Data a0011a60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15b8: /* paddr=0x15b8 verbose=Init Data a0011a68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15bc: /* paddr=0x15bc verbose=Init Data a0011a70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15c0: /* paddr=0x15c0 verbose=Init Data a0011a78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15c4: /* paddr=0x15c4 verbose=Init Data a0011a80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15c8: /* paddr=0x15c8 verbose=Init Data a0011a88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15cc: /* paddr=0x15cc verbose=Init Data a0011a90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15d0: /* paddr=0x15d0 verbose=Init Data a0011a98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15d4: /* paddr=0x15d4 verbose=Init Data a0011aa0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011aa0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011aa0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15d8: /* paddr=0x15d8 verbose=Init Data a0011aa8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011aa8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011aa8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15dc: /* paddr=0x15dc verbose=Init Data a0011ab0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ab0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ab0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15e0: /* paddr=0x15e0 verbose=Init Data a0011ab8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ab8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ab8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15e4: /* paddr=0x15e4 verbose=Init Data a0011ac0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ac0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ac0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15e8: /* paddr=0x15e8 verbose=Init Data a0011ac8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ac8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ac8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15ec: /* paddr=0x15ec verbose=Init Data a0011ad0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ad0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ad0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15f0: /* paddr=0x15f0 verbose=Init Data a0011ad8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ad8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ad8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15f4: /* paddr=0x15f4 verbose=Init Data a0011ae0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ae0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ae0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15f8: /* paddr=0x15f8 verbose=Init Data a0011ae8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ae8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ae8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15fc: /* paddr=0x15fc verbose=Init Data a0011af0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011af0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011af0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1600: /* paddr=0x1600 verbose=Init Data a0011af8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011af8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011af8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1604: /* paddr=0x1604 verbose=Init Data a0011b00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1608: /* paddr=0x1608 verbose=Init Data a0011b08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_160c: /* paddr=0x160c verbose=Init Data a0011b10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1610: /* paddr=0x1610 verbose=Init Data a0011b18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1614: /* paddr=0x1614 verbose=Init Data a0011b20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1618: /* paddr=0x1618 verbose=Init Data a0011b28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_161c: /* paddr=0x161c verbose=Init Data a0011b30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1620: /* paddr=0x1620 verbose=Init Data a0011b38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1624: /* paddr=0x1624 verbose=Init Data a0011b40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1628: /* paddr=0x1628 verbose=Init Data a0011b48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_162c: /* paddr=0x162c verbose=Init Data a0011b50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1630: /* paddr=0x1630 verbose=Init Data a0011b58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1634: /* paddr=0x1634 verbose=Init Data a0011b60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1638: /* paddr=0x1638 verbose=Init Data a0011b68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_163c: /* paddr=0x163c verbose=Init Data a0011b70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1640: /* paddr=0x1640 verbose=Init Data a0011b78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1644: /* paddr=0x1644 verbose=Init Data a0011b80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1648: /* paddr=0x1648 verbose=Init Data a0011b88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_164c: /* paddr=0x164c verbose=Init Data a0011b90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1650: /* paddr=0x1650 verbose=Init Data a0011b98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1654: /* paddr=0x1654 verbose=Init Data a0011ba0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ba0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ba0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1658: /* paddr=0x1658 verbose=Init Data a0011ba8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ba8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ba8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_165c: /* paddr=0x165c verbose=Init Data a0011bb0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bb0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1660: /* paddr=0x1660 verbose=Init Data a0011bb8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bb8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1664: /* paddr=0x1664 verbose=Init Data a0011bc0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bc0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1668: /* paddr=0x1668 verbose=Init Data a0011bc8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bc8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_166c: /* paddr=0x166c verbose=Init Data a0011bd0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bd0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1670: /* paddr=0x1670 verbose=Init Data a0011bd8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bd8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1674: /* paddr=0x1674 verbose=Init Data a0011be0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011be0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011be0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1678: /* paddr=0x1678 verbose=Init Data a0011be8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011be8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011be8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_167c: /* paddr=0x167c verbose=Init Data a0011bf0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bf0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bf0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1680: /* paddr=0x1680 verbose=Init Data a0011bf8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bf8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bf8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1684: /* paddr=0x1684 verbose=Init Data a0011c00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1688: /* paddr=0x1688 verbose=Init Data a0011c08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_168c: /* paddr=0x168c verbose=Init Data a0011c10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1690: /* paddr=0x1690 verbose=Init Data a0011c18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1694: /* paddr=0x1694 verbose=Init Data a0011c20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1698: /* paddr=0x1698 verbose=Init Data a0011c28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_169c: /* paddr=0x169c verbose=Init Data a0011c30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16a0: /* paddr=0x16a0 verbose=Init Data a0011c38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16a4: /* paddr=0x16a4 verbose=Init Data a0011c40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16a8: /* paddr=0x16a8 verbose=Init Data a0011c48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16ac: /* paddr=0x16ac verbose=Init Data a0011c50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16b0: /* paddr=0x16b0 verbose=Init Data a0011c58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16b4: /* paddr=0x16b4 verbose=Init Data a0011c60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16b8: /* paddr=0x16b8 verbose=Init Data a0011c68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16bc: /* paddr=0x16bc verbose=Init Data a0011c70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16c0: /* paddr=0x16c0 verbose=Init Data a0011c78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16c4: /* paddr=0x16c4 verbose=Init Data a0011c80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16c8: /* paddr=0x16c8 verbose=Init Data a0011c88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16cc: /* paddr=0x16cc verbose=Init Data a0011c90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16d0: /* paddr=0x16d0 verbose=Init Data a0011c98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16d4: /* paddr=0x16d4 verbose=Init Data a0011ca0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ca0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ca0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16d8: /* paddr=0x16d8 verbose=Init Data a0011ca8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ca8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ca8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16dc: /* paddr=0x16dc verbose=Init Data a0011cb0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cb0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16e0: /* paddr=0x16e0 verbose=Init Data a0011cb8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cb8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16e4: /* paddr=0x16e4 verbose=Init Data a0011cc0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cc0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16e8: /* paddr=0x16e8 verbose=Init Data a0011cc8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cc8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16ec: /* paddr=0x16ec verbose=Init Data a0011cd0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cd0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16f0: /* paddr=0x16f0 verbose=Init Data a0011cd8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cd8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16f4: /* paddr=0x16f4 verbose=Init Data a0011ce0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ce0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ce0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16f8: /* paddr=0x16f8 verbose=Init Data a0011ce8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ce8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ce8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16fc: /* paddr=0x16fc verbose=Init Data a0011cf0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cf0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cf0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1700: /* paddr=0x1700 verbose=Init Data a0011cf8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cf8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cf8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1704: /* paddr=0x1704 verbose=Init Data a0011d00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1708: /* paddr=0x1708 verbose=Init Data a0011d08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_170c: /* paddr=0x170c verbose=Init Data a0011d10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1710: /* paddr=0x1710 verbose=Init Data a0011d18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1714: /* paddr=0x1714 verbose=Init Data a0011d20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1718: /* paddr=0x1718 verbose=Init Data a0011d28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_171c: /* paddr=0x171c verbose=Init Data a0011d30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1720: /* paddr=0x1720 verbose=Init Data a0011d38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1724: /* paddr=0x1724 verbose=Init Data a0011d40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1728: /* paddr=0x1728 verbose=Init Data a0011d48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_172c: /* paddr=0x172c verbose=Init Data a0011d50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1730: /* paddr=0x1730 verbose=Init Data a0011d58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1734: /* paddr=0x1734 verbose=Init Data a0011d60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1738: /* paddr=0x1738 verbose=Init Data a0011d68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_173c: /* paddr=0x173c verbose=Init Data a0011d70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1740: /* paddr=0x1740 verbose=Init Data a0011d78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1744: /* paddr=0x1744 verbose=Init Data a0011d80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1748: /* paddr=0x1748 verbose=Init Data a0011d88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_174c: /* paddr=0x174c verbose=Init Data a0011d90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1750: /* paddr=0x1750 verbose=Init Data a0011d98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1754: /* paddr=0x1754 verbose=Init Data a0011da0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011da0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011da0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1758: /* paddr=0x1758 verbose=Init Data a0011da8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011da8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011da8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_175c: /* paddr=0x175c verbose=Init Data a0011db0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011db0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011db0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1760: /* paddr=0x1760 verbose=Init Data a0011db8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011db8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011db8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1764: /* paddr=0x1764 verbose=Init Data a0011dc0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011dc0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011dc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1768: /* paddr=0x1768 verbose=Init Data a0011dc8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011dc8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011dc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_176c: /* paddr=0x176c verbose=Init Data a0011dd0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011dd0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011dd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1770: /* paddr=0x1770 verbose=Init Data a0011dd8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011dd8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011dd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1774: /* paddr=0x1774 verbose=Init Data a0011de0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011de0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011de0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1778: /* paddr=0x1778 verbose=Init Data a0011de8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011de8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011de8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_177c: /* paddr=0x177c verbose=Init Data a0011df0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011df0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011df0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1780: /* paddr=0x1780 verbose=Init Data a0011df8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011df8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011df8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1784: /* paddr=0x1784 verbose=Init Data a0011e00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1788: /* paddr=0x1788 verbose=Init Data a0011e08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_178c: /* paddr=0x178c verbose=Init Data a0011e10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1790: /* paddr=0x1790 verbose=Init Data a0011e18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1794: /* paddr=0x1794 verbose=Init Data a0011e20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1798: /* paddr=0x1798 verbose=Init Data a0011e28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_179c: /* paddr=0x179c verbose=Init Data a0011e30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17a0: /* paddr=0x17a0 verbose=Init Data a0011e38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17a4: /* paddr=0x17a4 verbose=Init Data a0011e40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17a8: /* paddr=0x17a8 verbose=Init Data a0011e48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17ac: /* paddr=0x17ac verbose=Init Data a0011e50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17b0: /* paddr=0x17b0 verbose=Init Data a0011e58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17b4: /* paddr=0x17b4 verbose=Init Data a0011e60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17b8: /* paddr=0x17b8 verbose=Init Data a0011e68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17bc: /* paddr=0x17bc verbose=Init Data a0011e70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17c0: /* paddr=0x17c0 verbose=Init Data a0011e78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17c4: /* paddr=0x17c4 verbose=Init Data a0011e80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17c8: /* paddr=0x17c8 verbose=Init Data a0011e88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17cc: /* paddr=0x17cc verbose=Init Data a0011e90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17d0: /* paddr=0x17d0 verbose=Init Data a0011e98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17d4: /* paddr=0x17d4 verbose=Init Data a0011ea0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ea0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ea0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17d8: /* paddr=0x17d8 verbose=Init Data a0011ea8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ea8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ea8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17dc: /* paddr=0x17dc verbose=Init Data a0011eb0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011eb0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011eb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17e0: /* paddr=0x17e0 verbose=Init Data a0011eb8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011eb8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011eb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17e4: /* paddr=0x17e4 verbose=Init Data a0011ec0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ec0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ec0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17e8: /* paddr=0x17e8 verbose=Init Data a0011ec8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ec8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ec8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17ec: /* paddr=0x17ec verbose=Init Data a0011ed0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ed0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ed0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17f0: /* paddr=0x17f0 verbose=Init Data a0011ed8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ed8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ed8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17f4: /* paddr=0x17f4 verbose=Init Data a0011ee0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ee0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ee0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17f8: /* paddr=0x17f8 verbose=Init Data a0011ee8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ee8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ee8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17fc: /* paddr=0x17fc verbose=Init Data a0011ef0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ef0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ef0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1800: /* paddr=0x1800 verbose=Init Data a0011ef8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ef8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ef8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1804: /* paddr=0x1804 verbose=Init Data a0011f00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1808: /* paddr=0x1808 verbose=Init Data a0011f08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_180c: /* paddr=0x180c verbose=Init Data a0011f10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1810: /* paddr=0x1810 verbose=Init Data a0011f18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1814: /* paddr=0x1814 verbose=Init Data a0011f20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1818: /* paddr=0x1818 verbose=Init Data a0011f28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_181c: /* paddr=0x181c verbose=Init Data a0011f30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1820: /* paddr=0x1820 verbose=Init Data a0011f38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1824: /* paddr=0x1824 verbose=Init Data a0011f40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1828: /* paddr=0x1828 verbose=Init Data a0011f48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_182c: /* paddr=0x182c verbose=Init Data a0011f50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1830: /* paddr=0x1830 verbose=Init Data a0011f58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1834: /* paddr=0x1834 verbose=Init Data a0011f60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1838: /* paddr=0x1838 verbose=Init Data a0011f68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_183c: /* paddr=0x183c verbose=Init Data a0011f70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1840: /* paddr=0x1840 verbose=Init Data a0011f78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1844: /* paddr=0x1844 verbose=Init Data a0011f80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1848: /* paddr=0x1848 verbose=Init Data a0011f88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_184c: /* paddr=0x184c verbose=Init Data a0011f90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1850: /* paddr=0x1850 verbose=Init Data a0011f98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1854: /* paddr=0x1854 verbose=Init Data a0011fa0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fa0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fa0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1858: /* paddr=0x1858 verbose=Init Data a0011fa8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fa8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fa8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_185c: /* paddr=0x185c verbose=Init Data a0011fb0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fb0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1860: /* paddr=0x1860 verbose=Init Data a0011fb8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fb8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1864: /* paddr=0x1864 verbose=Init Data a0011fc0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fc0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1868: /* paddr=0x1868 verbose=Init Data a0011fc8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fc8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_186c: /* paddr=0x186c verbose=Init Data a0011fd0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fd0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1870: /* paddr=0x1870 verbose=Init Data a0011fd8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fd8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1874: /* paddr=0x1874 verbose=Init Data a0011fe0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fe0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fe0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1878: /* paddr=0x1878 verbose=Init Data a0011fe8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fe8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fe8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_187c: /* paddr=0x187c verbose=Init Data a0011ff0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ff0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ff0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1880: /* paddr=0x1880 verbose=Init Data a0011ff8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ff8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ff8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1884: /* paddr=0x1884 verbose=Init Data a0012000: 00000080 a_src=2=SRC_IMM a_offset_imm0=0xa0012000 b_src=2=SRC_IMM b_offset_imm0=0x80 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x80 */
	mov r12, 0x80 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1888: /* paddr=0x1888 verbose=Init Data a0012008: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012008 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_188c: /* paddr=0x188c verbose=Init Data a0012010: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012010 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1890: /* paddr=0x1890 verbose=Init Data a0012018: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012018 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1894: /* paddr=0x1894 verbose=Init Data a0012020: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012020 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1898: /* paddr=0x1898 verbose=Init Data a0012028: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012028 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_189c: /* paddr=0x189c verbose=Init Data a0012030: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012030 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18a0: /* paddr=0x18a0 verbose=Init Data a0012038: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012038 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18a4: /* paddr=0x18a4 verbose=Init Data a0012040: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012040 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18a8: /* paddr=0x18a8 verbose=Init Data a0012048: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012048 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18ac: /* paddr=0x18ac verbose=Init Data a0012050: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012050 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18b0: /* paddr=0x18b0 verbose=Init Data a0012058: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012058 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18b4: /* paddr=0x18b4 verbose=Init Data a0012060: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012060 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18b8: /* paddr=0x18b8 verbose=Init Data a0012068: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012068 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012068 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18bc: /* paddr=0x18bc verbose=Init Data a0012070: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012070 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012070 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18c0: /* paddr=0x18c0 verbose=Init Data a0012078: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012078 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012078 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18c4: /* paddr=0x18c4 verbose=Init Data a0012080: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012080 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012080 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18c8: /* paddr=0x18c8 verbose=Init Data a0012088: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012088 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012088 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18cc: /* paddr=0x18cc verbose=Init Data a0012090: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012090 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012090 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18d0: /* paddr=0x18d0 verbose=Init Data a0012098: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012098 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012098 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18d4: /* paddr=0x18d4 verbose=Init Data a00120a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18d8: /* paddr=0x18d8 verbose=Init Data a00120a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18dc: /* paddr=0x18dc verbose=Init Data a00120b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18e0: /* paddr=0x18e0 verbose=Init Data a00120b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18e4: /* paddr=0x18e4 verbose=Init Data a00120c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18e8: /* paddr=0x18e8 verbose=Init Data a00120c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18ec: /* paddr=0x18ec verbose=Init Data a00120d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18f0: /* paddr=0x18f0 verbose=Init Data a00120d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18f4: /* paddr=0x18f4 verbose=Init Data a00120e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18f8: /* paddr=0x18f8 verbose=Init Data a00120e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18fc: /* paddr=0x18fc verbose=Init Data a00120f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1900: /* paddr=0x1900 verbose=Init Data a00120f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1904: /* paddr=0x1904 verbose=Init Data a0012100: 00000004 a_src=2=SRC_IMM a_offset_imm0=0xa0012100 b_src=2=SRC_IMM b_offset_imm0=0x4 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x4 */
	mov r12, 0x4 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012100 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1908: /* paddr=0x1908 verbose=Init Data a0012108: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012108 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012108 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_190c: /* paddr=0x190c verbose=Init Data a0012110: 6f5ca309e7d4b281 a_src=2=SRC_IMM a_offset_imm0=0xa0012110 b_src=2=SRC_IMM b_use_sp_imm1=0x6f5ca309 b_offset_imm0=0xe7d4b281 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6f5ca309e7d4b281 */
	mov r12, 0x6f5ca309e7d4b281 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012110 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1910: /* paddr=0x1910 verbose=Init Data a0012118: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012118 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012118 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1914: /* paddr=0x1914 verbose=Init Data a0012120: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012120 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012120 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1918: /* paddr=0x1918 verbose=Init Data a0012128: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012128 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012128 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_191c: /* paddr=0x191c verbose=Init Data a0012130: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012130 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012130 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1920: /* paddr=0x1920 verbose=Init Data a0012138: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012138 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012138 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1924: /* paddr=0x1924 verbose=Init Data a0012140: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012140 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012140 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1928: /* paddr=0x1928 verbose=Init Data a0012148: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012148 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012148 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_192c: /* paddr=0x192c verbose=Init Data a0012150: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012150 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012150 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1930: /* paddr=0x1930 verbose=Init Data a0012158: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012158 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012158 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1934: /* paddr=0x1934 verbose=Init Data a0012160: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012160 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012160 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1938: /* paddr=0x1938 verbose=Init Data a0012168: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012168 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012168 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_193c: /* paddr=0x193c verbose=Init Data a0012170: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012170 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012170 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1940: /* paddr=0x1940 verbose=Init Data a0012178: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012178 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012178 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1944: /* paddr=0x1944 verbose=Init Data a0012180: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012180 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012180 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1948: /* paddr=0x1948 verbose=Init Data a0012188: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012188 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012188 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_194c: /* paddr=0x194c verbose=Init Data a0012190: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012190 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012190 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1950: /* paddr=0x1950 verbose=Init Data a0012198: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012198 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012198 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1954: /* paddr=0x1954 verbose=Init Data a00121a0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121a0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1958: /* paddr=0x1958 verbose=Init Data a00121a8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121a8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_195c: /* paddr=0x195c verbose=Init Data a00121b0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121b0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1960: /* paddr=0x1960 verbose=Init Data a00121b8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121b8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1964: /* paddr=0x1964 verbose=Init Data a00121c0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121c0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1968: /* paddr=0x1968 verbose=Init Data a00121c8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121c8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_196c: /* paddr=0x196c verbose=Init Data a00121d0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121d0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1970: /* paddr=0x1970 verbose=Init Data a00121d8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121d8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1974: /* paddr=0x1974 verbose=Init Data a00121e0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121e0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1978: /* paddr=0x1978 verbose=Init Data a00121e8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121e8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_197c: /* paddr=0x197c verbose=Init Data a00121f0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121f0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1980: /* paddr=0x1980 verbose=Init Data a00121f8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121f8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1984: /* paddr=0x1984 verbose=Init Data a0012200: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012200 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012200 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1988: /* paddr=0x1988 verbose=Init Data a0012208: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012208 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012208 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_198c: /* paddr=0x198c verbose=Init Data a0012210: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012210 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012210 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1990: /* paddr=0x1990 verbose=Init Data a0012218: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012218 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012218 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1994: /* paddr=0x1994 verbose=Init Data a0012220: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012220 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012220 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1998: /* paddr=0x1998 verbose=Init Data a0012228: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012228 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012228 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_199c: /* paddr=0x199c verbose=Init Data a0012230: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012230 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012230 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19a0: /* paddr=0x19a0 verbose=Init Data a0012238: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012238 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012238 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19a4: /* paddr=0x19a4 verbose=Init Data a0012240: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012240 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012240 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19a8: /* paddr=0x19a8 verbose=Init Data a0012248: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012248 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012248 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19ac: /* paddr=0x19ac verbose=Init Data a0012250: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012250 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012250 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19b0: /* paddr=0x19b0 verbose=Init Data a0012258: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012258 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012258 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19b4: /* paddr=0x19b4 verbose=Init Data a0012260: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012260 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012260 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19b8: /* paddr=0x19b8 verbose=Init Data a0012268: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012268 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012268 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19bc: /* paddr=0x19bc verbose=Init Data a0012270: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012270 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012270 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19c0: /* paddr=0x19c0 verbose=Init Data a0012278: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012278 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012278 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19c4: /* paddr=0x19c4 verbose=Init Data a0012280: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012280 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012280 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19c8: /* paddr=0x19c8 verbose=Init Data a0012288: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012288 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012288 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19cc: /* paddr=0x19cc verbose=Init Data a0012290: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012290 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012290 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19d0: /* paddr=0x19d0 verbose=Init Data a0012298: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012298 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012298 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19d4: /* paddr=0x19d4 verbose=Init Data a00122a0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122a0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19d8: /* paddr=0x19d8 verbose=Init Data a00122a8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122a8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19dc: /* paddr=0x19dc verbose=Init Data a00122b0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122b0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19e0: /* paddr=0x19e0 verbose=Init Data a00122b8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122b8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19e4: /* paddr=0x19e4 verbose=Init Data a00122c0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122c0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19e8: /* paddr=0x19e8 verbose=Init Data a00122c8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122c8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19ec: /* paddr=0x19ec verbose=Init Data a00122d0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122d0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19f0: /* paddr=0x19f0 verbose=Init Data a00122d8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122d8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19f4: /* paddr=0x19f4 verbose=Init Data a00122e0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122e0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19f8: /* paddr=0x19f8 verbose=Init Data a00122e8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122e8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19fc: /* paddr=0x19fc verbose=Init Data a00122f0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122f0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a00: /* paddr=0x1a00 verbose=Init Data a00122f8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00122f8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00122f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a04: /* paddr=0x1a04 verbose=Init Data a0012300: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012300 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012300 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a08: /* paddr=0x1a08 verbose=Init Data a0012308: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012308 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012308 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a0c: /* paddr=0x1a0c verbose=Init Data a0012310: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012310 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012310 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a10: /* paddr=0x1a10 verbose=Init Data a0012318: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012318 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012318 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a14: /* paddr=0x1a14 verbose=Init Data a0012320: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012320 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012320 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a18: /* paddr=0x1a18 verbose=Init Data a0012328: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012328 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012328 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a1c: /* paddr=0x1a1c verbose=Init Data a0012330: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012330 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012330 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a20: /* paddr=0x1a20 verbose=Init Data a0012338: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012338 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012338 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a24: /* paddr=0x1a24 verbose=Init Data a0012340: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012340 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012340 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a28: /* paddr=0x1a28 verbose=Init Data a0012348: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012348 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012348 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a2c: /* paddr=0x1a2c verbose=Init Data a0012350: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012350 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012350 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a30: /* paddr=0x1a30 verbose=Init Data a0012358: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012358 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012358 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a34: /* paddr=0x1a34 verbose=Init Data a0012360: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012360 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012360 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a38: /* paddr=0x1a38 verbose=Init Data a0012368: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012368 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012368 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a3c: /* paddr=0x1a3c verbose=Init Data a0012370: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012370 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012370 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a40: /* paddr=0x1a40 verbose=Init Data a0012378: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012378 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012378 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a44: /* paddr=0x1a44 verbose=Init Data a0012380: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012380 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012380 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a48: /* paddr=0x1a48 verbose=Init Data a0012388: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012388 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012388 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a4c: /* paddr=0x1a4c verbose=Init Data a0012390: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012390 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012390 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a50: /* paddr=0x1a50 verbose=Init Data a0012398: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012398 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012398 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a54: /* paddr=0x1a54 verbose=Init Data a00123a0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123a0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a58: /* paddr=0x1a58 verbose=Init Data a00123a8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123a8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a5c: /* paddr=0x1a5c verbose=Init Data a00123b0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123b0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a60: /* paddr=0x1a60 verbose=Init Data a00123b8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123b8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a64: /* paddr=0x1a64 verbose=Init Data a00123c0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123c0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a68: /* paddr=0x1a68 verbose=Init Data a00123c8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123c8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a6c: /* paddr=0x1a6c verbose=Init Data a00123d0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123d0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a70: /* paddr=0x1a70 verbose=Init Data a00123d8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123d8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a74: /* paddr=0x1a74 verbose=Init Data a00123e0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123e0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a78: /* paddr=0x1a78 verbose=Init Data a00123e8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123e8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a7c: /* paddr=0x1a7c verbose=Init Data a00123f0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123f0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a80: /* paddr=0x1a80 verbose=Init Data a00123f8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00123f8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00123f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a84: /* paddr=0x1a84 verbose=Init Data a0012400: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012400 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012400 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a88: /* paddr=0x1a88 verbose=Init Data a0012408: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012408 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012408 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a8c: /* paddr=0x1a8c verbose=Init Data a0012410: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012410 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012410 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a90: /* paddr=0x1a90 verbose=Init Data a0012418: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012418 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012418 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a94: /* paddr=0x1a94 verbose=Init Data a0012420: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012420 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012420 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a98: /* paddr=0x1a98 verbose=Init Data a0012428: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012428 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012428 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a9c: /* paddr=0x1a9c verbose=Init Data a0012430: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012430 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012430 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aa0: /* paddr=0x1aa0 verbose=Init Data a0012438: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012438 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012438 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aa4: /* paddr=0x1aa4 verbose=Init Data a0012440: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012440 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012440 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aa8: /* paddr=0x1aa8 verbose=Init Data a0012448: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012448 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012448 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aac: /* paddr=0x1aac verbose=Init Data a0012450: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012450 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012450 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ab0: /* paddr=0x1ab0 verbose=Init Data a0012458: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012458 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012458 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ab4: /* paddr=0x1ab4 verbose=Init Data a0012460: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012460 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012460 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ab8: /* paddr=0x1ab8 verbose=Init Data a0012468: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012468 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012468 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1abc: /* paddr=0x1abc verbose=Init Data a0012470: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012470 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012470 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ac0: /* paddr=0x1ac0 verbose=Init Data a0012478: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012478 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012478 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ac4: /* paddr=0x1ac4 verbose=Init Data a0012480: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012480 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012480 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ac8: /* paddr=0x1ac8 verbose=Init Data a0012488: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012488 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012488 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1acc: /* paddr=0x1acc verbose=Init Data a0012490: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012490 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012490 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ad0: /* paddr=0x1ad0 verbose=Init Data a0012498: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012498 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012498 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ad4: /* paddr=0x1ad4 verbose=Init Data a00124a0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124a0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ad8: /* paddr=0x1ad8 verbose=Init Data a00124a8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124a8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1adc: /* paddr=0x1adc verbose=Init Data a00124b0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124b0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ae0: /* paddr=0x1ae0 verbose=Init Data a00124b8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124b8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ae4: /* paddr=0x1ae4 verbose=Init Data a00124c0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124c0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ae8: /* paddr=0x1ae8 verbose=Init Data a00124c8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124c8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aec: /* paddr=0x1aec verbose=Init Data a00124d0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124d0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1af0: /* paddr=0x1af0 verbose=Init Data a00124d8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124d8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1af4: /* paddr=0x1af4 verbose=Init Data a00124e0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124e0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1af8: /* paddr=0x1af8 verbose=Init Data a00124e8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124e8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1afc: /* paddr=0x1afc verbose=Init Data a00124f0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124f0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b00: /* paddr=0x1b00 verbose=Init Data a00124f8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00124f8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00124f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b04: /* paddr=0x1b04 verbose=Init Data a0012500: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012500 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012500 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b08: /* paddr=0x1b08 verbose=Init Data a0012508: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012508 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012508 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b0c: /* paddr=0x1b0c verbose=Init Data a0012510: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012510 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012510 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b10: /* paddr=0x1b10 verbose=Init Data a0012518: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012518 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012518 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b14: /* paddr=0x1b14 verbose=Init Data a0012520: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012520 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012520 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b18: /* paddr=0x1b18 verbose=Init Data a0012528: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012528 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012528 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b1c: /* paddr=0x1b1c verbose=Init Data a0012530: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012530 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012530 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b20: /* paddr=0x1b20 verbose=Init Data a0012538: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012538 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012538 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b24: /* paddr=0x1b24 verbose=Init Data a0012540: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012540 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012540 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b28: /* paddr=0x1b28 verbose=Init Data a0012548: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012548 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012548 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b2c: /* paddr=0x1b2c verbose=Init Data a0012550: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012550 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012550 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b30: /* paddr=0x1b30 verbose=Init Data a0012558: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012558 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012558 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b34: /* paddr=0x1b34 verbose=Init Data a0012560: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012560 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012560 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b38: /* paddr=0x1b38 verbose=Init Data a0012568: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012568 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012568 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b3c: /* paddr=0x1b3c verbose=Init Data a0012570: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012570 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012570 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b40: /* paddr=0x1b40 verbose=Init Data a0012578: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012578 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012578 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b44: /* paddr=0x1b44 verbose=Init Data a0012580: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012580 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012580 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b48: /* paddr=0x1b48 verbose=Init Data a0012588: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012588 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012588 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b4c: /* paddr=0x1b4c verbose=Init Data a0012590: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012590 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012590 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b50: /* paddr=0x1b50 verbose=Init Data a0012598: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012598 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012598 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b54: /* paddr=0x1b54 verbose=Init Data a00125a0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00125a0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00125a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b58: /* paddr=0x1b58 verbose=Init Data a00125a8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00125a8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00125a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b5c: /* paddr=0x1b5c verbose=Init Data a00125b0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00125b0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00125b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b60: /* paddr=0x1b60 verbose=Init Data a00125b8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00125b8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00125b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b64: /* paddr=0x1b64 verbose=Init Data a00125c0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00125c0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00125c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b68: /* paddr=0x1b68 verbose=Init Data a00125c8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00125c8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00125c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b6c: /* paddr=0x1b6c verbose=Init Data a00125d0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00125d0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00125d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b70: /* paddr=0x1b70 verbose=Init Data a00125d8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00125d8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00125d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b74: /* paddr=0x1b74 verbose=Init Data a00125e0: 6f5ca309e7d4b281 a_src=2=SRC_IMM a_offset_imm0=0xa00125e0 b_src=2=SRC_IMM b_use_sp_imm1=0x6f5ca309 b_offset_imm0=0xe7d4b281 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6f5ca309e7d4b281 */
	mov r12, 0x6f5ca309e7d4b281 /* STORE_IND: reg_value = value */
	mov r13, 0xa00125e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b78: /* paddr=0x1b78 verbose=Init Data a00125e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00125e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00125e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b7c: /* paddr=0x1b7c verbose=Init Data 80000000: ddb808137d5c0837 a_src=2=SRC_IMM a_offset_imm0=0x80000000 b_src=2=SRC_IMM b_use_sp_imm1=0xddb80813 b_offset_imm0=0x7d5c0837 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xddb808137d5c0837 */
	mov r12, 0xddb808137d5c0837 /* STORE_IND: reg_value = value */
	mov r13, 0x80000000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b80: /* paddr=0x1b80 verbose=Init Data 80000008: 3ea8081300b81813 a_src=2=SRC_IMM a_offset_imm0=0x80000008 b_src=2=SRC_IMM b_use_sp_imm1=0x3ea80813 b_offset_imm0=0xb81813 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3ea8081300b81813 */
	mov r12, 0x3ea8081300b81813 /* STORE_IND: reg_value = value */
	mov r13, 0x80000008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b84: /* paddr=0x1b84 verbose=Init Data 80000010: 6ff8081300b81813 a_src=2=SRC_IMM a_offset_imm0=0x80000010 b_src=2=SRC_IMM b_use_sp_imm1=0x6ff80813 b_offset_imm0=0xb81813 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6ff8081300b81813 */
	mov r12, 0x6ff8081300b81813 /* STORE_IND: reg_value = value */
	mov r13, 0x80000010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b88: /* paddr=0x1b88 verbose=Init Data 80000018: 1db8081300a81813 a_src=2=SRC_IMM a_offset_imm0=0x80000018 b_src=2=SRC_IMM b_use_sp_imm1=0x1db80813 b_offset_imm0=0xa81813 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1db8081300a81813 */
	mov r12, 0x1db8081300a81813 /* STORE_IND: reg_value = value */
	mov r13, 0x80000018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b8c: /* paddr=0x1b8c verbose=Init Data 80000020: 398579300785893 a_src=2=SRC_IMM a_offset_imm0=0x80000020 b_src=2=SRC_IMM b_use_sp_imm1=0x3985793 b_offset_imm0=0x785893 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x398579300785893 */
	mov r12, 0x398579300785893 /* STORE_IND: reg_value = value */
	mov r13, 0x80000020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b90: /* paddr=0x1b90 verbose=Init Data 80000028: 78d91300f8e8b3 a_src=2=SRC_IMM a_offset_imm0=0x80000028 b_src=2=SRC_IMM b_use_sp_imm1=0x78d913 b_offset_imm0=0xf8e8b3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x78d91300f8e8b3 */
	mov r12, 0x78d91300f8e8b3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b94: /* paddr=0x1b94 verbose=Init Data 80000030: f969330398d793 a_src=2=SRC_IMM a_offset_imm0=0x80000030 b_src=2=SRC_IMM b_use_sp_imm1=0xf96933 b_offset_imm0=0x398d793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf969330398d793 */
	mov r12, 0xf969330398d793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b98: /* paddr=0x1b98 verbose=Init Data 80000038: 399579300795993 a_src=2=SRC_IMM a_offset_imm0=0x80000038 b_src=2=SRC_IMM b_use_sp_imm1=0x3995793 b_offset_imm0=0x795993 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x399579300795993 */
	mov r12, 0x399579300795993 /* STORE_IND: reg_value = value */
	mov r13, 0x80000038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b9c: /* paddr=0x1b9c verbose=Init Data 80000040: 79da1300f9e9b3 a_src=2=SRC_IMM a_offset_imm0=0x80000040 b_src=2=SRC_IMM b_use_sp_imm1=0x79da13 b_offset_imm0=0xf9e9b3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x79da1300f9e9b3 */
	mov r12, 0x79da1300f9e9b3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ba0: /* paddr=0x1ba0 verbose=Init Data 80000048: fa6a330399d793 a_src=2=SRC_IMM a_offset_imm0=0x80000048 b_src=2=SRC_IMM b_use_sp_imm1=0xfa6a33 b_offset_imm0=0x399d793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfa6a330399d793 */
	mov r12, 0xfa6a330399d793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ba4: /* paddr=0x1ba4 verbose=Init Data 80000050: 39a5793007a5a93 a_src=2=SRC_IMM a_offset_imm0=0x80000050 b_src=2=SRC_IMM b_use_sp_imm1=0x39a5793 b_offset_imm0=0x7a5a93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39a5793007a5a93 */
	mov r12, 0x39a5793007a5a93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ba8: /* paddr=0x1ba8 verbose=Init Data 80000058: 7adb1300faeab3 a_src=2=SRC_IMM a_offset_imm0=0x80000058 b_src=2=SRC_IMM b_use_sp_imm1=0x7adb13 b_offset_imm0=0xfaeab3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7adb1300faeab3 */
	mov r12, 0x7adb1300faeab3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bac: /* paddr=0x1bac verbose=Init Data 80000060: fb6b33039ad793 a_src=2=SRC_IMM a_offset_imm0=0x80000060 b_src=2=SRC_IMM b_use_sp_imm1=0xfb6b33 b_offset_imm0=0x39ad793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfb6b33039ad793 */
	mov r12, 0xfb6b33039ad793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bb0: /* paddr=0x1bb0 verbose=Init Data 80000068: 39b5793007b5b93 a_src=2=SRC_IMM a_offset_imm0=0x80000068 b_src=2=SRC_IMM b_use_sp_imm1=0x39b5793 b_offset_imm0=0x7b5b93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39b5793007b5b93 */
	mov r12, 0x39b5793007b5b93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000068 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bb4: /* paddr=0x1bb4 verbose=Init Data 80000070: 7bdc1300fbebb3 a_src=2=SRC_IMM a_offset_imm0=0x80000070 b_src=2=SRC_IMM b_use_sp_imm1=0x7bdc13 b_offset_imm0=0xfbebb3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7bdc1300fbebb3 */
	mov r12, 0x7bdc1300fbebb3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000070 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bb8: /* paddr=0x1bb8 verbose=Init Data 80000078: fc6c33039bd793 a_src=2=SRC_IMM a_offset_imm0=0x80000078 b_src=2=SRC_IMM b_use_sp_imm1=0xfc6c33 b_offset_imm0=0x39bd793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfc6c33039bd793 */
	mov r12, 0xfc6c33039bd793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000078 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bbc: /* paddr=0x1bbc verbose=Init Data 80000080: 39c5793007c5c93 a_src=2=SRC_IMM a_offset_imm0=0x80000080 b_src=2=SRC_IMM b_use_sp_imm1=0x39c5793 b_offset_imm0=0x7c5c93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39c5793007c5c93 */
	mov r12, 0x39c5793007c5c93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000080 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bc0: /* paddr=0x1bc0 verbose=Init Data 80000088: 7cdd1300fcecb3 a_src=2=SRC_IMM a_offset_imm0=0x80000088 b_src=2=SRC_IMM b_use_sp_imm1=0x7cdd13 b_offset_imm0=0xfcecb3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7cdd1300fcecb3 */
	mov r12, 0x7cdd1300fcecb3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000088 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bc4: /* paddr=0x1bc4 verbose=Init Data 80000090: fd6d33039cd793 a_src=2=SRC_IMM a_offset_imm0=0x80000090 b_src=2=SRC_IMM b_use_sp_imm1=0xfd6d33 b_offset_imm0=0x39cd793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfd6d33039cd793 */
	mov r12, 0xfd6d33039cd793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000090 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bc8: /* paddr=0x1bc8 verbose=Init Data 80000098: 39d5793007d5d93 a_src=2=SRC_IMM a_offset_imm0=0x80000098 b_src=2=SRC_IMM b_use_sp_imm1=0x39d5793 b_offset_imm0=0x7d5d93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39d5793007d5d93 */
	mov r12, 0x39d5793007d5d93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000098 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bcc: /* paddr=0x1bcc verbose=Init Data 800000a0: 7dde1300fdedb3 a_src=2=SRC_IMM a_offset_imm0=0x800000a0 b_src=2=SRC_IMM b_use_sp_imm1=0x7dde13 b_offset_imm0=0xfdedb3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7dde1300fdedb3 */
	mov r12, 0x7dde1300fdedb3 /* STORE_IND: reg_value = value */
	mov r13, 0x800000a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bd0: /* paddr=0x1bd0 verbose=Init Data 800000a8: fe6e33039dd793 a_src=2=SRC_IMM a_offset_imm0=0x800000a8 b_src=2=SRC_IMM b_use_sp_imm1=0xfe6e33 b_offset_imm0=0x39dd793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfe6e33039dd793 */
	mov r12, 0xfe6e33039dd793 /* STORE_IND: reg_value = value */
	mov r13, 0x800000a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bd4: /* paddr=0x1bd4 verbose=Init Data 800000b0: 39e5793007e5e93 a_src=2=SRC_IMM a_offset_imm0=0x800000b0 b_src=2=SRC_IMM b_use_sp_imm1=0x39e5793 b_offset_imm0=0x7e5e93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39e5793007e5e93 */
	mov r12, 0x39e5793007e5e93 /* STORE_IND: reg_value = value */
	mov r13, 0x800000b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bd8: /* paddr=0x1bd8 verbose=Init Data 800000b8: 7edf1300feeeb3 a_src=2=SRC_IMM a_offset_imm0=0x800000b8 b_src=2=SRC_IMM b_use_sp_imm1=0x7edf13 b_offset_imm0=0xfeeeb3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7edf1300feeeb3 */
	mov r12, 0x7edf1300feeeb3 /* STORE_IND: reg_value = value */
	mov r13, 0x800000b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bdc: /* paddr=0x1bdc verbose=Init Data 800000c0: ff6f33039ed793 a_src=2=SRC_IMM a_offset_imm0=0x800000c0 b_src=2=SRC_IMM b_use_sp_imm1=0xff6f33 b_offset_imm0=0x39ed793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xff6f33039ed793 */
	mov r12, 0xff6f33039ed793 /* STORE_IND: reg_value = value */
	mov r13, 0x800000c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1be0: /* paddr=0x1be0 verbose=Init Data 800000c8: ead08093feedc0b7 a_src=2=SRC_IMM a_offset_imm0=0x800000c8 b_src=2=SRC_IMM b_use_sp_imm1=0xead08093 b_offset_imm0=0xfeedc0b7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xead08093feedc0b7 */
	mov r12, 0xead08093feedc0b7 /* STORE_IND: reg_value = value */
	mov r13, 0x800000c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1be4: /* paddr=0x1be4 verbose=Init Data 800000d0: 7f70809300b09093 a_src=2=SRC_IMM a_offset_imm0=0x800000d0 b_src=2=SRC_IMM b_use_sp_imm1=0x7f708093 b_offset_imm0=0xb09093 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7f70809300b09093 */
	mov r12, 0x7f70809300b09093 /* STORE_IND: reg_value = value */
	mov r13, 0x800000d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1be8: /* paddr=0x1be8 verbose=Init Data 800000d8: 36f0809300b09093 a_src=2=SRC_IMM a_offset_imm0=0x800000d8 b_src=2=SRC_IMM b_use_sp_imm1=0x36f08093 b_offset_imm0=0xb09093 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x36f0809300b09093 */
	mov r12, 0x36f0809300b09093 /* STORE_IND: reg_value = value */
	mov r13, 0x800000d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bec: /* paddr=0x1bec verbose=Init Data 800000e0: 2ad0809300a09093 a_src=2=SRC_IMM a_offset_imm0=0x800000e0 b_src=2=SRC_IMM b_use_sp_imm1=0x2ad08093 b_offset_imm0=0xa09093 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2ad0809300a09093 */
	mov r12, 0x2ad0809300a09093 /* STORE_IND: reg_value = value */
	mov r13, 0x800000e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bf0: /* paddr=0x1bf0 verbose=Init Data 800000e8: 390d7930070d113 a_src=2=SRC_IMM a_offset_imm0=0x800000e8 b_src=2=SRC_IMM b_use_sp_imm1=0x390d793 b_offset_imm0=0x70d113 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x390d7930070d113 */
	mov r12, 0x390d7930070d113 /* STORE_IND: reg_value = value */
	mov r13, 0x800000e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bf4: /* paddr=0x1bf4 verbose=Init Data 800000f0: 71519300f16133 a_src=2=SRC_IMM a_offset_imm0=0x800000f0 b_src=2=SRC_IMM b_use_sp_imm1=0x715193 b_offset_imm0=0xf16133 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x71519300f16133 */
	mov r12, 0x71519300f16133 /* STORE_IND: reg_value = value */
	mov r13, 0x800000f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bf8: /* paddr=0x1bf8 verbose=Init Data 800000f8: f1e1b303915793 a_src=2=SRC_IMM a_offset_imm0=0x800000f8 b_src=2=SRC_IMM b_use_sp_imm1=0xf1e1b3 b_offset_imm0=0x3915793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf1e1b303915793 */
	mov r12, 0xf1e1b303915793 /* STORE_IND: reg_value = value */
	mov r13, 0x800000f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bfc: /* paddr=0x1bfc verbose=Init Data 80000100: 391d7930071d213 a_src=2=SRC_IMM a_offset_imm0=0x80000100 b_src=2=SRC_IMM b_use_sp_imm1=0x391d793 b_offset_imm0=0x71d213 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x391d7930071d213 */
	mov r12, 0x391d7930071d213 /* STORE_IND: reg_value = value */
	mov r13, 0x80000100 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c00: /* paddr=0x1c00 verbose=Init Data 80000108: 72529300f26233 a_src=2=SRC_IMM a_offset_imm0=0x80000108 b_src=2=SRC_IMM b_use_sp_imm1=0x725293 b_offset_imm0=0xf26233 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x72529300f26233 */
	mov r12, 0x72529300f26233 /* STORE_IND: reg_value = value */
	mov r13, 0x80000108 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c04: /* paddr=0x1c04 verbose=Init Data 80000110: f2e2b303925793 a_src=2=SRC_IMM a_offset_imm0=0x80000110 b_src=2=SRC_IMM b_use_sp_imm1=0xf2e2b3 b_offset_imm0=0x3925793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf2e2b303925793 */
	mov r12, 0xf2e2b303925793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000110 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c08: /* paddr=0x1c08 verbose=Init Data 80000118: 392d7930072d313 a_src=2=SRC_IMM a_offset_imm0=0x80000118 b_src=2=SRC_IMM b_use_sp_imm1=0x392d793 b_offset_imm0=0x72d313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x392d7930072d313 */
	mov r12, 0x392d7930072d313 /* STORE_IND: reg_value = value */
	mov r13, 0x80000118 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c0c: /* paddr=0x1c0c verbose=Init Data 80000120: 73539300f36333 a_src=2=SRC_IMM a_offset_imm0=0x80000120 b_src=2=SRC_IMM b_use_sp_imm1=0x735393 b_offset_imm0=0xf36333 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x73539300f36333 */
	mov r12, 0x73539300f36333 /* STORE_IND: reg_value = value */
	mov r13, 0x80000120 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c10: /* paddr=0x1c10 verbose=Init Data 80000128: f3e3b303935793 a_src=2=SRC_IMM a_offset_imm0=0x80000128 b_src=2=SRC_IMM b_use_sp_imm1=0xf3e3b3 b_offset_imm0=0x3935793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf3e3b303935793 */
	mov r12, 0xf3e3b303935793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000128 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c14: /* paddr=0x1c14 verbose=Init Data 80000130: 393d7930073d413 a_src=2=SRC_IMM a_offset_imm0=0x80000130 b_src=2=SRC_IMM b_use_sp_imm1=0x393d793 b_offset_imm0=0x73d413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x393d7930073d413 */
	mov r12, 0x393d7930073d413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000130 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c18: /* paddr=0x1c18 verbose=Init Data 80000138: 74549300f46433 a_src=2=SRC_IMM a_offset_imm0=0x80000138 b_src=2=SRC_IMM b_use_sp_imm1=0x745493 b_offset_imm0=0xf46433 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x74549300f46433 */
	mov r12, 0x74549300f46433 /* STORE_IND: reg_value = value */
	mov r13, 0x80000138 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c1c: /* paddr=0x1c1c verbose=Init Data 80000140: f4e4b303945793 a_src=2=SRC_IMM a_offset_imm0=0x80000140 b_src=2=SRC_IMM b_use_sp_imm1=0xf4e4b3 b_offset_imm0=0x3945793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf4e4b303945793 */
	mov r12, 0xf4e4b303945793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000140 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c20: /* paddr=0x1c20 verbose=Init Data 80000148: 394d7930074d513 a_src=2=SRC_IMM a_offset_imm0=0x80000148 b_src=2=SRC_IMM b_use_sp_imm1=0x394d793 b_offset_imm0=0x74d513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x394d7930074d513 */
	mov r12, 0x394d7930074d513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000148 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c24: /* paddr=0x1c24 verbose=Init Data 80000150: 75559300f56533 a_src=2=SRC_IMM a_offset_imm0=0x80000150 b_src=2=SRC_IMM b_use_sp_imm1=0x755593 b_offset_imm0=0xf56533 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x75559300f56533 */
	mov r12, 0x75559300f56533 /* STORE_IND: reg_value = value */
	mov r13, 0x80000150 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c28: /* paddr=0x1c28 verbose=Init Data 80000158: f5e5b303955793 a_src=2=SRC_IMM a_offset_imm0=0x80000158 b_src=2=SRC_IMM b_use_sp_imm1=0xf5e5b3 b_offset_imm0=0x3955793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf5e5b303955793 */
	mov r12, 0xf5e5b303955793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000158 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c2c: /* paddr=0x1c2c verbose=Init Data 80000160: 395d7930075d613 a_src=2=SRC_IMM a_offset_imm0=0x80000160 b_src=2=SRC_IMM b_use_sp_imm1=0x395d793 b_offset_imm0=0x75d613 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x395d7930075d613 */
	mov r12, 0x395d7930075d613 /* STORE_IND: reg_value = value */
	mov r13, 0x80000160 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c30: /* paddr=0x1c30 verbose=Init Data 80000168: 76569300f66633 a_src=2=SRC_IMM a_offset_imm0=0x80000168 b_src=2=SRC_IMM b_use_sp_imm1=0x765693 b_offset_imm0=0xf66633 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x76569300f66633 */
	mov r12, 0x76569300f66633 /* STORE_IND: reg_value = value */
	mov r13, 0x80000168 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c34: /* paddr=0x1c34 verbose=Init Data 80000170: f6e6b303965793 a_src=2=SRC_IMM a_offset_imm0=0x80000170 b_src=2=SRC_IMM b_use_sp_imm1=0xf6e6b3 b_offset_imm0=0x3965793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf6e6b303965793 */
	mov r12, 0xf6e6b303965793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000170 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c38: /* paddr=0x1c38 verbose=Init Data 80000178: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000178 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000178 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c3c: /* paddr=0x1c3c verbose=Init Data 80000180: f982021320012217 a_src=2=SRC_IMM a_offset_imm0=0x80000180 b_src=2=SRC_IMM b_use_sp_imm1=0xf9820213 b_offset_imm0=0x20012217 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf982021320012217 */
	mov r12, 0xf982021320012217 /* STORE_IND: reg_value = value */
	mov r13, 0x80000180 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c40: /* paddr=0x1c40 verbose=Init Data 80000188: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000188 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000188 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c44: /* paddr=0x1c44 verbose=Init Data 80000190: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000190 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000190 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c48: /* paddr=0x1c48 verbose=Init Data 80000198: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000198 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000198 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c4c: /* paddr=0x1c4c verbose=Init Data 800001a0: 2f3939300100393 a_src=2=SRC_IMM a_offset_imm0=0x800001a0 b_src=2=SRC_IMM b_use_sp_imm1=0x2f39393 b_offset_imm0=0x100393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2f3939300100393 */
	mov r12, 0x2f3939300100393 /* STORE_IND: reg_value = value */
	mov r13, 0x800001a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c50: /* paddr=0x1c50 verbose=Init Data 800001a8: 100393fff3c393 a_src=2=SRC_IMM a_offset_imm0=0x800001a8 b_src=2=SRC_IMM b_use_sp_imm1=0x100393 b_offset_imm0=0xfff3c393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x100393fff3c393 */
	mov r12, 0x100393fff3c393 /* STORE_IND: reg_value = value */
	mov r13, 0x800001a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c54: /* paddr=0x1c54 verbose=Init Data 800001b0: fff3c39302f39393 a_src=2=SRC_IMM a_offset_imm0=0x800001b0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff3c393 b_offset_imm0=0x2f39393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff3c39302f39393 */
	mov r12, 0xfff3c39302f39393 /* STORE_IND: reg_value = value */
	mov r13, 0x800001b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c58: /* paddr=0x1c58 verbose=Init Data 800001b8: e230230073973b a_src=2=SRC_IMM a_offset_imm0=0x800001b8 b_src=2=SRC_IMM b_use_sp_imm1=0xe23023 b_offset_imm0=0x73973b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xe230230073973b */
	mov r12, 0xe230230073973b /* STORE_IND: reg_value = value */
	mov r13, 0x800001b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c5c: /* paddr=0x1c5c verbose=Init Data 800001c0: 3ad9d9300100d93 a_src=2=SRC_IMM a_offset_imm0=0x800001c0 b_src=2=SRC_IMM b_use_sp_imm1=0x3ad9d93 b_offset_imm0=0x100d93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3ad9d9300100d93 */
	mov r12, 0x3ad9d9300100d93 /* STORE_IND: reg_value = value */
	mov r13, 0x800001c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c60: /* paddr=0x1c60 verbose=Init Data 800001c8: 1ed9f3b01700f13 a_src=2=SRC_IMM a_offset_imm0=0x800001c8 b_src=2=SRC_IMM b_use_sp_imm1=0x1ed9f3b b_offset_imm0=0x1700f13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1ed9f3b01700f13 */
	mov r12, 0x1ed9f3b01700f13 /* STORE_IND: reg_value = value */
	mov r13, 0x800001c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c64: /* paddr=0x1c64 verbose=Init Data 800001d0: ffa0029301e23423 a_src=2=SRC_IMM a_offset_imm0=0x800001d0 b_src=2=SRC_IMM b_use_sp_imm1=0xffa00293 b_offset_imm0=0x1e23423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xffa0029301e23423 */
	mov r12, 0xffa0029301e23423 /* STORE_IND: reg_value = value */
	mov r13, 0x800001d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c68: /* paddr=0x1c68 verbose=Init Data 800001d8: 5292bbffa00293 a_src=2=SRC_IMM a_offset_imm0=0x800001d8 b_src=2=SRC_IMM b_use_sp_imm1=0x5292bb b_offset_imm0=0xffa00293 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5292bbffa00293 */
	mov r12, 0x5292bbffa00293 /* STORE_IND: reg_value = value */
	mov r13, 0x800001d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c6c: /* paddr=0x1c6c verbose=Init Data 800001e0: 10091300523823 a_src=2=SRC_IMM a_offset_imm0=0x800001e0 b_src=2=SRC_IMM b_use_sp_imm1=0x100913 b_offset_imm0=0x523823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10091300523823 */
	mov r12, 0x10091300523823 /* STORE_IND: reg_value = value */
	mov r13, 0x800001e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c70: /* paddr=0x1c70 verbose=Init Data 800001e8: 79301c91913 a_src=2=SRC_IMM a_offset_imm0=0x800001e8 b_src=2=SRC_IMM b_use_sp_imm1=0x793 b_offset_imm0=0x1c91913 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x79301c91913 */
	mov r12, 0x79301c91913 /* STORE_IND: reg_value = value */
	mov r13, 0x800001e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c74: /* paddr=0x1c74 verbose=Init Data 800001f0: 1623c2300f91b3b a_src=2=SRC_IMM a_offset_imm0=0x800001f0 b_src=2=SRC_IMM b_use_sp_imm1=0x1623c23 b_offset_imm0=0xf91b3b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1623c2300f91b3b */
	mov r12, 0x1623c2300f91b3b /* STORE_IND: reg_value = value */
	mov r13, 0x800001f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c78: /* paddr=0x1c78 verbose=Init Data 800001f8: 500b1300500d13 a_src=2=SRC_IMM a_offset_imm0=0x800001f8 b_src=2=SRC_IMM b_use_sp_imm1=0x500b13 b_offset_imm0=0x500d13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x500b1300500d13 */
	mov r12, 0x500b1300500d13 /* STORE_IND: reg_value = value */
	mov r13, 0x800001f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c7c: /* paddr=0x1c7c verbose=Init Data 80000200: 3a23023016d1d3b a_src=2=SRC_IMM a_offset_imm0=0x80000200 b_src=2=SRC_IMM b_use_sp_imm1=0x3a23023 b_offset_imm0=0x16d1d3b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3a23023016d1d3b */
	mov r12, 0x3a23023016d1d3b /* STORE_IND: reg_value = value */
	mov r13, 0x80000200 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c80: /* paddr=0x1c80 verbose=Init Data 80000208: 3f71713fff00713 a_src=2=SRC_IMM a_offset_imm0=0x80000208 b_src=2=SRC_IMM b_use_sp_imm1=0x3f71713 b_offset_imm0=0xfff00713 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3f71713fff00713 */
	mov r12, 0x3f71713fff00713 /* STORE_IND: reg_value = value */
	mov r13, 0x80000208 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c84: /* paddr=0x1c84 verbose=Init Data 80000210: 1771ebb00200b93 a_src=2=SRC_IMM a_offset_imm0=0x80000210 b_src=2=SRC_IMM b_use_sp_imm1=0x1771ebb b_offset_imm0=0x200b93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1771ebb00200b93 */
	mov r12, 0x1771ebb00200b93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000210 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c88: /* paddr=0x1c88 verbose=Init Data 80000218: 61303d23423 a_src=2=SRC_IMM a_offset_imm0=0x80000218 b_src=2=SRC_IMM b_use_sp_imm1=0x613 b_offset_imm0=0x3d23423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x61303d23423 */
	mov r12, 0x61303d23423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000218 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c8c: /* paddr=0x1c8c verbose=Init Data 80000220: e614bb01100713 a_src=2=SRC_IMM a_offset_imm0=0x80000220 b_src=2=SRC_IMM b_use_sp_imm1=0xe614bb b_offset_imm0=0x1100713 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xe614bb01100713 */
	mov r12, 0xe614bb01100713 /* STORE_IND: reg_value = value */
	mov r13, 0x80000220 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c90: /* paddr=0x1c90 verbose=Init Data 80000228: fff0051302923823 a_src=2=SRC_IMM a_offset_imm0=0x80000228 b_src=2=SRC_IMM b_use_sp_imm1=0xfff00513 b_offset_imm0=0x2923823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff0051302923823 */
	mov r12, 0xfff0051302923823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000228 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c94: /* paddr=0x1c94 verbose=Init Data 80000230: 1300155513 a_src=2=SRC_IMM a_offset_imm0=0x80000230 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x155513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300155513 */
	mov r12, 0x1300155513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000230 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c98: /* paddr=0x1c98 verbose=Init Data 80000238: 2123c23000510bb a_src=2=SRC_IMM a_offset_imm0=0x80000238 b_src=2=SRC_IMM b_use_sp_imm1=0x2123c23 b_offset_imm0=0x510bb ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2123c23000510bb */
	mov r12, 0x2123c23000510bb /* STORE_IND: reg_value = value */
	mov r13, 0x80000238 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c9c: /* paddr=0x1c9c verbose=Init Data 80000240: 150041300100f93 a_src=2=SRC_IMM a_offset_imm0=0x80000240 b_src=2=SRC_IMM b_use_sp_imm1=0x1500413 b_offset_imm0=0x100f93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x150041300100f93 */
	mov r12, 0x150041300100f93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000240 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ca0: /* paddr=0x1ca0 verbose=Init Data 80000248: 5323023008f99bb a_src=2=SRC_IMM a_offset_imm0=0x80000248 b_src=2=SRC_IMM b_use_sp_imm1=0x5323023 b_offset_imm0=0x8f99bb ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5323023008f99bb */
	mov r12, 0x5323023008f99bb /* STORE_IND: reg_value = value */
	mov r13, 0x80000248 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ca4: /* paddr=0x1ca4 verbose=Init Data 80000250: 1700d9300200b93 a_src=2=SRC_IMM a_offset_imm0=0x80000250 b_src=2=SRC_IMM b_use_sp_imm1=0x1700d93 b_offset_imm0=0x200b93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1700d9300200b93 */
	mov r12, 0x1700d9300200b93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000250 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ca8: /* paddr=0x1ca8 verbose=Init Data 80000258: 512342301bb98bb a_src=2=SRC_IMM a_offset_imm0=0x80000258 b_src=2=SRC_IMM b_use_sp_imm1=0x5123423 b_offset_imm0=0x1bb98bb ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x512342301bb98bb */
	mov r12, 0x512342301bb98bb /* STORE_IND: reg_value = value */
	mov r13, 0x80000258 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cac: /* paddr=0x1cac verbose=Init Data 80000260: 800d1300400893 a_src=2=SRC_IMM a_offset_imm0=0x80000260 b_src=2=SRC_IMM b_use_sp_imm1=0x800d13 b_offset_imm0=0x400893 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x800d1300400893 */
	mov r12, 0x800d1300400893 /* STORE_IND: reg_value = value */
	mov r13, 0x80000260 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cb0: /* paddr=0x1cb0 verbose=Init Data 80000268: 592382301a89cbb a_src=2=SRC_IMM a_offset_imm0=0x80000268 b_src=2=SRC_IMM b_use_sp_imm1=0x5923823 b_offset_imm0=0x1a89cbb ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x592382301a89cbb */
	mov r12, 0x592382301a89cbb /* STORE_IND: reg_value = value */
	mov r13, 0x80000268 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cb4: /* paddr=0x1cb4 verbose=Init Data 80000270: 61300800593 a_src=2=SRC_IMM a_offset_imm0=0x80000270 b_src=2=SRC_IMM b_use_sp_imm1=0x613 b_offset_imm0=0x800593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x61300800593 */
	mov r12, 0x61300800593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000270 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cb8: /* paddr=0x1cb8 verbose=Init Data 80000278: 5023c2300c5983b a_src=2=SRC_IMM a_offset_imm0=0x80000278 b_src=2=SRC_IMM b_use_sp_imm1=0x5023c23 b_offset_imm0=0xc5983b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5023c2300c5983b */
	mov r12, 0x5023c2300c5983b /* STORE_IND: reg_value = value */
	mov r13, 0x80000278 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cbc: /* paddr=0x1cbc verbose=Init Data 80000280: 19301000c13 a_src=2=SRC_IMM a_offset_imm0=0x80000280 b_src=2=SRC_IMM b_use_sp_imm1=0x193 b_offset_imm0=0x1000c13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x19301000c13 */
	mov r12, 0x19301000c13 /* STORE_IND: reg_value = value */
	mov r13, 0x80000280 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cc0: /* paddr=0x1cc0 verbose=Init Data 80000288: 7b23023003c1dbb a_src=2=SRC_IMM a_offset_imm0=0x80000288 b_src=2=SRC_IMM b_use_sp_imm1=0x7b23023 b_offset_imm0=0x3c1dbb ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7b23023003c1dbb */
	mov r12, 0x7b23023003c1dbb /* STORE_IND: reg_value = value */
	mov r13, 0x80000288 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cc4: /* paddr=0x1cc4 verbose=Init Data 80000290: 20051302000813 a_src=2=SRC_IMM a_offset_imm0=0x80000290 b_src=2=SRC_IMM b_use_sp_imm1=0x200513 b_offset_imm0=0x2000813 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x20051302000813 */
	mov r12, 0x20051302000813 /* STORE_IND: reg_value = value */
	mov r13, 0x80000290 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cc8: /* paddr=0x1cc8 verbose=Init Data 80000298: 672342300a813bb a_src=2=SRC_IMM a_offset_imm0=0x80000298 b_src=2=SRC_IMM b_use_sp_imm1=0x6723423 b_offset_imm0=0xa813bb ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x672342300a813bb */
	mov r12, 0x672342300a813bb /* STORE_IND: reg_value = value */
	mov r13, 0x80000298 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ccc: /* paddr=0x1ccc verbose=Init Data 800002a0: 110009304000113 a_src=2=SRC_IMM a_offset_imm0=0x800002a0 b_src=2=SRC_IMM b_use_sp_imm1=0x1100093 b_offset_imm0=0x4000113 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x110009304000113 */
	mov r12, 0x110009304000113 /* STORE_IND: reg_value = value */
	mov r13, 0x800002a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cd0: /* paddr=0x1cd0 verbose=Init Data 800002a8: 60238230011103b a_src=2=SRC_IMM a_offset_imm0=0x800002a8 b_src=2=SRC_IMM b_use_sp_imm1=0x6023823 b_offset_imm0=0x11103b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x60238230011103b */
	mov r12, 0x60238230011103b /* STORE_IND: reg_value = value */
	mov r13, 0x800002a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cd4: /* paddr=0x1cd4 verbose=Init Data 800002b0: a9308000e13 a_src=2=SRC_IMM a_offset_imm0=0x800002b0 b_src=2=SRC_IMM b_use_sp_imm1=0xa93 b_offset_imm0=0x8000e13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa9308000e13 */
	mov r12, 0xa9308000e13 /* STORE_IND: reg_value = value */
	mov r13, 0x800002b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cd8: /* paddr=0x1cd8 verbose=Init Data 800002b8: 6623c23015e133b a_src=2=SRC_IMM a_offset_imm0=0x800002b8 b_src=2=SRC_IMM b_use_sp_imm1=0x6623c23 b_offset_imm0=0x15e133b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6623c23015e133b */
	mov r12, 0x6623c23015e133b /* STORE_IND: reg_value = value */
	mov r13, 0x800002b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cdc: /* paddr=0x1cdc verbose=Init Data 800002c0: ed82829320012297 a_src=2=SRC_IMM a_offset_imm0=0x800002c0 b_src=2=SRC_IMM b_use_sp_imm1=0xed828293 b_offset_imm0=0x20012297 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xed82829320012297 */
	mov r12, 0xed82829320012297 /* STORE_IND: reg_value = value */
	mov r13, 0x800002c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ce0: /* paddr=0x1ce0 verbose=Init Data 800002c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800002c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800002c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ce4: /* paddr=0x1ce4 verbose=Init Data 800002d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800002d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800002d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ce8: /* paddr=0x1ce8 verbose=Init Data 800002d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800002d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800002d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cec: /* paddr=0x1cec verbose=Init Data 800002e0: 60089310000413 a_src=2=SRC_IMM a_offset_imm0=0x800002e0 b_src=2=SRC_IMM b_use_sp_imm1=0x600893 b_offset_imm0=0x10000413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x60089310000413 */
	mov r12, 0x60089310000413 /* STORE_IND: reg_value = value */
	mov r13, 0x800002e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cf0: /* paddr=0x1cf0 verbose=Init Data 800002e8: d2b023011416bb a_src=2=SRC_IMM a_offset_imm0=0x800002e8 b_src=2=SRC_IMM b_use_sp_imm1=0xd2b023 b_offset_imm0=0x11416bb ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xd2b023011416bb */
	mov r12, 0xd2b023011416bb /* STORE_IND: reg_value = value */
	mov r13, 0x800002e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cf4: /* paddr=0x1cf4 verbose=Init Data 800002f0: 30069320000a93 a_src=2=SRC_IMM a_offset_imm0=0x800002f0 b_src=2=SRC_IMM b_use_sp_imm1=0x300693 b_offset_imm0=0x20000a93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x30069320000a93 */
	mov r12, 0x30069320000a93 /* STORE_IND: reg_value = value */
	mov r13, 0x800002f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cf8: /* paddr=0x1cf8 verbose=Init Data 800002f8: 142b42300da9a3b a_src=2=SRC_IMM a_offset_imm0=0x800002f8 b_src=2=SRC_IMM b_use_sp_imm1=0x142b423 b_offset_imm0=0xda9a3b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x142b42300da9a3b */
	mov r12, 0x142b42300da9a3b /* STORE_IND: reg_value = value */
	mov r13, 0x800002f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cfc: /* paddr=0x1cfc verbose=Init Data 80000300: 800e1340000c93 a_src=2=SRC_IMM a_offset_imm0=0x80000300 b_src=2=SRC_IMM b_use_sp_imm1=0x800e13 b_offset_imm0=0x40000c93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x800e1340000c93 */
	mov r12, 0x800e1340000c93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000300 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d00: /* paddr=0x1d00 verbose=Init Data 80000308: 122b82301cc993b a_src=2=SRC_IMM a_offset_imm0=0x80000308 b_src=2=SRC_IMM b_use_sp_imm1=0x122b823 b_offset_imm0=0x1cc993b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x122b82301cc993b */
	mov r12, 0x122b82301cc993b /* STORE_IND: reg_value = value */
	mov r13, 0x80000308 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d04: /* paddr=0x1d04 verbose=Init Data 80000310: b7979300100793 a_src=2=SRC_IMM a_offset_imm0=0x80000310 b_src=2=SRC_IMM b_use_sp_imm1=0xb79793 b_offset_imm0=0x100793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb7979300100793 */
	mov r12, 0xb7979300100793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000310 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d08: /* paddr=0x1d08 verbose=Init Data 80000318: b7913b00100593 a_src=2=SRC_IMM a_offset_imm0=0x80000318 b_src=2=SRC_IMM b_use_sp_imm1=0xb7913b b_offset_imm0=0x100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb7913b00100593 */
	mov r12, 0xb7913b00100593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000318 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d0c: /* paddr=0x1d0c verbose=Init Data 80000320: 1009930022bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000320 b_src=2=SRC_IMM b_use_sp_imm1=0x100993 b_offset_imm0=0x22bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1009930022bc23 */
	mov r12, 0x1009930022bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000320 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d10: /* paddr=0x1d10 verbose=Init Data 80000328: 90049300c99993 a_src=2=SRC_IMM a_offset_imm0=0x80000328 b_src=2=SRC_IMM b_use_sp_imm1=0x900493 b_offset_imm0=0xc99993 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x90049300c99993 */
	mov r12, 0x90049300c99993 /* STORE_IND: reg_value = value */
	mov r13, 0x80000328 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d14: /* paddr=0x1d14 verbose=Init Data 80000330: 3c2b02300999e3b a_src=2=SRC_IMM a_offset_imm0=0x80000330 b_src=2=SRC_IMM b_use_sp_imm1=0x3c2b023 b_offset_imm0=0x999e3b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3c2b02300999e3b */
	mov r12, 0x3c2b02300999e3b /* STORE_IND: reg_value = value */
	mov r13, 0x80000330 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d18: /* paddr=0x1d18 verbose=Init Data 80000338: d3131300100313 a_src=2=SRC_IMM a_offset_imm0=0x80000338 b_src=2=SRC_IMM b_use_sp_imm1=0xd31313 b_offset_imm0=0x100313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xd3131300100313 */
	mov r12, 0xd3131300100313 /* STORE_IND: reg_value = value */
	mov r13, 0x80000338 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d1c: /* paddr=0x1d1c verbose=Init Data 80000340: 1431fbb01200a13 a_src=2=SRC_IMM a_offset_imm0=0x80000340 b_src=2=SRC_IMM b_use_sp_imm1=0x1431fbb b_offset_imm0=0x1200a13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1431fbb01200a13 */
	mov r12, 0x1431fbb01200a13 /* STORE_IND: reg_value = value */
	mov r13, 0x80000340 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d20: /* paddr=0x1d20 verbose=Init Data 80000348: 10009303f2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000348 b_src=2=SRC_IMM b_use_sp_imm1=0x100093 b_offset_imm0=0x3f2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10009303f2b423 */
	mov r12, 0x10009303f2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000348 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d24: /* paddr=0x1d24 verbose=Init Data 80000350: 80081300e09093 a_src=2=SRC_IMM a_offset_imm0=0x80000350 b_src=2=SRC_IMM b_use_sp_imm1=0x800813 b_offset_imm0=0xe09093 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x80081300e09093 */
	mov r12, 0x80081300e09093 /* STORE_IND: reg_value = value */
	mov r13, 0x80000350 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d28: /* paddr=0x1d28 verbose=Init Data 80000358: 232b823010091bb a_src=2=SRC_IMM a_offset_imm0=0x80000358 b_src=2=SRC_IMM b_use_sp_imm1=0x232b823 b_offset_imm0=0x10091bb ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x232b823010091bb */
	mov r12, 0x232b823010091bb /* STORE_IND: reg_value = value */
	mov r13, 0x80000358 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d2c: /* paddr=0x1d2c verbose=Init Data 80000360: f6969300100693 a_src=2=SRC_IMM a_offset_imm0=0x80000360 b_src=2=SRC_IMM b_use_sp_imm1=0xf69693 b_offset_imm0=0x100693 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf6969300100693 */
	mov r12, 0xf6969300100693 /* STORE_IND: reg_value = value */
	mov r13, 0x80000360 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d30: /* paddr=0x1d30 verbose=Init Data 80000368: 1d695bb00d00e93 a_src=2=SRC_IMM a_offset_imm0=0x80000368 b_src=2=SRC_IMM b_use_sp_imm1=0x1d695bb b_offset_imm0=0xd00e93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1d695bb00d00e93 */
	mov r12, 0x1d695bb00d00e93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000368 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d34: /* paddr=0x1d34 verbose=Init Data 80000370: 100b1302b2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000370 b_src=2=SRC_IMM b_use_sp_imm1=0x100b13 b_offset_imm0=0x2b2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x100b1302b2bc23 */
	mov r12, 0x100b1302b2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000370 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d38: /* paddr=0x1d38 verbose=Init Data 80000378: 113010b1b13 a_src=2=SRC_IMM a_offset_imm0=0x80000378 b_src=2=SRC_IMM b_use_sp_imm1=0x113 b_offset_imm0=0x10b1b13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x113010b1b13 */
	mov r12, 0x113010b1b13 /* STORE_IND: reg_value = value */
	mov r13, 0x80000378 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d3c: /* paddr=0x1d3c verbose=Init Data 80000380: 4a2b023002b153b a_src=2=SRC_IMM a_offset_imm0=0x80000380 b_src=2=SRC_IMM b_use_sp_imm1=0x4a2b023 b_offset_imm0=0x2b153b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x4a2b023002b153b */
	mov r12, 0x4a2b023002b153b /* STORE_IND: reg_value = value */
	mov r13, 0x80000380 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d40: /* paddr=0x1d40 verbose=Init Data 80000388: 111919300100193 a_src=2=SRC_IMM a_offset_imm0=0x80000388 b_src=2=SRC_IMM b_use_sp_imm1=0x1119193 b_offset_imm0=0x100193 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x111919300100193 */
	mov r12, 0x111919300100193 /* STORE_IND: reg_value = value */
	mov r13, 0x80000388 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d44: /* paddr=0x1d44 verbose=Init Data 80000390: 131923b00a00993 a_src=2=SRC_IMM a_offset_imm0=0x80000390 b_src=2=SRC_IMM b_use_sp_imm1=0x131923b b_offset_imm0=0xa00993 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x131923b00a00993 */
	mov r12, 0x131923b00a00993 /* STORE_IND: reg_value = value */
	mov r13, 0x80000390 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d48: /* paddr=0x1d48 verbose=Init Data 80000398: 100a130442b423 a_src=2=SRC_IMM a_offset_imm0=0x80000398 b_src=2=SRC_IMM b_use_sp_imm1=0x100a13 b_offset_imm0=0x442b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x100a130442b423 */
	mov r12, 0x100a130442b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000398 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d4c: /* paddr=0x1d4c verbose=Init Data 800003a0: 500313012a1a13 a_src=2=SRC_IMM a_offset_imm0=0x800003a0 b_src=2=SRC_IMM b_use_sp_imm1=0x500313 b_offset_imm0=0x12a1a13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x500313012a1a13 */
	mov r12, 0x500313012a1a13 /* STORE_IND: reg_value = value */
	mov r13, 0x800003a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d50: /* paddr=0x1d50 verbose=Init Data 800003a8: 482b823006a143b a_src=2=SRC_IMM a_offset_imm0=0x800003a8 b_src=2=SRC_IMM b_use_sp_imm1=0x482b823 b_offset_imm0=0x6a143b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x482b823006a143b */
	mov r12, 0x482b823006a143b /* STORE_IND: reg_value = value */
	mov r13, 0x800003a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d54: /* paddr=0x1d54 verbose=Init Data 800003b0: 134949300100493 a_src=2=SRC_IMM a_offset_imm0=0x800003b0 b_src=2=SRC_IMM b_use_sp_imm1=0x1349493 b_offset_imm0=0x100493 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x134949300100493 */
	mov r12, 0x134949300100493 /* STORE_IND: reg_value = value */
	mov r13, 0x800003b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d58: /* paddr=0x1d58 verbose=Init Data 800003b8: 1f4963b01b00f93 a_src=2=SRC_IMM a_offset_imm0=0x800003b8 b_src=2=SRC_IMM b_use_sp_imm1=0x1f4963b b_offset_imm0=0x1b00f93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1f4963b01b00f93 */
	mov r12, 0x1f4963b01b00f93 /* STORE_IND: reg_value = value */
	mov r13, 0x800003b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d5c: /* paddr=0x1d5c verbose=Init Data 800003c0: 100f1304c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x800003c0 b_src=2=SRC_IMM b_use_sp_imm1=0x100f13 b_offset_imm0=0x4c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x100f1304c2bc23 */
	mov r12, 0x100f1304c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x800003c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d60: /* paddr=0x1d60 verbose=Init Data 800003c8: 400213014f1f13 a_src=2=SRC_IMM a_offset_imm0=0x800003c8 b_src=2=SRC_IMM b_use_sp_imm1=0x400213 b_offset_imm0=0x14f1f13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x400213014f1f13 */
	mov r12, 0x400213014f1f13 /* STORE_IND: reg_value = value */
	mov r13, 0x800003c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d64: /* paddr=0x1d64 verbose=Init Data 800003d0: 782b023004f1c3b a_src=2=SRC_IMM a_offset_imm0=0x800003d0 b_src=2=SRC_IMM b_use_sp_imm1=0x782b023 b_offset_imm0=0x4f1c3b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x782b023004f1c3b */
	mov r12, 0x782b023004f1c3b /* STORE_IND: reg_value = value */
	mov r13, 0x800003d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d68: /* paddr=0x1d68 verbose=Init Data 800003d8: 15e9e9300100e93 a_src=2=SRC_IMM a_offset_imm0=0x800003d8 b_src=2=SRC_IMM b_use_sp_imm1=0x15e9e93 b_offset_imm0=0x100e93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x15e9e9300100e93 */
	mov r12, 0x15e9e9300100e93 /* STORE_IND: reg_value = value */
	mov r13, 0x800003d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d6c: /* paddr=0x1d6c verbose=Init Data 800003e0: 19e9bbb00800c93 a_src=2=SRC_IMM a_offset_imm0=0x800003e0 b_src=2=SRC_IMM b_use_sp_imm1=0x19e9bbb b_offset_imm0=0x800c93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x19e9bbb00800c93 */
	mov r12, 0x19e9bbb00800c93 /* STORE_IND: reg_value = value */
	mov r13, 0x800003e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d70: /* paddr=0x1d70 verbose=Init Data 800003e8: 130772b423 a_src=2=SRC_IMM a_offset_imm0=0x800003e8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x772b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130772b423 */
	mov r12, 0x130772b423 /* STORE_IND: reg_value = value */
	mov r13, 0x800003e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d74: /* paddr=0x1d74 verbose=Init Data 800003f0: 1801abb00600c13 a_src=2=SRC_IMM a_offset_imm0=0x800003f0 b_src=2=SRC_IMM b_use_sp_imm1=0x1801abb b_offset_imm0=0x600c13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1801abb00600c13 */
	mov r12, 0x1801abb00600c13 /* STORE_IND: reg_value = value */
	mov r13, 0x800003f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d78: /* paddr=0x1d78 verbose=Init Data 800003f8: 1002130752b823 a_src=2=SRC_IMM a_offset_imm0=0x800003f8 b_src=2=SRC_IMM b_use_sp_imm1=0x100213 b_offset_imm0=0x752b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1002130752b823 */
	mov r12, 0x1002130752b823 /* STORE_IND: reg_value = value */
	mov r13, 0x800003f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d7c: /* paddr=0x1d7c verbose=Init Data 80000400: 150091301721213 a_src=2=SRC_IMM a_offset_imm0=0x80000400 b_src=2=SRC_IMM b_use_sp_imm1=0x1500913 b_offset_imm0=0x1721213 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x150091301721213 */
	mov r12, 0x150091301721213 /* STORE_IND: reg_value = value */
	mov r13, 0x80000400 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d80: /* paddr=0x1d80 verbose=Init Data 80000408: 6f2bc23012217bb a_src=2=SRC_IMM a_offset_imm0=0x80000408 b_src=2=SRC_IMM b_use_sp_imm1=0x6f2bc23 b_offset_imm0=0x12217bb ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6f2bc23012217bb */
	mov r12, 0x6f2bc23012217bb /* STORE_IND: reg_value = value */
	mov r13, 0x80000408 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d84: /* paddr=0x1d84 verbose=Init Data 80000410: 185151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000410 b_src=2=SRC_IMM b_use_sp_imm1=0x1851513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x185151300100513 */
	mov r12, 0x185151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000410 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d88: /* paddr=0x1d88 verbose=Init Data 80000418: b5163b00b00593 a_src=2=SRC_IMM a_offset_imm0=0x80000418 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xb00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00b00593 */
	mov r12, 0xb5163b00b00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000418 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d8c: /* paddr=0x1d8c verbose=Init Data 80000420: 10051308c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000420 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x8c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051308c2b023 */
	mov r12, 0x10051308c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000420 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d90: /* paddr=0x1d90 verbose=Init Data 80000428: 150059301951513 a_src=2=SRC_IMM a_offset_imm0=0x80000428 b_src=2=SRC_IMM b_use_sp_imm1=0x1500593 b_offset_imm0=0x1951513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x150059301951513 */
	mov r12, 0x150059301951513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000428 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d94: /* paddr=0x1d94 verbose=Init Data 80000430: 8c2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000430 b_src=2=SRC_IMM b_use_sp_imm1=0x8c2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x8c2b42300b5163b */
	mov r12, 0x8c2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000430 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d98: /* paddr=0x1d98 verbose=Init Data 80000438: 1a5151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000438 b_src=2=SRC_IMM b_use_sp_imm1=0x1a51513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1a5151300100513 */
	mov r12, 0x1a5151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000438 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d9c: /* paddr=0x1d9c verbose=Init Data 80000440: b5163b01200593 a_src=2=SRC_IMM a_offset_imm0=0x80000440 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1200593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01200593 */
	mov r12, 0xb5163b01200593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000440 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1da0: /* paddr=0x1da0 verbose=Init Data 80000448: 10051308c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000448 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x8c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051308c2b823 */
	mov r12, 0x10051308c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000448 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1da4: /* paddr=0x1da4 verbose=Init Data 80000450: e0059301b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000450 b_src=2=SRC_IMM b_use_sp_imm1=0xe00593 b_offset_imm0=0x1b51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xe0059301b51513 */
	mov r12, 0xe0059301b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000450 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1da8: /* paddr=0x1da8 verbose=Init Data 80000458: 8c2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000458 b_src=2=SRC_IMM b_use_sp_imm1=0x8c2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x8c2bc2300b5163b */
	mov r12, 0x8c2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000458 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dac: /* paddr=0x1dac verbose=Init Data 80000460: 1d5151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000460 b_src=2=SRC_IMM b_use_sp_imm1=0x1d51513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1d5151300100513 */
	mov r12, 0x1d5151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000460 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1db0: /* paddr=0x1db0 verbose=Init Data 80000468: b5163b01d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000468 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1d00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01d00593 */
	mov r12, 0xb5163b01d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000468 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1db4: /* paddr=0x1db4 verbose=Init Data 80000470: 1005130ac2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000470 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0xac2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005130ac2b023 */
	mov r12, 0x1005130ac2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000470 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1db8: /* paddr=0x1db8 verbose=Init Data 80000478: e0059301e51513 a_src=2=SRC_IMM a_offset_imm0=0x80000478 b_src=2=SRC_IMM b_use_sp_imm1=0xe00593 b_offset_imm0=0x1e51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xe0059301e51513 */
	mov r12, 0xe0059301e51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000478 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dbc: /* paddr=0x1dbc verbose=Init Data 80000480: ac2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000480 b_src=2=SRC_IMM b_use_sp_imm1=0xac2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xac2b42300b5163b */
	mov r12, 0xac2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000480 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dc0: /* paddr=0x1dc0 verbose=Init Data 80000488: 1f5151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000488 b_src=2=SRC_IMM b_use_sp_imm1=0x1f51513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1f5151300100513 */
	mov r12, 0x1f5151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000488 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dc4: /* paddr=0x1dc4 verbose=Init Data 80000490: b5163b01200593 a_src=2=SRC_IMM a_offset_imm0=0x80000490 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1200593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01200593 */
	mov r12, 0xb5163b01200593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000490 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dc8: /* paddr=0x1dc8 verbose=Init Data 80000498: 1005130ac2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000498 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0xac2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005130ac2b823 */
	mov r12, 0x1005130ac2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000498 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dcc: /* paddr=0x1dcc verbose=Init Data 800004a0: 130059302051513 a_src=2=SRC_IMM a_offset_imm0=0x800004a0 b_src=2=SRC_IMM b_use_sp_imm1=0x1300593 b_offset_imm0=0x2051513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130059302051513 */
	mov r12, 0x130059302051513 /* STORE_IND: reg_value = value */
	mov r13, 0x800004a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dd0: /* paddr=0x1dd0 verbose=Init Data 800004a8: ac2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x800004a8 b_src=2=SRC_IMM b_use_sp_imm1=0xac2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xac2bc2300b5163b */
	mov r12, 0xac2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x800004a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dd4: /* paddr=0x1dd4 verbose=Init Data 800004b0: 215151300100513 a_src=2=SRC_IMM a_offset_imm0=0x800004b0 b_src=2=SRC_IMM b_use_sp_imm1=0x2151513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x215151300100513 */
	mov r12, 0x215151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x800004b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dd8: /* paddr=0x1dd8 verbose=Init Data 800004b8: b5163b01f00593 a_src=2=SRC_IMM a_offset_imm0=0x800004b8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1f00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01f00593 */
	mov r12, 0xb5163b01f00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800004b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ddc: /* paddr=0x1ddc verbose=Init Data 800004c0: 1005130cc2b023 a_src=2=SRC_IMM a_offset_imm0=0x800004c0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0xcc2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005130cc2b023 */
	mov r12, 0x1005130cc2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x800004c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1de0: /* paddr=0x1de0 verbose=Init Data 800004c8: 1b0059302251513 a_src=2=SRC_IMM a_offset_imm0=0x800004c8 b_src=2=SRC_IMM b_use_sp_imm1=0x1b00593 b_offset_imm0=0x2251513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1b0059302251513 */
	mov r12, 0x1b0059302251513 /* STORE_IND: reg_value = value */
	mov r13, 0x800004c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1de4: /* paddr=0x1de4 verbose=Init Data 800004d0: cc2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x800004d0 b_src=2=SRC_IMM b_use_sp_imm1=0xcc2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xcc2b42300b5163b */
	mov r12, 0xcc2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x800004d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1de8: /* paddr=0x1de8 verbose=Init Data 800004d8: 235151300100513 a_src=2=SRC_IMM a_offset_imm0=0x800004d8 b_src=2=SRC_IMM b_use_sp_imm1=0x2351513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x235151300100513 */
	mov r12, 0x235151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x800004d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dec: /* paddr=0x1dec verbose=Init Data 800004e0: b5163b01700593 a_src=2=SRC_IMM a_offset_imm0=0x800004e0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01700593 */
	mov r12, 0xb5163b01700593 /* STORE_IND: reg_value = value */
	mov r13, 0x800004e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1df0: /* paddr=0x1df0 verbose=Init Data 800004e8: 1005130cc2b823 a_src=2=SRC_IMM a_offset_imm0=0x800004e8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0xcc2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005130cc2b823 */
	mov r12, 0x1005130cc2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x800004e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1df4: /* paddr=0x1df4 verbose=Init Data 800004f0: 90059302451513 a_src=2=SRC_IMM a_offset_imm0=0x800004f0 b_src=2=SRC_IMM b_use_sp_imm1=0x900593 b_offset_imm0=0x2451513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x90059302451513 */
	mov r12, 0x90059302451513 /* STORE_IND: reg_value = value */
	mov r13, 0x800004f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1df8: /* paddr=0x1df8 verbose=Init Data 800004f8: cc2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x800004f8 b_src=2=SRC_IMM b_use_sp_imm1=0xcc2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xcc2bc2300b5163b */
	mov r12, 0xcc2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x800004f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dfc: /* paddr=0x1dfc verbose=Init Data 80000500: 255151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000500 b_src=2=SRC_IMM b_use_sp_imm1=0x2551513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x255151300100513 */
	mov r12, 0x255151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000500 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e00: /* paddr=0x1e00 verbose=Init Data 80000508: b5163b00100593 a_src=2=SRC_IMM a_offset_imm0=0x80000508 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00100593 */
	mov r12, 0xb5163b00100593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000508 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e04: /* paddr=0x1e04 verbose=Init Data 80000510: 1005130ec2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000510 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0xec2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005130ec2b023 */
	mov r12, 0x1005130ec2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000510 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e08: /* paddr=0x1e08 verbose=Init Data 80000518: 59302651513 a_src=2=SRC_IMM a_offset_imm0=0x80000518 b_src=2=SRC_IMM b_use_sp_imm1=0x593 b_offset_imm0=0x2651513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x59302651513 */
	mov r12, 0x59302651513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000518 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e0c: /* paddr=0x1e0c verbose=Init Data 80000520: ec2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000520 b_src=2=SRC_IMM b_use_sp_imm1=0xec2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xec2b42300b5163b */
	mov r12, 0xec2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000520 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e10: /* paddr=0x1e10 verbose=Init Data 80000528: 275151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000528 b_src=2=SRC_IMM b_use_sp_imm1=0x2751513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x275151300100513 */
	mov r12, 0x275151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000528 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e14: /* paddr=0x1e14 verbose=Init Data 80000530: b5163b00800593 a_src=2=SRC_IMM a_offset_imm0=0x80000530 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x800593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00800593 */
	mov r12, 0xb5163b00800593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000530 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e18: /* paddr=0x1e18 verbose=Init Data 80000538: 1005130ec2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000538 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0xec2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005130ec2b823 */
	mov r12, 0x1005130ec2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000538 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e1c: /* paddr=0x1e1c verbose=Init Data 80000540: 80059302851513 a_src=2=SRC_IMM a_offset_imm0=0x80000540 b_src=2=SRC_IMM b_use_sp_imm1=0x800593 b_offset_imm0=0x2851513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x80059302851513 */
	mov r12, 0x80059302851513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000540 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e20: /* paddr=0x1e20 verbose=Init Data 80000548: ec2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000548 b_src=2=SRC_IMM b_use_sp_imm1=0xec2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xec2bc2300b5163b */
	mov r12, 0xec2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000548 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e24: /* paddr=0x1e24 verbose=Init Data 80000550: 295151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000550 b_src=2=SRC_IMM b_use_sp_imm1=0x2951513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x295151300100513 */
	mov r12, 0x295151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000550 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e28: /* paddr=0x1e28 verbose=Init Data 80000558: b5163b00000593 a_src=2=SRC_IMM a_offset_imm0=0x80000558 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00000593 */
	mov r12, 0xb5163b00000593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000558 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e2c: /* paddr=0x1e2c verbose=Init Data 80000560: 10051310c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000560 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x10c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051310c2b023 */
	mov r12, 0x10051310c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000560 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e30: /* paddr=0x1e30 verbose=Init Data 80000568: b0059302a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000568 b_src=2=SRC_IMM b_use_sp_imm1=0xb00593 b_offset_imm0=0x2a51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb0059302a51513 */
	mov r12, 0xb0059302a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000568 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e34: /* paddr=0x1e34 verbose=Init Data 80000570: 10c2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000570 b_src=2=SRC_IMM b_use_sp_imm1=0x10c2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10c2b42300b5163b */
	mov r12, 0x10c2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000570 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e38: /* paddr=0x1e38 verbose=Init Data 80000578: 2b5151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000578 b_src=2=SRC_IMM b_use_sp_imm1=0x2b51513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2b5151300100513 */
	mov r12, 0x2b5151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000578 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e3c: /* paddr=0x1e3c verbose=Init Data 80000580: b5163b00400593 a_src=2=SRC_IMM a_offset_imm0=0x80000580 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x400593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00400593 */
	mov r12, 0xb5163b00400593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000580 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e40: /* paddr=0x1e40 verbose=Init Data 80000588: 10051310c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000588 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x10c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051310c2b823 */
	mov r12, 0x10051310c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000588 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e44: /* paddr=0x1e44 verbose=Init Data 80000590: 60059302c51513 a_src=2=SRC_IMM a_offset_imm0=0x80000590 b_src=2=SRC_IMM b_use_sp_imm1=0x600593 b_offset_imm0=0x2c51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x60059302c51513 */
	mov r12, 0x60059302c51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000590 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e48: /* paddr=0x1e48 verbose=Init Data 80000598: 10c2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000598 b_src=2=SRC_IMM b_use_sp_imm1=0x10c2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10c2bc2300b5163b */
	mov r12, 0x10c2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000598 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e4c: /* paddr=0x1e4c verbose=Init Data 800005a0: 2d5151300100513 a_src=2=SRC_IMM a_offset_imm0=0x800005a0 b_src=2=SRC_IMM b_use_sp_imm1=0x2d51513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2d5151300100513 */
	mov r12, 0x2d5151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x800005a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e50: /* paddr=0x1e50 verbose=Init Data 800005a8: b5163b00c00593 a_src=2=SRC_IMM a_offset_imm0=0x800005a8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xc00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00c00593 */
	mov r12, 0xb5163b00c00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800005a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e54: /* paddr=0x1e54 verbose=Init Data 800005b0: 10051312c2b023 a_src=2=SRC_IMM a_offset_imm0=0x800005b0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x12c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051312c2b023 */
	mov r12, 0x10051312c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x800005b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e58: /* paddr=0x1e58 verbose=Init Data 800005b8: d0059302e51513 a_src=2=SRC_IMM a_offset_imm0=0x800005b8 b_src=2=SRC_IMM b_use_sp_imm1=0xd00593 b_offset_imm0=0x2e51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xd0059302e51513 */
	mov r12, 0xd0059302e51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800005b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e5c: /* paddr=0x1e5c verbose=Init Data 800005c0: 12c2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x800005c0 b_src=2=SRC_IMM b_use_sp_imm1=0x12c2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x12c2b42300b5163b */
	mov r12, 0x12c2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x800005c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e60: /* paddr=0x1e60 verbose=Init Data 800005c8: 2f5151300100513 a_src=2=SRC_IMM a_offset_imm0=0x800005c8 b_src=2=SRC_IMM b_use_sp_imm1=0x2f51513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2f5151300100513 */
	mov r12, 0x2f5151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x800005c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e64: /* paddr=0x1e64 verbose=Init Data 800005d0: b5163b01e00593 a_src=2=SRC_IMM a_offset_imm0=0x800005d0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1e00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01e00593 */
	mov r12, 0xb5163b01e00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800005d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e68: /* paddr=0x1e68 verbose=Init Data 800005d8: 10051312c2b823 a_src=2=SRC_IMM a_offset_imm0=0x800005d8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x12c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051312c2b823 */
	mov r12, 0x10051312c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x800005d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e6c: /* paddr=0x1e6c verbose=Init Data 800005e0: 10059303051513 a_src=2=SRC_IMM a_offset_imm0=0x800005e0 b_src=2=SRC_IMM b_use_sp_imm1=0x100593 b_offset_imm0=0x3051513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10059303051513 */
	mov r12, 0x10059303051513 /* STORE_IND: reg_value = value */
	mov r13, 0x800005e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e70: /* paddr=0x1e70 verbose=Init Data 800005e8: 12c2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x800005e8 b_src=2=SRC_IMM b_use_sp_imm1=0x12c2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x12c2bc2300b5163b */
	mov r12, 0x12c2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x800005e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e74: /* paddr=0x1e74 verbose=Init Data 800005f0: 315151300100513 a_src=2=SRC_IMM a_offset_imm0=0x800005f0 b_src=2=SRC_IMM b_use_sp_imm1=0x3151513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x315151300100513 */
	mov r12, 0x315151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x800005f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e78: /* paddr=0x1e78 verbose=Init Data 800005f8: b5163b00e00593 a_src=2=SRC_IMM a_offset_imm0=0x800005f8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xe00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00e00593 */
	mov r12, 0xb5163b00e00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800005f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e7c: /* paddr=0x1e7c verbose=Init Data 80000600: 10051314c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000600 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x14c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051314c2b023 */
	mov r12, 0x10051314c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000600 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e80: /* paddr=0x1e80 verbose=Init Data 80000608: 150059303251513 a_src=2=SRC_IMM a_offset_imm0=0x80000608 b_src=2=SRC_IMM b_use_sp_imm1=0x1500593 b_offset_imm0=0x3251513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x150059303251513 */
	mov r12, 0x150059303251513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000608 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e84: /* paddr=0x1e84 verbose=Init Data 80000610: 14c2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000610 b_src=2=SRC_IMM b_use_sp_imm1=0x14c2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x14c2b42300b5163b */
	mov r12, 0x14c2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000610 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e88: /* paddr=0x1e88 verbose=Init Data 80000618: 335151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000618 b_src=2=SRC_IMM b_use_sp_imm1=0x3351513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x335151300100513 */
	mov r12, 0x335151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000618 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e8c: /* paddr=0x1e8c verbose=Init Data 80000620: b5163b00b00593 a_src=2=SRC_IMM a_offset_imm0=0x80000620 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xb00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00b00593 */
	mov r12, 0xb5163b00b00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000620 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e90: /* paddr=0x1e90 verbose=Init Data 80000628: 10051314c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000628 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x14c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051314c2b823 */
	mov r12, 0x10051314c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000628 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e94: /* paddr=0x1e94 verbose=Init Data 80000630: 100059303451513 a_src=2=SRC_IMM a_offset_imm0=0x80000630 b_src=2=SRC_IMM b_use_sp_imm1=0x1000593 b_offset_imm0=0x3451513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x100059303451513 */
	mov r12, 0x100059303451513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000630 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e98: /* paddr=0x1e98 verbose=Init Data 80000638: 14c2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000638 b_src=2=SRC_IMM b_use_sp_imm1=0x14c2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x14c2bc2300b5163b */
	mov r12, 0x14c2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000638 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e9c: /* paddr=0x1e9c verbose=Init Data 80000640: 355151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000640 b_src=2=SRC_IMM b_use_sp_imm1=0x3551513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x355151300100513 */
	mov r12, 0x355151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000640 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ea0: /* paddr=0x1ea0 verbose=Init Data 80000648: b5163b01300593 a_src=2=SRC_IMM a_offset_imm0=0x80000648 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1300593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01300593 */
	mov r12, 0xb5163b01300593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000648 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ea4: /* paddr=0x1ea4 verbose=Init Data 80000650: 10051316c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000650 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x16c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051316c2b023 */
	mov r12, 0x10051316c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000650 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ea8: /* paddr=0x1ea8 verbose=Init Data 80000658: 110059303651513 a_src=2=SRC_IMM a_offset_imm0=0x80000658 b_src=2=SRC_IMM b_use_sp_imm1=0x1100593 b_offset_imm0=0x3651513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x110059303651513 */
	mov r12, 0x110059303651513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000658 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eac: /* paddr=0x1eac verbose=Init Data 80000660: 16c2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000660 b_src=2=SRC_IMM b_use_sp_imm1=0x16c2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x16c2b42300b5163b */
	mov r12, 0x16c2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000660 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eb0: /* paddr=0x1eb0 verbose=Init Data 80000668: 375151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000668 b_src=2=SRC_IMM b_use_sp_imm1=0x3751513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x375151300100513 */
	mov r12, 0x375151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000668 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eb4: /* paddr=0x1eb4 verbose=Init Data 80000670: b5163b00800593 a_src=2=SRC_IMM a_offset_imm0=0x80000670 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x800593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00800593 */
	mov r12, 0xb5163b00800593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000670 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eb8: /* paddr=0x1eb8 verbose=Init Data 80000678: 10051316c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000678 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x16c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051316c2b823 */
	mov r12, 0x10051316c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000678 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ebc: /* paddr=0x1ebc verbose=Init Data 80000680: 110059303851513 a_src=2=SRC_IMM a_offset_imm0=0x80000680 b_src=2=SRC_IMM b_use_sp_imm1=0x1100593 b_offset_imm0=0x3851513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x110059303851513 */
	mov r12, 0x110059303851513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000680 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ec0: /* paddr=0x1ec0 verbose=Init Data 80000688: 16c2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000688 b_src=2=SRC_IMM b_use_sp_imm1=0x16c2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x16c2bc2300b5163b */
	mov r12, 0x16c2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000688 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ec4: /* paddr=0x1ec4 verbose=Init Data 80000690: 395151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000690 b_src=2=SRC_IMM b_use_sp_imm1=0x3951513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x395151300100513 */
	mov r12, 0x395151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000690 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ec8: /* paddr=0x1ec8 verbose=Init Data 80000698: b5163b00100593 a_src=2=SRC_IMM a_offset_imm0=0x80000698 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00100593 */
	mov r12, 0xb5163b00100593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000698 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ecc: /* paddr=0x1ecc verbose=Init Data 800006a0: 10051318c2b023 a_src=2=SRC_IMM a_offset_imm0=0x800006a0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x18c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051318c2b023 */
	mov r12, 0x10051318c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x800006a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ed0: /* paddr=0x1ed0 verbose=Init Data 800006a8: 60059303b51513 a_src=2=SRC_IMM a_offset_imm0=0x800006a8 b_src=2=SRC_IMM b_use_sp_imm1=0x600593 b_offset_imm0=0x3b51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x60059303b51513 */
	mov r12, 0x60059303b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800006a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ed4: /* paddr=0x1ed4 verbose=Init Data 800006b0: 18c2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x800006b0 b_src=2=SRC_IMM b_use_sp_imm1=0x18c2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x18c2b42300b5163b */
	mov r12, 0x18c2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x800006b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ed8: /* paddr=0x1ed8 verbose=Init Data 800006b8: 3c5151300100513 a_src=2=SRC_IMM a_offset_imm0=0x800006b8 b_src=2=SRC_IMM b_use_sp_imm1=0x3c51513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3c5151300100513 */
	mov r12, 0x3c5151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x800006b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1edc: /* paddr=0x1edc verbose=Init Data 800006c0: b5163b01300593 a_src=2=SRC_IMM a_offset_imm0=0x800006c0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1300593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01300593 */
	mov r12, 0xb5163b01300593 /* STORE_IND: reg_value = value */
	mov r13, 0x800006c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ee0: /* paddr=0x1ee0 verbose=Init Data 800006c8: 10051318c2b823 a_src=2=SRC_IMM a_offset_imm0=0x800006c8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x18c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051318c2b823 */
	mov r12, 0x10051318c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x800006c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ee4: /* paddr=0x1ee4 verbose=Init Data 800006d0: a0059303d51513 a_src=2=SRC_IMM a_offset_imm0=0x800006d0 b_src=2=SRC_IMM b_use_sp_imm1=0xa00593 b_offset_imm0=0x3d51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0059303d51513 */
	mov r12, 0xa0059303d51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800006d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ee8: /* paddr=0x1ee8 verbose=Init Data 800006d8: 18c2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x800006d8 b_src=2=SRC_IMM b_use_sp_imm1=0x18c2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x18c2bc2300b5163b */
	mov r12, 0x18c2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x800006d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eec: /* paddr=0x1eec verbose=Init Data 800006e0: 3e5151300100513 a_src=2=SRC_IMM a_offset_imm0=0x800006e0 b_src=2=SRC_IMM b_use_sp_imm1=0x3e51513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3e5151300100513 */
	mov r12, 0x3e5151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x800006e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ef0: /* paddr=0x1ef0 verbose=Init Data 800006e8: b5163b01f00593 a_src=2=SRC_IMM a_offset_imm0=0x800006e8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1f00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01f00593 */
	mov r12, 0xb5163b01f00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800006e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ef4: /* paddr=0x1ef4 verbose=Init Data 800006f0: ffe005131ac2b023 a_src=2=SRC_IMM a_offset_imm0=0x800006f0 b_src=2=SRC_IMM b_use_sp_imm1=0xffe00513 b_offset_imm0=0x1ac2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xffe005131ac2b023 */
	mov r12, 0xffe005131ac2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x800006f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ef8: /* paddr=0x1ef8 verbose=Init Data 800006f8: b5163b00d00593 a_src=2=SRC_IMM a_offset_imm0=0x800006f8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xd00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00d00593 */
	mov r12, 0xb5163b00d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800006f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1efc: /* paddr=0x1efc verbose=Init Data 80000700: ffd005131ac2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000700 b_src=2=SRC_IMM b_use_sp_imm1=0xffd00513 b_offset_imm0=0x1ac2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xffd005131ac2b423 */
	mov r12, 0xffd005131ac2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000700 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f00: /* paddr=0x1f00 verbose=Init Data 80000708: b5163b00d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000708 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xd00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00d00593 */
	mov r12, 0xb5163b00d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000708 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f04: /* paddr=0x1f04 verbose=Init Data 80000710: ffb005131ac2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000710 b_src=2=SRC_IMM b_use_sp_imm1=0xffb00513 b_offset_imm0=0x1ac2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xffb005131ac2b823 */
	mov r12, 0xffb005131ac2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000710 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f08: /* paddr=0x1f08 verbose=Init Data 80000718: b5163b00d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000718 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xd00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00d00593 */
	mov r12, 0xb5163b00d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000718 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f0c: /* paddr=0x1f0c verbose=Init Data 80000720: ff7005131ac2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000720 b_src=2=SRC_IMM b_use_sp_imm1=0xff700513 b_offset_imm0=0x1ac2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xff7005131ac2bc23 */
	mov r12, 0xff7005131ac2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000720 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f10: /* paddr=0x1f10 verbose=Init Data 80000728: b5163b00300593 a_src=2=SRC_IMM a_offset_imm0=0x80000728 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x300593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00300593 */
	mov r12, 0xb5163b00300593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000728 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f14: /* paddr=0x1f14 verbose=Init Data 80000730: fef005131cc2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000730 b_src=2=SRC_IMM b_use_sp_imm1=0xfef00513 b_offset_imm0=0x1cc2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfef005131cc2b023 */
	mov r12, 0xfef005131cc2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000730 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f18: /* paddr=0x1f18 verbose=Init Data 80000738: b5163b00400593 a_src=2=SRC_IMM a_offset_imm0=0x80000738 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x400593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00400593 */
	mov r12, 0xb5163b00400593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000738 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f1c: /* paddr=0x1f1c verbose=Init Data 80000740: fdf005131cc2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000740 b_src=2=SRC_IMM b_use_sp_imm1=0xfdf00513 b_offset_imm0=0x1cc2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfdf005131cc2b423 */
	mov r12, 0xfdf005131cc2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000740 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f20: /* paddr=0x1f20 verbose=Init Data 80000748: b5163b00700593 a_src=2=SRC_IMM a_offset_imm0=0x80000748 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00700593 */
	mov r12, 0xb5163b00700593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000748 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f24: /* paddr=0x1f24 verbose=Init Data 80000750: fbf005131cc2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000750 b_src=2=SRC_IMM b_use_sp_imm1=0xfbf00513 b_offset_imm0=0x1cc2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfbf005131cc2b823 */
	mov r12, 0xfbf005131cc2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000750 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f28: /* paddr=0x1f28 verbose=Init Data 80000758: b5163b00700593 a_src=2=SRC_IMM a_offset_imm0=0x80000758 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00700593 */
	mov r12, 0xb5163b00700593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000758 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f2c: /* paddr=0x1f2c verbose=Init Data 80000760: f7f005131cc2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000760 b_src=2=SRC_IMM b_use_sp_imm1=0xf7f00513 b_offset_imm0=0x1cc2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf7f005131cc2bc23 */
	mov r12, 0xf7f005131cc2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000760 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f30: /* paddr=0x1f30 verbose=Init Data 80000768: b5163b01200593 a_src=2=SRC_IMM a_offset_imm0=0x80000768 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1200593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01200593 */
	mov r12, 0xb5163b01200593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000768 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f34: /* paddr=0x1f34 verbose=Init Data 80000770: eff005131ec2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000770 b_src=2=SRC_IMM b_use_sp_imm1=0xeff00513 b_offset_imm0=0x1ec2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xeff005131ec2b023 */
	mov r12, 0xeff005131ec2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000770 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f38: /* paddr=0x1f38 verbose=Init Data 80000778: b5163b00800593 a_src=2=SRC_IMM a_offset_imm0=0x80000778 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x800593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00800593 */
	mov r12, 0xb5163b00800593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000778 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f3c: /* paddr=0x1f3c verbose=Init Data 80000780: dff005131ec2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000780 b_src=2=SRC_IMM b_use_sp_imm1=0xdff00513 b_offset_imm0=0x1ec2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdff005131ec2b423 */
	mov r12, 0xdff005131ec2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000780 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f40: /* paddr=0x1f40 verbose=Init Data 80000788: b5163b00600593 a_src=2=SRC_IMM a_offset_imm0=0x80000788 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x600593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00600593 */
	mov r12, 0xb5163b00600593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000788 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f44: /* paddr=0x1f44 verbose=Init Data 80000790: bff005131ec2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000790 b_src=2=SRC_IMM b_use_sp_imm1=0xbff00513 b_offset_imm0=0x1ec2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xbff005131ec2b823 */
	mov r12, 0xbff005131ec2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000790 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f48: /* paddr=0x1f48 verbose=Init Data 80000798: b5163b00200593 a_src=2=SRC_IMM a_offset_imm0=0x80000798 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x200593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00200593 */
	mov r12, 0xb5163b00200593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000798 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f4c: /* paddr=0x1f4c verbose=Init Data 800007a0: 1005131ec2bc23 a_src=2=SRC_IMM a_offset_imm0=0x800007a0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x1ec2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005131ec2bc23 */
	mov r12, 0x1005131ec2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x800007a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f50: /* paddr=0x1f50 verbose=Init Data 800007a8: fff5451300b51513 a_src=2=SRC_IMM a_offset_imm0=0x800007a8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451300b51513 */
	mov r12, 0xfff5451300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800007a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f54: /* paddr=0x1f54 verbose=Init Data 800007b0: b5163b01e00593 a_src=2=SRC_IMM a_offset_imm0=0x800007b0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1e00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01e00593 */
	mov r12, 0xb5163b01e00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800007b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f58: /* paddr=0x1f58 verbose=Init Data 800007b8: 10051320c2b023 a_src=2=SRC_IMM a_offset_imm0=0x800007b8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x20c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051320c2b023 */
	mov r12, 0x10051320c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x800007b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f5c: /* paddr=0x1f5c verbose=Init Data 800007c0: fff5451300c51513 a_src=2=SRC_IMM a_offset_imm0=0x800007c0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0xc51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451300c51513 */
	mov r12, 0xfff5451300c51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800007c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f60: /* paddr=0x1f60 verbose=Init Data 800007c8: b5163b00500593 a_src=2=SRC_IMM a_offset_imm0=0x800007c8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x500593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00500593 */
	mov r12, 0xb5163b00500593 /* STORE_IND: reg_value = value */
	mov r13, 0x800007c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f64: /* paddr=0x1f64 verbose=Init Data 800007d0: 10051320c2b423 a_src=2=SRC_IMM a_offset_imm0=0x800007d0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x20c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051320c2b423 */
	mov r12, 0x10051320c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x800007d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f68: /* paddr=0x1f68 verbose=Init Data 800007d8: fff5451300d51513 a_src=2=SRC_IMM a_offset_imm0=0x800007d8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0xd51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451300d51513 */
	mov r12, 0xfff5451300d51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800007d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f6c: /* paddr=0x1f6c verbose=Init Data 800007e0: b5163b00500593 a_src=2=SRC_IMM a_offset_imm0=0x800007e0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x500593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00500593 */
	mov r12, 0xb5163b00500593 /* STORE_IND: reg_value = value */
	mov r13, 0x800007e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f70: /* paddr=0x1f70 verbose=Init Data 800007e8: 10051320c2b823 a_src=2=SRC_IMM a_offset_imm0=0x800007e8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x20c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051320c2b823 */
	mov r12, 0x10051320c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x800007e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f74: /* paddr=0x1f74 verbose=Init Data 800007f0: fff5451300e51513 a_src=2=SRC_IMM a_offset_imm0=0x800007f0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0xe51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451300e51513 */
	mov r12, 0xfff5451300e51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800007f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f78: /* paddr=0x1f78 verbose=Init Data 800007f8: b5163b00700593 a_src=2=SRC_IMM a_offset_imm0=0x800007f8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00700593 */
	mov r12, 0xb5163b00700593 /* STORE_IND: reg_value = value */
	mov r13, 0x800007f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f7c: /* paddr=0x1f7c verbose=Init Data 80000800: 10051320c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000800 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x20c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051320c2bc23 */
	mov r12, 0x10051320c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000800 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f80: /* paddr=0x1f80 verbose=Init Data 80000808: fff5451300f51513 a_src=2=SRC_IMM a_offset_imm0=0x80000808 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0xf51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451300f51513 */
	mov r12, 0xfff5451300f51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000808 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f84: /* paddr=0x1f84 verbose=Init Data 80000810: b5163b01300593 a_src=2=SRC_IMM a_offset_imm0=0x80000810 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1300593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01300593 */
	mov r12, 0xb5163b01300593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000810 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f88: /* paddr=0x1f88 verbose=Init Data 80000818: 10051322c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000818 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x22c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051322c2b023 */
	mov r12, 0x10051322c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000818 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f8c: /* paddr=0x1f8c verbose=Init Data 80000820: fff5451301051513 a_src=2=SRC_IMM a_offset_imm0=0x80000820 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1051513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301051513 */
	mov r12, 0xfff5451301051513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000820 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f90: /* paddr=0x1f90 verbose=Init Data 80000828: b5163b01100593 a_src=2=SRC_IMM a_offset_imm0=0x80000828 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01100593 */
	mov r12, 0xb5163b01100593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000828 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f94: /* paddr=0x1f94 verbose=Init Data 80000830: 10051322c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000830 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x22c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051322c2b423 */
	mov r12, 0x10051322c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000830 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f98: /* paddr=0x1f98 verbose=Init Data 80000838: fff5451301151513 a_src=2=SRC_IMM a_offset_imm0=0x80000838 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1151513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301151513 */
	mov r12, 0xfff5451301151513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000838 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f9c: /* paddr=0x1f9c verbose=Init Data 80000840: b5163b01d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000840 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1d00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01d00593 */
	mov r12, 0xb5163b01d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000840 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fa0: /* paddr=0x1fa0 verbose=Init Data 80000848: 10051322c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000848 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x22c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051322c2b823 */
	mov r12, 0x10051322c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000848 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fa4: /* paddr=0x1fa4 verbose=Init Data 80000850: fff5451301251513 a_src=2=SRC_IMM a_offset_imm0=0x80000850 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1251513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301251513 */
	mov r12, 0xfff5451301251513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000850 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fa8: /* paddr=0x1fa8 verbose=Init Data 80000858: b5163b00800593 a_src=2=SRC_IMM a_offset_imm0=0x80000858 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x800593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00800593 */
	mov r12, 0xb5163b00800593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000858 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fac: /* paddr=0x1fac verbose=Init Data 80000860: 10051322c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000860 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x22c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051322c2bc23 */
	mov r12, 0x10051322c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000860 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fb0: /* paddr=0x1fb0 verbose=Init Data 80000868: fff5451303751513 a_src=2=SRC_IMM a_offset_imm0=0x80000868 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3751513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303751513 */
	mov r12, 0xfff5451303751513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000868 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fb4: /* paddr=0x1fb4 verbose=Init Data 80000870: b5163b00600593 a_src=2=SRC_IMM a_offset_imm0=0x80000870 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x600593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00600593 */
	mov r12, 0xb5163b00600593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000870 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fb8: /* paddr=0x1fb8 verbose=Init Data 80000878: 10051324c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000878 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x24c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051324c2b023 */
	mov r12, 0x10051324c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000878 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fbc: /* paddr=0x1fbc verbose=Init Data 80000880: fff5451303851513 a_src=2=SRC_IMM a_offset_imm0=0x80000880 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3851513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303851513 */
	mov r12, 0xfff5451303851513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000880 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fc0: /* paddr=0x1fc0 verbose=Init Data 80000888: b5163b01700593 a_src=2=SRC_IMM a_offset_imm0=0x80000888 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01700593 */
	mov r12, 0xb5163b01700593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000888 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fc4: /* paddr=0x1fc4 verbose=Init Data 80000890: 10051324c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000890 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x24c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051324c2b423 */
	mov r12, 0x10051324c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000890 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fc8: /* paddr=0x1fc8 verbose=Init Data 80000898: fff5451303951513 a_src=2=SRC_IMM a_offset_imm0=0x80000898 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3951513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303951513 */
	mov r12, 0xfff5451303951513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000898 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fcc: /* paddr=0x1fcc verbose=Init Data 800008a0: b5163b01b00593 a_src=2=SRC_IMM a_offset_imm0=0x800008a0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1b00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01b00593 */
	mov r12, 0xb5163b01b00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800008a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fd0: /* paddr=0x1fd0 verbose=Init Data 800008a8: 10051324c2b823 a_src=2=SRC_IMM a_offset_imm0=0x800008a8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x24c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051324c2b823 */
	mov r12, 0x10051324c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x800008a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fd4: /* paddr=0x1fd4 verbose=Init Data 800008b0: fff5451303a51513 a_src=2=SRC_IMM a_offset_imm0=0x800008b0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3a51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303a51513 */
	mov r12, 0xfff5451303a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800008b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fd8: /* paddr=0x1fd8 verbose=Init Data 800008b8: b5163b00700593 a_src=2=SRC_IMM a_offset_imm0=0x800008b8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00700593 */
	mov r12, 0xb5163b00700593 /* STORE_IND: reg_value = value */
	mov r13, 0x800008b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fdc: /* paddr=0x1fdc verbose=Init Data 800008c0: 10051324c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x800008c0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x24c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051324c2bc23 */
	mov r12, 0x10051324c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x800008c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fe0: /* paddr=0x1fe0 verbose=Init Data 800008c8: fff5451303b51513 a_src=2=SRC_IMM a_offset_imm0=0x800008c8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3b51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303b51513 */
	mov r12, 0xfff5451303b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800008c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fe4: /* paddr=0x1fe4 verbose=Init Data 800008d0: b5163b00d00593 a_src=2=SRC_IMM a_offset_imm0=0x800008d0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xd00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00d00593 */
	mov r12, 0xb5163b00d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800008d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fe8: /* paddr=0x1fe8 verbose=Init Data 800008d8: 10051326c2b023 a_src=2=SRC_IMM a_offset_imm0=0x800008d8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x26c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051326c2b023 */
	mov r12, 0x10051326c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x800008d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fec: /* paddr=0x1fec verbose=Init Data 800008e0: fff5451303c51513 a_src=2=SRC_IMM a_offset_imm0=0x800008e0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3c51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303c51513 */
	mov r12, 0xfff5451303c51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800008e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ff0: /* paddr=0x1ff0 verbose=Init Data 800008e8: b5163b01d00593 a_src=2=SRC_IMM a_offset_imm0=0x800008e8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1d00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01d00593 */
	mov r12, 0xb5163b01d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x800008e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ff4: /* paddr=0x1ff4 verbose=Init Data 800008f0: 10051326c2b423 a_src=2=SRC_IMM a_offset_imm0=0x800008f0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x26c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051326c2b423 */
	mov r12, 0x10051326c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x800008f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ff8: /* paddr=0x1ff8 verbose=Init Data 800008f8: fff5451303d51513 a_src=2=SRC_IMM a_offset_imm0=0x800008f8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3d51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303d51513 */
	mov r12, 0xfff5451303d51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800008f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ffc: /* paddr=0x1ffc verbose=Init Data 80000900: b5163b01f00593 a_src=2=SRC_IMM a_offset_imm0=0x80000900 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1f00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01f00593 */
	mov r12, 0xb5163b01f00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000900 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2000: /* paddr=0x2000 verbose=Init Data 80000908: 10051326c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000908 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x26c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051326c2b823 */
	mov r12, 0x10051326c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000908 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2004: /* paddr=0x2004 verbose=Init Data 80000910: fff5451303e51513 a_src=2=SRC_IMM a_offset_imm0=0x80000910 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3e51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303e51513 */
	mov r12, 0xfff5451303e51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000910 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2008: /* paddr=0x2008 verbose=Init Data 80000918: b5163b01300593 a_src=2=SRC_IMM a_offset_imm0=0x80000918 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1300593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01300593 */
	mov r12, 0xb5163b01300593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000918 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_200c: /* paddr=0x200c verbose=Init Data 80000920: 5555553726c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000920 b_src=2=SRC_IMM b_use_sp_imm1=0x55555537 b_offset_imm0=0x26c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5555553726c2bc23 */
	mov r12, 0x5555553726c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000920 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2010: /* paddr=0x2010 verbose=Init Data 80000928: b5151355550513 a_src=2=SRC_IMM a_offset_imm0=0x80000928 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x55550513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151355550513 */
	mov r12, 0xb5151355550513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000928 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2014: /* paddr=0x2014 verbose=Init Data 80000930: b515132aa50513 a_src=2=SRC_IMM a_offset_imm0=0x80000930 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x2aa50513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb515132aa50513 */
	mov r12, 0xb515132aa50513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000930 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2018: /* paddr=0x2018 verbose=Init Data 80000938: a5151355550513 a_src=2=SRC_IMM a_offset_imm0=0x80000938 b_src=2=SRC_IMM b_use_sp_imm1=0xa51513 b_offset_imm0=0x55550513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa5151355550513 */
	mov r12, 0xa5151355550513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000938 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_201c: /* paddr=0x201c verbose=Init Data 80000940: 20059315550513 a_src=2=SRC_IMM a_offset_imm0=0x80000940 b_src=2=SRC_IMM b_use_sp_imm1=0x200593 b_offset_imm0=0x15550513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x20059315550513 */
	mov r12, 0x20059315550513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000940 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2020: /* paddr=0x2020 verbose=Init Data 80000948: 28c2b02300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000948 b_src=2=SRC_IMM b_use_sp_imm1=0x28c2b023 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x28c2b02300b5163b */
	mov r12, 0x28c2b02300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000948 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2024: /* paddr=0x2024 verbose=Init Data 80000950: aaa50513aaaab537 a_src=2=SRC_IMM a_offset_imm0=0x80000950 b_src=2=SRC_IMM b_use_sp_imm1=0xaaa50513 b_offset_imm0=0xaaaab537 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xaaa50513aaaab537 */
	mov r12, 0xaaa50513aaaab537 /* STORE_IND: reg_value = value */
	mov r13, 0x80000950 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2028: /* paddr=0x2028 verbose=Init Data 80000958: 5555051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000958 b_src=2=SRC_IMM b_use_sp_imm1=0x55550513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5555051300b51513 */
	mov r12, 0x5555051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000958 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_202c: /* paddr=0x202c verbose=Init Data 80000960: 2aa5051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000960 b_src=2=SRC_IMM b_use_sp_imm1=0x2aa50513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2aa5051300b51513 */
	mov r12, 0x2aa5051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000960 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2030: /* paddr=0x2030 verbose=Init Data 80000968: 2aa5051300a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000968 b_src=2=SRC_IMM b_use_sp_imm1=0x2aa50513 b_offset_imm0=0xa51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2aa5051300a51513 */
	mov r12, 0x2aa5051300a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000968 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2034: /* paddr=0x2034 verbose=Init Data 80000970: b5163b00f00593 a_src=2=SRC_IMM a_offset_imm0=0x80000970 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xf00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00f00593 */
	mov r12, 0xb5163b00f00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000970 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2038: /* paddr=0x2038 verbose=Init Data 80000978: 30051328c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000978 b_src=2=SRC_IMM b_use_sp_imm1=0x300513 b_offset_imm0=0x28c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x30051328c2b423 */
	mov r12, 0x30051328c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000978 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_203c: /* paddr=0x203c verbose=Init Data 80000980: b5163b01700593 a_src=2=SRC_IMM a_offset_imm0=0x80000980 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01700593 */
	mov r12, 0xb5163b01700593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000980 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2040: /* paddr=0x2040 verbose=Init Data 80000988: 3333353728c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000988 b_src=2=SRC_IMM b_use_sp_imm1=0x33333537 b_offset_imm0=0x28c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3333353728c2b823 */
	mov r12, 0x3333353728c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000988 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2044: /* paddr=0x2044 verbose=Init Data 80000990: b5151333350513 a_src=2=SRC_IMM a_offset_imm0=0x80000990 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x33350513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151333350513 */
	mov r12, 0xb5151333350513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000990 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2048: /* paddr=0x2048 verbose=Init Data 80000998: b5151319950513 a_src=2=SRC_IMM a_offset_imm0=0x80000998 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x19950513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151319950513 */
	mov r12, 0xb5151319950513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000998 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_204c: /* paddr=0x204c verbose=Init Data 800009a0: a515134cc50513 a_src=2=SRC_IMM a_offset_imm0=0x800009a0 b_src=2=SRC_IMM b_use_sp_imm1=0xa51513 b_offset_imm0=0x4cc50513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa515134cc50513 */
	mov r12, 0xa515134cc50513 /* STORE_IND: reg_value = value */
	mov r13, 0x800009a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2050: /* paddr=0x2050 verbose=Init Data 800009a8: 130059333350513 a_src=2=SRC_IMM a_offset_imm0=0x800009a8 b_src=2=SRC_IMM b_use_sp_imm1=0x1300593 b_offset_imm0=0x33350513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130059333350513 */
	mov r12, 0x130059333350513 /* STORE_IND: reg_value = value */
	mov r13, 0x800009a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2054: /* paddr=0x2054 verbose=Init Data 800009b0: 28c2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x800009b0 b_src=2=SRC_IMM b_use_sp_imm1=0x28c2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x28c2bc2300b5163b */
	mov r12, 0x28c2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x800009b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2058: /* paddr=0x2058 verbose=Init Data 800009b8: 6665051366666537 a_src=2=SRC_IMM a_offset_imm0=0x800009b8 b_src=2=SRC_IMM b_use_sp_imm1=0x66650513 b_offset_imm0=0x66666537 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6665051366666537 */
	mov r12, 0x6665051366666537 /* STORE_IND: reg_value = value */
	mov r13, 0x800009b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_205c: /* paddr=0x205c verbose=Init Data 800009c0: 3335051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x800009c0 b_src=2=SRC_IMM b_use_sp_imm1=0x33350513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3335051300b51513 */
	mov r12, 0x3335051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800009c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2060: /* paddr=0x2060 verbose=Init Data 800009c8: 1995051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x800009c8 b_src=2=SRC_IMM b_use_sp_imm1=0x19950513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1995051300b51513 */
	mov r12, 0x1995051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800009c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2064: /* paddr=0x2064 verbose=Init Data 800009d0: 2665051300a51513 a_src=2=SRC_IMM a_offset_imm0=0x800009d0 b_src=2=SRC_IMM b_use_sp_imm1=0x26650513 b_offset_imm0=0xa51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2665051300a51513 */
	mov r12, 0x2665051300a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x800009d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2068: /* paddr=0x2068 verbose=Init Data 800009d8: b5163b01100593 a_src=2=SRC_IMM a_offset_imm0=0x800009d8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01100593 */
	mov r12, 0xb5163b01100593 /* STORE_IND: reg_value = value */
	mov r13, 0x800009d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_206c: /* paddr=0x206c verbose=Init Data 800009e0: 5372ac2b023 a_src=2=SRC_IMM a_offset_imm0=0x800009e0 b_src=2=SRC_IMM b_use_sp_imm1=0x537 b_offset_imm0=0x2ac2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5372ac2b023 */
	mov r12, 0x5372ac2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x800009e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2070: /* paddr=0x2070 verbose=Init Data 800009e8: b51513fff50513 a_src=2=SRC_IMM a_offset_imm0=0x800009e8 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0xfff50513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb51513fff50513 */
	mov r12, 0xb51513fff50513 /* STORE_IND: reg_value = value */
	mov r13, 0x800009e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2074: /* paddr=0x2074 verbose=Init Data 800009f0: b5151325750513 a_src=2=SRC_IMM a_offset_imm0=0x800009f0 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x25750513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151325750513 */
	mov r12, 0xb5151325750513 /* STORE_IND: reg_value = value */
	mov r13, 0x800009f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2078: /* paddr=0x2078 verbose=Init Data 800009f8: a515136c350513 a_src=2=SRC_IMM a_offset_imm0=0x800009f8 b_src=2=SRC_IMM b_use_sp_imm1=0xa51513 b_offset_imm0=0x6c350513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa515136c350513 */
	mov r12, 0xa515136c350513 /* STORE_IND: reg_value = value */
	mov r13, 0x800009f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_207c: /* paddr=0x207c verbose=Init Data 80000a00: 1b005930cd50513 a_src=2=SRC_IMM a_offset_imm0=0x80000a00 b_src=2=SRC_IMM b_use_sp_imm1=0x1b00593 b_offset_imm0=0xcd50513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1b005930cd50513 */
	mov r12, 0x1b005930cd50513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2080: /* paddr=0x2080 verbose=Init Data 80000a08: 2ac2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000a08 b_src=2=SRC_IMM b_use_sp_imm1=0x2ac2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2ac2b42300b5163b */
	mov r12, 0x2ac2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000a08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2084: /* paddr=0x2084 verbose=Init Data 80000a10: 5051300000537 a_src=2=SRC_IMM a_offset_imm0=0x80000a10 b_src=2=SRC_IMM b_use_sp_imm1=0x50513 b_offset_imm0=0x537 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5051300000537 */
	mov r12, 0x5051300000537 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2088: /* paddr=0x2088 verbose=Init Data 80000a18: 5a85051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000a18 b_src=2=SRC_IMM b_use_sp_imm1=0x5a850513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5a85051300b51513 */
	mov r12, 0x5a85051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_208c: /* paddr=0x208c verbose=Init Data 80000a20: 13c5051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000a20 b_src=2=SRC_IMM b_use_sp_imm1=0x13c50513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13c5051300b51513 */
	mov r12, 0x13c5051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2090: /* paddr=0x2090 verbose=Init Data 80000a28: 3335051300a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000a28 b_src=2=SRC_IMM b_use_sp_imm1=0x33350513 b_offset_imm0=0xa51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3335051300a51513 */
	mov r12, 0x3335051300a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2094: /* paddr=0x2094 verbose=Init Data 80000a30: b5163b00400593 a_src=2=SRC_IMM a_offset_imm0=0x80000a30 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x400593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00400593 */
	mov r12, 0xb5163b00400593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2098: /* paddr=0x2098 verbose=Init Data 80000a38: 555555372ac2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000a38 b_src=2=SRC_IMM b_use_sp_imm1=0x55555537 b_offset_imm0=0x2ac2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x555555372ac2b823 */
	mov r12, 0x555555372ac2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_209c: /* paddr=0x209c verbose=Init Data 80000a40: b5151355550513 a_src=2=SRC_IMM a_offset_imm0=0x80000a40 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x55550513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151355550513 */
	mov r12, 0xb5151355550513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20a0: /* paddr=0x20a0 verbose=Init Data 80000a48: b515132aa50513 a_src=2=SRC_IMM a_offset_imm0=0x80000a48 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x2aa50513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb515132aa50513 */
	mov r12, 0xb515132aa50513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20a4: /* paddr=0x20a4 verbose=Init Data 80000a50: a5151355550513 a_src=2=SRC_IMM a_offset_imm0=0x80000a50 b_src=2=SRC_IMM b_use_sp_imm1=0xa51513 b_offset_imm0=0x55550513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa5151355550513 */
	mov r12, 0xa5151355550513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20a8: /* paddr=0x20a8 verbose=Init Data 80000a58: 10059315450513 a_src=2=SRC_IMM a_offset_imm0=0x80000a58 b_src=2=SRC_IMM b_use_sp_imm1=0x100593 b_offset_imm0=0x15450513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10059315450513 */
	mov r12, 0x10059315450513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20ac: /* paddr=0x20ac verbose=Init Data 80000a60: 2ac2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000a60 b_src=2=SRC_IMM b_use_sp_imm1=0x2ac2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2ac2bc2300b5163b */
	mov r12, 0x2ac2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000a60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20b0: /* paddr=0x20b0 verbose=Init Data 80000a68: 3335051333333537 a_src=2=SRC_IMM a_offset_imm0=0x80000a68 b_src=2=SRC_IMM b_use_sp_imm1=0x33350513 b_offset_imm0=0x33333537 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3335051333333537 */
	mov r12, 0x3335051333333537 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20b4: /* paddr=0x20b4 verbose=Init Data 80000a70: 1995051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000a70 b_src=2=SRC_IMM b_use_sp_imm1=0x19950513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1995051300b51513 */
	mov r12, 0x1995051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20b8: /* paddr=0x20b8 verbose=Init Data 80000a78: 4cc5051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000a78 b_src=2=SRC_IMM b_use_sp_imm1=0x4cc50513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x4cc5051300b51513 */
	mov r12, 0x4cc5051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20bc: /* paddr=0x20bc verbose=Init Data 80000a80: 3325051300a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000a80 b_src=2=SRC_IMM b_use_sp_imm1=0x33250513 b_offset_imm0=0xa51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3325051300a51513 */
	mov r12, 0x3325051300a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20c0: /* paddr=0x20c0 verbose=Init Data 80000a88: b5163b00e00593 a_src=2=SRC_IMM a_offset_imm0=0x80000a88 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xe00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00e00593 */
	mov r12, 0xb5163b00e00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20c4: /* paddr=0x20c4 verbose=Init Data 80000a90: 666665372cc2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000a90 b_src=2=SRC_IMM b_use_sp_imm1=0x66666537 b_offset_imm0=0x2cc2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x666665372cc2b023 */
	mov r12, 0x666665372cc2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20c8: /* paddr=0x20c8 verbose=Init Data 80000a98: b5151366650513 a_src=2=SRC_IMM a_offset_imm0=0x80000a98 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x66650513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151366650513 */
	mov r12, 0xb5151366650513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20cc: /* paddr=0x20cc verbose=Init Data 80000aa0: b5151333350513 a_src=2=SRC_IMM a_offset_imm0=0x80000aa0 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x33350513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151333350513 */
	mov r12, 0xb5151333350513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000aa0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20d0: /* paddr=0x20d0 verbose=Init Data 80000aa8: a5151319950513 a_src=2=SRC_IMM a_offset_imm0=0x80000aa8 b_src=2=SRC_IMM b_use_sp_imm1=0xa51513 b_offset_imm0=0x19950513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa5151319950513 */
	mov r12, 0xa5151319950513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000aa8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20d4: /* paddr=0x20d4 verbose=Init Data 80000ab0: 40059326550513 a_src=2=SRC_IMM a_offset_imm0=0x80000ab0 b_src=2=SRC_IMM b_use_sp_imm1=0x400593 b_offset_imm0=0x26550513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40059326550513 */
	mov r12, 0x40059326550513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ab0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20d8: /* paddr=0x20d8 verbose=Init Data 80000ab8: 2cc2b42300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000ab8 b_src=2=SRC_IMM b_use_sp_imm1=0x2cc2b423 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2cc2b42300b5163b */
	mov r12, 0x2cc2b42300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000ab8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20dc: /* paddr=0x20dc verbose=Init Data 80000ac0: 5051300000537 a_src=2=SRC_IMM a_offset_imm0=0x80000ac0 b_src=2=SRC_IMM b_use_sp_imm1=0x50513 b_offset_imm0=0x537 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5051300000537 */
	mov r12, 0x5051300000537 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ac0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20e0: /* paddr=0x20e0 verbose=Init Data 80000ac8: 5a85051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000ac8 b_src=2=SRC_IMM b_use_sp_imm1=0x5a850513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5a85051300b51513 */
	mov r12, 0x5a85051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ac8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20e4: /* paddr=0x20e4 verbose=Init Data 80000ad0: 13c5051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000ad0 b_src=2=SRC_IMM b_use_sp_imm1=0x13c50513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13c5051300b51513 */
	mov r12, 0x13c5051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ad0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20e8: /* paddr=0x20e8 verbose=Init Data 80000ad8: 3325051300a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000ad8 b_src=2=SRC_IMM b_use_sp_imm1=0x33250513 b_offset_imm0=0xa51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3325051300a51513 */
	mov r12, 0x3325051300a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ad8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20ec: /* paddr=0x20ec verbose=Init Data 80000ae0: b5163b01100593 a_src=2=SRC_IMM a_offset_imm0=0x80000ae0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01100593 */
	mov r12, 0xb5163b01100593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ae0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20f0: /* paddr=0x20f0 verbose=Init Data 80000ae8: 555555372cc2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000ae8 b_src=2=SRC_IMM b_use_sp_imm1=0x55555537 b_offset_imm0=0x2cc2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x555555372cc2b823 */
	mov r12, 0x555555372cc2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ae8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20f4: /* paddr=0x20f4 verbose=Init Data 80000af0: b5151355550513 a_src=2=SRC_IMM a_offset_imm0=0x80000af0 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x55550513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151355550513 */
	mov r12, 0xb5151355550513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000af0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20f8: /* paddr=0x20f8 verbose=Init Data 80000af8: b515132aa50513 a_src=2=SRC_IMM a_offset_imm0=0x80000af8 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x2aa50513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb515132aa50513 */
	mov r12, 0xb515132aa50513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000af8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20fc: /* paddr=0x20fc verbose=Init Data 80000b00: a5151355550513 a_src=2=SRC_IMM a_offset_imm0=0x80000b00 b_src=2=SRC_IMM b_use_sp_imm1=0xa51513 b_offset_imm0=0x55550513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa5151355550513 */
	mov r12, 0xa5151355550513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2100: /* paddr=0x2100 verbose=Init Data 80000b08: 10059315650513 a_src=2=SRC_IMM a_offset_imm0=0x80000b08 b_src=2=SRC_IMM b_use_sp_imm1=0x100593 b_offset_imm0=0x15650513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10059315650513 */
	mov r12, 0x10059315650513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2104: /* paddr=0x2104 verbose=Init Data 80000b10: 2cc2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000b10 b_src=2=SRC_IMM b_use_sp_imm1=0x2cc2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2cc2bc2300b5163b */
	mov r12, 0x2cc2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000b10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2108: /* paddr=0x2108 verbose=Init Data 80000b18: aaa50513aaaab537 a_src=2=SRC_IMM a_offset_imm0=0x80000b18 b_src=2=SRC_IMM b_use_sp_imm1=0xaaa50513 b_offset_imm0=0xaaaab537 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xaaa50513aaaab537 */
	mov r12, 0xaaa50513aaaab537 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_210c: /* paddr=0x210c verbose=Init Data 80000b20: 5555051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000b20 b_src=2=SRC_IMM b_use_sp_imm1=0x55550513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5555051300b51513 */
	mov r12, 0x5555051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2110: /* paddr=0x2110 verbose=Init Data 80000b28: 2aa5051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000b28 b_src=2=SRC_IMM b_use_sp_imm1=0x2aa50513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2aa5051300b51513 */
	mov r12, 0x2aa5051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2114: /* paddr=0x2114 verbose=Init Data 80000b30: 2ab5051300a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000b30 b_src=2=SRC_IMM b_use_sp_imm1=0x2ab50513 b_offset_imm0=0xa51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2ab5051300a51513 */
	mov r12, 0x2ab5051300a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2118: /* paddr=0x2118 verbose=Init Data 80000b38: b5163b01000593 a_src=2=SRC_IMM a_offset_imm0=0x80000b38 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1000593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01000593 */
	mov r12, 0xb5163b01000593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_211c: /* paddr=0x211c verbose=Init Data 80000b40: 6005132ec2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000b40 b_src=2=SRC_IMM b_use_sp_imm1=0x600513 b_offset_imm0=0x2ec2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6005132ec2b023 */
	mov r12, 0x6005132ec2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2120: /* paddr=0x2120 verbose=Init Data 80000b48: b5163b01f00593 a_src=2=SRC_IMM a_offset_imm0=0x80000b48 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1f00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01f00593 */
	mov r12, 0xb5163b01f00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2124: /* paddr=0x2124 verbose=Init Data 80000b50: 333335372ec2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000b50 b_src=2=SRC_IMM b_use_sp_imm1=0x33333537 b_offset_imm0=0x2ec2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x333335372ec2b423 */
	mov r12, 0x333335372ec2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2128: /* paddr=0x2128 verbose=Init Data 80000b58: b5151333350513 a_src=2=SRC_IMM a_offset_imm0=0x80000b58 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x33350513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151333350513 */
	mov r12, 0xb5151333350513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_212c: /* paddr=0x212c verbose=Init Data 80000b60: b5151319950513 a_src=2=SRC_IMM a_offset_imm0=0x80000b60 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x19950513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151319950513 */
	mov r12, 0xb5151319950513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2130: /* paddr=0x2130 verbose=Init Data 80000b68: a515134cc50513 a_src=2=SRC_IMM a_offset_imm0=0x80000b68 b_src=2=SRC_IMM b_use_sp_imm1=0xa51513 b_offset_imm0=0x4cc50513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa515134cc50513 */
	mov r12, 0xa515134cc50513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2134: /* paddr=0x2134 verbose=Init Data 80000b70: a0059333450513 a_src=2=SRC_IMM a_offset_imm0=0x80000b70 b_src=2=SRC_IMM b_use_sp_imm1=0xa00593 b_offset_imm0=0x33450513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0059333450513 */
	mov r12, 0xa0059333450513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2138: /* paddr=0x2138 verbose=Init Data 80000b78: 2ec2b82300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000b78 b_src=2=SRC_IMM b_use_sp_imm1=0x2ec2b823 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2ec2b82300b5163b */
	mov r12, 0x2ec2b82300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000b78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_213c: /* paddr=0x213c verbose=Init Data 80000b80: 6665051366666537 a_src=2=SRC_IMM a_offset_imm0=0x80000b80 b_src=2=SRC_IMM b_use_sp_imm1=0x66650513 b_offset_imm0=0x66666537 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6665051366666537 */
	mov r12, 0x6665051366666537 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2140: /* paddr=0x2140 verbose=Init Data 80000b88: 3335051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000b88 b_src=2=SRC_IMM b_use_sp_imm1=0x33350513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3335051300b51513 */
	mov r12, 0x3335051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2144: /* paddr=0x2144 verbose=Init Data 80000b90: 1995051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000b90 b_src=2=SRC_IMM b_use_sp_imm1=0x19950513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1995051300b51513 */
	mov r12, 0x1995051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2148: /* paddr=0x2148 verbose=Init Data 80000b98: 2675051300a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000b98 b_src=2=SRC_IMM b_use_sp_imm1=0x26750513 b_offset_imm0=0xa51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2675051300a51513 */
	mov r12, 0x2675051300a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_214c: /* paddr=0x214c verbose=Init Data 80000ba0: b5163b01d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000ba0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1d00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01d00593 */
	mov r12, 0xb5163b01d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ba0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2150: /* paddr=0x2150 verbose=Init Data 80000ba8: 5372ec2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000ba8 b_src=2=SRC_IMM b_use_sp_imm1=0x537 b_offset_imm0=0x2ec2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5372ec2bc23 */
	mov r12, 0x5372ec2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ba8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2154: /* paddr=0x2154 verbose=Init Data 80000bb0: b51513fff50513 a_src=2=SRC_IMM a_offset_imm0=0x80000bb0 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0xfff50513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb51513fff50513 */
	mov r12, 0xb51513fff50513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2158: /* paddr=0x2158 verbose=Init Data 80000bb8: b5151325750513 a_src=2=SRC_IMM a_offset_imm0=0x80000bb8 b_src=2=SRC_IMM b_use_sp_imm1=0xb51513 b_offset_imm0=0x25750513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5151325750513 */
	mov r12, 0xb5151325750513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_215c: /* paddr=0x215c verbose=Init Data 80000bc0: a515136c350513 a_src=2=SRC_IMM a_offset_imm0=0x80000bc0 b_src=2=SRC_IMM b_use_sp_imm1=0xa51513 b_offset_imm0=0x6c350513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa515136c350513 */
	mov r12, 0xa515136c350513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2160: /* paddr=0x2160 verbose=Init Data 80000bc8: 3005930ce50513 a_src=2=SRC_IMM a_offset_imm0=0x80000bc8 b_src=2=SRC_IMM b_use_sp_imm1=0x300593 b_offset_imm0=0xce50513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3005930ce50513 */
	mov r12, 0x3005930ce50513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2164: /* paddr=0x2164 verbose=Init Data 80000bd0: 30c2b02300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000bd0 b_src=2=SRC_IMM b_use_sp_imm1=0x30c2b023 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x30c2b02300b5163b */
	mov r12, 0x30c2b02300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000bd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2168: /* paddr=0x2168 verbose=Init Data 80000bd8: 5051300000537 a_src=2=SRC_IMM a_offset_imm0=0x80000bd8 b_src=2=SRC_IMM b_use_sp_imm1=0x50513 b_offset_imm0=0x537 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5051300000537 */
	mov r12, 0x5051300000537 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_216c: /* paddr=0x216c verbose=Init Data 80000be0: 5a85051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000be0 b_src=2=SRC_IMM b_use_sp_imm1=0x5a850513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5a85051300b51513 */
	mov r12, 0x5a85051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000be0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2170: /* paddr=0x2170 verbose=Init Data 80000be8: 13c5051300b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000be8 b_src=2=SRC_IMM b_use_sp_imm1=0x13c50513 b_offset_imm0=0xb51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13c5051300b51513 */
	mov r12, 0x13c5051300b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000be8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2174: /* paddr=0x2174 verbose=Init Data 80000bf0: 3345051300a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000bf0 b_src=2=SRC_IMM b_use_sp_imm1=0x33450513 b_offset_imm0=0xa51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3345051300a51513 */
	mov r12, 0x3345051300a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bf0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2178: /* paddr=0x2178 verbose=Init Data 80000bf8: b5163b01f00593 a_src=2=SRC_IMM a_offset_imm0=0x80000bf8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1f00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01f00593 */
	mov r12, 0xb5163b01f00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bf8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_217c: /* paddr=0x217c verbose=Init Data 80000c00: 10051330c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000c00 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x30c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051330c2b423 */
	mov r12, 0x10051330c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2180: /* paddr=0x2180 verbose=Init Data 80000c08: fff5451301351513 a_src=2=SRC_IMM a_offset_imm0=0x80000c08 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1351513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301351513 */
	mov r12, 0xfff5451301351513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2184: /* paddr=0x2184 verbose=Init Data 80000c10: b5163b01100593 a_src=2=SRC_IMM a_offset_imm0=0x80000c10 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01100593 */
	mov r12, 0xb5163b01100593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2188: /* paddr=0x2188 verbose=Init Data 80000c18: 10051330c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000c18 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x30c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051330c2b823 */
	mov r12, 0x10051330c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_218c: /* paddr=0x218c verbose=Init Data 80000c20: fff5451301451513 a_src=2=SRC_IMM a_offset_imm0=0x80000c20 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1451513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301451513 */
	mov r12, 0xfff5451301451513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2190: /* paddr=0x2190 verbose=Init Data 80000c28: b5163b01500593 a_src=2=SRC_IMM a_offset_imm0=0x80000c28 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1500593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01500593 */
	mov r12, 0xb5163b01500593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2194: /* paddr=0x2194 verbose=Init Data 80000c30: 10051330c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000c30 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x30c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051330c2bc23 */
	mov r12, 0x10051330c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2198: /* paddr=0x2198 verbose=Init Data 80000c38: fff5451301551513 a_src=2=SRC_IMM a_offset_imm0=0x80000c38 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1551513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301551513 */
	mov r12, 0xfff5451301551513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_219c: /* paddr=0x219c verbose=Init Data 80000c40: b5163b01200593 a_src=2=SRC_IMM a_offset_imm0=0x80000c40 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1200593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01200593 */
	mov r12, 0xb5163b01200593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21a0: /* paddr=0x21a0 verbose=Init Data 80000c48: 10051332c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000c48 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x32c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051332c2b023 */
	mov r12, 0x10051332c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21a4: /* paddr=0x21a4 verbose=Init Data 80000c50: fff5451301651513 a_src=2=SRC_IMM a_offset_imm0=0x80000c50 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1651513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301651513 */
	mov r12, 0xfff5451301651513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21a8: /* paddr=0x21a8 verbose=Init Data 80000c58: b5163b01200593 a_src=2=SRC_IMM a_offset_imm0=0x80000c58 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1200593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01200593 */
	mov r12, 0xb5163b01200593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21ac: /* paddr=0x21ac verbose=Init Data 80000c60: 10051332c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000c60 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x32c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051332c2b423 */
	mov r12, 0x10051332c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21b0: /* paddr=0x21b0 verbose=Init Data 80000c68: fff5451301751513 a_src=2=SRC_IMM a_offset_imm0=0x80000c68 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1751513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301751513 */
	mov r12, 0xfff5451301751513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21b4: /* paddr=0x21b4 verbose=Init Data 80000c70: b5163b00100593 a_src=2=SRC_IMM a_offset_imm0=0x80000c70 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00100593 */
	mov r12, 0xb5163b00100593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21b8: /* paddr=0x21b8 verbose=Init Data 80000c78: 10051332c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000c78 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x32c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051332c2b823 */
	mov r12, 0x10051332c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21bc: /* paddr=0x21bc verbose=Init Data 80000c80: fff5451301851513 a_src=2=SRC_IMM a_offset_imm0=0x80000c80 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1851513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301851513 */
	mov r12, 0xfff5451301851513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21c0: /* paddr=0x21c0 verbose=Init Data 80000c88: b5163b00000593 a_src=2=SRC_IMM a_offset_imm0=0x80000c88 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00000593 */
	mov r12, 0xb5163b00000593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21c4: /* paddr=0x21c4 verbose=Init Data 80000c90: 10051332c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000c90 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x32c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051332c2bc23 */
	mov r12, 0x10051332c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21c8: /* paddr=0x21c8 verbose=Init Data 80000c98: fff5451301951513 a_src=2=SRC_IMM a_offset_imm0=0x80000c98 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1951513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301951513 */
	mov r12, 0xfff5451301951513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21cc: /* paddr=0x21cc verbose=Init Data 80000ca0: b5163b00d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000ca0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xd00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00d00593 */
	mov r12, 0xb5163b00d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ca0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21d0: /* paddr=0x21d0 verbose=Init Data 80000ca8: 10051334c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000ca8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x34c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051334c2b023 */
	mov r12, 0x10051334c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ca8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21d4: /* paddr=0x21d4 verbose=Init Data 80000cb0: fff5451301a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000cb0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1a51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301a51513 */
	mov r12, 0xfff5451301a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21d8: /* paddr=0x21d8 verbose=Init Data 80000cb8: b5163b01500593 a_src=2=SRC_IMM a_offset_imm0=0x80000cb8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1500593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01500593 */
	mov r12, 0xb5163b01500593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21dc: /* paddr=0x21dc verbose=Init Data 80000cc0: 10051334c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000cc0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x34c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051334c2b423 */
	mov r12, 0x10051334c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21e0: /* paddr=0x21e0 verbose=Init Data 80000cc8: fff5451301b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000cc8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1b51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301b51513 */
	mov r12, 0xfff5451301b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21e4: /* paddr=0x21e4 verbose=Init Data 80000cd0: b5163b00400593 a_src=2=SRC_IMM a_offset_imm0=0x80000cd0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x400593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00400593 */
	mov r12, 0xb5163b00400593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21e8: /* paddr=0x21e8 verbose=Init Data 80000cd8: 10051334c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000cd8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x34c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051334c2b823 */
	mov r12, 0x10051334c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21ec: /* paddr=0x21ec verbose=Init Data 80000ce0: fff5451301c51513 a_src=2=SRC_IMM a_offset_imm0=0x80000ce0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1c51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301c51513 */
	mov r12, 0xfff5451301c51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ce0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21f0: /* paddr=0x21f0 verbose=Init Data 80000ce8: b5163b00d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000ce8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xd00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00d00593 */
	mov r12, 0xb5163b00d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ce8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21f4: /* paddr=0x21f4 verbose=Init Data 80000cf0: 10051334c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000cf0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x34c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051334c2bc23 */
	mov r12, 0x10051334c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cf0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21f8: /* paddr=0x21f8 verbose=Init Data 80000cf8: fff5451301d51513 a_src=2=SRC_IMM a_offset_imm0=0x80000cf8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1d51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301d51513 */
	mov r12, 0xfff5451301d51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cf8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21fc: /* paddr=0x21fc verbose=Init Data 80000d00: b5163b01100593 a_src=2=SRC_IMM a_offset_imm0=0x80000d00 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01100593 */
	mov r12, 0xb5163b01100593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2200: /* paddr=0x2200 verbose=Init Data 80000d08: 10051336c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000d08 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x36c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051336c2b023 */
	mov r12, 0x10051336c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2204: /* paddr=0x2204 verbose=Init Data 80000d10: fff5451301e51513 a_src=2=SRC_IMM a_offset_imm0=0x80000d10 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1e51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301e51513 */
	mov r12, 0xfff5451301e51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2208: /* paddr=0x2208 verbose=Init Data 80000d18: b5163b00a00593 a_src=2=SRC_IMM a_offset_imm0=0x80000d18 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xa00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00a00593 */
	mov r12, 0xb5163b00a00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_220c: /* paddr=0x220c verbose=Init Data 80000d20: 10051336c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000d20 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x36c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051336c2b423 */
	mov r12, 0x10051336c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2210: /* paddr=0x2210 verbose=Init Data 80000d28: fff5451301f51513 a_src=2=SRC_IMM a_offset_imm0=0x80000d28 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x1f51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451301f51513 */
	mov r12, 0xfff5451301f51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2214: /* paddr=0x2214 verbose=Init Data 80000d30: b5163b00300593 a_src=2=SRC_IMM a_offset_imm0=0x80000d30 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x300593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00300593 */
	mov r12, 0xb5163b00300593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2218: /* paddr=0x2218 verbose=Init Data 80000d38: 10051336c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000d38 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x36c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051336c2b823 */
	mov r12, 0x10051336c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_221c: /* paddr=0x221c verbose=Init Data 80000d40: fff5451302051513 a_src=2=SRC_IMM a_offset_imm0=0x80000d40 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2051513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302051513 */
	mov r12, 0xfff5451302051513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2220: /* paddr=0x2220 verbose=Init Data 80000d48: b5163b00900593 a_src=2=SRC_IMM a_offset_imm0=0x80000d48 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x900593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00900593 */
	mov r12, 0xb5163b00900593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2224: /* paddr=0x2224 verbose=Init Data 80000d50: 10051336c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000d50 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x36c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051336c2bc23 */
	mov r12, 0x10051336c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2228: /* paddr=0x2228 verbose=Init Data 80000d58: fff5451302151513 a_src=2=SRC_IMM a_offset_imm0=0x80000d58 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2151513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302151513 */
	mov r12, 0xfff5451302151513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_222c: /* paddr=0x222c verbose=Init Data 80000d60: b5163b00900593 a_src=2=SRC_IMM a_offset_imm0=0x80000d60 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x900593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00900593 */
	mov r12, 0xb5163b00900593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2230: /* paddr=0x2230 verbose=Init Data 80000d68: 10051338c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000d68 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x38c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051338c2b023 */
	mov r12, 0x10051338c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2234: /* paddr=0x2234 verbose=Init Data 80000d70: fff5451302251513 a_src=2=SRC_IMM a_offset_imm0=0x80000d70 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2251513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302251513 */
	mov r12, 0xfff5451302251513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2238: /* paddr=0x2238 verbose=Init Data 80000d78: b5163b01b00593 a_src=2=SRC_IMM a_offset_imm0=0x80000d78 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1b00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01b00593 */
	mov r12, 0xb5163b01b00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_223c: /* paddr=0x223c verbose=Init Data 80000d80: 10051338c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000d80 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x38c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051338c2b423 */
	mov r12, 0x10051338c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2240: /* paddr=0x2240 verbose=Init Data 80000d88: fff5451302351513 a_src=2=SRC_IMM a_offset_imm0=0x80000d88 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2351513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302351513 */
	mov r12, 0xfff5451302351513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2244: /* paddr=0x2244 verbose=Init Data 80000d90: b5163b01700593 a_src=2=SRC_IMM a_offset_imm0=0x80000d90 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01700593 */
	mov r12, 0xb5163b01700593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2248: /* paddr=0x2248 verbose=Init Data 80000d98: 10051338c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000d98 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x38c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051338c2b823 */
	mov r12, 0x10051338c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_224c: /* paddr=0x224c verbose=Init Data 80000da0: fff5451302451513 a_src=2=SRC_IMM a_offset_imm0=0x80000da0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2451513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302451513 */
	mov r12, 0xfff5451302451513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000da0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2250: /* paddr=0x2250 verbose=Init Data 80000da8: b5163b00200593 a_src=2=SRC_IMM a_offset_imm0=0x80000da8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x200593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00200593 */
	mov r12, 0xb5163b00200593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000da8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2254: /* paddr=0x2254 verbose=Init Data 80000db0: 10051338c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000db0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x38c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051338c2bc23 */
	mov r12, 0x10051338c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000db0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2258: /* paddr=0x2258 verbose=Init Data 80000db8: fff5451302551513 a_src=2=SRC_IMM a_offset_imm0=0x80000db8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2551513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302551513 */
	mov r12, 0xfff5451302551513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000db8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_225c: /* paddr=0x225c verbose=Init Data 80000dc0: b5163b01700593 a_src=2=SRC_IMM a_offset_imm0=0x80000dc0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01700593 */
	mov r12, 0xb5163b01700593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000dc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2260: /* paddr=0x2260 verbose=Init Data 80000dc8: 1005133ac2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000dc8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3ac2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133ac2b023 */
	mov r12, 0x1005133ac2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000dc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2264: /* paddr=0x2264 verbose=Init Data 80000dd0: fff5451302651513 a_src=2=SRC_IMM a_offset_imm0=0x80000dd0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2651513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302651513 */
	mov r12, 0xfff5451302651513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000dd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2268: /* paddr=0x2268 verbose=Init Data 80000dd8: b5163b00d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000dd8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xd00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00d00593 */
	mov r12, 0xb5163b00d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000dd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_226c: /* paddr=0x226c verbose=Init Data 80000de0: 1005133ac2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000de0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3ac2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133ac2b423 */
	mov r12, 0x1005133ac2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000de0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2270: /* paddr=0x2270 verbose=Init Data 80000de8: fff5451302751513 a_src=2=SRC_IMM a_offset_imm0=0x80000de8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2751513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302751513 */
	mov r12, 0xfff5451302751513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000de8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2274: /* paddr=0x2274 verbose=Init Data 80000df0: b5163b00500593 a_src=2=SRC_IMM a_offset_imm0=0x80000df0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x500593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00500593 */
	mov r12, 0xb5163b00500593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000df0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2278: /* paddr=0x2278 verbose=Init Data 80000df8: 1005133ac2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000df8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3ac2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133ac2b823 */
	mov r12, 0x1005133ac2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000df8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_227c: /* paddr=0x227c verbose=Init Data 80000e00: fff5451302851513 a_src=2=SRC_IMM a_offset_imm0=0x80000e00 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2851513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302851513 */
	mov r12, 0xfff5451302851513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2280: /* paddr=0x2280 verbose=Init Data 80000e08: b5163b00600593 a_src=2=SRC_IMM a_offset_imm0=0x80000e08 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x600593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00600593 */
	mov r12, 0xb5163b00600593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2284: /* paddr=0x2284 verbose=Init Data 80000e10: 1005133ac2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000e10 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3ac2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133ac2bc23 */
	mov r12, 0x1005133ac2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2288: /* paddr=0x2288 verbose=Init Data 80000e18: fff5451302951513 a_src=2=SRC_IMM a_offset_imm0=0x80000e18 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2951513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302951513 */
	mov r12, 0xfff5451302951513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_228c: /* paddr=0x228c verbose=Init Data 80000e20: b5163b00c00593 a_src=2=SRC_IMM a_offset_imm0=0x80000e20 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xc00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00c00593 */
	mov r12, 0xb5163b00c00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2290: /* paddr=0x2290 verbose=Init Data 80000e28: 1005133cc2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000e28 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3cc2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133cc2b023 */
	mov r12, 0x1005133cc2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2294: /* paddr=0x2294 verbose=Init Data 80000e30: fff5451302a51513 a_src=2=SRC_IMM a_offset_imm0=0x80000e30 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2a51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302a51513 */
	mov r12, 0xfff5451302a51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2298: /* paddr=0x2298 verbose=Init Data 80000e38: b5163b00700593 a_src=2=SRC_IMM a_offset_imm0=0x80000e38 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00700593 */
	mov r12, 0xb5163b00700593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_229c: /* paddr=0x229c verbose=Init Data 80000e40: 1005133cc2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000e40 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3cc2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133cc2b423 */
	mov r12, 0x1005133cc2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22a0: /* paddr=0x22a0 verbose=Init Data 80000e48: fff5451302b51513 a_src=2=SRC_IMM a_offset_imm0=0x80000e48 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2b51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302b51513 */
	mov r12, 0xfff5451302b51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22a4: /* paddr=0x22a4 verbose=Init Data 80000e50: b5163b01700593 a_src=2=SRC_IMM a_offset_imm0=0x80000e50 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1700593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01700593 */
	mov r12, 0xb5163b01700593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22a8: /* paddr=0x22a8 verbose=Init Data 80000e58: 1005133cc2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000e58 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3cc2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133cc2b823 */
	mov r12, 0x1005133cc2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22ac: /* paddr=0x22ac verbose=Init Data 80000e60: fff5451302c51513 a_src=2=SRC_IMM a_offset_imm0=0x80000e60 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2c51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302c51513 */
	mov r12, 0xfff5451302c51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22b0: /* paddr=0x22b0 verbose=Init Data 80000e68: b5163b01f00593 a_src=2=SRC_IMM a_offset_imm0=0x80000e68 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1f00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01f00593 */
	mov r12, 0xb5163b01f00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22b4: /* paddr=0x22b4 verbose=Init Data 80000e70: 1005133cc2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000e70 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3cc2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133cc2bc23 */
	mov r12, 0x1005133cc2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22b8: /* paddr=0x22b8 verbose=Init Data 80000e78: fff5451302d51513 a_src=2=SRC_IMM a_offset_imm0=0x80000e78 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2d51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302d51513 */
	mov r12, 0xfff5451302d51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22bc: /* paddr=0x22bc verbose=Init Data 80000e80: b5163b00400593 a_src=2=SRC_IMM a_offset_imm0=0x80000e80 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x400593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00400593 */
	mov r12, 0xb5163b00400593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22c0: /* paddr=0x22c0 verbose=Init Data 80000e88: 1005133ec2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000e88 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3ec2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133ec2b023 */
	mov r12, 0x1005133ec2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22c4: /* paddr=0x22c4 verbose=Init Data 80000e90: fff5451302e51513 a_src=2=SRC_IMM a_offset_imm0=0x80000e90 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2e51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302e51513 */
	mov r12, 0xfff5451302e51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22c8: /* paddr=0x22c8 verbose=Init Data 80000e98: b5163b01d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000e98 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1d00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01d00593 */
	mov r12, 0xb5163b01d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22cc: /* paddr=0x22cc verbose=Init Data 80000ea0: 1005133ec2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000ea0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3ec2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133ec2b423 */
	mov r12, 0x1005133ec2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ea0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22d0: /* paddr=0x22d0 verbose=Init Data 80000ea8: fff5451303051513 a_src=2=SRC_IMM a_offset_imm0=0x80000ea8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3051513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303051513 */
	mov r12, 0xfff5451303051513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ea8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22d4: /* paddr=0x22d4 verbose=Init Data 80000eb0: b5163b01000593 a_src=2=SRC_IMM a_offset_imm0=0x80000eb0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1000593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01000593 */
	mov r12, 0xb5163b01000593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000eb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22d8: /* paddr=0x22d8 verbose=Init Data 80000eb8: 1005133ec2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000eb8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3ec2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133ec2b823 */
	mov r12, 0x1005133ec2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000eb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22dc: /* paddr=0x22dc verbose=Init Data 80000ec0: fff5451303151513 a_src=2=SRC_IMM a_offset_imm0=0x80000ec0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3151513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303151513 */
	mov r12, 0xfff5451303151513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ec0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22e0: /* paddr=0x22e0 verbose=Init Data 80000ec8: b5163b00600593 a_src=2=SRC_IMM a_offset_imm0=0x80000ec8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x600593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00600593 */
	mov r12, 0xb5163b00600593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ec8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22e4: /* paddr=0x22e4 verbose=Init Data 80000ed0: 1005133ec2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000ed0 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x3ec2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1005133ec2bc23 */
	mov r12, 0x1005133ec2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ed0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22e8: /* paddr=0x22e8 verbose=Init Data 80000ed8: fff5451303251513 a_src=2=SRC_IMM a_offset_imm0=0x80000ed8 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3251513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303251513 */
	mov r12, 0xfff5451303251513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ed8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22ec: /* paddr=0x22ec verbose=Init Data 80000ee0: b5163b00d00593 a_src=2=SRC_IMM a_offset_imm0=0x80000ee0 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xd00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00d00593 */
	mov r12, 0xb5163b00d00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ee0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22f0: /* paddr=0x22f0 verbose=Init Data 80000ee8: 10051340c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000ee8 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x40c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051340c2b023 */
	mov r12, 0x10051340c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ee8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22f4: /* paddr=0x22f4 verbose=Init Data 80000ef0: fff5451303351513 a_src=2=SRC_IMM a_offset_imm0=0x80000ef0 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3351513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303351513 */
	mov r12, 0xfff5451303351513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ef0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22f8: /* paddr=0x22f8 verbose=Init Data 80000ef8: b5163b00100593 a_src=2=SRC_IMM a_offset_imm0=0x80000ef8 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x100593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00100593 */
	mov r12, 0xb5163b00100593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ef8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22fc: /* paddr=0x22fc verbose=Init Data 80000f00: 10051340c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000f00 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x40c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051340c2b423 */
	mov r12, 0x10051340c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2300: /* paddr=0x2300 verbose=Init Data 80000f08: fff5451303451513 a_src=2=SRC_IMM a_offset_imm0=0x80000f08 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3451513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303451513 */
	mov r12, 0xfff5451303451513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2304: /* paddr=0x2304 verbose=Init Data 80000f10: b5163b01200593 a_src=2=SRC_IMM a_offset_imm0=0x80000f10 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1200593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01200593 */
	mov r12, 0xb5163b01200593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2308: /* paddr=0x2308 verbose=Init Data 80000f18: 10051340c2b823 a_src=2=SRC_IMM a_offset_imm0=0x80000f18 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x40c2b823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051340c2b823 */
	mov r12, 0x10051340c2b823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_230c: /* paddr=0x230c verbose=Init Data 80000f20: fff5451303551513 a_src=2=SRC_IMM a_offset_imm0=0x80000f20 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3551513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303551513 */
	mov r12, 0xfff5451303551513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2310: /* paddr=0x2310 verbose=Init Data 80000f28: b5163b01e00593 a_src=2=SRC_IMM a_offset_imm0=0x80000f28 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x1e00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b01e00593 */
	mov r12, 0xb5163b01e00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2314: /* paddr=0x2314 verbose=Init Data 80000f30: 10051340c2bc23 a_src=2=SRC_IMM a_offset_imm0=0x80000f30 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x40c2bc23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051340c2bc23 */
	mov r12, 0x10051340c2bc23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2318: /* paddr=0x2318 verbose=Init Data 80000f38: fff5451303651513 a_src=2=SRC_IMM a_offset_imm0=0x80000f38 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x3651513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451303651513 */
	mov r12, 0xfff5451303651513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_231c: /* paddr=0x231c verbose=Init Data 80000f40: b5163b00e00593 a_src=2=SRC_IMM a_offset_imm0=0x80000f40 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xe00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00e00593 */
	mov r12, 0xb5163b00e00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2320: /* paddr=0x2320 verbose=Init Data 80000f48: 10051342c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000f48 b_src=2=SRC_IMM b_use_sp_imm1=0x100513 b_offset_imm0=0x42c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x10051342c2b023 */
	mov r12, 0x10051342c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2324: /* paddr=0x2324 verbose=Init Data 80000f50: fff5451302f51513 a_src=2=SRC_IMM a_offset_imm0=0x80000f50 b_src=2=SRC_IMM b_use_sp_imm1=0xfff54513 b_offset_imm0=0x2f51513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff5451302f51513 */
	mov r12, 0xfff5451302f51513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2328: /* paddr=0x2328 verbose=Init Data 80000f58: b5163b00f00593 a_src=2=SRC_IMM a_offset_imm0=0x80000f58 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0xf00593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00f00593 */
	mov r12, 0xb5163b00f00593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_232c: /* paddr=0x232c verbose=Init Data 80000f60: fff0051342c2b423 a_src=2=SRC_IMM a_offset_imm0=0x80000f60 b_src=2=SRC_IMM b_use_sp_imm1=0xfff00513 b_offset_imm0=0x42c2b423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfff0051342c2b423 */
	mov r12, 0xfff0051342c2b423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2330: /* paddr=0x2330 verbose=Init Data 80000f68: 170059300155513 a_src=2=SRC_IMM a_offset_imm0=0x80000f68 b_src=2=SRC_IMM b_use_sp_imm1=0x1700593 b_offset_imm0=0x155513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x170059300155513 */
	mov r12, 0x170059300155513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2334: /* paddr=0x2334 verbose=Init Data 80000f70: 42c2b82300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000f70 b_src=2=SRC_IMM b_use_sp_imm1=0x42c2b823 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x42c2b82300b5163b */
	mov r12, 0x42c2b82300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000f70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2338: /* paddr=0x2338 verbose=Init Data 80000f78: 110059304000513 a_src=2=SRC_IMM a_offset_imm0=0x80000f78 b_src=2=SRC_IMM b_use_sp_imm1=0x1100593 b_offset_imm0=0x4000513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x110059304000513 */
	mov r12, 0x110059304000513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_233c: /* paddr=0x233c verbose=Init Data 80000f80: 42c2bc2300b5163b a_src=2=SRC_IMM a_offset_imm0=0x80000f80 b_src=2=SRC_IMM b_use_sp_imm1=0x42c2bc23 b_offset_imm0=0xb5163b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x42c2bc2300b5163b */
	mov r12, 0x42c2bc2300b5163b /* STORE_IND: reg_value = value */
	mov r13, 0x80000f80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2340: /* paddr=0x2340 verbose=Init Data 80000f88: 165151300100513 a_src=2=SRC_IMM a_offset_imm0=0x80000f88 b_src=2=SRC_IMM b_use_sp_imm1=0x1651513 b_offset_imm0=0x100513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x165151300100513 */
	mov r12, 0x165151300100513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2344: /* paddr=0x2344 verbose=Init Data 80000f90: b5163b00600593 a_src=2=SRC_IMM a_offset_imm0=0x80000f90 b_src=2=SRC_IMM b_use_sp_imm1=0xb5163b b_offset_imm0=0x600593 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5163b00600593 */
	mov r12, 0xb5163b00600593 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2348: /* paddr=0x2348 verbose=Init Data 80000f98: 380006f44c2b023 a_src=2=SRC_IMM a_offset_imm0=0x80000f98 b_src=2=SRC_IMM b_use_sp_imm1=0x380006f b_offset_imm0=0x44c2b023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x380006f44c2b023 */
	mov r12, 0x380006f44c2b023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_234c: /* paddr=0x234c verbose=Init Data 80000fa0: 200133031f813483 a_src=2=SRC_IMM a_offset_imm0=0x80000fa0 b_src=2=SRC_IMM b_use_sp_imm1=0x20013303 b_offset_imm0=0x1f813483 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x200133031f813483 */
	mov r12, 0x200133031f813483 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fa0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2350: /* paddr=0x2350 verbose=Init Data 80000fa8: 33700930333 a_src=2=SRC_IMM a_offset_imm0=0x80000fa8 b_src=2=SRC_IMM b_use_sp_imm1=0x337 b_offset_imm0=0x930333 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x33700930333 */
	mov r12, 0x33700930333 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fa8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2354: /* paddr=0x2354 verbose=Init Data 80000fb0: b3131300030313 a_src=2=SRC_IMM a_offset_imm0=0x80000fb0 b_src=2=SRC_IMM b_use_sp_imm1=0xb31313 b_offset_imm0=0x30313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb3131300030313 */
	mov r12, 0xb3131300030313 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2358: /* paddr=0x2358 verbose=Init Data 80000fb8: b313135d630313 a_src=2=SRC_IMM a_offset_imm0=0x80000fb8 b_src=2=SRC_IMM b_use_sp_imm1=0xb31313 b_offset_imm0=0x5d630313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb313135d630313 */
	mov r12, 0xb313135d630313 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_235c: /* paddr=0x235c verbose=Init Data 80000fc0: a3131343630313 a_src=2=SRC_IMM a_offset_imm0=0x80000fc0 b_src=2=SRC_IMM b_use_sp_imm1=0xa31313 b_offset_imm0=0x43630313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa3131343630313 */
	mov r12, 0xa3131343630313 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2360: /* paddr=0x2360 verbose=Init Data 80000fc8: fe64be232d030313 a_src=2=SRC_IMM a_offset_imm0=0x80000fc8 b_src=2=SRC_IMM b_use_sp_imm1=0xfe64be23 b_offset_imm0=0x2d030313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfe64be232d030313 */
	mov r12, 0xfe64be232d030313 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2364: /* paddr=0x2364 verbose=Init Data 80000fd0: 200112970040006f a_src=2=SRC_IMM a_offset_imm0=0x80000fd0 b_src=2=SRC_IMM b_use_sp_imm1=0x20011297 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x200112970040006f */
	mov r12, 0x200112970040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000fd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2368: /* paddr=0x2368 verbose=Init Data 80000fd8: 2001131713c28293 a_src=2=SRC_IMM a_offset_imm0=0x80000fd8 b_src=2=SRC_IMM b_use_sp_imm1=0x20011317 b_offset_imm0=0x13c28293 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2001131713c28293 */
	mov r12, 0x2001131713c28293 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_236c: /* paddr=0x236c verbose=Init Data 80000fe0: 2000f39761430313 a_src=2=SRC_IMM a_offset_imm0=0x80000fe0 b_src=2=SRC_IMM b_use_sp_imm1=0x2000f397 b_offset_imm0=0x61430313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2000f39761430313 */
	mov r12, 0x2000f39761430313 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fe0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2370: /* paddr=0x2370 verbose=Init Data 80000fe8: 40530e3301c38393 a_src=2=SRC_IMM a_offset_imm0=0x80000fe8 b_src=2=SRC_IMM b_use_sp_imm1=0x40530e33 b_offset_imm0=0x1c38393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40530e3301c38393 */
	mov r12, 0x40530e3301c38393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fe8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2374: /* paddr=0x2374 verbose=Init Data 80000ff0: 1c3a023402e5e13 a_src=2=SRC_IMM a_offset_imm0=0x80000ff0 b_src=2=SRC_IMM b_use_sp_imm1=0x1c3a023 b_offset_imm0=0x402e5e13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1c3a023402e5e13 */
	mov r12, 0x1c3a023402e5e13 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ff0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2378: /* paddr=0x2378 verbose=Init Data 80000ff8: 62dc6300438393 a_src=2=SRC_IMM a_offset_imm0=0x80000ff8 b_src=2=SRC_IMM b_use_sp_imm1=0x62dc63 b_offset_imm0=0x438393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x62dc6300438393 */
	mov r12, 0x62dc6300438393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ff8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_237c: /* paddr=0x237c verbose=Init Data 80001000: 1d3a0230002ae83 a_src=2=SRC_IMM a_offset_imm0=0x80001000 b_src=2=SRC_IMM b_use_sp_imm1=0x1d3a023 b_offset_imm0=0x2ae83 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1d3a0230002ae83 */
	mov r12, 0x1d3a0230002ae83 /* STORE_IND: reg_value = value */
	mov r13, 0x80001000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2380: /* paddr=0x2380 verbose=Init Data 80001008: 42829300438393 a_src=2=SRC_IMM a_offset_imm0=0x80001008 b_src=2=SRC_IMM b_use_sp_imm1=0x428293 b_offset_imm0=0x438393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x42829300438393 */
	mov r12, 0x42829300438393 /* STORE_IND: reg_value = value */
	mov r13, 0x80001008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2384: /* paddr=0x2384 verbose=Init Data 80001010: a0337fedff06f a_src=2=SRC_IMM a_offset_imm0=0x80001010 b_src=2=SRC_IMM b_use_sp_imm1=0xa0337 b_offset_imm0=0xfedff06f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0337fedff06f */
	mov r12, 0xa0337fedff06f /* STORE_IND: reg_value = value */
	mov r13, 0x80001010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2388: /* paddr=0x2388 verbose=Init Data 80001018: c313130093031b a_src=2=SRC_IMM a_offset_imm0=0x80001018 b_src=2=SRC_IMM b_use_sp_imm1=0xc31313 b_offset_imm0=0x93031b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xc313130093031b */
	mov r12, 0xc313130093031b /* STORE_IND: reg_value = value */
	mov r13, 0x80001018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_238c: /* paddr=0x238c verbose=Init Data 80001020: 32283f1230313 a_src=2=SRC_IMM a_offset_imm0=0x80001020 b_src=2=SRC_IMM b_use_sp_imm1=0x32283 b_offset_imm0=0xf1230313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x32283f1230313 */
	mov r12, 0x32283f1230313 /* STORE_IND: reg_value = value */
	mov r13, 0x80001020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2390: /* paddr=0x2390 verbose=Init Data 80001028: eee3031b0ffff337 a_src=2=SRC_IMM a_offset_imm0=0x80001028 b_src=2=SRC_IMM b_use_sp_imm1=0xeee3031b b_offset_imm0=0xffff337 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xeee3031b0ffff337 */
	mov r12, 0xeee3031b0ffff337 /* STORE_IND: reg_value = value */
	mov r13, 0x80001028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2394: /* paddr=0x2394 verbose=Init Data 80001030: 1002b700628c63 a_src=2=SRC_IMM a_offset_imm0=0x80001030 b_src=2=SRC_IMM b_use_sp_imm1=0x1002b7 b_offset_imm0=0x628c63 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1002b700628c63 */
	mov r12, 0x1002b700628c63 /* STORE_IND: reg_value = value */
	mov r13, 0x80001030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2398: /* paddr=0x2398 verbose=Init Data 80001038: 5553031b00005337 a_src=2=SRC_IMM a_offset_imm0=0x80001038 b_src=2=SRC_IMM b_use_sp_imm1=0x5553031b b_offset_imm0=0x5337 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5553031b00005337 */
	mov r12, 0x5553031b00005337 /* STORE_IND: reg_value = value */
	mov r13, 0x80001038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_239c: /* paddr=0x239c verbose=Init Data 80001040: c0006f0062a023 a_src=2=SRC_IMM a_offset_imm0=0x80001040 b_src=2=SRC_IMM b_use_sp_imm1=0xc0006f b_offset_imm0=0x62a023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xc0006f0062a023 */
	mov r12, 0xc0006f0062a023 /* STORE_IND: reg_value = value */
	mov r13, 0x80001040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_23a0: /* paddr=0x23a0 verbose=Init Data 80001048: 7305d00893 a_src=2=SRC_IMM a_offset_imm0=0x80001048 b_src=2=SRC_IMM b_use_sp_imm1=0x73 b_offset_imm0=0x5d00893 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7305d00893 */
	mov r12, 0x7305d00893 /* STORE_IND: reg_value = value */
	mov r13, 0x80001048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_23a4: /* paddr=0x23a4 verbose=Init Data 80001050: 0000006f a_src=2=SRC_IMM a_offset_imm0=0x80001050 b_src=2=SRC_IMM b_offset_imm0=0x6f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6f */
	mov r12, 0x6f /* STORE_IND: reg_value = value */
	mov r13, 0x80001050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_23a8: /* paddr=0x23a8 verbose=Init Data 80001058: 00000000 a_src=2=SRC_IMM a_offset_imm0=0x80001058 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0x80001058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_23ac: /* paddr=0x23ac verbose=Init Data 80001060: 0000 a_src=2=SRC_IMM a_offset_imm0=0x80001060 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0x80001060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_23b0: /* paddr=0x23b0 verbose=Set marchid: fffeeee a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xfffeeee op=1=copyb store=1=STORE_MEM store_offset=0xa0008f12 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfffeeee */
	mov r13, 0xa0008f12/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffeeee /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_23b4: /* paddr=0x23b4 verbose=Set mtvec: 9192 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x23e8 op=1=copyb store=1=STORE_MEM store_offset=0xa0008305 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x23e8 */
	mov r13, 0xa0008305/* STORE_MEM: address = i.store_offset */
	mov r12, 0x23e8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_23b8: /* paddr=0x23b8 verbose=Set 1st Param (pInput): 0x90000000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x90000000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x90000000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x90000000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_23bc: /* paddr=0x23bc verbose=Set 2nd Param (pOutput): 0xa0010000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa0010000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000058 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0010000 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0010000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_23c0: /* paddr=0x23c0 verbose=CALL to entry: 0x80000000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x80000000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000008 store_ra=true set_pc=true jmp_offset2=0x4 */
	/* CopyB: c = b = 0x80000000 */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, 0x23c4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, 0x80000000 /* set_pc 1: pc = c + i.jmp_offset1 */
	inc r11 /* increment step */
	jmp pc_80000000 /* set_pc 1: jump to static pc */

pc_23c4: /* paddr=0x23c4 verbose=Set reg1 to output data length read at OUTPUT_ADDR a_src=2=SRC_IMM a_offset_imm0=0xa0010000 b_src=5=SRC_IND ind_width=4 op=1=copyb store=1=STORE_MEM store_offset=0xa0000008 jmp_offset2=0x4 */
	mov r13, 0xa0010000 /* b=SRC_IND: address = a */
	add r13, 0x0 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov eax, [r13] /* b=SRC_IND(4): b = mem[address] */
	/* CopyB: c = b = rax */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rax /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_23c8: /* paddr=0x23c8 verbose=Set reg2 to 0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb store=1=STORE_MEM store_offset=0xa0000010 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_23cc: /* paddr=0x23cc verbose=Set reg3 to OUTPUT_ADDR + 4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa0010004 op=1=copyb store=1=STORE_MEM store_offset=0xa0000018 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0010004 */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0010004 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_23d0: /* paddr=0x23d0 verbose=If reg1==reg2 jumpt to end a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=1=SRC_MEM b_offset_imm0=0xa0000010 op=11=eq jmp_offset1=14 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000010 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	cmp rbx, rax /* Eq: a == b ? */
	je pc_23d0_equal_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_23d0_equal_done
pc_23d0_equal_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_23d0_equal_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_23d0_flag_false /* flag == 1 ? */
	mov r9, 0x23e4 /* pc += i.jmp_offset1 */
	jmp pc_23d0_flag_done
pc_23d0_flag_false:
	mov r9, 0x23d4 /* pc += i.jmp_offset2 */
pc_23d0_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_23d0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_23d0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_23d4: /* paddr=0x23d4 verbose=Set c to mem(output_data[index]), a=index a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=5=SRC_IND ind_width=4 op=1=copyb jmp_offset2=0x4 */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x0 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov eax, [r13] /* b=SRC_IND(4): b = mem[address] */
	/* CopyB: c = b = rax */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_23d8: /* paddr=0x23d8 verbose=Public output, set c to output_data[index], a=index a_src=1=SRC_MEM a_offset_imm0=0xa0000010 op=48=pubout jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rax, rcx /* b=SRC_C: b = c */
	/* PubOut: c = b = rax */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_23dc: /* paddr=0x23dc verbose=Set reg3 to reg3 + 4 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000018 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4 /* Add: c = c + b = a + b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_23e0: /* paddr=0x23e0 verbose=Set reg2 to reg2 + 1 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0xfffffffffffffff0 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x1 /* Add: c = c + b = a + b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	mov r9, 0x23d0 /* set_pc 3: pc += i.jmp_offset2 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_23e0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_23e0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_23e4: /* paddr=0x23e4 verbose=jump to end successfully a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x10000000 op=1=copyb set_pc=true */
	/* CopyB: c = b = 0x10000000 */
	/* STORE_NONE */
	mov r9, 0x10000000 /* set_pc 1: pc = c + i.jmp_offset1 */
	inc r11 /* increment step */
	jmp pc_10000000 /* set_pc 1: jump to static pc */

pc_23e8: /* paddr=0x23e8 verbose=beq r17, 93 # Check if is exit a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x5d op=11=eq jmp_offset1=4 jmp_offset2=0x8 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	cmp rbx, 0x5d /* Eq: a == b ? */
	je pc_23e8_equal_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_23e8_equal_done
pc_23e8_equal_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_23e8_equal_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_23e8_flag_false /* flag == 1 ? */
	mov r9, 0x23ec /* pc += i.jmp_offset1 */
	jmp pc_23e8_flag_done
pc_23e8_flag_false:
	mov r9, 0x23f0 /* pc += i.jmp_offset2 */
pc_23e8_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_23e8_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_23e8_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_23ec: /* paddr=0x23ec verbose=jump to end due to error a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x10000000 op=1=copyb set_pc=true */
	/* CopyB: c = b = 0x10000000 */
	/* STORE_NONE */
	mov r9, 0x10000000 /* set_pc 1: pc = c + i.jmp_offset1 */
	inc r11 /* increment step */
	jmp pc_10000000 /* set_pc 1: jump to static pc */

pc_23f0: /* paddr=0x23f0 verbose=beq r17, 65793 # Check if is keccak a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x10101 op=11=eq jmp_offset1=4 jmp_offset2=0x8 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	cmp rbx, 0x10101 /* Eq: a == b ? */
	je pc_23f0_equal_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_23f0_equal_done
pc_23f0_equal_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_23f0_equal_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_23f0_flag_false /* flag == 1 ? */
	mov r9, 0x23f4 /* pc += i.jmp_offset1 */
	jmp pc_23f0_flag_done
pc_23f0_flag_false:
	mov r9, 0x23f8 /* pc += i.jmp_offset2 */
pc_23f0_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_23f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_23f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_23f4: /* paddr=0x23f4 verbose=keccak a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM op=241=keccak jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, 0 /* Keccak */
	mov rdx, 0
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_23f4_flag_false /* flag == 1 ? */
	mov r9, 0x23f8 /* pc += i.jmp_offset1 */
	jmp pc_23f4_flag_done
pc_23f4_flag_false:
	mov r9, 0x23f8 /* pc += i.jmp_offset2 */
pc_23f4_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_23f4_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_23f4_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_23f8: /* paddr=0x23f8 verbose=ret a_src=2=SRC_IMM b_src=1=SRC_MEM b_offset_imm0=0xa0000008 op=1=copyb set_pc=true jmp_offset2=0x4 */
	mov r13, 0xa0000008 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	/* STORE_NONE */
	mov r9, rax /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_23f8_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_23f8_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_10000000: /* paddr=0x10000000 verbose=end a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb end=true */
	/* CopyB: c = b = 0x0 */
	/* STORE_NONE */
	mov r9, 0x10000000 /* set_pc 3: pc += i.jmp_offset2 */
	inc r11 /* increment step */
	jmp execute_end /* end */

pc_80000000: /* paddr=0x80000000 verbose=lui r16, 0x7d5c0000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x7d5c0000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7d5c0000 */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, 0x7d5c0000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000004: /* paddr=0x80000004 verbose=addi r16, r16, 0xfffffddb a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffddb op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffddb /* Add: c = c + b = a + b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000008: /* paddr=0x80000008 verbose=slli r16, r16, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000000c: /* paddr=0x8000000c verbose=addi r16, r16, 0x3ea a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x3ea op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x3ea /* Add: c = c + b = a + b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000010: /* paddr=0x80000010 verbose=slli r16, r16, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000014: /* paddr=0x80000014 verbose=addi r16, r16, 0x6ff a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x6ff op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x6ff /* Add: c = c + b = a + b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000018: /* paddr=0x80000018 verbose=slli r16, r16, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000001c: /* paddr=0x8000001c verbose=addi r16, r16, 0x1db a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x1db op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x1db /* Add: c = c + b = a + b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000020: /* paddr=0x80000020 verbose=srli r17, r16, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000024: /* paddr=0x80000024 verbose=srli r15, r16, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000028: /* paddr=0x80000028 verbose=or r17, r17, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000002c: /* paddr=0x8000002c verbose=srli r18, r17, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000030: /* paddr=0x80000030 verbose=srli r15, r17, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000034: /* paddr=0x80000034 verbose=or r18, r18, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000038: /* paddr=0x80000038 verbose=srli r19, r18, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000003c: /* paddr=0x8000003c verbose=srli r15, r18, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000040: /* paddr=0x80000040 verbose=or r19, r19, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000044: /* paddr=0x80000044 verbose=srli r20, r19, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000048: /* paddr=0x80000048 verbose=srli r15, r19, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000004c: /* paddr=0x8000004c verbose=or r20, r20, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000050: /* paddr=0x80000050 verbose=srli r21, r20, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000054: /* paddr=0x80000054 verbose=srli r15, r20, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000058: /* paddr=0x80000058 verbose=or r21, r21, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000005c: /* paddr=0x8000005c verbose=srli r22, r21, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000060: /* paddr=0x80000060 verbose=srli r15, r21, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000064: /* paddr=0x80000064 verbose=or r22, r22, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000068: /* paddr=0x80000068 verbose=srli r23, r22, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000006c: /* paddr=0x8000006c verbose=srli r15, r22, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000070: /* paddr=0x80000070 verbose=or r23, r23, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000074: /* paddr=0x80000074 verbose=srli r24, r23, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000078: /* paddr=0x80000078 verbose=srli r15, r23, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000007c: /* paddr=0x8000007c verbose=or r24, r24, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000080: /* paddr=0x80000080 verbose=srli r25, r24, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000084: /* paddr=0x80000084 verbose=srli r15, r24, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000088: /* paddr=0x80000088 verbose=or r25, r25, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000008c: /* paddr=0x8000008c verbose=srli r26, r25, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000090: /* paddr=0x80000090 verbose=srli r15, r25, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000094: /* paddr=0x80000094 verbose=or r26, r26, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000098: /* paddr=0x80000098 verbose=srli r27, r26, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000009c: /* paddr=0x8000009c verbose=srli r15, r26, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000a0: /* paddr=0x800000a0 verbose=or r27, r27, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000a4: /* paddr=0x800000a4 verbose=srli r28, r27, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000a8: /* paddr=0x800000a8 verbose=srli r15, r27, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000ac: /* paddr=0x800000ac verbose=or r28, r28, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000b0: /* paddr=0x800000b0 verbose=srli r29, r28, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000b4: /* paddr=0x800000b4 verbose=srli r15, r28, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000b8: /* paddr=0x800000b8 verbose=or r29, r29, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000bc: /* paddr=0x800000bc verbose=srli r30, r29, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000c0: /* paddr=0x800000c0 verbose=srli r15, r29, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000c4: /* paddr=0x800000c4 verbose=or r30, r30, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000f0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000c8: /* paddr=0x800000c8 verbose=lui r1, 0xfeedc000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfeedc000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfffffffffeedc000 */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffeedc000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000cc: /* paddr=0x800000cc verbose=addi r1, r1, 0xfffffead a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffead op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffead /* Add: c = c + b = a + b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000d0: /* paddr=0x800000d0 verbose=slli r1, r1, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000d4: /* paddr=0x800000d4 verbose=addi r1, r1, 0x7f7 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x7f7 op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x7f7 /* Add: c = c + b = a + b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000d8: /* paddr=0x800000d8 verbose=slli r1, r1, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000dc: /* paddr=0x800000dc verbose=addi r1, r1, 0x36f a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x36f op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x36f /* Add: c = c + b = a + b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000e0: /* paddr=0x800000e0 verbose=slli r1, r1, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000e4: /* paddr=0x800000e4 verbose=addi r1, r1, 0x2ad a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x2ad op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2ad /* Add: c = c + b = a + b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000e8: /* paddr=0x800000e8 verbose=srli r2, r1, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000ec: /* paddr=0x800000ec verbose=srli r15, r1, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000f0: /* paddr=0x800000f0 verbose=or r2, r2, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000f4: /* paddr=0x800000f4 verbose=srli r3, r2, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000f8: /* paddr=0x800000f8 verbose=srli r15, r2, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000fc: /* paddr=0x800000fc verbose=or r3, r3, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000100: /* paddr=0x80000100 verbose=srli r4, r3, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000104: /* paddr=0x80000104 verbose=srli r15, r3, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000108: /* paddr=0x80000108 verbose=or r4, r4, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000010c: /* paddr=0x8000010c verbose=srli r5, r4, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000110: /* paddr=0x80000110 verbose=srli r15, r4, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000114: /* paddr=0x80000114 verbose=or r5, r5, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000118: /* paddr=0x80000118 verbose=srli r6, r5, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000011c: /* paddr=0x8000011c verbose=srli r15, r5, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000120: /* paddr=0x80000120 verbose=or r6, r6, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000124: /* paddr=0x80000124 verbose=srli r7, r6, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000128: /* paddr=0x80000128 verbose=srli r15, r6, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000012c: /* paddr=0x8000012c verbose=or r7, r7, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000130: /* paddr=0x80000130 verbose=srli r8, r7, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000134: /* paddr=0x80000134 verbose=srli r15, r7, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000138: /* paddr=0x80000138 verbose=or r8, r8, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000013c: /* paddr=0x8000013c verbose=srli r9, r8, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000140: /* paddr=0x80000140 verbose=srli r15, r8, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000144: /* paddr=0x80000144 verbose=or r9, r9, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000148: /* paddr=0x80000148 verbose=srli r10, r9, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000014c: /* paddr=0x8000014c verbose=srli r15, r9, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000150: /* paddr=0x80000150 verbose=or r10, r10, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000154: /* paddr=0x80000154 verbose=srli r11, r10, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000158: /* paddr=0x80000158 verbose=srli r15, r10, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000015c: /* paddr=0x8000015c verbose=or r11, r11, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000160: /* paddr=0x80000160 verbose=srli r12, r11, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000164: /* paddr=0x80000164 verbose=srli r15, r11, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000168: /* paddr=0x80000168 verbose=or r12, r12, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000016c: /* paddr=0x8000016c verbose=srli r13, r12, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000170: /* paddr=0x80000170 verbose=srli r15, r12, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000174: /* paddr=0x80000174 verbose=or r13, r13, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000068 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000068 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000178: /* paddr=0x80000178 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000017c: /* paddr=0x8000017c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000180: /* paddr=0x80000180 verbose=auipc r4, 0x20012000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000020 store_ra=true jmp_offset1=4 jmp_offset2=0x20012000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0012180 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000184: /* paddr=0x80000184 verbose=addi r4, r4, 0xffffff98 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffff98 op=12=add store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffff98 /* Add: c = c + b = a + b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000188: /* paddr=0x80000188 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000018c: /* paddr=0x8000018c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000190: /* paddr=0x80000190 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000194: /* paddr=0x80000194 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000198: /* paddr=0x80000198 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000019c: /* paddr=0x8000019c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001a0: /* paddr=0x800001a0 verbose=addi r7, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001a4: /* paddr=0x800001a4 verbose=slli r7, r7, 0x2f a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x2f op=49=sll store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2f /* Sll: c = a << b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001a8: /* paddr=0x800001a8 verbose=xori r7, r7, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001ac: /* paddr=0x800001ac verbose=addi r7, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001b0: /* paddr=0x800001b0 verbose=slli r7, r7, 0x2f a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x2f op=49=sll store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2f /* Sll: c = a << b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001b4: /* paddr=0x800001b4 verbose=xori r7, r7, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001b8: /* paddr=0x800001b8 verbose=sllw r14, r7, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000070 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001bc: /* paddr=0x800001bc verbose=sd r14, 0x0(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000070 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000070 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800001c0: /* paddr=0x800001c0 verbose=addi r27, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001c4: /* paddr=0x800001c4 verbose=slli r27, r27, 0x3a a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=2=SRC_IMM b_offset_imm0=0x3a op=49=sll store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3a /* Sll: c = a << b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001c8: /* paddr=0x800001c8 verbose=addi r30, r0, 0x17 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x17 op=12=add store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x17 */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x17 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001cc: /* paddr=0x800001cc verbose=sllw r30, r27, r30 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=1=SRC_MEM b_offset_imm0=0xa00000f0 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000f0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001d0: /* paddr=0x800001d0 verbose=sd r30, 0x8(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000f0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000f0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800001d4: /* paddr=0x800001d4 verbose=addi r5, r0, 0xfffffffa a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffa op=12=add store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xfffffffffffffffa */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffffffffa /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001d8: /* paddr=0x800001d8 verbose=addi r5, r0, 0xfffffffa a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffa op=12=add store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xfffffffffffffffa */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffffffffa /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001dc: /* paddr=0x800001dc verbose=sllw r5, r5, r5 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000028 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000028 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001e0: /* paddr=0x800001e0 verbose=sd r5, 0x16(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000028 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x10 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000028 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x10 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800001e4: /* paddr=0x800001e4 verbose=addi r18, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001e8: /* paddr=0x800001e8 verbose=slli r18, r18, 0x1c a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=2=SRC_IMM b_offset_imm0=0x1c op=49=sll store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1c /* Sll: c = a << b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001ec: /* paddr=0x800001ec verbose=addi r15, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001f0: /* paddr=0x800001f0 verbose=sllw r22, r18, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001f4: /* paddr=0x800001f4 verbose=sd r22, 0x24(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000b0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x18 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000b0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x18 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800001f8: /* paddr=0x800001f8 verbose=addi r26, r0, 0x5 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5 op=12=add store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x5 */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001fc: /* paddr=0x800001fc verbose=addi r22, r0, 0x5 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5 op=12=add store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x5 */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000200: /* paddr=0x80000200 verbose=sllw r26, r26, r22 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=1=SRC_MEM b_offset_imm0=0xa00000b0 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000b0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000204: /* paddr=0x80000204 verbose=sd r26, 0x32(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000d0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x20 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000d0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x20 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000208: /* paddr=0x80000208 verbose=addi r14, r0, 0xffffffff a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=12=add store=1=STORE_MEM store_offset=0xa0000070 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xffffffffffffffff */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffffffffffffffff /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000020c: /* paddr=0x8000020c verbose=slli r14, r14, 0x3f a_src=1=SRC_MEM a_offset_imm0=0xa0000070 b_src=2=SRC_IMM b_offset_imm0=0x3f op=49=sll store=1=STORE_MEM store_offset=0xa0000070 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000070 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3f /* Sll: c = a << b */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000210: /* paddr=0x80000210 verbose=addi r23, r0, 0x2 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x2 op=12=add store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x2 */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x2 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000214: /* paddr=0x80000214 verbose=sllw r29, r14, r23 a_src=1=SRC_MEM a_offset_imm0=0xa0000070 b_src=1=SRC_MEM b_offset_imm0=0xa00000b8 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000070 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000b8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000218: /* paddr=0x80000218 verbose=sd r29, 0x40(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000e8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x28 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x28 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000021c: /* paddr=0x8000021c verbose=addi r12, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000220: /* paddr=0x80000220 verbose=addi r14, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000070 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000224: /* paddr=0x80000224 verbose=sllw r9, r12, r14 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=1=SRC_MEM b_offset_imm0=0xa0000070 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000070 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000228: /* paddr=0x80000228 verbose=sd r9, 0x48(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000048 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x30 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000048 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x30 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000022c: /* paddr=0x8000022c verbose=addi r10, r0, 0xffffffff a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xffffffffffffffff */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffffffffffffffff /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000230: /* paddr=0x80000230 verbose=srli r10, r10, 0x1 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1 op=50=srl store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x1 /* Srl: c = a >> b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000234: /* paddr=0x80000234 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000238: /* paddr=0x80000238 verbose=sllw r1, r10, r0 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM op=52=sll_w store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	shl rcx, 0x0 /* SllW: c = a_w << b */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000023c: /* paddr=0x8000023c verbose=sd r1, 0x56(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000008 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x38 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000008 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x38 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000240: /* paddr=0x80000240 verbose=addi r31, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa00000f8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000244: /* paddr=0x80000244 verbose=addi r8, r0, 0x15 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x15 op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x15 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x15 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000248: /* paddr=0x80000248 verbose=sllw r19, r31, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000f8 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000f8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000024c: /* paddr=0x8000024c verbose=sd r19, 0x64(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000098 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x40 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000098 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x40 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000250: /* paddr=0x80000250 verbose=addi r23, r0, 0x2 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x2 op=12=add store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x2 */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x2 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000254: /* paddr=0x80000254 verbose=addi r27, r0, 0x17 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x17 op=12=add store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x17 */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x17 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000258: /* paddr=0x80000258 verbose=sllw r17, r23, r27 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=1=SRC_MEM b_offset_imm0=0xa00000d8 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000d8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000025c: /* paddr=0x8000025c verbose=sd r17, 0x72(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000088 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x48 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000088 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x48 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000260: /* paddr=0x80000260 verbose=addi r17, r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x4 */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, 0x4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000264: /* paddr=0x80000264 verbose=addi r26, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000268: /* paddr=0x80000268 verbose=sllw r25, r17, r26 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=1=SRC_MEM b_offset_imm0=0xa00000d0 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000d0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000026c: /* paddr=0x8000026c verbose=sd r25, 0x80(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000c8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x50 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000c8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x50 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000270: /* paddr=0x80000270 verbose=addi r11, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000274: /* paddr=0x80000274 verbose=addi r12, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000278: /* paddr=0x80000278 verbose=sllw r16, r11, r12 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000027c: /* paddr=0x8000027c verbose=sd r16, 0x88(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000080 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x58 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000080 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x58 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000280: /* paddr=0x80000280 verbose=addi r24, r0, 0x10 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x10 op=12=add store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x10 */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x10 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000284: /* paddr=0x80000284 verbose=addi r3, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000288: /* paddr=0x80000288 verbose=sllw r27, r24, r3 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=1=SRC_MEM b_offset_imm0=0xa0000018 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000018 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000028c: /* paddr=0x8000028c verbose=sd r27, 0x96(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000d8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x60 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000d8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x60 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000290: /* paddr=0x80000290 verbose=addi r16, r0, 0x20 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x20 op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x20 */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, 0x20 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000294: /* paddr=0x80000294 verbose=addi r10, r0, 0x2 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x2 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x2 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x2 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000298: /* paddr=0x80000298 verbose=sllw r7, r16, r10 a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=1=SRC_MEM b_offset_imm0=0xa0000050 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000050 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000029c: /* paddr=0x8000029c verbose=sd r7, 0x104(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x68 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x68 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800002a0: /* paddr=0x800002a0 verbose=addi r2, r0, 0x40 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x40 op=12=add store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x40 */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, 0x40 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002a4: /* paddr=0x800002a4 verbose=addi r1, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002a8: /* paddr=0x800002a8 verbose=sllw r0, r2, r1 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=1=SRC_MEM b_offset_imm0=0xa0000008 op=52=sll_w jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000008 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002ac: /* paddr=0x800002ac verbose=sd r0, 0x112(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x70 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x70 /* STORE_IND: address = i.store_offset */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800002b0: /* paddr=0x800002b0 verbose=addi r28, r0, 0x80 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x80 op=12=add store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x80 */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002b4: /* paddr=0x800002b4 verbose=addi r21, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002b8: /* paddr=0x800002b8 verbose=sllw r6, r28, r21 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=1=SRC_MEM b_offset_imm0=0xa00000a8 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000a8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002bc: /* paddr=0x800002bc verbose=sd r6, 0x120(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x78 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x78 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800002c0: /* paddr=0x800002c0 verbose=auipc r5, 0x20012000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000028 store_ra=true jmp_offset1=4 jmp_offset2=0x20012000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa00122c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800002c4: /* paddr=0x800002c4 verbose=addi r5, r5, 0xfffffed8 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffed8 op=12=add store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffed8 /* Add: c = c + b = a + b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002c8: /* paddr=0x800002c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002cc: /* paddr=0x800002cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002d0: /* paddr=0x800002d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002d4: /* paddr=0x800002d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002d8: /* paddr=0x800002d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002dc: /* paddr=0x800002dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002e0: /* paddr=0x800002e0 verbose=addi r8, r0, 0x100 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x100 op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x100 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x100 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002e4: /* paddr=0x800002e4 verbose=addi r17, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002e8: /* paddr=0x800002e8 verbose=sllw r13, r8, r17 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=1=SRC_MEM b_offset_imm0=0xa0000088 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000088 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002ec: /* paddr=0x800002ec verbose=sd r13, 0x0(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000068 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000068 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800002f0: /* paddr=0x800002f0 verbose=addi r21, r0, 0x200 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x200 op=12=add store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x200 */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x200 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002f4: /* paddr=0x800002f4 verbose=addi r13, r0, 0x3 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x3 op=12=add store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x3 */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, 0x3 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002f8: /* paddr=0x800002f8 verbose=sllw r20, r21, r13 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=1=SRC_MEM b_offset_imm0=0xa0000068 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000068 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002fc: /* paddr=0x800002fc verbose=sd r20, 0x8(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa00000a0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000a0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000300: /* paddr=0x80000300 verbose=addi r25, r0, 0x400 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x400 op=12=add store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x400 */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x400 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000304: /* paddr=0x80000304 verbose=addi r28, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000308: /* paddr=0x80000308 verbose=sllw r18, r25, r28 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=1=SRC_MEM b_offset_imm0=0xa00000e0 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000030c: /* paddr=0x8000030c verbose=sd r18, 0x16(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000090 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x10 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000090 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x10 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000310: /* paddr=0x80000310 verbose=addi r15, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000314: /* paddr=0x80000314 verbose=slli r15, r15, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000078 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000078 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000318: /* paddr=0x80000318 verbose=addi r11, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000031c: /* paddr=0x8000031c verbose=sllw r2, r15, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000078 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000078 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000320: /* paddr=0x80000320 verbose=sd r2, 0x24(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000010 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x18 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000010 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x18 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000324: /* paddr=0x80000324 verbose=addi r19, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000328: /* paddr=0x80000328 verbose=slli r19, r19, 0xc a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=2=SRC_IMM b_offset_imm0=0xc op=49=sll store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xc /* Sll: c = a << b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000032c: /* paddr=0x8000032c verbose=addi r9, r0, 0x9 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x9 op=12=add store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x9 */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, 0x9 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000330: /* paddr=0x80000330 verbose=sllw r28, r19, r9 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=1=SRC_MEM b_offset_imm0=0xa0000048 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000048 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000334: /* paddr=0x80000334 verbose=sd r28, 0x32(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa00000e0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x20 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x20 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000338: /* paddr=0x80000338 verbose=addi r6, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000033c: /* paddr=0x8000033c verbose=slli r6, r6, 0xd a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0xd op=49=sll store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xd /* Sll: c = a << b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000340: /* paddr=0x80000340 verbose=addi r20, r0, 0x12 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x12 op=12=add store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x12 */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x12 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000344: /* paddr=0x80000344 verbose=sllw r31, r6, r20 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa00000a0 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000f8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000a0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000348: /* paddr=0x80000348 verbose=sd r31, 0x40(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa00000f8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x28 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000f8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x28 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000034c: /* paddr=0x8000034c verbose=addi r1, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000350: /* paddr=0x80000350 verbose=slli r1, r1, 0xe a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0xe op=49=sll store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xe /* Sll: c = a << b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000354: /* paddr=0x80000354 verbose=addi r16, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000358: /* paddr=0x80000358 verbose=sllw r3, r1, r16 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=1=SRC_MEM b_offset_imm0=0xa0000080 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000080 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000035c: /* paddr=0x8000035c verbose=sd r3, 0x48(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000018 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x30 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000018 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x30 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000360: /* paddr=0x80000360 verbose=addi r13, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000364: /* paddr=0x80000364 verbose=slli r13, r13, 0xf a_src=1=SRC_MEM a_offset_imm0=0xa0000068 b_src=2=SRC_IMM b_offset_imm0=0xf op=49=sll store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000068 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xf /* Sll: c = a << b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000368: /* paddr=0x80000368 verbose=addi r29, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000036c: /* paddr=0x8000036c verbose=sllw r11, r13, r29 a_src=1=SRC_MEM a_offset_imm0=0xa0000068 b_src=1=SRC_MEM b_offset_imm0=0xa00000e8 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000068 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000370: /* paddr=0x80000370 verbose=sd r11, 0x56(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x38 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x38 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000374: /* paddr=0x80000374 verbose=addi r22, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000378: /* paddr=0x80000378 verbose=slli r22, r22, 0x10 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=2=SRC_IMM b_offset_imm0=0x10 op=49=sll store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x10 /* Sll: c = a << b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000037c: /* paddr=0x8000037c verbose=addi r2, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000380: /* paddr=0x80000380 verbose=sllw r10, r22, r2 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=1=SRC_MEM b_offset_imm0=0xa0000010 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000010 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000384: /* paddr=0x80000384 verbose=sd r10, 0x64(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000050 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x40 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000050 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x40 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000388: /* paddr=0x80000388 verbose=addi r3, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000038c: /* paddr=0x8000038c verbose=slli r3, r3, 0x11 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x11 op=49=sll store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x11 /* Sll: c = a << b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000390: /* paddr=0x80000390 verbose=addi r19, r0, 0xa a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa op=12=add store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xa */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000394: /* paddr=0x80000394 verbose=sllw r4, r3, r19 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=1=SRC_MEM b_offset_imm0=0xa0000098 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000098 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000398: /* paddr=0x80000398 verbose=sd r4, 0x72(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000020 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x48 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000020 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x48 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000039c: /* paddr=0x8000039c verbose=addi r20, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003a0: /* paddr=0x800003a0 verbose=slli r20, r20, 0x12 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=2=SRC_IMM b_offset_imm0=0x12 op=49=sll store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x12 /* Sll: c = a << b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003a4: /* paddr=0x800003a4 verbose=addi r6, r0, 0x5 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x5 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003a8: /* paddr=0x800003a8 verbose=sllw r8, r20, r6 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003ac: /* paddr=0x800003ac verbose=sd r8, 0x80(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x50 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x50 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800003b0: /* paddr=0x800003b0 verbose=addi r9, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003b4: /* paddr=0x800003b4 verbose=slli r9, r9, 0x13 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=2=SRC_IMM b_offset_imm0=0x13 op=49=sll store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x13 /* Sll: c = a << b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003b8: /* paddr=0x800003b8 verbose=addi r31, r0, 0x1b a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1b op=12=add store=1=STORE_MEM store_offset=0xa00000f8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1b */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1b /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003bc: /* paddr=0x800003bc verbose=sllw r12, r9, r31 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=1=SRC_MEM b_offset_imm0=0xa00000f8 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000f8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003c0: /* paddr=0x800003c0 verbose=sd r12, 0x88(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x58 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x58 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800003c4: /* paddr=0x800003c4 verbose=addi r30, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003c8: /* paddr=0x800003c8 verbose=slli r30, r30, 0x14 a_src=1=SRC_MEM a_offset_imm0=0xa00000f0 b_src=2=SRC_IMM b_offset_imm0=0x14 op=49=sll store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x14 /* Sll: c = a << b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003cc: /* paddr=0x800003cc verbose=addi r4, r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x4 */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, 0x4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003d0: /* paddr=0x800003d0 verbose=sllw r24, r30, r4 a_src=1=SRC_MEM a_offset_imm0=0xa00000f0 b_src=1=SRC_MEM b_offset_imm0=0xa0000020 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000f0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000020 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003d4: /* paddr=0x800003d4 verbose=sd r24, 0x96(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa00000c0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x60 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000c0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x60 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800003d8: /* paddr=0x800003d8 verbose=addi r29, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003dc: /* paddr=0x800003dc verbose=slli r29, r29, 0x15 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=2=SRC_IMM b_offset_imm0=0x15 op=49=sll store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x15 /* Sll: c = a << b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003e0: /* paddr=0x800003e0 verbose=addi r25, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003e4: /* paddr=0x800003e4 verbose=sllw r23, r29, r25 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=1=SRC_MEM b_offset_imm0=0xa00000c8 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000c8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003e8: /* paddr=0x800003e8 verbose=sd r23, 0x104(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa00000b8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x68 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000b8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x68 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800003ec: /* paddr=0x800003ec verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003f0: /* paddr=0x800003f0 verbose=addi r24, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003f4: /* paddr=0x800003f4 verbose=sllw r21, r0, r24 a_src=2=SRC_IMM b_src=1=SRC_MEM b_offset_imm0=0xa00000c0 op=52=sll_w store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa00000c0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, 0x0 /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003f8: /* paddr=0x800003f8 verbose=sd r21, 0x112(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa00000a8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x70 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000a8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x70 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800003fc: /* paddr=0x800003fc verbose=addi r4, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000400: /* paddr=0x80000400 verbose=slli r4, r4, 0x17 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_offset_imm0=0x17 op=49=sll store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x17 /* Sll: c = a << b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000404: /* paddr=0x80000404 verbose=addi r18, r0, 0x15 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x15 op=12=add store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x15 */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, 0x15 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000408: /* paddr=0x80000408 verbose=sllw r15, r4, r18 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000090 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000090 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000040c: /* paddr=0x8000040c verbose=sd r15, 0x120(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x78 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x78 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000410: /* paddr=0x80000410 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000414: /* paddr=0x80000414 verbose=slli r10, r10, 0x18 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x18 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x18 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000418: /* paddr=0x80000418 verbose=addi r11, r0, 0xb a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xb op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xb */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xb /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000041c: /* paddr=0x8000041c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000420: /* paddr=0x80000420 verbose=sd r12, 0x128(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x80 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x80 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000424: /* paddr=0x80000424 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000428: /* paddr=0x80000428 verbose=slli r10, r10, 0x19 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x19 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x19 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000042c: /* paddr=0x8000042c verbose=addi r11, r0, 0x15 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x15 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x15 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x15 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000430: /* paddr=0x80000430 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000434: /* paddr=0x80000434 verbose=sd r12, 0x136(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x88 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x88 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000438: /* paddr=0x80000438 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000043c: /* paddr=0x8000043c verbose=slli r10, r10, 0x1a a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1a op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1a /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000440: /* paddr=0x80000440 verbose=addi r11, r0, 0x12 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x12 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x12 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x12 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000444: /* paddr=0x80000444 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000448: /* paddr=0x80000448 verbose=sd r12, 0x144(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x90 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x90 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000044c: /* paddr=0x8000044c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000450: /* paddr=0x80000450 verbose=slli r10, r10, 0x1b a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1b op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1b /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000454: /* paddr=0x80000454 verbose=addi r11, r0, 0xe a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xe op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xe */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xe /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000458: /* paddr=0x80000458 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000045c: /* paddr=0x8000045c verbose=sd r12, 0x152(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x98 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x98 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000460: /* paddr=0x80000460 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000464: /* paddr=0x80000464 verbose=slli r10, r10, 0x1d a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1d op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1d /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000468: /* paddr=0x80000468 verbose=addi r11, r0, 0x1d a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1d op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1d */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1d /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000046c: /* paddr=0x8000046c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000470: /* paddr=0x80000470 verbose=sd r12, 0x160(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xa0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xa0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000474: /* paddr=0x80000474 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000478: /* paddr=0x80000478 verbose=slli r10, r10, 0x1e a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1e op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1e /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000047c: /* paddr=0x8000047c verbose=addi r11, r0, 0xe a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xe op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xe */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xe /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000480: /* paddr=0x80000480 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000484: /* paddr=0x80000484 verbose=sd r12, 0x168(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xa8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xa8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000488: /* paddr=0x80000488 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000048c: /* paddr=0x8000048c verbose=slli r10, r10, 0x1f a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1f op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1f /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000490: /* paddr=0x80000490 verbose=addi r11, r0, 0x12 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x12 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x12 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x12 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000494: /* paddr=0x80000494 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000498: /* paddr=0x80000498 verbose=sd r12, 0x176(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xb0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xb0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000049c: /* paddr=0x8000049c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004a0: /* paddr=0x800004a0 verbose=slli r10, r10, 0x20 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x20 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x20 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004a4: /* paddr=0x800004a4 verbose=addi r11, r0, 0x13 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x13 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x13 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x13 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004a8: /* paddr=0x800004a8 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004ac: /* paddr=0x800004ac verbose=sd r12, 0x184(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xb8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xb8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800004b0: /* paddr=0x800004b0 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004b4: /* paddr=0x800004b4 verbose=slli r10, r10, 0x21 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x21 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x21 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004b8: /* paddr=0x800004b8 verbose=addi r11, r0, 0x1f a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1f op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1f */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1f /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004bc: /* paddr=0x800004bc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004c0: /* paddr=0x800004c0 verbose=sd r12, 0x192(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xc0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xc0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800004c4: /* paddr=0x800004c4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004c8: /* paddr=0x800004c8 verbose=slli r10, r10, 0x22 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x22 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x22 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004cc: /* paddr=0x800004cc verbose=addi r11, r0, 0x1b a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1b op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1b /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004d0: /* paddr=0x800004d0 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004d4: /* paddr=0x800004d4 verbose=sd r12, 0x200(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xc8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xc8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800004d8: /* paddr=0x800004d8 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004dc: /* paddr=0x800004dc verbose=slli r10, r10, 0x23 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x23 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x23 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004e0: /* paddr=0x800004e0 verbose=addi r11, r0, 0x17 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x17 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x17 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x17 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004e4: /* paddr=0x800004e4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004e8: /* paddr=0x800004e8 verbose=sd r12, 0x208(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xd0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xd0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800004ec: /* paddr=0x800004ec verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004f0: /* paddr=0x800004f0 verbose=slli r10, r10, 0x24 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x24 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x24 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004f4: /* paddr=0x800004f4 verbose=addi r11, r0, 0x9 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x9 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x9 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x9 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004f8: /* paddr=0x800004f8 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004fc: /* paddr=0x800004fc verbose=sd r12, 0x216(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xd8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xd8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000500: /* paddr=0x80000500 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000504: /* paddr=0x80000504 verbose=slli r10, r10, 0x25 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x25 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x25 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000508: /* paddr=0x80000508 verbose=addi r11, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000050c: /* paddr=0x8000050c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000510: /* paddr=0x80000510 verbose=sd r12, 0x224(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xe0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xe0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000514: /* paddr=0x80000514 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000518: /* paddr=0x80000518 verbose=slli r10, r10, 0x26 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x26 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x26 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000051c: /* paddr=0x8000051c verbose=addi r11, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000520: /* paddr=0x80000520 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000524: /* paddr=0x80000524 verbose=sd r12, 0x232(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xe8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xe8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000528: /* paddr=0x80000528 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000052c: /* paddr=0x8000052c verbose=slli r10, r10, 0x27 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x27 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x27 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000530: /* paddr=0x80000530 verbose=addi r11, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000534: /* paddr=0x80000534 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000538: /* paddr=0x80000538 verbose=sd r12, 0x240(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xf0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xf0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000053c: /* paddr=0x8000053c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000540: /* paddr=0x80000540 verbose=slli r10, r10, 0x28 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x28 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x28 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000544: /* paddr=0x80000544 verbose=addi r11, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000548: /* paddr=0x80000548 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000054c: /* paddr=0x8000054c verbose=sd r12, 0x248(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xf8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xf8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000550: /* paddr=0x80000550 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000554: /* paddr=0x80000554 verbose=slli r10, r10, 0x29 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x29 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x29 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000558: /* paddr=0x80000558 verbose=addi r11, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000055c: /* paddr=0x8000055c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000560: /* paddr=0x80000560 verbose=sd r12, 0x256(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x100 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x100 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000564: /* paddr=0x80000564 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000568: /* paddr=0x80000568 verbose=slli r10, r10, 0x2a a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2a op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2a /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000056c: /* paddr=0x8000056c verbose=addi r11, r0, 0xb a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xb op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xb */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xb /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000570: /* paddr=0x80000570 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000574: /* paddr=0x80000574 verbose=sd r12, 0x264(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x108 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x108 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000578: /* paddr=0x80000578 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000057c: /* paddr=0x8000057c verbose=slli r10, r10, 0x2b a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2b op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2b /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000580: /* paddr=0x80000580 verbose=addi r11, r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x4 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000584: /* paddr=0x80000584 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000588: /* paddr=0x80000588 verbose=sd r12, 0x272(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x110 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x110 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000058c: /* paddr=0x8000058c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000590: /* paddr=0x80000590 verbose=slli r10, r10, 0x2c a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2c op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2c /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000594: /* paddr=0x80000594 verbose=addi r11, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000598: /* paddr=0x80000598 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000059c: /* paddr=0x8000059c verbose=sd r12, 0x280(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x118 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x118 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800005a0: /* paddr=0x800005a0 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005a4: /* paddr=0x800005a4 verbose=slli r10, r10, 0x2d a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2d op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2d /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005a8: /* paddr=0x800005a8 verbose=addi r11, r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xc op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xc */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xc /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005ac: /* paddr=0x800005ac verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005b0: /* paddr=0x800005b0 verbose=sd r12, 0x288(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x120 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x120 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800005b4: /* paddr=0x800005b4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005b8: /* paddr=0x800005b8 verbose=slli r10, r10, 0x2e a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2e op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2e /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005bc: /* paddr=0x800005bc verbose=addi r11, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005c0: /* paddr=0x800005c0 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005c4: /* paddr=0x800005c4 verbose=sd r12, 0x296(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x128 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x128 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800005c8: /* paddr=0x800005c8 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005cc: /* paddr=0x800005cc verbose=slli r10, r10, 0x2f a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2f op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2f /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005d0: /* paddr=0x800005d0 verbose=addi r11, r0, 0x1e a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1e op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1e */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1e /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005d4: /* paddr=0x800005d4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005d8: /* paddr=0x800005d8 verbose=sd r12, 0x304(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x130 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x130 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800005dc: /* paddr=0x800005dc verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005e0: /* paddr=0x800005e0 verbose=slli r10, r10, 0x30 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x30 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x30 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005e4: /* paddr=0x800005e4 verbose=addi r11, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005e8: /* paddr=0x800005e8 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005ec: /* paddr=0x800005ec verbose=sd r12, 0x312(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x138 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x138 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800005f0: /* paddr=0x800005f0 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005f4: /* paddr=0x800005f4 verbose=slli r10, r10, 0x31 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x31 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x31 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005f8: /* paddr=0x800005f8 verbose=addi r11, r0, 0xe a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xe op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xe */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xe /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005fc: /* paddr=0x800005fc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000600: /* paddr=0x80000600 verbose=sd r12, 0x320(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x140 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x140 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000604: /* paddr=0x80000604 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000608: /* paddr=0x80000608 verbose=slli r10, r10, 0x32 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x32 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x32 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000060c: /* paddr=0x8000060c verbose=addi r11, r0, 0x15 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x15 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x15 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x15 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000610: /* paddr=0x80000610 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000614: /* paddr=0x80000614 verbose=sd r12, 0x328(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x148 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x148 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000618: /* paddr=0x80000618 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000061c: /* paddr=0x8000061c verbose=slli r10, r10, 0x33 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x33 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x33 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000620: /* paddr=0x80000620 verbose=addi r11, r0, 0xb a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xb op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xb */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xb /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000624: /* paddr=0x80000624 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000628: /* paddr=0x80000628 verbose=sd r12, 0x336(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x150 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x150 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000062c: /* paddr=0x8000062c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000630: /* paddr=0x80000630 verbose=slli r10, r10, 0x34 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x34 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x34 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000634: /* paddr=0x80000634 verbose=addi r11, r0, 0x10 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x10 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x10 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x10 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000638: /* paddr=0x80000638 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000063c: /* paddr=0x8000063c verbose=sd r12, 0x344(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x158 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x158 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000640: /* paddr=0x80000640 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000644: /* paddr=0x80000644 verbose=slli r10, r10, 0x35 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x35 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x35 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000648: /* paddr=0x80000648 verbose=addi r11, r0, 0x13 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x13 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x13 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x13 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000064c: /* paddr=0x8000064c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000650: /* paddr=0x80000650 verbose=sd r12, 0x352(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x160 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x160 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000654: /* paddr=0x80000654 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000658: /* paddr=0x80000658 verbose=slli r10, r10, 0x36 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x36 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x36 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000065c: /* paddr=0x8000065c verbose=addi r11, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000660: /* paddr=0x80000660 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000664: /* paddr=0x80000664 verbose=sd r12, 0x360(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x168 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x168 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000668: /* paddr=0x80000668 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000066c: /* paddr=0x8000066c verbose=slli r10, r10, 0x37 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x37 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x37 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000670: /* paddr=0x80000670 verbose=addi r11, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000674: /* paddr=0x80000674 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000678: /* paddr=0x80000678 verbose=sd r12, 0x368(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x170 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x170 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000067c: /* paddr=0x8000067c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000680: /* paddr=0x80000680 verbose=slli r10, r10, 0x38 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x38 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x38 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000684: /* paddr=0x80000684 verbose=addi r11, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000688: /* paddr=0x80000688 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000068c: /* paddr=0x8000068c verbose=sd r12, 0x376(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x178 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x178 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000690: /* paddr=0x80000690 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000694: /* paddr=0x80000694 verbose=slli r10, r10, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x39 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x39 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000698: /* paddr=0x80000698 verbose=addi r11, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000069c: /* paddr=0x8000069c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006a0: /* paddr=0x800006a0 verbose=sd r12, 0x384(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x180 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x180 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800006a4: /* paddr=0x800006a4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006a8: /* paddr=0x800006a8 verbose=slli r10, r10, 0x3b a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3b op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3b /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006ac: /* paddr=0x800006ac verbose=addi r11, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006b0: /* paddr=0x800006b0 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006b4: /* paddr=0x800006b4 verbose=sd r12, 0x392(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x188 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x188 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800006b8: /* paddr=0x800006b8 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006bc: /* paddr=0x800006bc verbose=slli r10, r10, 0x3c a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3c op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3c /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006c0: /* paddr=0x800006c0 verbose=addi r11, r0, 0x13 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x13 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x13 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x13 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006c4: /* paddr=0x800006c4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006c8: /* paddr=0x800006c8 verbose=sd r12, 0x400(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x190 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x190 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800006cc: /* paddr=0x800006cc verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006d0: /* paddr=0x800006d0 verbose=slli r10, r10, 0x3d a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3d op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3d /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006d4: /* paddr=0x800006d4 verbose=addi r11, r0, 0xa a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xa */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006d8: /* paddr=0x800006d8 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006dc: /* paddr=0x800006dc verbose=sd r12, 0x408(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x198 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x198 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800006e0: /* paddr=0x800006e0 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006e4: /* paddr=0x800006e4 verbose=slli r10, r10, 0x3e a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3e op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3e /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006e8: /* paddr=0x800006e8 verbose=addi r11, r0, 0x1f a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1f op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1f */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1f /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006ec: /* paddr=0x800006ec verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006f0: /* paddr=0x800006f0 verbose=sd r12, 0x416(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1a0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1a0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800006f4: /* paddr=0x800006f4 verbose=addi r10, r0, 0xfffffffe a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffe op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xfffffffffffffffe */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffffffffe /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006f8: /* paddr=0x800006f8 verbose=addi r11, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006fc: /* paddr=0x800006fc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000700: /* paddr=0x80000700 verbose=sd r12, 0x424(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1a8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1a8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000704: /* paddr=0x80000704 verbose=addi r10, r0, 0xfffffffd a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffd op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xfffffffffffffffd */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffffffffd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000708: /* paddr=0x80000708 verbose=addi r11, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000070c: /* paddr=0x8000070c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000710: /* paddr=0x80000710 verbose=sd r12, 0x432(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1b0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1b0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000714: /* paddr=0x80000714 verbose=addi r10, r0, 0xfffffffb a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffb op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xfffffffffffffffb */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffffffffb /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000718: /* paddr=0x80000718 verbose=addi r11, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000071c: /* paddr=0x8000071c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000720: /* paddr=0x80000720 verbose=sd r12, 0x440(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1b8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1b8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000724: /* paddr=0x80000724 verbose=addi r10, r0, 0xfffffff7 a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffff7 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xfffffffffffffff7 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffffffff7 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000728: /* paddr=0x80000728 verbose=addi r11, r0, 0x3 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x3 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x3 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x3 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000072c: /* paddr=0x8000072c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000730: /* paddr=0x80000730 verbose=sd r12, 0x448(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1c0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1c0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000734: /* paddr=0x80000734 verbose=addi r10, r0, 0xffffffef a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffef op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xffffffffffffffef */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffffffffffffffef /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000738: /* paddr=0x80000738 verbose=addi r11, r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x4 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000073c: /* paddr=0x8000073c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000740: /* paddr=0x80000740 verbose=sd r12, 0x456(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1c8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1c8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000744: /* paddr=0x80000744 verbose=addi r10, r0, 0xffffffdf a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffdf op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xffffffffffffffdf */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffffffffffffffdf /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000748: /* paddr=0x80000748 verbose=addi r11, r0, 0x7 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x7 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x7 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x7 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000074c: /* paddr=0x8000074c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000750: /* paddr=0x80000750 verbose=sd r12, 0x464(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1d0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1d0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000754: /* paddr=0x80000754 verbose=addi r10, r0, 0xffffffbf a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffbf op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xffffffffffffffbf */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffffffffffffffbf /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000758: /* paddr=0x80000758 verbose=addi r11, r0, 0x7 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x7 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x7 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x7 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000075c: /* paddr=0x8000075c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000760: /* paddr=0x80000760 verbose=sd r12, 0x472(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1d8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1d8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000764: /* paddr=0x80000764 verbose=addi r10, r0, 0xffffff7f a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffff7f op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xffffffffffffff7f */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffffffffffffff7f /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000768: /* paddr=0x80000768 verbose=addi r11, r0, 0x12 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x12 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x12 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x12 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000076c: /* paddr=0x8000076c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000770: /* paddr=0x80000770 verbose=sd r12, 0x480(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1e0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1e0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000774: /* paddr=0x80000774 verbose=addi r10, r0, 0xfffffeff a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffeff op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xfffffffffffffeff */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffffffeff /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000778: /* paddr=0x80000778 verbose=addi r11, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000077c: /* paddr=0x8000077c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000780: /* paddr=0x80000780 verbose=sd r12, 0x488(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1e8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1e8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000784: /* paddr=0x80000784 verbose=addi r10, r0, 0xfffffdff a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffdff op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xfffffffffffffdff */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffffffdff /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000788: /* paddr=0x80000788 verbose=addi r11, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000078c: /* paddr=0x8000078c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000790: /* paddr=0x80000790 verbose=sd r12, 0x496(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1f0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1f0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000794: /* paddr=0x80000794 verbose=addi r10, r0, 0xfffffbff a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffbff op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xfffffffffffffbff */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffffffbff /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000798: /* paddr=0x80000798 verbose=addi r11, r0, 0x2 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x2 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x2 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x2 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000079c: /* paddr=0x8000079c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007a0: /* paddr=0x800007a0 verbose=sd r12, 0x504(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x1f8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x1f8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800007a4: /* paddr=0x800007a4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007a8: /* paddr=0x800007a8 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007ac: /* paddr=0x800007ac verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007b0: /* paddr=0x800007b0 verbose=addi r11, r0, 0x1e a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1e op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1e */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1e /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007b4: /* paddr=0x800007b4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007b8: /* paddr=0x800007b8 verbose=sd r12, 0x512(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x200 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x200 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800007bc: /* paddr=0x800007bc verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007c0: /* paddr=0x800007c0 verbose=slli r10, r10, 0xc a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xc op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xc /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007c4: /* paddr=0x800007c4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007c8: /* paddr=0x800007c8 verbose=addi r11, r0, 0x5 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x5 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007cc: /* paddr=0x800007cc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007d0: /* paddr=0x800007d0 verbose=sd r12, 0x520(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x208 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x208 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800007d4: /* paddr=0x800007d4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007d8: /* paddr=0x800007d8 verbose=slli r10, r10, 0xd a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xd op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xd /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007dc: /* paddr=0x800007dc verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007e0: /* paddr=0x800007e0 verbose=addi r11, r0, 0x5 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x5 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007e4: /* paddr=0x800007e4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007e8: /* paddr=0x800007e8 verbose=sd r12, 0x528(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x210 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x210 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800007ec: /* paddr=0x800007ec verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007f0: /* paddr=0x800007f0 verbose=slli r10, r10, 0xe a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xe op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xe /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007f4: /* paddr=0x800007f4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007f8: /* paddr=0x800007f8 verbose=addi r11, r0, 0x7 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x7 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x7 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x7 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007fc: /* paddr=0x800007fc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000800: /* paddr=0x80000800 verbose=sd r12, 0x536(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x218 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x218 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000804: /* paddr=0x80000804 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000808: /* paddr=0x80000808 verbose=slli r10, r10, 0xf a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xf op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xf /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000080c: /* paddr=0x8000080c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000810: /* paddr=0x80000810 verbose=addi r11, r0, 0x13 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x13 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x13 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x13 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000814: /* paddr=0x80000814 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000818: /* paddr=0x80000818 verbose=sd r12, 0x544(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x220 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x220 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000081c: /* paddr=0x8000081c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000820: /* paddr=0x80000820 verbose=slli r10, r10, 0x10 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x10 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x10 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000824: /* paddr=0x80000824 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000828: /* paddr=0x80000828 verbose=addi r11, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000082c: /* paddr=0x8000082c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000830: /* paddr=0x80000830 verbose=sd r12, 0x552(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x228 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x228 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000834: /* paddr=0x80000834 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000838: /* paddr=0x80000838 verbose=slli r10, r10, 0x11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x11 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x11 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000083c: /* paddr=0x8000083c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000840: /* paddr=0x80000840 verbose=addi r11, r0, 0x1d a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1d op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1d */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1d /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000844: /* paddr=0x80000844 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000848: /* paddr=0x80000848 verbose=sd r12, 0x560(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x230 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x230 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000084c: /* paddr=0x8000084c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000850: /* paddr=0x80000850 verbose=slli r10, r10, 0x12 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x12 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x12 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000854: /* paddr=0x80000854 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000858: /* paddr=0x80000858 verbose=addi r11, r0, 0x8 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x8 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x8 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000085c: /* paddr=0x8000085c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000860: /* paddr=0x80000860 verbose=sd r12, 0x568(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x238 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x238 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000864: /* paddr=0x80000864 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000868: /* paddr=0x80000868 verbose=slli r10, r10, 0x37 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x37 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x37 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000086c: /* paddr=0x8000086c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000870: /* paddr=0x80000870 verbose=addi r11, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000874: /* paddr=0x80000874 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000878: /* paddr=0x80000878 verbose=sd r12, 0x576(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x240 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x240 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000087c: /* paddr=0x8000087c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000880: /* paddr=0x80000880 verbose=slli r10, r10, 0x38 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x38 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x38 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000884: /* paddr=0x80000884 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000888: /* paddr=0x80000888 verbose=addi r11, r0, 0x17 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x17 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x17 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x17 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000088c: /* paddr=0x8000088c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000890: /* paddr=0x80000890 verbose=sd r12, 0x584(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x248 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x248 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000894: /* paddr=0x80000894 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000898: /* paddr=0x80000898 verbose=slli r10, r10, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x39 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x39 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000089c: /* paddr=0x8000089c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008a0: /* paddr=0x800008a0 verbose=addi r11, r0, 0x1b a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1b op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1b /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008a4: /* paddr=0x800008a4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008a8: /* paddr=0x800008a8 verbose=sd r12, 0x592(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x250 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x250 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800008ac: /* paddr=0x800008ac verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008b0: /* paddr=0x800008b0 verbose=slli r10, r10, 0x3a a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3a op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3a /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008b4: /* paddr=0x800008b4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008b8: /* paddr=0x800008b8 verbose=addi r11, r0, 0x7 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x7 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x7 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x7 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008bc: /* paddr=0x800008bc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008c0: /* paddr=0x800008c0 verbose=sd r12, 0x600(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x258 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x258 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800008c4: /* paddr=0x800008c4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008c8: /* paddr=0x800008c8 verbose=slli r10, r10, 0x3b a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3b op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3b /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008cc: /* paddr=0x800008cc verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008d0: /* paddr=0x800008d0 verbose=addi r11, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008d4: /* paddr=0x800008d4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008d8: /* paddr=0x800008d8 verbose=sd r12, 0x608(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x260 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x260 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800008dc: /* paddr=0x800008dc verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008e0: /* paddr=0x800008e0 verbose=slli r10, r10, 0x3c a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3c op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3c /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008e4: /* paddr=0x800008e4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008e8: /* paddr=0x800008e8 verbose=addi r11, r0, 0x1d a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1d op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1d */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1d /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008ec: /* paddr=0x800008ec verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008f0: /* paddr=0x800008f0 verbose=sd r12, 0x616(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x268 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x268 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800008f4: /* paddr=0x800008f4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008f8: /* paddr=0x800008f8 verbose=slli r10, r10, 0x3d a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3d op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3d /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008fc: /* paddr=0x800008fc verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000900: /* paddr=0x80000900 verbose=addi r11, r0, 0x1f a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1f op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1f */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1f /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000904: /* paddr=0x80000904 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000908: /* paddr=0x80000908 verbose=sd r12, 0x624(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x270 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x270 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000090c: /* paddr=0x8000090c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000910: /* paddr=0x80000910 verbose=slli r10, r10, 0x3e a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3e op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x3e /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000914: /* paddr=0x80000914 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000918: /* paddr=0x80000918 verbose=addi r11, r0, 0x13 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x13 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x13 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x13 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000091c: /* paddr=0x8000091c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000920: /* paddr=0x80000920 verbose=sd r12, 0x632(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x278 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x278 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000924: /* paddr=0x80000924 verbose=lui r10, 0x55555000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x55555000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x55555000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x55555000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000928: /* paddr=0x80000928 verbose=addi r10, r10, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x555 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x555 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000092c: /* paddr=0x8000092c verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000930: /* paddr=0x80000930 verbose=addi r10, r10, 0x2aa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2aa op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2aa /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000934: /* paddr=0x80000934 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000938: /* paddr=0x80000938 verbose=addi r10, r10, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x555 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x555 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000093c: /* paddr=0x8000093c verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000940: /* paddr=0x80000940 verbose=addi r10, r10, 0x155 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x155 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x155 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000944: /* paddr=0x80000944 verbose=addi r11, r0, 0x2 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x2 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x2 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x2 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000948: /* paddr=0x80000948 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000094c: /* paddr=0x8000094c verbose=sd r12, 0x640(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x280 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x280 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000950: /* paddr=0x80000950 verbose=lui r10, 0xaaaab000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xaaaab000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xffffffffaaaab000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffffffffaaaab000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000954: /* paddr=0x80000954 verbose=addi r10, r10, 0xfffffaaa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffaaa op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffaaa /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000958: /* paddr=0x80000958 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000095c: /* paddr=0x8000095c verbose=addi r10, r10, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x555 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x555 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000960: /* paddr=0x80000960 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000964: /* paddr=0x80000964 verbose=addi r10, r10, 0x2aa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2aa op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2aa /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000968: /* paddr=0x80000968 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000096c: /* paddr=0x8000096c verbose=addi r10, r10, 0x2aa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2aa op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2aa /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000970: /* paddr=0x80000970 verbose=addi r11, r0, 0xf a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xf op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xf */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xf /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000974: /* paddr=0x80000974 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000978: /* paddr=0x80000978 verbose=sd r12, 0x648(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x288 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x288 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000097c: /* paddr=0x8000097c verbose=addi r10, r0, 0x3 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x3 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x3 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x3 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000980: /* paddr=0x80000980 verbose=addi r11, r0, 0x17 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x17 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x17 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x17 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000984: /* paddr=0x80000984 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000988: /* paddr=0x80000988 verbose=sd r12, 0x656(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x290 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x290 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000098c: /* paddr=0x8000098c verbose=lui r10, 0x33333000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x33333000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x33333000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x33333000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000990: /* paddr=0x80000990 verbose=addi r10, r10, 0x333 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x333 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x333 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000994: /* paddr=0x80000994 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000998: /* paddr=0x80000998 verbose=addi r10, r10, 0x199 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x199 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x199 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000099c: /* paddr=0x8000099c verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009a0: /* paddr=0x800009a0 verbose=addi r10, r10, 0x4cc a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x4cc op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4cc /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009a4: /* paddr=0x800009a4 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009a8: /* paddr=0x800009a8 verbose=addi r10, r10, 0x333 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x333 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x333 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009ac: /* paddr=0x800009ac verbose=addi r11, r0, 0x13 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x13 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x13 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x13 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009b0: /* paddr=0x800009b0 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009b4: /* paddr=0x800009b4 verbose=sd r12, 0x664(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x298 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x298 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800009b8: /* paddr=0x800009b8 verbose=lui r10, 0x66666000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x66666000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x66666000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x66666000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009bc: /* paddr=0x800009bc verbose=addi r10, r10, 0x666 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x666 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x666 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009c0: /* paddr=0x800009c0 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009c4: /* paddr=0x800009c4 verbose=addi r10, r10, 0x333 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x333 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x333 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009c8: /* paddr=0x800009c8 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009cc: /* paddr=0x800009cc verbose=addi r10, r10, 0x199 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x199 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x199 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009d0: /* paddr=0x800009d0 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009d4: /* paddr=0x800009d4 verbose=addi r10, r10, 0x266 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x266 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x266 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009d8: /* paddr=0x800009d8 verbose=addi r11, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009dc: /* paddr=0x800009dc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009e0: /* paddr=0x800009e0 verbose=sd r12, 0x672(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2a0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2a0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800009e4: /* paddr=0x800009e4 verbose=lui r10, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009e8: /* paddr=0x800009e8 verbose=addi r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffff /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009ec: /* paddr=0x800009ec verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009f0: /* paddr=0x800009f0 verbose=addi r10, r10, 0x257 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x257 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x257 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009f4: /* paddr=0x800009f4 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009f8: /* paddr=0x800009f8 verbose=addi r10, r10, 0x6c3 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x6c3 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x6c3 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009fc: /* paddr=0x800009fc verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a00: /* paddr=0x80000a00 verbose=addi r10, r10, 0xcd a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xcd op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xcd /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a04: /* paddr=0x80000a04 verbose=addi r11, r0, 0x1b a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1b op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1b /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a08: /* paddr=0x80000a08 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a0c: /* paddr=0x80000a0c verbose=sd r12, 0x680(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2a8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2a8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a10: /* paddr=0x80000a10 verbose=lui r10, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a14: /* paddr=0x80000a14 verbose=addi r10, r10, 0x0 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x0 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a18: /* paddr=0x80000a18 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a1c: /* paddr=0x80000a1c verbose=addi r10, r10, 0x5a8 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x5a8 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x5a8 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a20: /* paddr=0x80000a20 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a24: /* paddr=0x80000a24 verbose=addi r10, r10, 0x13c a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x13c op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x13c /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a28: /* paddr=0x80000a28 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a2c: /* paddr=0x80000a2c verbose=addi r10, r10, 0x333 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x333 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x333 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a30: /* paddr=0x80000a30 verbose=addi r11, r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x4 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a34: /* paddr=0x80000a34 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a38: /* paddr=0x80000a38 verbose=sd r12, 0x688(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2b0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2b0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a3c: /* paddr=0x80000a3c verbose=lui r10, 0x55555000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x55555000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x55555000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x55555000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a40: /* paddr=0x80000a40 verbose=addi r10, r10, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x555 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x555 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a44: /* paddr=0x80000a44 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a48: /* paddr=0x80000a48 verbose=addi r10, r10, 0x2aa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2aa op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2aa /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a4c: /* paddr=0x80000a4c verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a50: /* paddr=0x80000a50 verbose=addi r10, r10, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x555 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x555 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a54: /* paddr=0x80000a54 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a58: /* paddr=0x80000a58 verbose=addi r10, r10, 0x154 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x154 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x154 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a5c: /* paddr=0x80000a5c verbose=addi r11, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a60: /* paddr=0x80000a60 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a64: /* paddr=0x80000a64 verbose=sd r12, 0x696(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2b8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2b8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a68: /* paddr=0x80000a68 verbose=lui r10, 0x33333000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x33333000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x33333000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x33333000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a6c: /* paddr=0x80000a6c verbose=addi r10, r10, 0x333 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x333 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x333 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a70: /* paddr=0x80000a70 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a74: /* paddr=0x80000a74 verbose=addi r10, r10, 0x199 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x199 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x199 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a78: /* paddr=0x80000a78 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a7c: /* paddr=0x80000a7c verbose=addi r10, r10, 0x4cc a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x4cc op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4cc /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a80: /* paddr=0x80000a80 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a84: /* paddr=0x80000a84 verbose=addi r10, r10, 0x332 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x332 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x332 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a88: /* paddr=0x80000a88 verbose=addi r11, r0, 0xe a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xe op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xe */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xe /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a8c: /* paddr=0x80000a8c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a90: /* paddr=0x80000a90 verbose=sd r12, 0x704(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2c0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2c0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a94: /* paddr=0x80000a94 verbose=lui r10, 0x66666000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x66666000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x66666000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x66666000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a98: /* paddr=0x80000a98 verbose=addi r10, r10, 0x666 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x666 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x666 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a9c: /* paddr=0x80000a9c verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000aa0: /* paddr=0x80000aa0 verbose=addi r10, r10, 0x333 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x333 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x333 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000aa4: /* paddr=0x80000aa4 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000aa8: /* paddr=0x80000aa8 verbose=addi r10, r10, 0x199 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x199 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x199 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000aac: /* paddr=0x80000aac verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ab0: /* paddr=0x80000ab0 verbose=addi r10, r10, 0x265 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x265 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x265 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ab4: /* paddr=0x80000ab4 verbose=addi r11, r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x4 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ab8: /* paddr=0x80000ab8 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000abc: /* paddr=0x80000abc verbose=sd r12, 0x712(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2c8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2c8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ac0: /* paddr=0x80000ac0 verbose=lui r10, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ac4: /* paddr=0x80000ac4 verbose=addi r10, r10, 0x0 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x0 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ac8: /* paddr=0x80000ac8 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000acc: /* paddr=0x80000acc verbose=addi r10, r10, 0x5a8 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x5a8 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x5a8 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ad0: /* paddr=0x80000ad0 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ad4: /* paddr=0x80000ad4 verbose=addi r10, r10, 0x13c a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x13c op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x13c /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ad8: /* paddr=0x80000ad8 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000adc: /* paddr=0x80000adc verbose=addi r10, r10, 0x332 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x332 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x332 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ae0: /* paddr=0x80000ae0 verbose=addi r11, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ae4: /* paddr=0x80000ae4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ae8: /* paddr=0x80000ae8 verbose=sd r12, 0x720(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2d0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2d0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000aec: /* paddr=0x80000aec verbose=lui r10, 0x55555000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x55555000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x55555000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x55555000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000af0: /* paddr=0x80000af0 verbose=addi r10, r10, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x555 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x555 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000af4: /* paddr=0x80000af4 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000af8: /* paddr=0x80000af8 verbose=addi r10, r10, 0x2aa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2aa op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2aa /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000afc: /* paddr=0x80000afc verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b00: /* paddr=0x80000b00 verbose=addi r10, r10, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x555 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x555 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b04: /* paddr=0x80000b04 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b08: /* paddr=0x80000b08 verbose=addi r10, r10, 0x156 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x156 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x156 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b0c: /* paddr=0x80000b0c verbose=addi r11, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b10: /* paddr=0x80000b10 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b14: /* paddr=0x80000b14 verbose=sd r12, 0x728(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2d8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2d8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b18: /* paddr=0x80000b18 verbose=lui r10, 0xaaaab000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xaaaab000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xffffffffaaaab000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffffffffaaaab000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b1c: /* paddr=0x80000b1c verbose=addi r10, r10, 0xfffffaaa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffaaa op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffaaa /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b20: /* paddr=0x80000b20 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b24: /* paddr=0x80000b24 verbose=addi r10, r10, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x555 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x555 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b28: /* paddr=0x80000b28 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b2c: /* paddr=0x80000b2c verbose=addi r10, r10, 0x2aa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2aa op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2aa /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b30: /* paddr=0x80000b30 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b34: /* paddr=0x80000b34 verbose=addi r10, r10, 0x2ab a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2ab op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2ab /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b38: /* paddr=0x80000b38 verbose=addi r11, r0, 0x10 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x10 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x10 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x10 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b3c: /* paddr=0x80000b3c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b40: /* paddr=0x80000b40 verbose=sd r12, 0x736(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2e0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2e0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b44: /* paddr=0x80000b44 verbose=addi r10, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b48: /* paddr=0x80000b48 verbose=addi r11, r0, 0x1f a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1f op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1f */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1f /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b4c: /* paddr=0x80000b4c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b50: /* paddr=0x80000b50 verbose=sd r12, 0x744(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2e8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2e8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b54: /* paddr=0x80000b54 verbose=lui r10, 0x33333000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x33333000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x33333000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x33333000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b58: /* paddr=0x80000b58 verbose=addi r10, r10, 0x333 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x333 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x333 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b5c: /* paddr=0x80000b5c verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b60: /* paddr=0x80000b60 verbose=addi r10, r10, 0x199 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x199 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x199 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b64: /* paddr=0x80000b64 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b68: /* paddr=0x80000b68 verbose=addi r10, r10, 0x4cc a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x4cc op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4cc /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b6c: /* paddr=0x80000b6c verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b70: /* paddr=0x80000b70 verbose=addi r10, r10, 0x334 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x334 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x334 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b74: /* paddr=0x80000b74 verbose=addi r11, r0, 0xa a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xa */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b78: /* paddr=0x80000b78 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b7c: /* paddr=0x80000b7c verbose=sd r12, 0x752(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2f0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2f0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b80: /* paddr=0x80000b80 verbose=lui r10, 0x66666000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x66666000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x66666000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x66666000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b84: /* paddr=0x80000b84 verbose=addi r10, r10, 0x666 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x666 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x666 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b88: /* paddr=0x80000b88 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b8c: /* paddr=0x80000b8c verbose=addi r10, r10, 0x333 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x333 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x333 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b90: /* paddr=0x80000b90 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b94: /* paddr=0x80000b94 verbose=addi r10, r10, 0x199 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x199 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x199 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b98: /* paddr=0x80000b98 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b9c: /* paddr=0x80000b9c verbose=addi r10, r10, 0x267 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x267 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x267 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ba0: /* paddr=0x80000ba0 verbose=addi r11, r0, 0x1d a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1d op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1d */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1d /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ba4: /* paddr=0x80000ba4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ba8: /* paddr=0x80000ba8 verbose=sd r12, 0x760(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x2f8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x2f8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bac: /* paddr=0x80000bac verbose=lui r10, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bb0: /* paddr=0x80000bb0 verbose=addi r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffff /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bb4: /* paddr=0x80000bb4 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bb8: /* paddr=0x80000bb8 verbose=addi r10, r10, 0x257 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x257 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x257 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bbc: /* paddr=0x80000bbc verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bc0: /* paddr=0x80000bc0 verbose=addi r10, r10, 0x6c3 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x6c3 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x6c3 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bc4: /* paddr=0x80000bc4 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bc8: /* paddr=0x80000bc8 verbose=addi r10, r10, 0xce a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xce op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xce /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bcc: /* paddr=0x80000bcc verbose=addi r11, r0, 0x3 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x3 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x3 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x3 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bd0: /* paddr=0x80000bd0 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bd4: /* paddr=0x80000bd4 verbose=sd r12, 0x768(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x300 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x300 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bd8: /* paddr=0x80000bd8 verbose=lui r10, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bdc: /* paddr=0x80000bdc verbose=addi r10, r10, 0x0 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x0 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000be0: /* paddr=0x80000be0 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000be4: /* paddr=0x80000be4 verbose=addi r10, r10, 0x5a8 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x5a8 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x5a8 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000be8: /* paddr=0x80000be8 verbose=slli r10, r10, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bec: /* paddr=0x80000bec verbose=addi r10, r10, 0x13c a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x13c op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x13c /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bf0: /* paddr=0x80000bf0 verbose=slli r10, r10, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bf4: /* paddr=0x80000bf4 verbose=addi r10, r10, 0x334 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x334 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x334 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bf8: /* paddr=0x80000bf8 verbose=addi r11, r0, 0x1f a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1f op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1f */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1f /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bfc: /* paddr=0x80000bfc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c00: /* paddr=0x80000c00 verbose=sd r12, 0x776(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x308 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x308 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c04: /* paddr=0x80000c04 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c08: /* paddr=0x80000c08 verbose=slli r10, r10, 0x13 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x13 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x13 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c0c: /* paddr=0x80000c0c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c10: /* paddr=0x80000c10 verbose=addi r11, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c14: /* paddr=0x80000c14 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c18: /* paddr=0x80000c18 verbose=sd r12, 0x784(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x310 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x310 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c1c: /* paddr=0x80000c1c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c20: /* paddr=0x80000c20 verbose=slli r10, r10, 0x14 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x14 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x14 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c24: /* paddr=0x80000c24 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c28: /* paddr=0x80000c28 verbose=addi r11, r0, 0x15 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x15 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x15 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x15 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c2c: /* paddr=0x80000c2c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c30: /* paddr=0x80000c30 verbose=sd r12, 0x792(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x318 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x318 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c34: /* paddr=0x80000c34 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c38: /* paddr=0x80000c38 verbose=slli r10, r10, 0x15 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x15 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x15 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c3c: /* paddr=0x80000c3c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c40: /* paddr=0x80000c40 verbose=addi r11, r0, 0x12 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x12 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x12 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x12 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c44: /* paddr=0x80000c44 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c48: /* paddr=0x80000c48 verbose=sd r12, 0x800(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x320 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x320 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c4c: /* paddr=0x80000c4c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c50: /* paddr=0x80000c50 verbose=slli r10, r10, 0x16 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x16 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x16 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c54: /* paddr=0x80000c54 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c58: /* paddr=0x80000c58 verbose=addi r11, r0, 0x12 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x12 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x12 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x12 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c5c: /* paddr=0x80000c5c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c60: /* paddr=0x80000c60 verbose=sd r12, 0x808(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x328 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x328 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c64: /* paddr=0x80000c64 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c68: /* paddr=0x80000c68 verbose=slli r10, r10, 0x17 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x17 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x17 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c6c: /* paddr=0x80000c6c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c70: /* paddr=0x80000c70 verbose=addi r11, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c74: /* paddr=0x80000c74 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c78: /* paddr=0x80000c78 verbose=sd r12, 0x816(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x330 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x330 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c7c: /* paddr=0x80000c7c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c80: /* paddr=0x80000c80 verbose=slli r10, r10, 0x18 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x18 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x18 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c84: /* paddr=0x80000c84 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c88: /* paddr=0x80000c88 verbose=addi r11, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c8c: /* paddr=0x80000c8c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c90: /* paddr=0x80000c90 verbose=sd r12, 0x824(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x338 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x338 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c94: /* paddr=0x80000c94 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c98: /* paddr=0x80000c98 verbose=slli r10, r10, 0x19 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x19 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x19 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c9c: /* paddr=0x80000c9c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ca0: /* paddr=0x80000ca0 verbose=addi r11, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ca4: /* paddr=0x80000ca4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ca8: /* paddr=0x80000ca8 verbose=sd r12, 0x832(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x340 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x340 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cac: /* paddr=0x80000cac verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cb0: /* paddr=0x80000cb0 verbose=slli r10, r10, 0x1a a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1a op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1a /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cb4: /* paddr=0x80000cb4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cb8: /* paddr=0x80000cb8 verbose=addi r11, r0, 0x15 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x15 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x15 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x15 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cbc: /* paddr=0x80000cbc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cc0: /* paddr=0x80000cc0 verbose=sd r12, 0x840(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x348 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x348 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cc4: /* paddr=0x80000cc4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cc8: /* paddr=0x80000cc8 verbose=slli r10, r10, 0x1b a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1b op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1b /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ccc: /* paddr=0x80000ccc verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cd0: /* paddr=0x80000cd0 verbose=addi r11, r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x4 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cd4: /* paddr=0x80000cd4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cd8: /* paddr=0x80000cd8 verbose=sd r12, 0x848(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x350 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x350 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cdc: /* paddr=0x80000cdc verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ce0: /* paddr=0x80000ce0 verbose=slli r10, r10, 0x1c a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1c op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1c /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ce4: /* paddr=0x80000ce4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ce8: /* paddr=0x80000ce8 verbose=addi r11, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cec: /* paddr=0x80000cec verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cf0: /* paddr=0x80000cf0 verbose=sd r12, 0x856(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x358 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x358 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cf4: /* paddr=0x80000cf4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cf8: /* paddr=0x80000cf8 verbose=slli r10, r10, 0x1d a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1d op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1d /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cfc: /* paddr=0x80000cfc verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d00: /* paddr=0x80000d00 verbose=addi r11, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d04: /* paddr=0x80000d04 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d08: /* paddr=0x80000d08 verbose=sd r12, 0x864(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x360 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x360 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d0c: /* paddr=0x80000d0c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d10: /* paddr=0x80000d10 verbose=slli r10, r10, 0x1e a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1e op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1e /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d14: /* paddr=0x80000d14 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d18: /* paddr=0x80000d18 verbose=addi r11, r0, 0xa a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xa */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d1c: /* paddr=0x80000d1c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d20: /* paddr=0x80000d20 verbose=sd r12, 0x872(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x368 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x368 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d24: /* paddr=0x80000d24 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d28: /* paddr=0x80000d28 verbose=slli r10, r10, 0x1f a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1f op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x1f /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d2c: /* paddr=0x80000d2c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d30: /* paddr=0x80000d30 verbose=addi r11, r0, 0x3 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x3 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x3 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x3 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d34: /* paddr=0x80000d34 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d38: /* paddr=0x80000d38 verbose=sd r12, 0x880(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x370 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x370 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d3c: /* paddr=0x80000d3c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d40: /* paddr=0x80000d40 verbose=slli r10, r10, 0x20 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x20 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x20 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d44: /* paddr=0x80000d44 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d48: /* paddr=0x80000d48 verbose=addi r11, r0, 0x9 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x9 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x9 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x9 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d4c: /* paddr=0x80000d4c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d50: /* paddr=0x80000d50 verbose=sd r12, 0x888(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x378 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x378 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d54: /* paddr=0x80000d54 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d58: /* paddr=0x80000d58 verbose=slli r10, r10, 0x21 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x21 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x21 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d5c: /* paddr=0x80000d5c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d60: /* paddr=0x80000d60 verbose=addi r11, r0, 0x9 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x9 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x9 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x9 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d64: /* paddr=0x80000d64 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d68: /* paddr=0x80000d68 verbose=sd r12, 0x896(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x380 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x380 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d6c: /* paddr=0x80000d6c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d70: /* paddr=0x80000d70 verbose=slli r10, r10, 0x22 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x22 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x22 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d74: /* paddr=0x80000d74 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d78: /* paddr=0x80000d78 verbose=addi r11, r0, 0x1b a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1b op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1b /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d7c: /* paddr=0x80000d7c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d80: /* paddr=0x80000d80 verbose=sd r12, 0x904(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x388 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x388 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d84: /* paddr=0x80000d84 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d88: /* paddr=0x80000d88 verbose=slli r10, r10, 0x23 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x23 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x23 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d8c: /* paddr=0x80000d8c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d90: /* paddr=0x80000d90 verbose=addi r11, r0, 0x17 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x17 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x17 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x17 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d94: /* paddr=0x80000d94 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d98: /* paddr=0x80000d98 verbose=sd r12, 0x912(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x390 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x390 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d9c: /* paddr=0x80000d9c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000da0: /* paddr=0x80000da0 verbose=slli r10, r10, 0x24 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x24 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x24 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000da4: /* paddr=0x80000da4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000da8: /* paddr=0x80000da8 verbose=addi r11, r0, 0x2 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x2 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x2 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x2 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dac: /* paddr=0x80000dac verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000db0: /* paddr=0x80000db0 verbose=sd r12, 0x920(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x398 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x398 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000db4: /* paddr=0x80000db4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000db8: /* paddr=0x80000db8 verbose=slli r10, r10, 0x25 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x25 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x25 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dbc: /* paddr=0x80000dbc verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dc0: /* paddr=0x80000dc0 verbose=addi r11, r0, 0x17 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x17 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x17 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x17 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dc4: /* paddr=0x80000dc4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dc8: /* paddr=0x80000dc8 verbose=sd r12, 0x928(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3a0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3a0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dcc: /* paddr=0x80000dcc verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dd0: /* paddr=0x80000dd0 verbose=slli r10, r10, 0x26 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x26 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x26 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dd4: /* paddr=0x80000dd4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dd8: /* paddr=0x80000dd8 verbose=addi r11, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ddc: /* paddr=0x80000ddc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000de0: /* paddr=0x80000de0 verbose=sd r12, 0x936(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3a8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3a8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000de4: /* paddr=0x80000de4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000de8: /* paddr=0x80000de8 verbose=slli r10, r10, 0x27 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x27 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x27 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dec: /* paddr=0x80000dec verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000df0: /* paddr=0x80000df0 verbose=addi r11, r0, 0x5 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x5 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000df4: /* paddr=0x80000df4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000df8: /* paddr=0x80000df8 verbose=sd r12, 0x944(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3b0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3b0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dfc: /* paddr=0x80000dfc verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e00: /* paddr=0x80000e00 verbose=slli r10, r10, 0x28 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x28 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x28 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e04: /* paddr=0x80000e04 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e08: /* paddr=0x80000e08 verbose=addi r11, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e0c: /* paddr=0x80000e0c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e10: /* paddr=0x80000e10 verbose=sd r12, 0x952(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3b8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3b8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e14: /* paddr=0x80000e14 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e18: /* paddr=0x80000e18 verbose=slli r10, r10, 0x29 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x29 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x29 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e1c: /* paddr=0x80000e1c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e20: /* paddr=0x80000e20 verbose=addi r11, r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xc op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xc */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xc /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e24: /* paddr=0x80000e24 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e28: /* paddr=0x80000e28 verbose=sd r12, 0x960(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3c0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3c0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e2c: /* paddr=0x80000e2c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e30: /* paddr=0x80000e30 verbose=slli r10, r10, 0x2a a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2a op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2a /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e34: /* paddr=0x80000e34 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e38: /* paddr=0x80000e38 verbose=addi r11, r0, 0x7 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x7 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x7 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x7 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e3c: /* paddr=0x80000e3c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e40: /* paddr=0x80000e40 verbose=sd r12, 0x968(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3c8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3c8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e44: /* paddr=0x80000e44 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e48: /* paddr=0x80000e48 verbose=slli r10, r10, 0x2b a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2b op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2b /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e4c: /* paddr=0x80000e4c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e50: /* paddr=0x80000e50 verbose=addi r11, r0, 0x17 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x17 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x17 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x17 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e54: /* paddr=0x80000e54 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e58: /* paddr=0x80000e58 verbose=sd r12, 0x976(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3d0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3d0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e5c: /* paddr=0x80000e5c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e60: /* paddr=0x80000e60 verbose=slli r10, r10, 0x2c a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2c op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2c /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e64: /* paddr=0x80000e64 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e68: /* paddr=0x80000e68 verbose=addi r11, r0, 0x1f a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1f op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1f */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1f /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e6c: /* paddr=0x80000e6c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e70: /* paddr=0x80000e70 verbose=sd r12, 0x984(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3d8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3d8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e74: /* paddr=0x80000e74 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e78: /* paddr=0x80000e78 verbose=slli r10, r10, 0x2d a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2d op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2d /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e7c: /* paddr=0x80000e7c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e80: /* paddr=0x80000e80 verbose=addi r11, r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x4 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e84: /* paddr=0x80000e84 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e88: /* paddr=0x80000e88 verbose=sd r12, 0x992(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3e0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3e0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e8c: /* paddr=0x80000e8c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e90: /* paddr=0x80000e90 verbose=slli r10, r10, 0x2e a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2e op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2e /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e94: /* paddr=0x80000e94 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e98: /* paddr=0x80000e98 verbose=addi r11, r0, 0x1d a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1d op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1d */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1d /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e9c: /* paddr=0x80000e9c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ea0: /* paddr=0x80000ea0 verbose=sd r12, 0x1000(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3e8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3e8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ea4: /* paddr=0x80000ea4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ea8: /* paddr=0x80000ea8 verbose=slli r10, r10, 0x30 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x30 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x30 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000eac: /* paddr=0x80000eac verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000eb0: /* paddr=0x80000eb0 verbose=addi r11, r0, 0x10 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x10 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x10 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x10 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000eb4: /* paddr=0x80000eb4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000eb8: /* paddr=0x80000eb8 verbose=sd r12, 0x1008(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3f0 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3f0 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ebc: /* paddr=0x80000ebc verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ec0: /* paddr=0x80000ec0 verbose=slli r10, r10, 0x31 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x31 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x31 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ec4: /* paddr=0x80000ec4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ec8: /* paddr=0x80000ec8 verbose=addi r11, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ecc: /* paddr=0x80000ecc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ed0: /* paddr=0x80000ed0 verbose=sd r12, 0x1016(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x3f8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x3f8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ed4: /* paddr=0x80000ed4 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ed8: /* paddr=0x80000ed8 verbose=slli r10, r10, 0x32 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x32 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x32 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000edc: /* paddr=0x80000edc verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ee0: /* paddr=0x80000ee0 verbose=addi r11, r0, 0xd a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xd op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xd */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xd /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ee4: /* paddr=0x80000ee4 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ee8: /* paddr=0x80000ee8 verbose=sd r12, 0x1024(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x400 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x400 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000eec: /* paddr=0x80000eec verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ef0: /* paddr=0x80000ef0 verbose=slli r10, r10, 0x33 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x33 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x33 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ef4: /* paddr=0x80000ef4 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ef8: /* paddr=0x80000ef8 verbose=addi r11, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000efc: /* paddr=0x80000efc verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f00: /* paddr=0x80000f00 verbose=sd r12, 0x1032(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x408 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x408 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f04: /* paddr=0x80000f04 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f08: /* paddr=0x80000f08 verbose=slli r10, r10, 0x34 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x34 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x34 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f0c: /* paddr=0x80000f0c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f10: /* paddr=0x80000f10 verbose=addi r11, r0, 0x12 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x12 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x12 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x12 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f14: /* paddr=0x80000f14 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f18: /* paddr=0x80000f18 verbose=sd r12, 0x1040(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x410 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x410 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f1c: /* paddr=0x80000f1c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f20: /* paddr=0x80000f20 verbose=slli r10, r10, 0x35 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x35 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x35 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f24: /* paddr=0x80000f24 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f28: /* paddr=0x80000f28 verbose=addi r11, r0, 0x1e a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1e op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1e */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1e /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f2c: /* paddr=0x80000f2c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f30: /* paddr=0x80000f30 verbose=sd r12, 0x1048(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x418 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x418 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f34: /* paddr=0x80000f34 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f38: /* paddr=0x80000f38 verbose=slli r10, r10, 0x36 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x36 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x36 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f3c: /* paddr=0x80000f3c verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f40: /* paddr=0x80000f40 verbose=addi r11, r0, 0xe a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xe op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xe */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xe /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f44: /* paddr=0x80000f44 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f48: /* paddr=0x80000f48 verbose=sd r12, 0x1056(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x420 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x420 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f4c: /* paddr=0x80000f4c verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f50: /* paddr=0x80000f50 verbose=slli r10, r10, 0x2f a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2f op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x2f /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f54: /* paddr=0x80000f54 verbose=xori r10, r10, 0xffffffff a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0xffffffffffffffff /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f58: /* paddr=0x80000f58 verbose=addi r11, r0, 0xf a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xf op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xf */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xf /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f5c: /* paddr=0x80000f5c verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f60: /* paddr=0x80000f60 verbose=sd r12, 0x1064(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x428 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x428 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f64: /* paddr=0x80000f64 verbose=addi r10, r0, 0xffffffff a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffff op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0xffffffffffffffff */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffffffffffffffff /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f68: /* paddr=0x80000f68 verbose=srli r10, r10, 0x1 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x1 op=50=srl store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x1 /* Srl: c = a >> b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f6c: /* paddr=0x80000f6c verbose=addi r11, r0, 0x17 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x17 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x17 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x17 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f70: /* paddr=0x80000f70 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f74: /* paddr=0x80000f74 verbose=sd r12, 0x1072(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x430 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x430 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f78: /* paddr=0x80000f78 verbose=addi r10, r0, 0x40 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x40 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x40 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x40 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f7c: /* paddr=0x80000f7c verbose=addi r11, r0, 0x11 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x11 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x11 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x11 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f80: /* paddr=0x80000f80 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f84: /* paddr=0x80000f84 verbose=sd r12, 0x1080(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x438 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x438 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f88: /* paddr=0x80000f88 verbose=addi r10, r0, 0x1 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x1 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x1 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f8c: /* paddr=0x80000f8c verbose=slli r10, r10, 0x16 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x16 op=49=sll store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0x16 /* Sll: c = a << b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f90: /* paddr=0x80000f90 verbose=addi r11, r0, 0x6 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x6 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x6 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x6 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f94: /* paddr=0x80000f94 verbose=sllw r12, r10, r11 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=52=sll_w store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov r12d, ebx /* SllW: c = a_w */
	mov rcx, rax /* SllW: b = value */
	shl r12, rcx /* SllW: c(value) = a_w << b */
	mov rcx, r12 /* SllW: c = value */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f98: /* paddr=0x80000f98 verbose=sd r12, 0x1088(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x440 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x440 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f9c: /* paddr=0x80000f9c verbose=jal r0, 0x38 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=38 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000fd4 /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000f9c_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000f9c_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000fa0: /* paddr=0x80000fa0 verbose=ld r9, 0x1f8(r2) a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=5=SRC_IND b_offset_imm0=0x1f8 ind_width=8 op=1=copyb store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x1f8 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov rax, qword ptr [r13] /* b=SRC_IND(8): b = mem[address] */
	/* CopyB: c = b = rax */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rax /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fa4: /* paddr=0x80000fa4 verbose=ld r6, 0x200(r2) a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=5=SRC_IND b_offset_imm0=0x200 ind_width=8 op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x200 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov rax, qword ptr [r13] /* b=SRC_IND(8): b = mem[address] */
	/* CopyB: c = b = rax */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rax /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fa8: /* paddr=0x80000fa8 verbose=add r6, r6, r9 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000048 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000048 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fac: /* paddr=0x80000fac verbose=lui r6, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fb0: /* paddr=0x80000fb0 verbose=addi r6, r6, 0x0 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x0 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fb4: /* paddr=0x80000fb4 verbose=slli r6, r6, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fb8: /* paddr=0x80000fb8 verbose=addi r6, r6, 0x5d6 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x5d6 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x5d6 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fbc: /* paddr=0x80000fbc verbose=slli r6, r6, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fc0: /* paddr=0x80000fc0 verbose=addi r6, r6, 0x436 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x436 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x436 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fc4: /* paddr=0x80000fc4 verbose=slli r6, r6, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fc8: /* paddr=0x80000fc8 verbose=addi r6, r6, 0x2d0 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x2d0 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2d0 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fcc: /* paddr=0x80000fcc verbose=sd r6, 0x-4(r9) a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xfffffffffffffffc jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xfffffffffffffffc /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fd0: /* paddr=0x80000fd0 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fd4: /* paddr=0x80000fd4 verbose=auipc r5, 0x20011000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000028 store_ra=true jmp_offset1=4 jmp_offset2=0x20011000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0011fd4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000fd8: /* paddr=0x80000fd8 verbose=addi r5, r5, 0x13c a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_offset_imm0=0x13c op=12=add store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x13c /* Add: c = c + b = a + b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fdc: /* paddr=0x80000fdc verbose=auipc r6, 0x20011000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000030 store_ra=true jmp_offset1=4 jmp_offset2=0x20011000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0011fdc /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000fe0: /* paddr=0x80000fe0 verbose=addi r6, r6, 0x614 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x614 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x614 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fe4: /* paddr=0x80000fe4 verbose=auipc r7, 0x2000f000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 jmp_offset2=0x2000f000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa000ffe4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000fe8: /* paddr=0x80000fe8 verbose=addi r7, r7, 0x1c a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x1c op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x1c /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fec: /* paddr=0x80000fec verbose=sub r28, r6, r5 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000028 op=13=sub store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000028 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ff0: /* paddr=0x80000ff0 verbose=srai r28, r28, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=2=SRC_IMM b_offset_imm0=0x2 op=51=sra store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sra: c = a */
	mov rcx, rbx /* Sra: c = a */
	sar rcx, 0x2 /* Sra: c = a >> b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ff4: /* paddr=0x80000ff4 verbose=sw r28, 0x0(r7) a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=1=SRC_MEM b_offset_imm0=0xa00000e0 ind_width=4 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12d /* STORE_IND(4): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ff8: /* paddr=0x80000ff8 verbose=addi r7, r7, 0x4 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4 /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ffc: /* paddr=0x80000ffc verbose=bge r5, r6, 0x18 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 op=9=lt jmp_offset1=4 jmp_offset2=0x18 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	cmp rbx, rax /* Lt: a == b ? */
	jl pc_80000ffc_lt_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_80000ffc_lt_done
pc_80000ffc_lt_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_80000ffc_lt_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_80000ffc_flag_false /* flag == 1 ? */
	mov r9, 0x80001000 /* pc += i.jmp_offset1 */
	jmp pc_80000ffc_flag_done
pc_80000ffc_flag_false:
	mov r9, 0x80001014 /* pc += i.jmp_offset2 */
pc_80000ffc_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000ffc_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000ffc_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001000: /* paddr=0x80001000 verbose=lw r29, 0x0(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=5=SRC_IND ind_width=4 op=57=signextend_w store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x0 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov eax, [r13] /* b=SRC_IND(4): b = mem[address] */
	movsxd rcx, eax
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001004: /* paddr=0x80001004 verbose=sw r29, 0x0(r7) a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=1=SRC_MEM b_offset_imm0=0xa00000e8 ind_width=4 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12d /* STORE_IND(4): mem[address] = value = c */
	inc r11 /* increment step */

pc_80001008: /* paddr=0x80001008 verbose=addi r7, r7, 0x4 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4 /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000100c: /* paddr=0x8000100c verbose=addi r5, r5, 0x4 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4 /* Add: c = c + b = a + b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001010: /* paddr=0x80001010 verbose=jal r0, 0xffffffec a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=ffffffffffffffec jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000ffc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001010_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001010_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001014: /* paddr=0x80001014 verbose=lui r6, 0xa0000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa0000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0000 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001018: /* paddr=0x80001018 verbose=addiw r6, r6, 0x9 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x9 op=44=add_w store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rax, 0x9 /* AddW: b = value */
	add rax, rbx /* AddW: b += a */
	cdqe /* AddW: trunk b */
	mov rcx, rax /* AddW: c = b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000101c: /* paddr=0x8000101c verbose=slli r6, r6, 0xc a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0xc op=49=sll store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xc /* Sll: c = a << b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001020: /* paddr=0x80001020 verbose=addi r6, r6, 0xffffff12 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffff12 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffff12 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001024: /* paddr=0x80001024 verbose=lw r5, 0x0(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=5=SRC_IND ind_width=4 op=57=signextend_w store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x0 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov eax, [r13] /* b=SRC_IND(4): b = mem[address] */
	movsxd rcx, eax
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001028: /* paddr=0x80001028 verbose=lui r6, 0xffff000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xffff000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xffff000 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffff000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000102c: /* paddr=0x8000102c verbose=addiw r6, r6, 0xfffffeee a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffeee op=44=add_w store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rax, 0xfffffffffffffeee /* AddW: b = value */
	add rax, rbx /* AddW: b += a */
	cdqe /* AddW: trunk b */
	mov rcx, rax /* AddW: c = b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001030: /* paddr=0x80001030 verbose=beq r5, r6, 0x18 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 op=11=eq jmp_offset1=18 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	cmp rbx, rax /* Eq: a == b ? */
	je pc_80001030_equal_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_80001030_equal_done
pc_80001030_equal_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_80001030_equal_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_80001030_flag_false /* flag == 1 ? */
	mov r9, 0x80001048 /* pc += i.jmp_offset1 */
	jmp pc_80001030_flag_done
pc_80001030_flag_false:
	mov r9, 0x80001034 /* pc += i.jmp_offset2 */
pc_80001030_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001030_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001030_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001034: /* paddr=0x80001034 verbose=lui r5, 0x100000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x100000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x100000 */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0x100000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001038: /* paddr=0x80001038 verbose=lui r6, 0x5000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5000 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000103c: /* paddr=0x8000103c verbose=addiw r6, r6, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x555 op=44=add_w store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rax, 0x555 /* AddW: b = value */
	add rax, rbx /* AddW: b += a */
	cdqe /* AddW: trunk b */
	mov rcx, rax /* AddW: c = b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001040: /* paddr=0x80001040 verbose=sw r6, 0x0(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 ind_width=4 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12d /* STORE_IND(4): mem[address] = value = c */
	inc r11 /* increment step */

pc_80001044: /* paddr=0x80001044 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80001050 /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001044_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001044_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001048: /* paddr=0x80001048 verbose=addi r17, r0, 0x5d a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5d op=12=add store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x5d */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5d /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000104c: /* paddr=0x8000104c verbose=ecall a_src=2=SRC_IMM b_src=1=SRC_MEM b_offset_imm0=0xa0008305 op=1=copyb set_pc=true jmp_offset2=0x4 */
	mov r13, 0xa0008305 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	/* STORE_NONE */
	mov r9, rax /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_8000104c_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_8000104c_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001050: /* paddr=0x80001050 verbose=jal r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80001050 /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001050_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001050_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

execute_end:
	ret

.section .rodata
.align 64

map_pc_1000: 	.quad pc_1000, pc_1004, pc_1008, pc_100c, pc_1010, pc_1014, pc_1018, pc_101c, pc_1020, pc_1024, pc_1028, pc_102c, pc_1030, pc_1034, pc_1038, pc_103c, pc_1040, pc_1044, pc_1048, pc_104c, pc_1050, pc_1054, pc_1058, pc_105c, pc_1060, pc_1064, pc_1068, pc_106c, pc_1070, pc_1074, pc_1078, pc_107c, pc_1080, pc_1084, pc_1088, pc_108c, pc_1090, pc_1094, pc_1098, pc_109c, pc_10a0, pc_10a4, pc_10a8, pc_10ac, pc_10b0, pc_10b4, pc_10b8, pc_10bc, pc_10c0, pc_10c4, pc_10c8, pc_10cc, pc_10d0, pc_10d4, pc_10d8, pc_10dc, pc_10e0, pc_10e4, pc_10e8, pc_10ec, pc_10f0, pc_10f4, pc_10f8, pc_10fc, pc_1100, pc_1104, pc_1108, pc_110c, pc_1110, pc_1114, pc_1118, pc_111c, pc_1120, pc_1124, pc_1128, pc_112c, pc_1130, pc_1134, pc_1138, pc_113c, pc_1140, pc_1144, pc_1148, pc_114c, pc_1150, pc_1154, pc_1158, pc_115c, pc_1160, pc_1164, pc_1168, pc_116c, pc_1170, pc_1174, pc_1178, pc_117c, pc_1180, pc_1184, pc_1188, pc_118c, pc_1190, pc_1194, pc_1198, pc_119c, pc_11a0, pc_11a4, pc_11a8, pc_11ac, pc_11b0, pc_11b4, pc_11b8, pc_11bc, pc_11c0, pc_11c4, pc_11c8, pc_11cc, pc_11d0, pc_11d4, pc_11d8, pc_11dc, pc_11e0, pc_11e4, pc_11e8, pc_11ec, pc_11f0, pc_11f4, pc_11f8, pc_11fc, pc_1200, pc_1204, pc_1208, pc_120c, pc_1210, pc_1214, pc_1218, pc_121c, pc_1220, pc_1224, pc_1228, pc_122c, pc_1230, pc_1234, pc_1238, pc_123c, pc_1240, pc_1244, pc_1248, pc_124c, pc_1250, pc_1254, pc_1258, pc_125c, pc_1260, pc_1264, pc_1268, pc_126c, pc_1270, pc_1274, pc_1278, pc_127c, pc_1280, pc_1284, pc_1288, pc_128c, pc_1290, pc_1294, pc_1298, pc_129c, pc_12a0, pc_12a4, pc_12a8, pc_12ac, pc_12b0, pc_12b4, pc_12b8, pc_12bc, pc_12c0, pc_12c4, pc_12c8, pc_12cc, pc_12d0, pc_12d4, pc_12d8, pc_12dc, pc_12e0, pc_12e4, pc_12e8, pc_12ec, pc_12f0, pc_12f4, pc_12f8, pc_12fc, pc_1300, pc_1304, pc_1308, pc_130c, pc_1310, pc_1314, pc_1318, pc_131c, pc_1320, pc_1324, pc_1328, pc_132c, pc_1330, pc_1334, pc_1338, pc_133c, pc_1340, pc_1344, pc_1348, pc_134c, pc_1350, pc_1354, pc_1358, pc_135c, pc_1360, pc_1364, pc_1368, pc_136c, pc_1370, pc_1374, pc_1378, pc_137c, pc_1380, pc_1384, pc_1388, pc_138c, pc_1390, pc_1394, pc_1398, pc_139c, pc_13a0, pc_13a4, pc_13a8, pc_13ac, pc_13b0, pc_13b4, pc_13b8, pc_13bc, pc_13c0, pc_13c4, pc_13c8, pc_13cc, pc_13d0, pc_13d4, pc_13d8, pc_13dc, pc_13e0, pc_13e4, pc_13e8, pc_13ec, pc_13f0, pc_13f4, pc_13f8, pc_13fc, pc_1400, pc_1404, pc_1408, pc_140c, pc_1410, pc_1414, pc_1418, pc_141c, pc_1420, pc_1424, pc_1428, pc_142c, pc_1430, pc_1434, pc_1438, pc_143c, pc_1440, pc_1444, pc_1448, pc_144c, pc_1450, pc_1454, pc_1458, pc_145c, pc_1460, pc_1464, pc_1468, pc_146c, pc_1470, pc_1474, pc_1478, pc_147c, pc_1480, pc_1484, pc_1488, pc_148c, pc_1490, pc_1494, pc_1498, pc_149c, pc_14a0, pc_14a4, pc_14a8, pc_14ac, pc_14b0, pc_14b4, pc_14b8, pc_14bc, pc_14c0, pc_14c4, pc_14c8, pc_14cc, pc_14d0, pc_14d4, pc_14d8, pc_14dc, pc_14e0, pc_14e4, pc_14e8, pc_14ec, pc_14f0, pc_14f4, pc_14f8, pc_14fc, pc_1500, pc_1504, pc_1508, pc_150c, pc_1510, pc_1514, pc_1518, pc_151c, pc_1520, pc_1524, pc_1528, pc_152c, pc_1530, pc_1534, pc_1538, pc_153c, pc_1540, pc_1544, pc_1548, pc_154c, pc_1550, pc_1554, pc_1558, pc_155c, pc_1560, pc_1564, pc_1568, pc_156c, pc_1570, pc_1574, pc_1578, pc_157c, pc_1580, pc_1584, pc_1588, pc_158c, pc_1590, pc_1594, pc_1598, pc_159c, pc_15a0, pc_15a4, pc_15a8, pc_15ac, pc_15b0, pc_15b4, pc_15b8, pc_15bc, pc_15c0, pc_15c4, pc_15c8, pc_15cc, pc_15d0, pc_15d4, pc_15d8, pc_15dc, pc_15e0, pc_15e4, pc_15e8, pc_15ec, pc_15f0, pc_15f4, pc_15f8, pc_15fc, pc_1600, pc_1604, pc_1608, pc_160c, pc_1610, pc_1614, pc_1618, pc_161c, pc_1620, pc_1624, pc_1628, pc_162c, pc_1630, pc_1634, pc_1638, pc_163c, pc_1640, pc_1644, pc_1648, pc_164c, pc_1650, pc_1654, pc_1658, pc_165c, pc_1660, pc_1664, pc_1668, pc_166c, pc_1670, pc_1674, pc_1678, pc_167c, pc_1680, pc_1684, pc_1688, pc_168c, pc_1690, pc_1694, pc_1698, pc_169c, pc_16a0, pc_16a4, pc_16a8, pc_16ac, pc_16b0, pc_16b4, pc_16b8, pc_16bc, pc_16c0, pc_16c4, pc_16c8, pc_16cc, pc_16d0, pc_16d4, pc_16d8, pc_16dc, pc_16e0, pc_16e4, pc_16e8, pc_16ec, pc_16f0, pc_16f4, pc_16f8, pc_16fc, pc_1700, pc_1704, pc_1708, pc_170c, pc_1710, pc_1714, pc_1718, pc_171c, pc_1720, pc_1724, pc_1728, pc_172c, pc_1730, pc_1734, pc_1738, pc_173c, pc_1740, pc_1744, pc_1748, pc_174c, pc_1750, pc_1754, pc_1758, pc_175c, pc_1760, pc_1764, pc_1768, pc_176c, pc_1770, pc_1774, pc_1778, pc_177c, pc_1780, pc_1784, pc_1788, pc_178c, pc_1790, pc_1794, pc_1798, pc_179c, pc_17a0, pc_17a4, pc_17a8, pc_17ac, pc_17b0, pc_17b4, pc_17b8, pc_17bc, pc_17c0, pc_17c4, pc_17c8, pc_17cc, pc_17d0, pc_17d4, pc_17d8, pc_17dc, pc_17e0, pc_17e4, pc_17e8, pc_17ec, pc_17f0, pc_17f4, pc_17f8, pc_17fc, pc_1800, pc_1804, pc_1808, pc_180c, pc_1810, pc_1814, pc_1818, pc_181c, pc_1820, pc_1824, pc_1828, pc_182c, pc_1830, pc_1834, pc_1838, pc_183c, pc_1840, pc_1844, pc_1848, pc_184c, pc_1850, pc_1854, pc_1858, pc_185c, pc_1860, pc_1864, pc_1868, pc_186c, pc_1870, pc_1874, pc_1878, pc_187c, pc_1880, pc_1884, pc_1888, pc_188c, pc_1890, pc_1894, pc_1898, pc_189c, pc_18a0, pc_18a4, pc_18a8, pc_18ac, pc_18b0, pc_18b4, pc_18b8, pc_18bc, pc_18c0, pc_18c4, pc_18c8, pc_18cc, pc_18d0, pc_18d4, pc_18d8, pc_18dc, pc_18e0, pc_18e4, pc_18e8, pc_18ec, pc_18f0, pc_18f4, pc_18f8, pc_18fc, pc_1900, pc_1904, pc_1908, pc_190c, pc_1910, pc_1914, pc_1918, pc_191c, pc_1920, pc_1924, pc_1928, pc_192c, pc_1930, pc_1934, pc_1938, pc_193c, pc_1940, pc_1944, pc_1948, pc_194c, pc_1950, pc_1954, pc_1958, pc_195c, pc_1960, pc_1964, pc_1968, pc_196c, pc_1970, pc_1974, pc_1978, pc_197c, pc_1980, pc_1984, pc_1988, pc_198c, pc_1990, pc_1994, pc_1998, pc_199c, pc_19a0, pc_19a4, pc_19a8, pc_19ac, pc_19b0, pc_19b4, pc_19b8, pc_19bc, pc_19c0, pc_19c4, pc_19c8, pc_19cc, pc_19d0, pc_19d4, pc_19d8, pc_19dc, pc_19e0, pc_19e4, pc_19e8, pc_19ec, pc_19f0, pc_19f4, pc_19f8, pc_19fc, pc_1a00, pc_1a04, pc_1a08, pc_1a0c, pc_1a10, pc_1a14, pc_1a18, pc_1a1c, pc_1a20, pc_1a24, pc_1a28, pc_1a2c, pc_1a30, pc_1a34, pc_1a38, pc_1a3c, pc_1a40, pc_1a44, pc_1a48, pc_1a4c, pc_1a50, pc_1a54, pc_1a58, pc_1a5c, pc_1a60, pc_1a64, pc_1a68, pc_1a6c, pc_1a70, pc_1a74, pc_1a78, pc_1a7c, pc_1a80, pc_1a84, pc_1a88, pc_1a8c, pc_1a90, pc_1a94, pc_1a98, pc_1a9c, pc_1aa0, pc_1aa4, pc_1aa8, pc_1aac, pc_1ab0, pc_1ab4, pc_1ab8, pc_1abc, pc_1ac0, pc_1ac4, pc_1ac8, pc_1acc, pc_1ad0, pc_1ad4, pc_1ad8, pc_1adc, pc_1ae0, pc_1ae4, pc_1ae8, pc_1aec, pc_1af0, pc_1af4, pc_1af8, pc_1afc, pc_1b00, pc_1b04, pc_1b08, pc_1b0c, pc_1b10, pc_1b14, pc_1b18, pc_1b1c, pc_1b20, pc_1b24, pc_1b28, pc_1b2c, pc_1b30, pc_1b34, pc_1b38, pc_1b3c, pc_1b40, pc_1b44, pc_1b48, pc_1b4c, pc_1b50, pc_1b54, pc_1b58, pc_1b5c, pc_1b60, pc_1b64, pc_1b68, pc_1b6c, pc_1b70, pc_1b74, pc_1b78, pc_1b7c, pc_1b80, pc_1b84, pc_1b88, pc_1b8c, pc_1b90, pc_1b94, pc_1b98, pc_1b9c, pc_1ba0, pc_1ba4, pc_1ba8, pc_1bac, pc_1bb0, pc_1bb4, pc_1bb8, pc_1bbc, pc_1bc0, pc_1bc4, pc_1bc8, pc_1bcc, pc_1bd0, pc_1bd4, pc_1bd8, pc_1bdc, pc_1be0, pc_1be4, pc_1be8, pc_1bec, pc_1bf0, pc_1bf4, pc_1bf8, pc_1bfc, pc_1c00, pc_1c04, pc_1c08, pc_1c0c, pc_1c10, pc_1c14, pc_1c18, pc_1c1c, pc_1c20, pc_1c24, pc_1c28, pc_1c2c, pc_1c30, pc_1c34, pc_1c38, pc_1c3c, pc_1c40, pc_1c44, pc_1c48, pc_1c4c, pc_1c50, pc_1c54, pc_1c58, pc_1c5c, pc_1c60, pc_1c64, pc_1c68, pc_1c6c, pc_1c70, pc_1c74, pc_1c78, pc_1c7c, pc_1c80, pc_1c84, pc_1c88, pc_1c8c, pc_1c90, pc_1c94, pc_1c98, pc_1c9c, pc_1ca0, pc_1ca4, pc_1ca8, pc_1cac, pc_1cb0, pc_1cb4, pc_1cb8, pc_1cbc, pc_1cc0, pc_1cc4, pc_1cc8, pc_1ccc, pc_1cd0, pc_1cd4, pc_1cd8, pc_1cdc, pc_1ce0, pc_1ce4, pc_1ce8, pc_1cec, pc_1cf0, pc_1cf4, pc_1cf8, pc_1cfc, pc_1d00, pc_1d04, pc_1d08, pc_1d0c, pc_1d10, pc_1d14, pc_1d18, pc_1d1c, pc_1d20, pc_1d24, pc_1d28, pc_1d2c, pc_1d30, pc_1d34, pc_1d38, pc_1d3c, pc_1d40, pc_1d44, pc_1d48, pc_1d4c, pc_1d50, pc_1d54, pc_1d58, pc_1d5c, pc_1d60, pc_1d64, pc_1d68, pc_1d6c, pc_1d70, pc_1d74, pc_1d78, pc_1d7c, pc_1d80, pc_1d84, pc_1d88, pc_1d8c, pc_1d90, pc_1d94, pc_1d98, pc_1d9c, pc_1da0, pc_1da4, pc_1da8, pc_1dac, pc_1db0, pc_1db4, pc_1db8, pc_1dbc, pc_1dc0, pc_1dc4, pc_1dc8, pc_1dcc, pc_1dd0, pc_1dd4, pc_1dd8, pc_1ddc, pc_1de0, pc_1de4, pc_1de8, pc_1dec, pc_1df0, pc_1df4, pc_1df8, pc_1dfc, pc_1e00, pc_1e04, pc_1e08, pc_1e0c, pc_1e10, pc_1e14, pc_1e18, pc_1e1c, pc_1e20, pc_1e24, pc_1e28, pc_1e2c, pc_1e30, pc_1e34, pc_1e38, pc_1e3c, pc_1e40, pc_1e44, pc_1e48, pc_1e4c, pc_1e50, pc_1e54, pc_1e58, pc_1e5c, pc_1e60, pc_1e64, pc_1e68, pc_1e6c, pc_1e70, pc_1e74, pc_1e78, pc_1e7c, pc_1e80, pc_1e84, pc_1e88, pc_1e8c, pc_1e90, pc_1e94, pc_1e98, pc_1e9c, pc_1ea0, pc_1ea4, pc_1ea8, pc_1eac, pc_1eb0, pc_1eb4, pc_1eb8, pc_1ebc, pc_1ec0, pc_1ec4, pc_1ec8, pc_1ecc, pc_1ed0, pc_1ed4, pc_1ed8, pc_1edc, pc_1ee0, pc_1ee4, pc_1ee8, pc_1eec, pc_1ef0, pc_1ef4, pc_1ef8, pc_1efc, pc_1f00, pc_1f04, pc_1f08, pc_1f0c, pc_1f10, pc_1f14, pc_1f18, pc_1f1c, pc_1f20, pc_1f24, pc_1f28, pc_1f2c, pc_1f30, pc_1f34, pc_1f38, pc_1f3c, pc_1f40, pc_1f44, pc_1f48, pc_1f4c, pc_1f50, pc_1f54, pc_1f58, pc_1f5c, pc_1f60, pc_1f64, pc_1f68, pc_1f6c, pc_1f70, pc_1f74, pc_1f78, pc_1f7c, pc_1f80, pc_1f84, pc_1f88, pc_1f8c, pc_1f90, pc_1f94, pc_1f98, pc_1f9c, pc_1fa0, pc_1fa4, pc_1fa8, pc_1fac, pc_1fb0, pc_1fb4, pc_1fb8, pc_1fbc, pc_1fc0, pc_1fc4, pc_1fc8, pc_1fcc, pc_1fd0, pc_1fd4, pc_1fd8, pc_1fdc, pc_1fe0, pc_1fe4, pc_1fe8, pc_1fec, pc_1ff0, pc_1ff4, pc_1ff8, pc_1ffc, pc_2000, pc_2004, pc_2008, pc_200c, pc_2010, pc_2014, pc_2018, pc_201c, pc_2020, pc_2024, pc_2028, pc_202c, pc_2030, pc_2034, pc_2038, pc_203c, pc_2040, pc_2044, pc_2048, pc_204c, pc_2050, pc_2054, pc_2058, pc_205c, pc_2060, pc_2064, pc_2068, pc_206c, pc_2070, pc_2074, pc_2078, pc_207c, pc_2080, pc_2084, pc_2088, pc_208c, pc_2090, pc_2094, pc_2098, pc_209c, pc_20a0, pc_20a4, pc_20a8, pc_20ac, pc_20b0, pc_20b4, pc_20b8, pc_20bc, pc_20c0, pc_20c4, pc_20c8, pc_20cc, pc_20d0, pc_20d4, pc_20d8, pc_20dc, pc_20e0, pc_20e4, pc_20e8, pc_20ec, pc_20f0, pc_20f4, pc_20f8, pc_20fc, pc_2100, pc_2104, pc_2108, pc_210c, pc_2110, pc_2114, pc_2118, pc_211c, pc_2120, pc_2124, pc_2128, pc_212c, pc_2130, pc_2134, pc_2138, pc_213c, pc_2140, pc_2144, pc_2148, pc_214c, pc_2150, pc_2154, pc_2158, pc_215c, pc_2160, pc_2164, pc_2168, pc_216c, pc_2170, pc_2174, pc_2178, pc_217c, pc_2180, pc_2184, pc_2188, pc_218c, pc_2190, pc_2194, pc_2198, pc_219c, pc_21a0, pc_21a4, pc_21a8, pc_21ac, pc_21b0, pc_21b4, pc_21b8, pc_21bc, pc_21c0, pc_21c4, pc_21c8, pc_21cc, pc_21d0, pc_21d4, pc_21d8, pc_21dc, pc_21e0, pc_21e4, pc_21e8, pc_21ec, pc_21f0, pc_21f4, pc_21f8, pc_21fc, pc_2200, pc_2204, pc_2208, pc_220c, pc_2210, pc_2214, pc_2218, pc_221c, pc_2220, pc_2224, pc_2228, pc_222c, pc_2230, pc_2234, pc_2238, pc_223c, pc_2240, pc_2244, pc_2248, pc_224c, pc_2250, pc_2254, pc_2258, pc_225c, pc_2260, pc_2264, pc_2268, pc_226c, pc_2270, pc_2274, pc_2278, pc_227c, pc_2280, pc_2284, pc_2288, pc_228c, pc_2290, pc_2294, pc_2298, pc_229c, pc_22a0, pc_22a4, pc_22a8, pc_22ac, pc_22b0, pc_22b4, pc_22b8, pc_22bc, pc_22c0, pc_22c4, pc_22c8, pc_22cc, pc_22d0, pc_22d4, pc_22d8, pc_22dc, pc_22e0, pc_22e4, pc_22e8, pc_22ec, pc_22f0, pc_22f4, pc_22f8, pc_22fc, pc_2300, pc_2304, pc_2308, pc_230c, pc_2310, pc_2314, pc_2318, pc_231c, pc_2320, pc_2324, pc_2328, pc_232c, pc_2330, pc_2334, pc_2338, pc_233c, pc_2340, pc_2344, pc_2348, pc_234c, pc_2350, pc_2354, pc_2358, pc_235c, pc_2360, pc_2364, pc_2368, pc_236c, pc_2370, pc_2374, pc_2378, pc_237c, pc_2380, pc_2384, pc_2388, pc_238c, pc_2390, pc_2394, pc_2398, pc_239c, pc_23a0, pc_23a4, pc_23a8, pc_23ac, pc_23b0, pc_23b4, pc_23b8, pc_23bc, pc_23c0, pc_23c4, pc_23c8, pc_23cc, pc_23d0, pc_23d4, pc_23d8, pc_23dc, pc_23e0, pc_23e4, pc_23e8, pc_23ec, pc_23f0, pc_23f4, pc_23f8
map_pc_10000000: 	.quad pc_10000000
map_pc_80000000: 	.quad pc_80000000, pc_80000004, pc_80000008, pc_8000000c, pc_80000010, pc_80000014, pc_80000018, pc_8000001c, pc_80000020, pc_80000024, pc_80000028, pc_8000002c, pc_80000030, pc_80000034, pc_80000038, pc_8000003c, pc_80000040, pc_80000044, pc_80000048, pc_8000004c, pc_80000050, pc_80000054, pc_80000058, pc_8000005c, pc_80000060, pc_80000064, pc_80000068, pc_8000006c, pc_80000070, pc_80000074, pc_80000078, pc_8000007c, pc_80000080, pc_80000084, pc_80000088, pc_8000008c, pc_80000090, pc_80000094, pc_80000098, pc_8000009c, pc_800000a0, pc_800000a4, pc_800000a8, pc_800000ac, pc_800000b0, pc_800000b4, pc_800000b8, pc_800000bc, pc_800000c0, pc_800000c4, pc_800000c8, pc_800000cc, pc_800000d0, pc_800000d4, pc_800000d8, pc_800000dc, pc_800000e0, pc_800000e4, pc_800000e8, pc_800000ec, pc_800000f0, pc_800000f4, pc_800000f8, pc_800000fc, pc_80000100, pc_80000104, pc_80000108, pc_8000010c, pc_80000110, pc_80000114, pc_80000118, pc_8000011c, pc_80000120, pc_80000124, pc_80000128, pc_8000012c, pc_80000130, pc_80000134, pc_80000138, pc_8000013c, pc_80000140, pc_80000144, pc_80000148, pc_8000014c, pc_80000150, pc_80000154, pc_80000158, pc_8000015c, pc_80000160, pc_80000164, pc_80000168, pc_8000016c, pc_80000170, pc_80000174, pc_80000178, pc_8000017c, pc_80000180, pc_80000184, pc_80000188, pc_8000018c, pc_80000190, pc_80000194, pc_80000198, pc_8000019c, pc_800001a0, pc_800001a4, pc_800001a8, pc_800001ac, pc_800001b0, pc_800001b4, pc_800001b8, pc_800001bc, pc_800001c0, pc_800001c4, pc_800001c8, pc_800001cc, pc_800001d0, pc_800001d4, pc_800001d8, pc_800001dc, pc_800001e0, pc_800001e4, pc_800001e8, pc_800001ec, pc_800001f0, pc_800001f4, pc_800001f8, pc_800001fc, pc_80000200, pc_80000204, pc_80000208, pc_8000020c, pc_80000210, pc_80000214, pc_80000218, pc_8000021c, pc_80000220, pc_80000224, pc_80000228, pc_8000022c, pc_80000230, pc_80000234, pc_80000238, pc_8000023c, pc_80000240, pc_80000244, pc_80000248, pc_8000024c, pc_80000250, pc_80000254, pc_80000258, pc_8000025c, pc_80000260, pc_80000264, pc_80000268, pc_8000026c, pc_80000270, pc_80000274, pc_80000278, pc_8000027c, pc_80000280, pc_80000284, pc_80000288, pc_8000028c, pc_80000290, pc_80000294, pc_80000298, pc_8000029c, pc_800002a0, pc_800002a4, pc_800002a8, pc_800002ac, pc_800002b0, pc_800002b4, pc_800002b8, pc_800002bc, pc_800002c0, pc_800002c4, pc_800002c8, pc_800002cc, pc_800002d0, pc_800002d4, pc_800002d8, pc_800002dc, pc_800002e0, pc_800002e4, pc_800002e8, pc_800002ec, pc_800002f0, pc_800002f4, pc_800002f8, pc_800002fc, pc_80000300, pc_80000304, pc_80000308, pc_8000030c, pc_80000310, pc_80000314, pc_80000318, pc_8000031c, pc_80000320, pc_80000324, pc_80000328, pc_8000032c, pc_80000330, pc_80000334, pc_80000338, pc_8000033c, pc_80000340, pc_80000344, pc_80000348, pc_8000034c, pc_80000350, pc_80000354, pc_80000358, pc_8000035c, pc_80000360, pc_80000364, pc_80000368, pc_8000036c, pc_80000370, pc_80000374, pc_80000378, pc_8000037c, pc_80000380, pc_80000384, pc_80000388, pc_8000038c, pc_80000390, pc_80000394, pc_80000398, pc_8000039c, pc_800003a0, pc_800003a4, pc_800003a8, pc_800003ac, pc_800003b0, pc_800003b4, pc_800003b8, pc_800003bc, pc_800003c0, pc_800003c4, pc_800003c8, pc_800003cc, pc_800003d0, pc_800003d4, pc_800003d8, pc_800003dc, pc_800003e0, pc_800003e4, pc_800003e8, pc_800003ec, pc_800003f0, pc_800003f4, pc_800003f8, pc_800003fc, pc_80000400, pc_80000404, pc_80000408, pc_8000040c, pc_80000410, pc_80000414, pc_80000418, pc_8000041c, pc_80000420, pc_80000424, pc_80000428, pc_8000042c, pc_80000430, pc_80000434, pc_80000438, pc_8000043c, pc_80000440, pc_80000444, pc_80000448, pc_8000044c, pc_80000450, pc_80000454, pc_80000458, pc_8000045c, pc_80000460, pc_80000464, pc_80000468, pc_8000046c, pc_80000470, pc_80000474, pc_80000478, pc_8000047c, pc_80000480, pc_80000484, pc_80000488, pc_8000048c, pc_80000490, pc_80000494, pc_80000498, pc_8000049c, pc_800004a0, pc_800004a4, pc_800004a8, pc_800004ac, pc_800004b0, pc_800004b4, pc_800004b8, pc_800004bc, pc_800004c0, pc_800004c4, pc_800004c8, pc_800004cc, pc_800004d0, pc_800004d4, pc_800004d8, pc_800004dc, pc_800004e0, pc_800004e4, pc_800004e8, pc_800004ec, pc_800004f0, pc_800004f4, pc_800004f8, pc_800004fc, pc_80000500, pc_80000504, pc_80000508, pc_8000050c, pc_80000510, pc_80000514, pc_80000518, pc_8000051c, pc_80000520, pc_80000524, pc_80000528, pc_8000052c, pc_80000530, pc_80000534, pc_80000538, pc_8000053c, pc_80000540, pc_80000544, pc_80000548, pc_8000054c, pc_80000550, pc_80000554, pc_80000558, pc_8000055c, pc_80000560, pc_80000564, pc_80000568, pc_8000056c, pc_80000570, pc_80000574, pc_80000578, pc_8000057c, pc_80000580, pc_80000584, pc_80000588, pc_8000058c, pc_80000590, pc_80000594, pc_80000598, pc_8000059c, pc_800005a0, pc_800005a4, pc_800005a8, pc_800005ac, pc_800005b0, pc_800005b4, pc_800005b8, pc_800005bc, pc_800005c0, pc_800005c4, pc_800005c8, pc_800005cc, pc_800005d0, pc_800005d4, pc_800005d8, pc_800005dc, pc_800005e0, pc_800005e4, pc_800005e8, pc_800005ec, pc_800005f0, pc_800005f4, pc_800005f8, pc_800005fc, pc_80000600, pc_80000604, pc_80000608, pc_8000060c, pc_80000610, pc_80000614, pc_80000618, pc_8000061c, pc_80000620, pc_80000624, pc_80000628, pc_8000062c, pc_80000630, pc_80000634, pc_80000638, pc_8000063c, pc_80000640, pc_80000644, pc_80000648, pc_8000064c, pc_80000650, pc_80000654, pc_80000658, pc_8000065c, pc_80000660, pc_80000664, pc_80000668, pc_8000066c, pc_80000670, pc_80000674, pc_80000678, pc_8000067c, pc_80000680, pc_80000684, pc_80000688, pc_8000068c, pc_80000690, pc_80000694, pc_80000698, pc_8000069c, pc_800006a0, pc_800006a4, pc_800006a8, pc_800006ac, pc_800006b0, pc_800006b4, pc_800006b8, pc_800006bc, pc_800006c0, pc_800006c4, pc_800006c8, pc_800006cc, pc_800006d0, pc_800006d4, pc_800006d8, pc_800006dc, pc_800006e0, pc_800006e4, pc_800006e8, pc_800006ec, pc_800006f0, pc_800006f4, pc_800006f8, pc_800006fc, pc_80000700, pc_80000704, pc_80000708, pc_8000070c, pc_80000710, pc_80000714, pc_80000718, pc_8000071c, pc_80000720, pc_80000724, pc_80000728, pc_8000072c, pc_80000730, pc_80000734, pc_80000738, pc_8000073c, pc_80000740, pc_80000744, pc_80000748, pc_8000074c, pc_80000750, pc_80000754, pc_80000758, pc_8000075c, pc_80000760, pc_80000764, pc_80000768, pc_8000076c, pc_80000770, pc_80000774, pc_80000778, pc_8000077c, pc_80000780, pc_80000784, pc_80000788, pc_8000078c, pc_80000790, pc_80000794, pc_80000798, pc_8000079c, pc_800007a0, pc_800007a4, pc_800007a8, pc_800007ac, pc_800007b0, pc_800007b4, pc_800007b8, pc_800007bc, pc_800007c0, pc_800007c4, pc_800007c8, pc_800007cc, pc_800007d0, pc_800007d4, pc_800007d8, pc_800007dc, pc_800007e0, pc_800007e4, pc_800007e8, pc_800007ec, pc_800007f0, pc_800007f4, pc_800007f8, pc_800007fc, pc_80000800, pc_80000804, pc_80000808, pc_8000080c, pc_80000810, pc_80000814, pc_80000818, pc_8000081c, pc_80000820, pc_80000824, pc_80000828, pc_8000082c, pc_80000830, pc_80000834, pc_80000838, pc_8000083c, pc_80000840, pc_80000844, pc_80000848, pc_8000084c, pc_80000850, pc_80000854, pc_80000858, pc_8000085c, pc_80000860, pc_80000864, pc_80000868, pc_8000086c, pc_80000870, pc_80000874, pc_80000878, pc_8000087c, pc_80000880, pc_80000884, pc_80000888, pc_8000088c, pc_80000890, pc_80000894, pc_80000898, pc_8000089c, pc_800008a0, pc_800008a4, pc_800008a8, pc_800008ac, pc_800008b0, pc_800008b4, pc_800008b8, pc_800008bc, pc_800008c0, pc_800008c4, pc_800008c8, pc_800008cc, pc_800008d0, pc_800008d4, pc_800008d8, pc_800008dc, pc_800008e0, pc_800008e4, pc_800008e8, pc_800008ec, pc_800008f0, pc_800008f4, pc_800008f8, pc_800008fc, pc_80000900, pc_80000904, pc_80000908, pc_8000090c, pc_80000910, pc_80000914, pc_80000918, pc_8000091c, pc_80000920, pc_80000924, pc_80000928, pc_8000092c, pc_80000930, pc_80000934, pc_80000938, pc_8000093c, pc_80000940, pc_80000944, pc_80000948, pc_8000094c, pc_80000950, pc_80000954, pc_80000958, pc_8000095c, pc_80000960, pc_80000964, pc_80000968, pc_8000096c, pc_80000970, pc_80000974, pc_80000978, pc_8000097c, pc_80000980, pc_80000984, pc_80000988, pc_8000098c, pc_80000990, pc_80000994, pc_80000998, pc_8000099c, pc_800009a0, pc_800009a4, pc_800009a8, pc_800009ac, pc_800009b0, pc_800009b4, pc_800009b8, pc_800009bc, pc_800009c0, pc_800009c4, pc_800009c8, pc_800009cc, pc_800009d0, pc_800009d4, pc_800009d8, pc_800009dc, pc_800009e0, pc_800009e4, pc_800009e8, pc_800009ec, pc_800009f0, pc_800009f4, pc_800009f8, pc_800009fc, pc_80000a00, pc_80000a04, pc_80000a08, pc_80000a0c, pc_80000a10, pc_80000a14, pc_80000a18, pc_80000a1c, pc_80000a20, pc_80000a24, pc_80000a28, pc_80000a2c, pc_80000a30, pc_80000a34, pc_80000a38, pc_80000a3c, pc_80000a40, pc_80000a44, pc_80000a48, pc_80000a4c, pc_80000a50, pc_80000a54, pc_80000a58, pc_80000a5c, pc_80000a60, pc_80000a64, pc_80000a68, pc_80000a6c, pc_80000a70, pc_80000a74, pc_80000a78, pc_80000a7c, pc_80000a80, pc_80000a84, pc_80000a88, pc_80000a8c, pc_80000a90, pc_80000a94, pc_80000a98, pc_80000a9c, pc_80000aa0, pc_80000aa4, pc_80000aa8, pc_80000aac, pc_80000ab0, pc_80000ab4, pc_80000ab8, pc_80000abc, pc_80000ac0, pc_80000ac4, pc_80000ac8, pc_80000acc, pc_80000ad0, pc_80000ad4, pc_80000ad8, pc_80000adc, pc_80000ae0, pc_80000ae4, pc_80000ae8, pc_80000aec, pc_80000af0, pc_80000af4, pc_80000af8, pc_80000afc, pc_80000b00, pc_80000b04, pc_80000b08, pc_80000b0c, pc_80000b10, pc_80000b14, pc_80000b18, pc_80000b1c, pc_80000b20, pc_80000b24, pc_80000b28, pc_80000b2c, pc_80000b30, pc_80000b34, pc_80000b38, pc_80000b3c, pc_80000b40, pc_80000b44, pc_80000b48, pc_80000b4c, pc_80000b50, pc_80000b54, pc_80000b58, pc_80000b5c, pc_80000b60, pc_80000b64, pc_80000b68, pc_80000b6c, pc_80000b70, pc_80000b74, pc_80000b78, pc_80000b7c, pc_80000b80, pc_80000b84, pc_80000b88, pc_80000b8c, pc_80000b90, pc_80000b94, pc_80000b98, pc_80000b9c, pc_80000ba0, pc_80000ba4, pc_80000ba8, pc_80000bac, pc_80000bb0, pc_80000bb4, pc_80000bb8, pc_80000bbc, pc_80000bc0, pc_80000bc4, pc_80000bc8, pc_80000bcc, pc_80000bd0, pc_80000bd4, pc_80000bd8, pc_80000bdc, pc_80000be0, pc_80000be4, pc_80000be8, pc_80000bec, pc_80000bf0, pc_80000bf4, pc_80000bf8, pc_80000bfc, pc_80000c00, pc_80000c04, pc_80000c08, pc_80000c0c, pc_80000c10, pc_80000c14, pc_80000c18, pc_80000c1c, pc_80000c20, pc_80000c24, pc_80000c28, pc_80000c2c, pc_80000c30, pc_80000c34, pc_80000c38, pc_80000c3c, pc_80000c40, pc_80000c44, pc_80000c48, pc_80000c4c, pc_80000c50, pc_80000c54, pc_80000c58, pc_80000c5c, pc_80000c60, pc_80000c64, pc_80000c68, pc_80000c6c, pc_80000c70, pc_80000c74, pc_80000c78, pc_80000c7c, pc_80000c80, pc_80000c84, pc_80000c88, pc_80000c8c, pc_80000c90, pc_80000c94, pc_80000c98, pc_80000c9c, pc_80000ca0, pc_80000ca4, pc_80000ca8, pc_80000cac, pc_80000cb0, pc_80000cb4, pc_80000cb8, pc_80000cbc, pc_80000cc0, pc_80000cc4, pc_80000cc8, pc_80000ccc, pc_80000cd0, pc_80000cd4, pc_80000cd8, pc_80000cdc, pc_80000ce0, pc_80000ce4, pc_80000ce8, pc_80000cec, pc_80000cf0, pc_80000cf4, pc_80000cf8, pc_80000cfc, pc_80000d00, pc_80000d04, pc_80000d08, pc_80000d0c, pc_80000d10, pc_80000d14, pc_80000d18, pc_80000d1c, pc_80000d20, pc_80000d24, pc_80000d28, pc_80000d2c, pc_80000d30, pc_80000d34, pc_80000d38, pc_80000d3c, pc_80000d40, pc_80000d44, pc_80000d48, pc_80000d4c, pc_80000d50, pc_80000d54, pc_80000d58, pc_80000d5c, pc_80000d60, pc_80000d64, pc_80000d68, pc_80000d6c, pc_80000d70, pc_80000d74, pc_80000d78, pc_80000d7c, pc_80000d80, pc_80000d84, pc_80000d88, pc_80000d8c, pc_80000d90, pc_80000d94, pc_80000d98, pc_80000d9c, pc_80000da0, pc_80000da4, pc_80000da8, pc_80000dac, pc_80000db0, pc_80000db4, pc_80000db8, pc_80000dbc, pc_80000dc0, pc_80000dc4, pc_80000dc8, pc_80000dcc, pc_80000dd0, pc_80000dd4, pc_80000dd8, pc_80000ddc, pc_80000de0, pc_80000de4, pc_80000de8, pc_80000dec, pc_80000df0, pc_80000df4, pc_80000df8, pc_80000dfc, pc_80000e00, pc_80000e04, pc_80000e08, pc_80000e0c, pc_80000e10, pc_80000e14, pc_80000e18, pc_80000e1c, pc_80000e20, pc_80000e24, pc_80000e28, pc_80000e2c, pc_80000e30, pc_80000e34, pc_80000e38, pc_80000e3c, pc_80000e40, pc_80000e44, pc_80000e48, pc_80000e4c, pc_80000e50, pc_80000e54, pc_80000e58, pc_80000e5c, pc_80000e60, pc_80000e64, pc_80000e68, pc_80000e6c, pc_80000e70, pc_80000e74, pc_80000e78, pc_80000e7c, pc_80000e80, pc_80000e84, pc_80000e88, pc_80000e8c, pc_80000e90, pc_80000e94, pc_80000e98, pc_80000e9c, pc_80000ea0, pc_80000ea4, pc_80000ea8, pc_80000eac, pc_80000eb0, pc_80000eb4, pc_80000eb8, pc_80000ebc, pc_80000ec0, pc_80000ec4, pc_80000ec8, pc_80000ecc, pc_80000ed0, pc_80000ed4, pc_80000ed8, pc_80000edc, pc_80000ee0, pc_80000ee4, pc_80000ee8, pc_80000eec, pc_80000ef0, pc_80000ef4, pc_80000ef8, pc_80000efc, pc_80000f00, pc_80000f04, pc_80000f08, pc_80000f0c, pc_80000f10, pc_80000f14, pc_80000f18, pc_80000f1c, pc_80000f20, pc_80000f24, pc_80000f28, pc_80000f2c, pc_80000f30, pc_80000f34, pc_80000f38, pc_80000f3c, pc_80000f40, pc_80000f44, pc_80000f48, pc_80000f4c, pc_80000f50, pc_80000f54, pc_80000f58, pc_80000f5c, pc_80000f60, pc_80000f64, pc_80000f68, pc_80000f6c, pc_80000f70, pc_80000f74, pc_80000f78, pc_80000f7c, pc_80000f80, pc_80000f84, pc_80000f88, pc_80000f8c, pc_80000f90, pc_80000f94, pc_80000f98, pc_80000f9c, pc_80000fa0, pc_80000fa4, pc_80000fa8, pc_80000fac, pc_80000fb0, pc_80000fb4, pc_80000fb8, pc_80000fbc, pc_80000fc0, pc_80000fc4, pc_80000fc8, pc_80000fcc, pc_80000fd0, pc_80000fd4, pc_80000fd8, pc_80000fdc, pc_80000fe0, pc_80000fe4, pc_80000fe8, pc_80000fec, pc_80000ff0, pc_80000ff4, pc_80000ff8, pc_80000ffc, pc_80001000, pc_80001004, pc_80001008, pc_8000100c, pc_80001010, pc_80001014, pc_80001018, pc_8000101c, pc_80001020, pc_80001024, pc_80001028, pc_8000102c, pc_80001030, pc_80001034, pc_80001038, pc_8000103c, pc_80001040, pc_80001044, pc_80001048, pc_8000104c, pc_80001050
