.intel_syntax noprefix
.code64
.section .rodata
msg: .ascii "Zisk assembly emulator\n"
.set msglen, (. - msg)

.section .text
.global emulator_start
emulator_start:
	mov r11, 0 /* Registers initialization: step = 0 */
	mov r10, 0 /* Registers initialization: sp = 0 */

pc_1000: /* paddr=0x1000 verbose=Init Data a0010000: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010000 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1004: /* paddr=0x1004 verbose=Init Data a0010008: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010008 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1008: /* paddr=0x1008 verbose=Init Data a0010010: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010010 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_100c: /* paddr=0x100c verbose=Init Data a0010018: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010018 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1010: /* paddr=0x1010 verbose=Init Data a0010020: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010020 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1014: /* paddr=0x1014 verbose=Init Data a0010028: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010028 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1018: /* paddr=0x1018 verbose=Init Data a0010030: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010030 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_101c: /* paddr=0x101c verbose=Init Data a0010038: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010038 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1020: /* paddr=0x1020 verbose=Init Data a0010040: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010040 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1024: /* paddr=0x1024 verbose=Init Data a0010048: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010048 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1028: /* paddr=0x1028 verbose=Init Data a0010050: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010050 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_102c: /* paddr=0x102c verbose=Init Data a0010058: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010058 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1030: /* paddr=0x1030 verbose=Init Data a0010060: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010060 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1034: /* paddr=0x1034 verbose=Init Data a0010068: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010068 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010068 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1038: /* paddr=0x1038 verbose=Init Data a0010070: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010070 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010070 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_103c: /* paddr=0x103c verbose=Init Data a0010078: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010078 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010078 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1040: /* paddr=0x1040 verbose=Init Data a0010080: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010080 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010080 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1044: /* paddr=0x1044 verbose=Init Data a0010088: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010088 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010088 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1048: /* paddr=0x1048 verbose=Init Data a0010090: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010090 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010090 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_104c: /* paddr=0x104c verbose=Init Data a0010098: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010098 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010098 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1050: /* paddr=0x1050 verbose=Init Data a00100a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1054: /* paddr=0x1054 verbose=Init Data a00100a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1058: /* paddr=0x1058 verbose=Init Data a00100b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_105c: /* paddr=0x105c verbose=Init Data a00100b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1060: /* paddr=0x1060 verbose=Init Data a00100c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1064: /* paddr=0x1064 verbose=Init Data a00100c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1068: /* paddr=0x1068 verbose=Init Data a00100d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_106c: /* paddr=0x106c verbose=Init Data a00100d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1070: /* paddr=0x1070 verbose=Init Data a00100e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1074: /* paddr=0x1074 verbose=Init Data a00100e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1078: /* paddr=0x1078 verbose=Init Data a00100f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_107c: /* paddr=0x107c verbose=Init Data a00100f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00100f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00100f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1080: /* paddr=0x1080 verbose=Init Data a0010100: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0010100 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0010100 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1084: /* paddr=0x1084 verbose=Init Data a0011000: babecafebabecafe a_src=2=SRC_IMM a_offset_imm0=0xa0011000 b_src=2=SRC_IMM b_use_sp_imm1=0xbabecafe b_offset_imm0=0xbabecafe ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xbabecafebabecafe */
	mov r12, 0xbabecafebabecafe /* STORE_IND: reg_value = value */
	mov r13, 0xa0011000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1088: /* paddr=0x1088 verbose=Init Data a0011008: babecafebabecafe a_src=2=SRC_IMM a_offset_imm0=0xa0011008 b_src=2=SRC_IMM b_use_sp_imm1=0xbabecafe b_offset_imm0=0xbabecafe ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xbabecafebabecafe */
	mov r12, 0xbabecafebabecafe /* STORE_IND: reg_value = value */
	mov r13, 0xa0011008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_108c: /* paddr=0x108c verbose=Init Data a0011010: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011010 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1090: /* paddr=0x1090 verbose=Init Data a0011018: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011018 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1094: /* paddr=0x1094 verbose=Init Data a0011020: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011020 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1098: /* paddr=0x1098 verbose=Init Data a0011028: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011028 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_109c: /* paddr=0x109c verbose=Init Data a0011030: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011030 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10a0: /* paddr=0x10a0 verbose=Init Data a0011038: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011038 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10a4: /* paddr=0x10a4 verbose=Init Data a0011040: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011040 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10a8: /* paddr=0x10a8 verbose=Init Data a0011048: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011048 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10ac: /* paddr=0x10ac verbose=Init Data a0011050: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011050 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10b0: /* paddr=0x10b0 verbose=Init Data a0011058: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011058 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10b4: /* paddr=0x10b4 verbose=Init Data a0011060: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011060 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10b8: /* paddr=0x10b8 verbose=Init Data a0011068: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011068 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011068 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10bc: /* paddr=0x10bc verbose=Init Data a0011070: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011070 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011070 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10c0: /* paddr=0x10c0 verbose=Init Data a0011078: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011078 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011078 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10c4: /* paddr=0x10c4 verbose=Init Data a0011080: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011080 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011080 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10c8: /* paddr=0x10c8 verbose=Init Data a0011088: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011088 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011088 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10cc: /* paddr=0x10cc verbose=Init Data a0011090: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011090 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011090 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10d0: /* paddr=0x10d0 verbose=Init Data a0011098: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011098 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011098 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10d4: /* paddr=0x10d4 verbose=Init Data a00110a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10d8: /* paddr=0x10d8 verbose=Init Data a00110a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10dc: /* paddr=0x10dc verbose=Init Data a00110b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10e0: /* paddr=0x10e0 verbose=Init Data a00110b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10e4: /* paddr=0x10e4 verbose=Init Data a00110c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10e8: /* paddr=0x10e8 verbose=Init Data a00110c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10ec: /* paddr=0x10ec verbose=Init Data a00110d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10f0: /* paddr=0x10f0 verbose=Init Data a00110d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10f4: /* paddr=0x10f4 verbose=Init Data a00110e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10f8: /* paddr=0x10f8 verbose=Init Data a00110e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_10fc: /* paddr=0x10fc verbose=Init Data a00110f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1100: /* paddr=0x1100 verbose=Init Data a00110f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00110f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00110f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1104: /* paddr=0x1104 verbose=Init Data a0011100: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011100 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011100 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1108: /* paddr=0x1108 verbose=Init Data a0011108: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011108 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011108 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_110c: /* paddr=0x110c verbose=Init Data a0011110: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011110 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011110 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1110: /* paddr=0x1110 verbose=Init Data a0011118: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011118 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011118 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1114: /* paddr=0x1114 verbose=Init Data a0011120: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011120 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011120 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1118: /* paddr=0x1118 verbose=Init Data a0011128: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011128 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011128 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_111c: /* paddr=0x111c verbose=Init Data a0011130: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011130 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011130 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1120: /* paddr=0x1120 verbose=Init Data a0011138: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011138 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011138 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1124: /* paddr=0x1124 verbose=Init Data a0011140: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011140 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011140 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1128: /* paddr=0x1128 verbose=Init Data a0011148: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011148 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011148 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_112c: /* paddr=0x112c verbose=Init Data a0011150: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011150 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011150 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1130: /* paddr=0x1130 verbose=Init Data a0011158: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011158 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011158 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1134: /* paddr=0x1134 verbose=Init Data a0011160: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011160 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011160 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1138: /* paddr=0x1138 verbose=Init Data a0011168: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011168 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011168 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_113c: /* paddr=0x113c verbose=Init Data a0011170: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011170 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011170 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1140: /* paddr=0x1140 verbose=Init Data a0011178: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011178 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011178 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1144: /* paddr=0x1144 verbose=Init Data a0011180: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011180 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011180 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1148: /* paddr=0x1148 verbose=Init Data a0011188: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011188 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011188 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_114c: /* paddr=0x114c verbose=Init Data a0011190: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011190 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011190 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1150: /* paddr=0x1150 verbose=Init Data a0011198: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011198 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011198 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1154: /* paddr=0x1154 verbose=Init Data a00111a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1158: /* paddr=0x1158 verbose=Init Data a00111a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_115c: /* paddr=0x115c verbose=Init Data a00111b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1160: /* paddr=0x1160 verbose=Init Data a00111b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1164: /* paddr=0x1164 verbose=Init Data a00111c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1168: /* paddr=0x1168 verbose=Init Data a00111c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_116c: /* paddr=0x116c verbose=Init Data a00111d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1170: /* paddr=0x1170 verbose=Init Data a00111d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1174: /* paddr=0x1174 verbose=Init Data a00111e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1178: /* paddr=0x1178 verbose=Init Data a00111e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_117c: /* paddr=0x117c verbose=Init Data a00111f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1180: /* paddr=0x1180 verbose=Init Data a00111f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00111f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00111f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1184: /* paddr=0x1184 verbose=Init Data a0011200: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011200 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011200 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1188: /* paddr=0x1188 verbose=Init Data a0011208: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011208 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011208 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_118c: /* paddr=0x118c verbose=Init Data a0011210: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011210 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011210 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1190: /* paddr=0x1190 verbose=Init Data a0011218: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011218 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011218 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1194: /* paddr=0x1194 verbose=Init Data a0011220: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011220 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011220 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1198: /* paddr=0x1198 verbose=Init Data a0011228: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011228 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011228 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_119c: /* paddr=0x119c verbose=Init Data a0011230: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011230 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011230 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11a0: /* paddr=0x11a0 verbose=Init Data a0011238: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011238 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011238 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11a4: /* paddr=0x11a4 verbose=Init Data a0011240: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011240 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011240 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11a8: /* paddr=0x11a8 verbose=Init Data a0011248: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011248 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011248 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11ac: /* paddr=0x11ac verbose=Init Data a0011250: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011250 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011250 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11b0: /* paddr=0x11b0 verbose=Init Data a0011258: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011258 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011258 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11b4: /* paddr=0x11b4 verbose=Init Data a0011260: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011260 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011260 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11b8: /* paddr=0x11b8 verbose=Init Data a0011268: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011268 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011268 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11bc: /* paddr=0x11bc verbose=Init Data a0011270: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011270 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011270 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11c0: /* paddr=0x11c0 verbose=Init Data a0011278: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011278 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011278 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11c4: /* paddr=0x11c4 verbose=Init Data a0011280: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011280 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011280 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11c8: /* paddr=0x11c8 verbose=Init Data a0011288: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011288 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011288 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11cc: /* paddr=0x11cc verbose=Init Data a0011290: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011290 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011290 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11d0: /* paddr=0x11d0 verbose=Init Data a0011298: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011298 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011298 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11d4: /* paddr=0x11d4 verbose=Init Data a00112a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11d8: /* paddr=0x11d8 verbose=Init Data a00112a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11dc: /* paddr=0x11dc verbose=Init Data a00112b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11e0: /* paddr=0x11e0 verbose=Init Data a00112b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11e4: /* paddr=0x11e4 verbose=Init Data a00112c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11e8: /* paddr=0x11e8 verbose=Init Data a00112c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11ec: /* paddr=0x11ec verbose=Init Data a00112d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11f0: /* paddr=0x11f0 verbose=Init Data a00112d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11f4: /* paddr=0x11f4 verbose=Init Data a00112e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11f8: /* paddr=0x11f8 verbose=Init Data a00112e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_11fc: /* paddr=0x11fc verbose=Init Data a00112f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1200: /* paddr=0x1200 verbose=Init Data a00112f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00112f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00112f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1204: /* paddr=0x1204 verbose=Init Data a0011300: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011300 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011300 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1208: /* paddr=0x1208 verbose=Init Data a0011308: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011308 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011308 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_120c: /* paddr=0x120c verbose=Init Data a0011310: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011310 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011310 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1210: /* paddr=0x1210 verbose=Init Data a0011318: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011318 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011318 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1214: /* paddr=0x1214 verbose=Init Data a0011320: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011320 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011320 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1218: /* paddr=0x1218 verbose=Init Data a0011328: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011328 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011328 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_121c: /* paddr=0x121c verbose=Init Data a0011330: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011330 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011330 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1220: /* paddr=0x1220 verbose=Init Data a0011338: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011338 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011338 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1224: /* paddr=0x1224 verbose=Init Data a0011340: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011340 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011340 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1228: /* paddr=0x1228 verbose=Init Data a0011348: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011348 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011348 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_122c: /* paddr=0x122c verbose=Init Data a0011350: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011350 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011350 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1230: /* paddr=0x1230 verbose=Init Data a0011358: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011358 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011358 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1234: /* paddr=0x1234 verbose=Init Data a0011360: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011360 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011360 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1238: /* paddr=0x1238 verbose=Init Data a0011368: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011368 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011368 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_123c: /* paddr=0x123c verbose=Init Data a0011370: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011370 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011370 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1240: /* paddr=0x1240 verbose=Init Data a0011378: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011378 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011378 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1244: /* paddr=0x1244 verbose=Init Data a0011380: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011380 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011380 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1248: /* paddr=0x1248 verbose=Init Data a0011388: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011388 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011388 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_124c: /* paddr=0x124c verbose=Init Data a0011390: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011390 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011390 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1250: /* paddr=0x1250 verbose=Init Data a0011398: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011398 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011398 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1254: /* paddr=0x1254 verbose=Init Data a00113a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1258: /* paddr=0x1258 verbose=Init Data a00113a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_125c: /* paddr=0x125c verbose=Init Data a00113b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1260: /* paddr=0x1260 verbose=Init Data a00113b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1264: /* paddr=0x1264 verbose=Init Data a00113c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1268: /* paddr=0x1268 verbose=Init Data a00113c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_126c: /* paddr=0x126c verbose=Init Data a00113d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1270: /* paddr=0x1270 verbose=Init Data a00113d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1274: /* paddr=0x1274 verbose=Init Data a00113e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1278: /* paddr=0x1278 verbose=Init Data a00113e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_127c: /* paddr=0x127c verbose=Init Data a00113f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1280: /* paddr=0x1280 verbose=Init Data a00113f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00113f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00113f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1284: /* paddr=0x1284 verbose=Init Data a0011400: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011400 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011400 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1288: /* paddr=0x1288 verbose=Init Data a0011408: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011408 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011408 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_128c: /* paddr=0x128c verbose=Init Data a0011410: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011410 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011410 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1290: /* paddr=0x1290 verbose=Init Data a0011418: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011418 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011418 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1294: /* paddr=0x1294 verbose=Init Data a0011420: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011420 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011420 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1298: /* paddr=0x1298 verbose=Init Data a0011428: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011428 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011428 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_129c: /* paddr=0x129c verbose=Init Data a0011430: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011430 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011430 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12a0: /* paddr=0x12a0 verbose=Init Data a0011438: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011438 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011438 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12a4: /* paddr=0x12a4 verbose=Init Data a0011440: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011440 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011440 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12a8: /* paddr=0x12a8 verbose=Init Data a0011448: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011448 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011448 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12ac: /* paddr=0x12ac verbose=Init Data a0011450: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011450 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011450 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12b0: /* paddr=0x12b0 verbose=Init Data a0011458: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011458 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011458 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12b4: /* paddr=0x12b4 verbose=Init Data a0011460: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011460 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011460 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12b8: /* paddr=0x12b8 verbose=Init Data a0011468: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011468 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011468 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12bc: /* paddr=0x12bc verbose=Init Data a0011470: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011470 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011470 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12c0: /* paddr=0x12c0 verbose=Init Data a0011478: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011478 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011478 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12c4: /* paddr=0x12c4 verbose=Init Data a0011480: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011480 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011480 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12c8: /* paddr=0x12c8 verbose=Init Data a0011488: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011488 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011488 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12cc: /* paddr=0x12cc verbose=Init Data a0011490: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011490 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011490 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12d0: /* paddr=0x12d0 verbose=Init Data a0011498: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011498 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011498 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12d4: /* paddr=0x12d4 verbose=Init Data a00114a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12d8: /* paddr=0x12d8 verbose=Init Data a00114a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12dc: /* paddr=0x12dc verbose=Init Data a00114b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12e0: /* paddr=0x12e0 verbose=Init Data a00114b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12e4: /* paddr=0x12e4 verbose=Init Data a00114c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12e8: /* paddr=0x12e8 verbose=Init Data a00114c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12ec: /* paddr=0x12ec verbose=Init Data a00114d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12f0: /* paddr=0x12f0 verbose=Init Data a00114d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12f4: /* paddr=0x12f4 verbose=Init Data a00114e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12f8: /* paddr=0x12f8 verbose=Init Data a00114e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_12fc: /* paddr=0x12fc verbose=Init Data a00114f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1300: /* paddr=0x1300 verbose=Init Data a00114f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00114f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00114f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1304: /* paddr=0x1304 verbose=Init Data a0011500: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011500 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011500 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1308: /* paddr=0x1308 verbose=Init Data a0011508: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011508 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011508 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_130c: /* paddr=0x130c verbose=Init Data a0011510: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011510 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011510 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1310: /* paddr=0x1310 verbose=Init Data a0011518: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011518 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011518 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1314: /* paddr=0x1314 verbose=Init Data a0011520: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011520 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011520 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1318: /* paddr=0x1318 verbose=Init Data a0011528: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011528 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011528 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_131c: /* paddr=0x131c verbose=Init Data a0011530: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011530 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011530 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1320: /* paddr=0x1320 verbose=Init Data a0011538: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011538 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011538 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1324: /* paddr=0x1324 verbose=Init Data a0011540: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011540 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011540 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1328: /* paddr=0x1328 verbose=Init Data a0011548: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011548 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011548 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_132c: /* paddr=0x132c verbose=Init Data a0011550: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011550 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011550 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1330: /* paddr=0x1330 verbose=Init Data a0011558: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011558 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011558 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1334: /* paddr=0x1334 verbose=Init Data a0011560: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011560 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011560 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1338: /* paddr=0x1338 verbose=Init Data a0011568: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011568 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011568 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_133c: /* paddr=0x133c verbose=Init Data a0011570: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011570 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011570 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1340: /* paddr=0x1340 verbose=Init Data a0011578: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011578 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011578 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1344: /* paddr=0x1344 verbose=Init Data a0011580: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011580 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011580 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1348: /* paddr=0x1348 verbose=Init Data a0011588: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011588 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011588 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_134c: /* paddr=0x134c verbose=Init Data a0011590: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011590 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011590 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1350: /* paddr=0x1350 verbose=Init Data a0011598: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011598 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011598 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1354: /* paddr=0x1354 verbose=Init Data a00115a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1358: /* paddr=0x1358 verbose=Init Data a00115a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_135c: /* paddr=0x135c verbose=Init Data a00115b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1360: /* paddr=0x1360 verbose=Init Data a00115b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1364: /* paddr=0x1364 verbose=Init Data a00115c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1368: /* paddr=0x1368 verbose=Init Data a00115c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_136c: /* paddr=0x136c verbose=Init Data a00115d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1370: /* paddr=0x1370 verbose=Init Data a00115d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1374: /* paddr=0x1374 verbose=Init Data a00115e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1378: /* paddr=0x1378 verbose=Init Data a00115e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_137c: /* paddr=0x137c verbose=Init Data a00115f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1380: /* paddr=0x1380 verbose=Init Data a00115f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00115f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00115f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1384: /* paddr=0x1384 verbose=Init Data a0011600: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011600 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011600 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1388: /* paddr=0x1388 verbose=Init Data a0011608: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011608 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011608 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_138c: /* paddr=0x138c verbose=Init Data a0011610: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011610 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011610 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1390: /* paddr=0x1390 verbose=Init Data a0011618: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011618 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011618 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1394: /* paddr=0x1394 verbose=Init Data a0011620: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011620 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011620 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1398: /* paddr=0x1398 verbose=Init Data a0011628: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011628 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011628 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_139c: /* paddr=0x139c verbose=Init Data a0011630: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011630 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011630 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13a0: /* paddr=0x13a0 verbose=Init Data a0011638: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011638 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011638 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13a4: /* paddr=0x13a4 verbose=Init Data a0011640: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011640 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011640 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13a8: /* paddr=0x13a8 verbose=Init Data a0011648: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011648 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011648 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13ac: /* paddr=0x13ac verbose=Init Data a0011650: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011650 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011650 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13b0: /* paddr=0x13b0 verbose=Init Data a0011658: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011658 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011658 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13b4: /* paddr=0x13b4 verbose=Init Data a0011660: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011660 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011660 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13b8: /* paddr=0x13b8 verbose=Init Data a0011668: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011668 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011668 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13bc: /* paddr=0x13bc verbose=Init Data a0011670: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011670 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011670 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13c0: /* paddr=0x13c0 verbose=Init Data a0011678: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011678 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011678 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13c4: /* paddr=0x13c4 verbose=Init Data a0011680: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011680 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011680 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13c8: /* paddr=0x13c8 verbose=Init Data a0011688: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011688 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011688 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13cc: /* paddr=0x13cc verbose=Init Data a0011690: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011690 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011690 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13d0: /* paddr=0x13d0 verbose=Init Data a0011698: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011698 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011698 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13d4: /* paddr=0x13d4 verbose=Init Data a00116a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13d8: /* paddr=0x13d8 verbose=Init Data a00116a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13dc: /* paddr=0x13dc verbose=Init Data a00116b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13e0: /* paddr=0x13e0 verbose=Init Data a00116b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13e4: /* paddr=0x13e4 verbose=Init Data a00116c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13e8: /* paddr=0x13e8 verbose=Init Data a00116c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13ec: /* paddr=0x13ec verbose=Init Data a00116d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13f0: /* paddr=0x13f0 verbose=Init Data a00116d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13f4: /* paddr=0x13f4 verbose=Init Data a00116e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13f8: /* paddr=0x13f8 verbose=Init Data a00116e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_13fc: /* paddr=0x13fc verbose=Init Data a00116f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1400: /* paddr=0x1400 verbose=Init Data a00116f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00116f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00116f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1404: /* paddr=0x1404 verbose=Init Data a0011700: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011700 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011700 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1408: /* paddr=0x1408 verbose=Init Data a0011708: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011708 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011708 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_140c: /* paddr=0x140c verbose=Init Data a0011710: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011710 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011710 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1410: /* paddr=0x1410 verbose=Init Data a0011718: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011718 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011718 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1414: /* paddr=0x1414 verbose=Init Data a0011720: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011720 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011720 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1418: /* paddr=0x1418 verbose=Init Data a0011728: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011728 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011728 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_141c: /* paddr=0x141c verbose=Init Data a0011730: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011730 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011730 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1420: /* paddr=0x1420 verbose=Init Data a0011738: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011738 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011738 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1424: /* paddr=0x1424 verbose=Init Data a0011740: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011740 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011740 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1428: /* paddr=0x1428 verbose=Init Data a0011748: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011748 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011748 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_142c: /* paddr=0x142c verbose=Init Data a0011750: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011750 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011750 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1430: /* paddr=0x1430 verbose=Init Data a0011758: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011758 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011758 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1434: /* paddr=0x1434 verbose=Init Data a0011760: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011760 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011760 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1438: /* paddr=0x1438 verbose=Init Data a0011768: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011768 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011768 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_143c: /* paddr=0x143c verbose=Init Data a0011770: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011770 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011770 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1440: /* paddr=0x1440 verbose=Init Data a0011778: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011778 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011778 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1444: /* paddr=0x1444 verbose=Init Data a0011780: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011780 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011780 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1448: /* paddr=0x1448 verbose=Init Data a0011788: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011788 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011788 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_144c: /* paddr=0x144c verbose=Init Data a0011790: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011790 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011790 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1450: /* paddr=0x1450 verbose=Init Data a0011798: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011798 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011798 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1454: /* paddr=0x1454 verbose=Init Data a00117a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1458: /* paddr=0x1458 verbose=Init Data a00117a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_145c: /* paddr=0x145c verbose=Init Data a00117b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1460: /* paddr=0x1460 verbose=Init Data a00117b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1464: /* paddr=0x1464 verbose=Init Data a00117c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1468: /* paddr=0x1468 verbose=Init Data a00117c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_146c: /* paddr=0x146c verbose=Init Data a00117d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1470: /* paddr=0x1470 verbose=Init Data a00117d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1474: /* paddr=0x1474 verbose=Init Data a00117e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1478: /* paddr=0x1478 verbose=Init Data a00117e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_147c: /* paddr=0x147c verbose=Init Data a00117f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1480: /* paddr=0x1480 verbose=Init Data a00117f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00117f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00117f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1484: /* paddr=0x1484 verbose=Init Data a0011800: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011800 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011800 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1488: /* paddr=0x1488 verbose=Init Data a0011808: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011808 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011808 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_148c: /* paddr=0x148c verbose=Init Data a0011810: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011810 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011810 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1490: /* paddr=0x1490 verbose=Init Data a0011818: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011818 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011818 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1494: /* paddr=0x1494 verbose=Init Data a0011820: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011820 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011820 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1498: /* paddr=0x1498 verbose=Init Data a0011828: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011828 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011828 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_149c: /* paddr=0x149c verbose=Init Data a0011830: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011830 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011830 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14a0: /* paddr=0x14a0 verbose=Init Data a0011838: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011838 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011838 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14a4: /* paddr=0x14a4 verbose=Init Data a0011840: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011840 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011840 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14a8: /* paddr=0x14a8 verbose=Init Data a0011848: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011848 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011848 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14ac: /* paddr=0x14ac verbose=Init Data a0011850: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011850 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011850 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14b0: /* paddr=0x14b0 verbose=Init Data a0011858: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011858 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011858 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14b4: /* paddr=0x14b4 verbose=Init Data a0011860: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011860 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011860 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14b8: /* paddr=0x14b8 verbose=Init Data a0011868: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011868 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011868 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14bc: /* paddr=0x14bc verbose=Init Data a0011870: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011870 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011870 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14c0: /* paddr=0x14c0 verbose=Init Data a0011878: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011878 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011878 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14c4: /* paddr=0x14c4 verbose=Init Data a0011880: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011880 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011880 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14c8: /* paddr=0x14c8 verbose=Init Data a0011888: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011888 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011888 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14cc: /* paddr=0x14cc verbose=Init Data a0011890: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011890 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011890 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14d0: /* paddr=0x14d0 verbose=Init Data a0011898: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011898 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011898 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14d4: /* paddr=0x14d4 verbose=Init Data a00118a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14d8: /* paddr=0x14d8 verbose=Init Data a00118a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14dc: /* paddr=0x14dc verbose=Init Data a00118b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14e0: /* paddr=0x14e0 verbose=Init Data a00118b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14e4: /* paddr=0x14e4 verbose=Init Data a00118c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14e8: /* paddr=0x14e8 verbose=Init Data a00118c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14ec: /* paddr=0x14ec verbose=Init Data a00118d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14f0: /* paddr=0x14f0 verbose=Init Data a00118d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14f4: /* paddr=0x14f4 verbose=Init Data a00118e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14f8: /* paddr=0x14f8 verbose=Init Data a00118e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_14fc: /* paddr=0x14fc verbose=Init Data a00118f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1500: /* paddr=0x1500 verbose=Init Data a00118f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00118f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00118f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1504: /* paddr=0x1504 verbose=Init Data a0011900: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011900 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011900 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1508: /* paddr=0x1508 verbose=Init Data a0011908: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011908 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011908 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_150c: /* paddr=0x150c verbose=Init Data a0011910: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011910 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011910 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1510: /* paddr=0x1510 verbose=Init Data a0011918: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011918 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011918 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1514: /* paddr=0x1514 verbose=Init Data a0011920: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011920 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011920 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1518: /* paddr=0x1518 verbose=Init Data a0011928: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011928 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011928 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_151c: /* paddr=0x151c verbose=Init Data a0011930: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011930 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011930 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1520: /* paddr=0x1520 verbose=Init Data a0011938: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011938 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011938 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1524: /* paddr=0x1524 verbose=Init Data a0011940: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011940 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011940 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1528: /* paddr=0x1528 verbose=Init Data a0011948: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011948 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011948 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_152c: /* paddr=0x152c verbose=Init Data a0011950: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011950 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011950 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1530: /* paddr=0x1530 verbose=Init Data a0011958: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011958 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011958 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1534: /* paddr=0x1534 verbose=Init Data a0011960: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011960 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011960 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1538: /* paddr=0x1538 verbose=Init Data a0011968: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011968 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011968 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_153c: /* paddr=0x153c verbose=Init Data a0011970: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011970 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011970 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1540: /* paddr=0x1540 verbose=Init Data a0011978: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011978 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011978 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1544: /* paddr=0x1544 verbose=Init Data a0011980: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011980 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011980 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1548: /* paddr=0x1548 verbose=Init Data a0011988: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011988 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011988 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_154c: /* paddr=0x154c verbose=Init Data a0011990: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011990 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011990 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1550: /* paddr=0x1550 verbose=Init Data a0011998: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011998 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011998 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1554: /* paddr=0x1554 verbose=Init Data a00119a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1558: /* paddr=0x1558 verbose=Init Data a00119a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_155c: /* paddr=0x155c verbose=Init Data a00119b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1560: /* paddr=0x1560 verbose=Init Data a00119b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1564: /* paddr=0x1564 verbose=Init Data a00119c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1568: /* paddr=0x1568 verbose=Init Data a00119c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_156c: /* paddr=0x156c verbose=Init Data a00119d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1570: /* paddr=0x1570 verbose=Init Data a00119d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1574: /* paddr=0x1574 verbose=Init Data a00119e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1578: /* paddr=0x1578 verbose=Init Data a00119e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_157c: /* paddr=0x157c verbose=Init Data a00119f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1580: /* paddr=0x1580 verbose=Init Data a00119f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00119f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00119f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1584: /* paddr=0x1584 verbose=Init Data a0011a00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1588: /* paddr=0x1588 verbose=Init Data a0011a08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_158c: /* paddr=0x158c verbose=Init Data a0011a10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1590: /* paddr=0x1590 verbose=Init Data a0011a18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1594: /* paddr=0x1594 verbose=Init Data a0011a20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1598: /* paddr=0x1598 verbose=Init Data a0011a28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_159c: /* paddr=0x159c verbose=Init Data a0011a30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15a0: /* paddr=0x15a0 verbose=Init Data a0011a38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15a4: /* paddr=0x15a4 verbose=Init Data a0011a40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15a8: /* paddr=0x15a8 verbose=Init Data a0011a48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15ac: /* paddr=0x15ac verbose=Init Data a0011a50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15b0: /* paddr=0x15b0 verbose=Init Data a0011a58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15b4: /* paddr=0x15b4 verbose=Init Data a0011a60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15b8: /* paddr=0x15b8 verbose=Init Data a0011a68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15bc: /* paddr=0x15bc verbose=Init Data a0011a70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15c0: /* paddr=0x15c0 verbose=Init Data a0011a78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15c4: /* paddr=0x15c4 verbose=Init Data a0011a80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15c8: /* paddr=0x15c8 verbose=Init Data a0011a88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15cc: /* paddr=0x15cc verbose=Init Data a0011a90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15d0: /* paddr=0x15d0 verbose=Init Data a0011a98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011a98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011a98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15d4: /* paddr=0x15d4 verbose=Init Data a0011aa0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011aa0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011aa0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15d8: /* paddr=0x15d8 verbose=Init Data a0011aa8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011aa8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011aa8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15dc: /* paddr=0x15dc verbose=Init Data a0011ab0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ab0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ab0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15e0: /* paddr=0x15e0 verbose=Init Data a0011ab8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ab8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ab8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15e4: /* paddr=0x15e4 verbose=Init Data a0011ac0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ac0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ac0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15e8: /* paddr=0x15e8 verbose=Init Data a0011ac8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ac8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ac8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15ec: /* paddr=0x15ec verbose=Init Data a0011ad0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ad0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ad0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15f0: /* paddr=0x15f0 verbose=Init Data a0011ad8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ad8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ad8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15f4: /* paddr=0x15f4 verbose=Init Data a0011ae0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ae0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ae0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15f8: /* paddr=0x15f8 verbose=Init Data a0011ae8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ae8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ae8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_15fc: /* paddr=0x15fc verbose=Init Data a0011af0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011af0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011af0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1600: /* paddr=0x1600 verbose=Init Data a0011af8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011af8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011af8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1604: /* paddr=0x1604 verbose=Init Data a0011b00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1608: /* paddr=0x1608 verbose=Init Data a0011b08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_160c: /* paddr=0x160c verbose=Init Data a0011b10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1610: /* paddr=0x1610 verbose=Init Data a0011b18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1614: /* paddr=0x1614 verbose=Init Data a0011b20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1618: /* paddr=0x1618 verbose=Init Data a0011b28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_161c: /* paddr=0x161c verbose=Init Data a0011b30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1620: /* paddr=0x1620 verbose=Init Data a0011b38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1624: /* paddr=0x1624 verbose=Init Data a0011b40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1628: /* paddr=0x1628 verbose=Init Data a0011b48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_162c: /* paddr=0x162c verbose=Init Data a0011b50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1630: /* paddr=0x1630 verbose=Init Data a0011b58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1634: /* paddr=0x1634 verbose=Init Data a0011b60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1638: /* paddr=0x1638 verbose=Init Data a0011b68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_163c: /* paddr=0x163c verbose=Init Data a0011b70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1640: /* paddr=0x1640 verbose=Init Data a0011b78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1644: /* paddr=0x1644 verbose=Init Data a0011b80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1648: /* paddr=0x1648 verbose=Init Data a0011b88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_164c: /* paddr=0x164c verbose=Init Data a0011b90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1650: /* paddr=0x1650 verbose=Init Data a0011b98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011b98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011b98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1654: /* paddr=0x1654 verbose=Init Data a0011ba0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ba0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ba0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1658: /* paddr=0x1658 verbose=Init Data a0011ba8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ba8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ba8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_165c: /* paddr=0x165c verbose=Init Data a0011bb0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bb0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1660: /* paddr=0x1660 verbose=Init Data a0011bb8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bb8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1664: /* paddr=0x1664 verbose=Init Data a0011bc0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bc0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1668: /* paddr=0x1668 verbose=Init Data a0011bc8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bc8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_166c: /* paddr=0x166c verbose=Init Data a0011bd0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bd0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1670: /* paddr=0x1670 verbose=Init Data a0011bd8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bd8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1674: /* paddr=0x1674 verbose=Init Data a0011be0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011be0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011be0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1678: /* paddr=0x1678 verbose=Init Data a0011be8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011be8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011be8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_167c: /* paddr=0x167c verbose=Init Data a0011bf0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bf0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bf0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1680: /* paddr=0x1680 verbose=Init Data a0011bf8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011bf8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011bf8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1684: /* paddr=0x1684 verbose=Init Data a0011c00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1688: /* paddr=0x1688 verbose=Init Data a0011c08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_168c: /* paddr=0x168c verbose=Init Data a0011c10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1690: /* paddr=0x1690 verbose=Init Data a0011c18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1694: /* paddr=0x1694 verbose=Init Data a0011c20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1698: /* paddr=0x1698 verbose=Init Data a0011c28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_169c: /* paddr=0x169c verbose=Init Data a0011c30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16a0: /* paddr=0x16a0 verbose=Init Data a0011c38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16a4: /* paddr=0x16a4 verbose=Init Data a0011c40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16a8: /* paddr=0x16a8 verbose=Init Data a0011c48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16ac: /* paddr=0x16ac verbose=Init Data a0011c50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16b0: /* paddr=0x16b0 verbose=Init Data a0011c58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16b4: /* paddr=0x16b4 verbose=Init Data a0011c60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16b8: /* paddr=0x16b8 verbose=Init Data a0011c68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16bc: /* paddr=0x16bc verbose=Init Data a0011c70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16c0: /* paddr=0x16c0 verbose=Init Data a0011c78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16c4: /* paddr=0x16c4 verbose=Init Data a0011c80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16c8: /* paddr=0x16c8 verbose=Init Data a0011c88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16cc: /* paddr=0x16cc verbose=Init Data a0011c90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16d0: /* paddr=0x16d0 verbose=Init Data a0011c98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011c98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011c98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16d4: /* paddr=0x16d4 verbose=Init Data a0011ca0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ca0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ca0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16d8: /* paddr=0x16d8 verbose=Init Data a0011ca8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ca8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ca8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16dc: /* paddr=0x16dc verbose=Init Data a0011cb0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cb0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16e0: /* paddr=0x16e0 verbose=Init Data a0011cb8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cb8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16e4: /* paddr=0x16e4 verbose=Init Data a0011cc0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cc0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16e8: /* paddr=0x16e8 verbose=Init Data a0011cc8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cc8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16ec: /* paddr=0x16ec verbose=Init Data a0011cd0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cd0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16f0: /* paddr=0x16f0 verbose=Init Data a0011cd8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cd8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16f4: /* paddr=0x16f4 verbose=Init Data a0011ce0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ce0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ce0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16f8: /* paddr=0x16f8 verbose=Init Data a0011ce8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ce8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ce8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_16fc: /* paddr=0x16fc verbose=Init Data a0011cf0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cf0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cf0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1700: /* paddr=0x1700 verbose=Init Data a0011cf8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011cf8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011cf8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1704: /* paddr=0x1704 verbose=Init Data a0011d00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1708: /* paddr=0x1708 verbose=Init Data a0011d08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_170c: /* paddr=0x170c verbose=Init Data a0011d10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1710: /* paddr=0x1710 verbose=Init Data a0011d18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1714: /* paddr=0x1714 verbose=Init Data a0011d20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1718: /* paddr=0x1718 verbose=Init Data a0011d28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_171c: /* paddr=0x171c verbose=Init Data a0011d30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1720: /* paddr=0x1720 verbose=Init Data a0011d38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1724: /* paddr=0x1724 verbose=Init Data a0011d40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1728: /* paddr=0x1728 verbose=Init Data a0011d48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_172c: /* paddr=0x172c verbose=Init Data a0011d50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1730: /* paddr=0x1730 verbose=Init Data a0011d58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1734: /* paddr=0x1734 verbose=Init Data a0011d60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1738: /* paddr=0x1738 verbose=Init Data a0011d68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_173c: /* paddr=0x173c verbose=Init Data a0011d70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1740: /* paddr=0x1740 verbose=Init Data a0011d78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1744: /* paddr=0x1744 verbose=Init Data a0011d80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1748: /* paddr=0x1748 verbose=Init Data a0011d88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_174c: /* paddr=0x174c verbose=Init Data a0011d90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1750: /* paddr=0x1750 verbose=Init Data a0011d98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011d98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011d98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1754: /* paddr=0x1754 verbose=Init Data a0011da0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011da0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011da0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1758: /* paddr=0x1758 verbose=Init Data a0011da8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011da8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011da8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_175c: /* paddr=0x175c verbose=Init Data a0011db0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011db0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011db0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1760: /* paddr=0x1760 verbose=Init Data a0011db8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011db8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011db8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1764: /* paddr=0x1764 verbose=Init Data a0011dc0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011dc0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011dc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1768: /* paddr=0x1768 verbose=Init Data a0011dc8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011dc8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011dc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_176c: /* paddr=0x176c verbose=Init Data a0011dd0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011dd0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011dd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1770: /* paddr=0x1770 verbose=Init Data a0011dd8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011dd8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011dd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1774: /* paddr=0x1774 verbose=Init Data a0011de0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011de0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011de0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1778: /* paddr=0x1778 verbose=Init Data a0011de8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011de8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011de8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_177c: /* paddr=0x177c verbose=Init Data a0011df0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011df0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011df0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1780: /* paddr=0x1780 verbose=Init Data a0011df8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011df8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011df8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1784: /* paddr=0x1784 verbose=Init Data a0011e00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1788: /* paddr=0x1788 verbose=Init Data a0011e08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_178c: /* paddr=0x178c verbose=Init Data a0011e10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1790: /* paddr=0x1790 verbose=Init Data a0011e18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1794: /* paddr=0x1794 verbose=Init Data a0011e20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1798: /* paddr=0x1798 verbose=Init Data a0011e28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_179c: /* paddr=0x179c verbose=Init Data a0011e30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17a0: /* paddr=0x17a0 verbose=Init Data a0011e38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17a4: /* paddr=0x17a4 verbose=Init Data a0011e40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17a8: /* paddr=0x17a8 verbose=Init Data a0011e48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17ac: /* paddr=0x17ac verbose=Init Data a0011e50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17b0: /* paddr=0x17b0 verbose=Init Data a0011e58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17b4: /* paddr=0x17b4 verbose=Init Data a0011e60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17b8: /* paddr=0x17b8 verbose=Init Data a0011e68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17bc: /* paddr=0x17bc verbose=Init Data a0011e70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17c0: /* paddr=0x17c0 verbose=Init Data a0011e78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17c4: /* paddr=0x17c4 verbose=Init Data a0011e80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17c8: /* paddr=0x17c8 verbose=Init Data a0011e88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17cc: /* paddr=0x17cc verbose=Init Data a0011e90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17d0: /* paddr=0x17d0 verbose=Init Data a0011e98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011e98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011e98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17d4: /* paddr=0x17d4 verbose=Init Data a0011ea0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ea0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ea0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17d8: /* paddr=0x17d8 verbose=Init Data a0011ea8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ea8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ea8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17dc: /* paddr=0x17dc verbose=Init Data a0011eb0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011eb0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011eb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17e0: /* paddr=0x17e0 verbose=Init Data a0011eb8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011eb8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011eb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17e4: /* paddr=0x17e4 verbose=Init Data a0011ec0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ec0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ec0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17e8: /* paddr=0x17e8 verbose=Init Data a0011ec8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ec8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ec8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17ec: /* paddr=0x17ec verbose=Init Data a0011ed0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ed0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ed0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17f0: /* paddr=0x17f0 verbose=Init Data a0011ed8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ed8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ed8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17f4: /* paddr=0x17f4 verbose=Init Data a0011ee0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ee0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ee0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17f8: /* paddr=0x17f8 verbose=Init Data a0011ee8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ee8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ee8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_17fc: /* paddr=0x17fc verbose=Init Data a0011ef0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ef0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ef0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1800: /* paddr=0x1800 verbose=Init Data a0011ef8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ef8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ef8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1804: /* paddr=0x1804 verbose=Init Data a0011f00: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f00 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1808: /* paddr=0x1808 verbose=Init Data a0011f08: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f08 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_180c: /* paddr=0x180c verbose=Init Data a0011f10: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f10 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1810: /* paddr=0x1810 verbose=Init Data a0011f18: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f18 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1814: /* paddr=0x1814 verbose=Init Data a0011f20: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f20 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1818: /* paddr=0x1818 verbose=Init Data a0011f28: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f28 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_181c: /* paddr=0x181c verbose=Init Data a0011f30: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f30 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1820: /* paddr=0x1820 verbose=Init Data a0011f38: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f38 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1824: /* paddr=0x1824 verbose=Init Data a0011f40: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f40 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1828: /* paddr=0x1828 verbose=Init Data a0011f48: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f48 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_182c: /* paddr=0x182c verbose=Init Data a0011f50: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f50 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1830: /* paddr=0x1830 verbose=Init Data a0011f58: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f58 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1834: /* paddr=0x1834 verbose=Init Data a0011f60: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f60 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1838: /* paddr=0x1838 verbose=Init Data a0011f68: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f68 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_183c: /* paddr=0x183c verbose=Init Data a0011f70: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f70 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1840: /* paddr=0x1840 verbose=Init Data a0011f78: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f78 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1844: /* paddr=0x1844 verbose=Init Data a0011f80: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f80 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1848: /* paddr=0x1848 verbose=Init Data a0011f88: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f88 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_184c: /* paddr=0x184c verbose=Init Data a0011f90: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f90 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1850: /* paddr=0x1850 verbose=Init Data a0011f98: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011f98 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011f98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1854: /* paddr=0x1854 verbose=Init Data a0011fa0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fa0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fa0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1858: /* paddr=0x1858 verbose=Init Data a0011fa8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fa8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fa8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_185c: /* paddr=0x185c verbose=Init Data a0011fb0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fb0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1860: /* paddr=0x1860 verbose=Init Data a0011fb8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fb8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1864: /* paddr=0x1864 verbose=Init Data a0011fc0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fc0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1868: /* paddr=0x1868 verbose=Init Data a0011fc8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fc8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_186c: /* paddr=0x186c verbose=Init Data a0011fd0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fd0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1870: /* paddr=0x1870 verbose=Init Data a0011fd8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fd8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1874: /* paddr=0x1874 verbose=Init Data a0011fe0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fe0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fe0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1878: /* paddr=0x1878 verbose=Init Data a0011fe8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011fe8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011fe8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_187c: /* paddr=0x187c verbose=Init Data a0011ff0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ff0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ff0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1880: /* paddr=0x1880 verbose=Init Data a0011ff8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0011ff8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0011ff8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1884: /* paddr=0x1884 verbose=Init Data a0012000: 00000080 a_src=2=SRC_IMM a_offset_imm0=0xa0012000 b_src=2=SRC_IMM b_offset_imm0=0x80 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x80 */
	mov r12, 0x80 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1888: /* paddr=0x1888 verbose=Init Data a0012008: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012008 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_188c: /* paddr=0x188c verbose=Init Data a0012010: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012010 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1890: /* paddr=0x1890 verbose=Init Data a0012018: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012018 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1894: /* paddr=0x1894 verbose=Init Data a0012020: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012020 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1898: /* paddr=0x1898 verbose=Init Data a0012028: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012028 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_189c: /* paddr=0x189c verbose=Init Data a0012030: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012030 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18a0: /* paddr=0x18a0 verbose=Init Data a0012038: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012038 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18a4: /* paddr=0x18a4 verbose=Init Data a0012040: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012040 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18a8: /* paddr=0x18a8 verbose=Init Data a0012048: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012048 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18ac: /* paddr=0x18ac verbose=Init Data a0012050: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012050 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18b0: /* paddr=0x18b0 verbose=Init Data a0012058: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012058 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18b4: /* paddr=0x18b4 verbose=Init Data a0012060: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012060 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18b8: /* paddr=0x18b8 verbose=Init Data a0012068: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012068 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012068 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18bc: /* paddr=0x18bc verbose=Init Data a0012070: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012070 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012070 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18c0: /* paddr=0x18c0 verbose=Init Data a0012078: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012078 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012078 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18c4: /* paddr=0x18c4 verbose=Init Data a0012080: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012080 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012080 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18c8: /* paddr=0x18c8 verbose=Init Data a0012088: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012088 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012088 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18cc: /* paddr=0x18cc verbose=Init Data a0012090: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012090 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012090 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18d0: /* paddr=0x18d0 verbose=Init Data a0012098: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012098 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012098 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18d4: /* paddr=0x18d4 verbose=Init Data a00120a0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120a0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18d8: /* paddr=0x18d8 verbose=Init Data a00120a8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120a8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18dc: /* paddr=0x18dc verbose=Init Data a00120b0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120b0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18e0: /* paddr=0x18e0 verbose=Init Data a00120b8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120b8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18e4: /* paddr=0x18e4 verbose=Init Data a00120c0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120c0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18e8: /* paddr=0x18e8 verbose=Init Data a00120c8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120c8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18ec: /* paddr=0x18ec verbose=Init Data a00120d0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120d0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18f0: /* paddr=0x18f0 verbose=Init Data a00120d8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120d8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18f4: /* paddr=0x18f4 verbose=Init Data a00120e0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120e0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18f8: /* paddr=0x18f8 verbose=Init Data a00120e8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120e8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_18fc: /* paddr=0x18fc verbose=Init Data a00120f0: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120f0 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1900: /* paddr=0x1900 verbose=Init Data a00120f8: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa00120f8 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa00120f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1904: /* paddr=0x1904 verbose=Init Data a0012100: 00000004 a_src=2=SRC_IMM a_offset_imm0=0xa0012100 b_src=2=SRC_IMM b_offset_imm0=0x4 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x4 */
	mov r12, 0x4 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012100 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1908: /* paddr=0x1908 verbose=Init Data a0012108: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012108 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012108 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_190c: /* paddr=0x190c verbose=Init Data a0012110: 6f5ca309e7d4b281 a_src=2=SRC_IMM a_offset_imm0=0xa0012110 b_src=2=SRC_IMM b_use_sp_imm1=0x6f5ca309 b_offset_imm0=0xe7d4b281 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6f5ca309e7d4b281 */
	mov r12, 0x6f5ca309e7d4b281 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012110 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1910: /* paddr=0x1910 verbose=Init Data a0012118: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012118 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012118 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1914: /* paddr=0x1914 verbose=Init Data a0012120: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012120 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012120 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1918: /* paddr=0x1918 verbose=Init Data a0012128: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012128 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012128 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_191c: /* paddr=0x191c verbose=Init Data a0012130: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012130 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012130 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1920: /* paddr=0x1920 verbose=Init Data a0012138: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012138 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012138 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1924: /* paddr=0x1924 verbose=Init Data a0012140: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012140 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012140 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1928: /* paddr=0x1928 verbose=Init Data a0012148: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012148 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012148 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_192c: /* paddr=0x192c verbose=Init Data a0012150: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012150 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012150 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1930: /* paddr=0x1930 verbose=Init Data a0012158: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012158 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012158 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1934: /* paddr=0x1934 verbose=Init Data a0012160: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012160 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012160 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1938: /* paddr=0x1938 verbose=Init Data a0012168: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012168 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012168 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_193c: /* paddr=0x193c verbose=Init Data a0012170: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012170 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012170 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1940: /* paddr=0x1940 verbose=Init Data a0012178: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012178 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012178 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1944: /* paddr=0x1944 verbose=Init Data a0012180: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012180 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012180 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1948: /* paddr=0x1948 verbose=Init Data a0012188: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012188 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012188 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_194c: /* paddr=0x194c verbose=Init Data a0012190: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012190 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012190 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1950: /* paddr=0x1950 verbose=Init Data a0012198: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012198 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012198 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1954: /* paddr=0x1954 verbose=Init Data a00121a0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121a0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1958: /* paddr=0x1958 verbose=Init Data a00121a8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121a8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_195c: /* paddr=0x195c verbose=Init Data a00121b0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121b0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1960: /* paddr=0x1960 verbose=Init Data a00121b8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121b8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1964: /* paddr=0x1964 verbose=Init Data a00121c0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121c0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1968: /* paddr=0x1968 verbose=Init Data a00121c8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121c8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_196c: /* paddr=0x196c verbose=Init Data a00121d0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121d0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1970: /* paddr=0x1970 verbose=Init Data a00121d8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121d8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1974: /* paddr=0x1974 verbose=Init Data a00121e0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121e0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1978: /* paddr=0x1978 verbose=Init Data a00121e8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121e8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_197c: /* paddr=0x197c verbose=Init Data a00121f0: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121f0 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1980: /* paddr=0x1980 verbose=Init Data a00121f8: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa00121f8 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa00121f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1984: /* paddr=0x1984 verbose=Init Data a0012200: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012200 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012200 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1988: /* paddr=0x1988 verbose=Init Data a0012208: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012208 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012208 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_198c: /* paddr=0x198c verbose=Init Data a0012210: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012210 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012210 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1990: /* paddr=0x1990 verbose=Init Data a0012218: deadbeefdeadbeef a_src=2=SRC_IMM a_offset_imm0=0xa0012218 b_src=2=SRC_IMM b_use_sp_imm1=0xdeadbeef b_offset_imm0=0xdeadbeef ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xdeadbeefdeadbeef */
	mov r12, 0xdeadbeefdeadbeef /* STORE_IND: reg_value = value */
	mov r13, 0xa0012218 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1994: /* paddr=0x1994 verbose=Init Data a0012220: 6f5ca309e7d4b281 a_src=2=SRC_IMM a_offset_imm0=0xa0012220 b_src=2=SRC_IMM b_use_sp_imm1=0x6f5ca309 b_offset_imm0=0xe7d4b281 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6f5ca309e7d4b281 */
	mov r12, 0x6f5ca309e7d4b281 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012220 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1998: /* paddr=0x1998 verbose=Init Data a0012228: 00000000 a_src=2=SRC_IMM a_offset_imm0=0xa0012228 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0xa0012228 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_199c: /* paddr=0x199c verbose=Init Data 80000000: ddb808137d5c0837 a_src=2=SRC_IMM a_offset_imm0=0x80000000 b_src=2=SRC_IMM b_use_sp_imm1=0xddb80813 b_offset_imm0=0x7d5c0837 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xddb808137d5c0837 */
	mov r12, 0xddb808137d5c0837 /* STORE_IND: reg_value = value */
	mov r13, 0x80000000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19a0: /* paddr=0x19a0 verbose=Init Data 80000008: 3ea8081300b81813 a_src=2=SRC_IMM a_offset_imm0=0x80000008 b_src=2=SRC_IMM b_use_sp_imm1=0x3ea80813 b_offset_imm0=0xb81813 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3ea8081300b81813 */
	mov r12, 0x3ea8081300b81813 /* STORE_IND: reg_value = value */
	mov r13, 0x80000008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19a4: /* paddr=0x19a4 verbose=Init Data 80000010: 6ff8081300b81813 a_src=2=SRC_IMM a_offset_imm0=0x80000010 b_src=2=SRC_IMM b_use_sp_imm1=0x6ff80813 b_offset_imm0=0xb81813 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6ff8081300b81813 */
	mov r12, 0x6ff8081300b81813 /* STORE_IND: reg_value = value */
	mov r13, 0x80000010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19a8: /* paddr=0x19a8 verbose=Init Data 80000018: 1db8081300a81813 a_src=2=SRC_IMM a_offset_imm0=0x80000018 b_src=2=SRC_IMM b_use_sp_imm1=0x1db80813 b_offset_imm0=0xa81813 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1db8081300a81813 */
	mov r12, 0x1db8081300a81813 /* STORE_IND: reg_value = value */
	mov r13, 0x80000018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19ac: /* paddr=0x19ac verbose=Init Data 80000020: 398579300785893 a_src=2=SRC_IMM a_offset_imm0=0x80000020 b_src=2=SRC_IMM b_use_sp_imm1=0x3985793 b_offset_imm0=0x785893 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x398579300785893 */
	mov r12, 0x398579300785893 /* STORE_IND: reg_value = value */
	mov r13, 0x80000020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19b0: /* paddr=0x19b0 verbose=Init Data 80000028: 78d91300f8e8b3 a_src=2=SRC_IMM a_offset_imm0=0x80000028 b_src=2=SRC_IMM b_use_sp_imm1=0x78d913 b_offset_imm0=0xf8e8b3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x78d91300f8e8b3 */
	mov r12, 0x78d91300f8e8b3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19b4: /* paddr=0x19b4 verbose=Init Data 80000030: f969330398d793 a_src=2=SRC_IMM a_offset_imm0=0x80000030 b_src=2=SRC_IMM b_use_sp_imm1=0xf96933 b_offset_imm0=0x398d793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf969330398d793 */
	mov r12, 0xf969330398d793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19b8: /* paddr=0x19b8 verbose=Init Data 80000038: 399579300795993 a_src=2=SRC_IMM a_offset_imm0=0x80000038 b_src=2=SRC_IMM b_use_sp_imm1=0x3995793 b_offset_imm0=0x795993 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x399579300795993 */
	mov r12, 0x399579300795993 /* STORE_IND: reg_value = value */
	mov r13, 0x80000038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19bc: /* paddr=0x19bc verbose=Init Data 80000040: 79da1300f9e9b3 a_src=2=SRC_IMM a_offset_imm0=0x80000040 b_src=2=SRC_IMM b_use_sp_imm1=0x79da13 b_offset_imm0=0xf9e9b3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x79da1300f9e9b3 */
	mov r12, 0x79da1300f9e9b3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19c0: /* paddr=0x19c0 verbose=Init Data 80000048: fa6a330399d793 a_src=2=SRC_IMM a_offset_imm0=0x80000048 b_src=2=SRC_IMM b_use_sp_imm1=0xfa6a33 b_offset_imm0=0x399d793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfa6a330399d793 */
	mov r12, 0xfa6a330399d793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19c4: /* paddr=0x19c4 verbose=Init Data 80000050: 39a5793007a5a93 a_src=2=SRC_IMM a_offset_imm0=0x80000050 b_src=2=SRC_IMM b_use_sp_imm1=0x39a5793 b_offset_imm0=0x7a5a93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39a5793007a5a93 */
	mov r12, 0x39a5793007a5a93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19c8: /* paddr=0x19c8 verbose=Init Data 80000058: 7adb1300faeab3 a_src=2=SRC_IMM a_offset_imm0=0x80000058 b_src=2=SRC_IMM b_use_sp_imm1=0x7adb13 b_offset_imm0=0xfaeab3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7adb1300faeab3 */
	mov r12, 0x7adb1300faeab3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19cc: /* paddr=0x19cc verbose=Init Data 80000060: fb6b33039ad793 a_src=2=SRC_IMM a_offset_imm0=0x80000060 b_src=2=SRC_IMM b_use_sp_imm1=0xfb6b33 b_offset_imm0=0x39ad793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfb6b33039ad793 */
	mov r12, 0xfb6b33039ad793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19d0: /* paddr=0x19d0 verbose=Init Data 80000068: 39b5793007b5b93 a_src=2=SRC_IMM a_offset_imm0=0x80000068 b_src=2=SRC_IMM b_use_sp_imm1=0x39b5793 b_offset_imm0=0x7b5b93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39b5793007b5b93 */
	mov r12, 0x39b5793007b5b93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000068 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19d4: /* paddr=0x19d4 verbose=Init Data 80000070: 7bdc1300fbebb3 a_src=2=SRC_IMM a_offset_imm0=0x80000070 b_src=2=SRC_IMM b_use_sp_imm1=0x7bdc13 b_offset_imm0=0xfbebb3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7bdc1300fbebb3 */
	mov r12, 0x7bdc1300fbebb3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000070 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19d8: /* paddr=0x19d8 verbose=Init Data 80000078: fc6c33039bd793 a_src=2=SRC_IMM a_offset_imm0=0x80000078 b_src=2=SRC_IMM b_use_sp_imm1=0xfc6c33 b_offset_imm0=0x39bd793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfc6c33039bd793 */
	mov r12, 0xfc6c33039bd793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000078 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19dc: /* paddr=0x19dc verbose=Init Data 80000080: 39c5793007c5c93 a_src=2=SRC_IMM a_offset_imm0=0x80000080 b_src=2=SRC_IMM b_use_sp_imm1=0x39c5793 b_offset_imm0=0x7c5c93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39c5793007c5c93 */
	mov r12, 0x39c5793007c5c93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000080 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19e0: /* paddr=0x19e0 verbose=Init Data 80000088: 7cdd1300fcecb3 a_src=2=SRC_IMM a_offset_imm0=0x80000088 b_src=2=SRC_IMM b_use_sp_imm1=0x7cdd13 b_offset_imm0=0xfcecb3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7cdd1300fcecb3 */
	mov r12, 0x7cdd1300fcecb3 /* STORE_IND: reg_value = value */
	mov r13, 0x80000088 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19e4: /* paddr=0x19e4 verbose=Init Data 80000090: fd6d33039cd793 a_src=2=SRC_IMM a_offset_imm0=0x80000090 b_src=2=SRC_IMM b_use_sp_imm1=0xfd6d33 b_offset_imm0=0x39cd793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfd6d33039cd793 */
	mov r12, 0xfd6d33039cd793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000090 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19e8: /* paddr=0x19e8 verbose=Init Data 80000098: 39d5793007d5d93 a_src=2=SRC_IMM a_offset_imm0=0x80000098 b_src=2=SRC_IMM b_use_sp_imm1=0x39d5793 b_offset_imm0=0x7d5d93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39d5793007d5d93 */
	mov r12, 0x39d5793007d5d93 /* STORE_IND: reg_value = value */
	mov r13, 0x80000098 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19ec: /* paddr=0x19ec verbose=Init Data 800000a0: 7dde1300fdedb3 a_src=2=SRC_IMM a_offset_imm0=0x800000a0 b_src=2=SRC_IMM b_use_sp_imm1=0x7dde13 b_offset_imm0=0xfdedb3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7dde1300fdedb3 */
	mov r12, 0x7dde1300fdedb3 /* STORE_IND: reg_value = value */
	mov r13, 0x800000a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19f0: /* paddr=0x19f0 verbose=Init Data 800000a8: fe6e33039dd793 a_src=2=SRC_IMM a_offset_imm0=0x800000a8 b_src=2=SRC_IMM b_use_sp_imm1=0xfe6e33 b_offset_imm0=0x39dd793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfe6e33039dd793 */
	mov r12, 0xfe6e33039dd793 /* STORE_IND: reg_value = value */
	mov r13, 0x800000a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19f4: /* paddr=0x19f4 verbose=Init Data 800000b0: 39e5793007e5e93 a_src=2=SRC_IMM a_offset_imm0=0x800000b0 b_src=2=SRC_IMM b_use_sp_imm1=0x39e5793 b_offset_imm0=0x7e5e93 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39e5793007e5e93 */
	mov r12, 0x39e5793007e5e93 /* STORE_IND: reg_value = value */
	mov r13, 0x800000b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19f8: /* paddr=0x19f8 verbose=Init Data 800000b8: 7edf1300feeeb3 a_src=2=SRC_IMM a_offset_imm0=0x800000b8 b_src=2=SRC_IMM b_use_sp_imm1=0x7edf13 b_offset_imm0=0xfeeeb3 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7edf1300feeeb3 */
	mov r12, 0x7edf1300feeeb3 /* STORE_IND: reg_value = value */
	mov r13, 0x800000b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_19fc: /* paddr=0x19fc verbose=Init Data 800000c0: ff6f33039ed793 a_src=2=SRC_IMM a_offset_imm0=0x800000c0 b_src=2=SRC_IMM b_use_sp_imm1=0xff6f33 b_offset_imm0=0x39ed793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xff6f33039ed793 */
	mov r12, 0xff6f33039ed793 /* STORE_IND: reg_value = value */
	mov r13, 0x800000c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a00: /* paddr=0x1a00 verbose=Init Data 800000c8: ead08093feedc0b7 a_src=2=SRC_IMM a_offset_imm0=0x800000c8 b_src=2=SRC_IMM b_use_sp_imm1=0xead08093 b_offset_imm0=0xfeedc0b7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xead08093feedc0b7 */
	mov r12, 0xead08093feedc0b7 /* STORE_IND: reg_value = value */
	mov r13, 0x800000c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a04: /* paddr=0x1a04 verbose=Init Data 800000d0: 7f70809300b09093 a_src=2=SRC_IMM a_offset_imm0=0x800000d0 b_src=2=SRC_IMM b_use_sp_imm1=0x7f708093 b_offset_imm0=0xb09093 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7f70809300b09093 */
	mov r12, 0x7f70809300b09093 /* STORE_IND: reg_value = value */
	mov r13, 0x800000d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a08: /* paddr=0x1a08 verbose=Init Data 800000d8: 36f0809300b09093 a_src=2=SRC_IMM a_offset_imm0=0x800000d8 b_src=2=SRC_IMM b_use_sp_imm1=0x36f08093 b_offset_imm0=0xb09093 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x36f0809300b09093 */
	mov r12, 0x36f0809300b09093 /* STORE_IND: reg_value = value */
	mov r13, 0x800000d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a0c: /* paddr=0x1a0c verbose=Init Data 800000e0: 2ad0809300a09093 a_src=2=SRC_IMM a_offset_imm0=0x800000e0 b_src=2=SRC_IMM b_use_sp_imm1=0x2ad08093 b_offset_imm0=0xa09093 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2ad0809300a09093 */
	mov r12, 0x2ad0809300a09093 /* STORE_IND: reg_value = value */
	mov r13, 0x800000e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a10: /* paddr=0x1a10 verbose=Init Data 800000e8: 390d7930070d113 a_src=2=SRC_IMM a_offset_imm0=0x800000e8 b_src=2=SRC_IMM b_use_sp_imm1=0x390d793 b_offset_imm0=0x70d113 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x390d7930070d113 */
	mov r12, 0x390d7930070d113 /* STORE_IND: reg_value = value */
	mov r13, 0x800000e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a14: /* paddr=0x1a14 verbose=Init Data 800000f0: 71519300f16133 a_src=2=SRC_IMM a_offset_imm0=0x800000f0 b_src=2=SRC_IMM b_use_sp_imm1=0x715193 b_offset_imm0=0xf16133 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x71519300f16133 */
	mov r12, 0x71519300f16133 /* STORE_IND: reg_value = value */
	mov r13, 0x800000f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a18: /* paddr=0x1a18 verbose=Init Data 800000f8: f1e1b303915793 a_src=2=SRC_IMM a_offset_imm0=0x800000f8 b_src=2=SRC_IMM b_use_sp_imm1=0xf1e1b3 b_offset_imm0=0x3915793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf1e1b303915793 */
	mov r12, 0xf1e1b303915793 /* STORE_IND: reg_value = value */
	mov r13, 0x800000f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a1c: /* paddr=0x1a1c verbose=Init Data 80000100: 391d7930071d213 a_src=2=SRC_IMM a_offset_imm0=0x80000100 b_src=2=SRC_IMM b_use_sp_imm1=0x391d793 b_offset_imm0=0x71d213 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x391d7930071d213 */
	mov r12, 0x391d7930071d213 /* STORE_IND: reg_value = value */
	mov r13, 0x80000100 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a20: /* paddr=0x1a20 verbose=Init Data 80000108: 72529300f26233 a_src=2=SRC_IMM a_offset_imm0=0x80000108 b_src=2=SRC_IMM b_use_sp_imm1=0x725293 b_offset_imm0=0xf26233 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x72529300f26233 */
	mov r12, 0x72529300f26233 /* STORE_IND: reg_value = value */
	mov r13, 0x80000108 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a24: /* paddr=0x1a24 verbose=Init Data 80000110: f2e2b303925793 a_src=2=SRC_IMM a_offset_imm0=0x80000110 b_src=2=SRC_IMM b_use_sp_imm1=0xf2e2b3 b_offset_imm0=0x3925793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf2e2b303925793 */
	mov r12, 0xf2e2b303925793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000110 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a28: /* paddr=0x1a28 verbose=Init Data 80000118: 392d7930072d313 a_src=2=SRC_IMM a_offset_imm0=0x80000118 b_src=2=SRC_IMM b_use_sp_imm1=0x392d793 b_offset_imm0=0x72d313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x392d7930072d313 */
	mov r12, 0x392d7930072d313 /* STORE_IND: reg_value = value */
	mov r13, 0x80000118 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a2c: /* paddr=0x1a2c verbose=Init Data 80000120: 73539300f36333 a_src=2=SRC_IMM a_offset_imm0=0x80000120 b_src=2=SRC_IMM b_use_sp_imm1=0x735393 b_offset_imm0=0xf36333 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x73539300f36333 */
	mov r12, 0x73539300f36333 /* STORE_IND: reg_value = value */
	mov r13, 0x80000120 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a30: /* paddr=0x1a30 verbose=Init Data 80000128: f3e3b303935793 a_src=2=SRC_IMM a_offset_imm0=0x80000128 b_src=2=SRC_IMM b_use_sp_imm1=0xf3e3b3 b_offset_imm0=0x3935793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf3e3b303935793 */
	mov r12, 0xf3e3b303935793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000128 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a34: /* paddr=0x1a34 verbose=Init Data 80000130: 393d7930073d413 a_src=2=SRC_IMM a_offset_imm0=0x80000130 b_src=2=SRC_IMM b_use_sp_imm1=0x393d793 b_offset_imm0=0x73d413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x393d7930073d413 */
	mov r12, 0x393d7930073d413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000130 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a38: /* paddr=0x1a38 verbose=Init Data 80000138: 74549300f46433 a_src=2=SRC_IMM a_offset_imm0=0x80000138 b_src=2=SRC_IMM b_use_sp_imm1=0x745493 b_offset_imm0=0xf46433 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x74549300f46433 */
	mov r12, 0x74549300f46433 /* STORE_IND: reg_value = value */
	mov r13, 0x80000138 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a3c: /* paddr=0x1a3c verbose=Init Data 80000140: f4e4b303945793 a_src=2=SRC_IMM a_offset_imm0=0x80000140 b_src=2=SRC_IMM b_use_sp_imm1=0xf4e4b3 b_offset_imm0=0x3945793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf4e4b303945793 */
	mov r12, 0xf4e4b303945793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000140 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a40: /* paddr=0x1a40 verbose=Init Data 80000148: 394d7930074d513 a_src=2=SRC_IMM a_offset_imm0=0x80000148 b_src=2=SRC_IMM b_use_sp_imm1=0x394d793 b_offset_imm0=0x74d513 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x394d7930074d513 */
	mov r12, 0x394d7930074d513 /* STORE_IND: reg_value = value */
	mov r13, 0x80000148 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a44: /* paddr=0x1a44 verbose=Init Data 80000150: 75559300f56533 a_src=2=SRC_IMM a_offset_imm0=0x80000150 b_src=2=SRC_IMM b_use_sp_imm1=0x755593 b_offset_imm0=0xf56533 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x75559300f56533 */
	mov r12, 0x75559300f56533 /* STORE_IND: reg_value = value */
	mov r13, 0x80000150 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a48: /* paddr=0x1a48 verbose=Init Data 80000158: f5e5b303955793 a_src=2=SRC_IMM a_offset_imm0=0x80000158 b_src=2=SRC_IMM b_use_sp_imm1=0xf5e5b3 b_offset_imm0=0x3955793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf5e5b303955793 */
	mov r12, 0xf5e5b303955793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000158 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a4c: /* paddr=0x1a4c verbose=Init Data 80000160: 395d7930075d613 a_src=2=SRC_IMM a_offset_imm0=0x80000160 b_src=2=SRC_IMM b_use_sp_imm1=0x395d793 b_offset_imm0=0x75d613 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x395d7930075d613 */
	mov r12, 0x395d7930075d613 /* STORE_IND: reg_value = value */
	mov r13, 0x80000160 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a50: /* paddr=0x1a50 verbose=Init Data 80000168: 76569300f66633 a_src=2=SRC_IMM a_offset_imm0=0x80000168 b_src=2=SRC_IMM b_use_sp_imm1=0x765693 b_offset_imm0=0xf66633 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x76569300f66633 */
	mov r12, 0x76569300f66633 /* STORE_IND: reg_value = value */
	mov r13, 0x80000168 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a54: /* paddr=0x1a54 verbose=Init Data 80000170: f6e6b303965793 a_src=2=SRC_IMM a_offset_imm0=0x80000170 b_src=2=SRC_IMM b_use_sp_imm1=0xf6e6b3 b_offset_imm0=0x3965793 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf6e6b303965793 */
	mov r12, 0xf6e6b303965793 /* STORE_IND: reg_value = value */
	mov r13, 0x80000170 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a58: /* paddr=0x1a58 verbose=Init Data 80000178: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000178 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000178 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a5c: /* paddr=0x1a5c verbose=Init Data 80000180: f982021320012217 a_src=2=SRC_IMM a_offset_imm0=0x80000180 b_src=2=SRC_IMM b_use_sp_imm1=0xf9820213 b_offset_imm0=0x20012217 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf982021320012217 */
	mov r12, 0xf982021320012217 /* STORE_IND: reg_value = value */
	mov r13, 0x80000180 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a60: /* paddr=0x1a60 verbose=Init Data 80000188: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000188 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000188 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a64: /* paddr=0x1a64 verbose=Init Data 80000190: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000190 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000190 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a68: /* paddr=0x1a68 verbose=Init Data 80000198: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000198 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000198 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a6c: /* paddr=0x1a6c verbose=Init Data 800001a0: 1300000c97 a_src=2=SRC_IMM a_offset_imm0=0x800001a0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xc97 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000c97 */
	mov r12, 0x1300000c97 /* STORE_IND: reg_value = value */
	mov r13, 0x800001a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a70: /* paddr=0x1a70 verbose=Init Data 800001a8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800001a8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800001a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a74: /* paddr=0x1a74 verbose=Init Data 800001b0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800001b0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800001b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a78: /* paddr=0x1a78 verbose=Init Data 800001b8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800001b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800001b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a7c: /* paddr=0x1a7c verbose=Init Data 800001c0: 2dc8c9300000c97 a_src=2=SRC_IMM a_offset_imm0=0x800001c0 b_src=2=SRC_IMM b_use_sp_imm1=0x2dc8c93 b_offset_imm0=0xc97 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2dc8c9300000c97 */
	mov r12, 0x2dc8c9300000c97 /* STORE_IND: reg_value = value */
	mov r13, 0x800001c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a80: /* paddr=0x1a80 verbose=Init Data 800001c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800001c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800001c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a84: /* paddr=0x1a84 verbose=Init Data 800001d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800001d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800001d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a88: /* paddr=0x1a88 verbose=Init Data 800001d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800001d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800001d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a8c: /* paddr=0x1a8c verbose=Init Data 800001e0: 13007c8ce7 a_src=2=SRC_IMM a_offset_imm0=0x800001e0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x7c8ce7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13007c8ce7 */
	mov r12, 0x13007c8ce7 /* STORE_IND: reg_value = value */
	mov r13, 0x800001e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a90: /* paddr=0x1a90 verbose=Init Data 800001e8: 2ccc9300000013 a_src=2=SRC_IMM a_offset_imm0=0x800001e8 b_src=2=SRC_IMM b_use_sp_imm1=0x2ccc93 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2ccc9300000013 */
	mov r12, 0x2ccc9300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800001e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a94: /* paddr=0x1a94 verbose=Init Data 800001f0: 3ccc9300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800001f0 b_src=2=SRC_IMM b_use_sp_imm1=0x3ccc93 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3ccc9300c0006f */
	mov r12, 0x3ccc9300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800001f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a98: /* paddr=0x1a98 verbose=Init Data 800001f8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800001f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800001f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1a9c: /* paddr=0x1a9c verbose=Init Data 80000200: fa04041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000200 b_src=2=SRC_IMM b_use_sp_imm1=0xfa040413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfa04041300000417 */
	mov r12, 0xfa04041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000200 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aa0: /* paddr=0x1aa0 verbose=Init Data 80000208: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000208 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000208 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aa4: /* paddr=0x1aa4 verbose=Init Data 80000210: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000210 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000210 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aa8: /* paddr=0x1aa8 verbose=Init Data 80000218: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000218 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000218 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aac: /* paddr=0x1aac verbose=Init Data 80000220: 408c8cb3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x80000220 b_src=2=SRC_IMM b_use_sp_imm1=0x408c8cb3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408c8cb3ffc47413 */
	mov r12, 0x408c8cb3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000220 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ab0: /* paddr=0x1ab0 verbose=Init Data 80000228: 39701923023 a_src=2=SRC_IMM a_offset_imm0=0x80000228 b_src=2=SRC_IMM b_use_sp_imm1=0x397 b_offset_imm0=0x1923023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39701923023 */
	mov r12, 0x39701923023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000228 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ab4: /* paddr=0x1ab4 verbose=Init Data 80000230: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000230 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000230 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ab8: /* paddr=0x1ab8 verbose=Init Data 80000238: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000238 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000238 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1abc: /* paddr=0x1abc verbose=Init Data 80000240: 3e9899300000997 a_src=2=SRC_IMM a_offset_imm0=0x80000240 b_src=2=SRC_IMM b_use_sp_imm1=0x3e98993 b_offset_imm0=0x997 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3e9899300000997 */
	mov r12, 0x3e9899300000997 /* STORE_IND: reg_value = value */
	mov r13, 0x80000240 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ac0: /* paddr=0x1ac0 verbose=Init Data 80000248: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000248 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000248 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ac4: /* paddr=0x1ac4 verbose=Init Data 80000250: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000250 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000250 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ac8: /* paddr=0x1ac8 verbose=Init Data 80000258: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000258 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000258 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1acc: /* paddr=0x1acc verbose=Init Data 80000260: 13ff6983e7 a_src=2=SRC_IMM a_offset_imm0=0x80000260 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xff6983e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13ff6983e7 */
	mov r12, 0x13ff6983e7 /* STORE_IND: reg_value = value */
	mov r13, 0x80000260 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ad0: /* paddr=0x1ad0 verbose=Init Data 80000268: 23c39300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000268 b_src=2=SRC_IMM b_use_sp_imm1=0x23c393 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x23c39300000013 */
	mov r12, 0x23c39300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000268 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ad4: /* paddr=0x1ad4 verbose=Init Data 80000270: 33c39300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000270 b_src=2=SRC_IMM b_use_sp_imm1=0x33c393 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x33c39300c0006f */
	mov r12, 0x33c39300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000270 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ad8: /* paddr=0x1ad8 verbose=Init Data 80000278: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000278 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000278 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1adc: /* paddr=0x1adc verbose=Init Data 80000280: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000280 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000280 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ae0: /* paddr=0x1ae0 verbose=Init Data 80000288: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000288 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000288 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ae4: /* paddr=0x1ae4 verbose=Init Data 80000290: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000290 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000290 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ae8: /* paddr=0x1ae8 verbose=Init Data 80000298: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000298 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000298 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1aec: /* paddr=0x1aec verbose=Init Data 800002a0: 408383b3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x800002a0 b_src=2=SRC_IMM b_use_sp_imm1=0x408383b3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408383b3ffc47413 */
	mov r12, 0x408383b3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x800002a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1af0: /* paddr=0x1af0 verbose=Init Data 800002a8: a9700723423 a_src=2=SRC_IMM a_offset_imm0=0x800002a8 b_src=2=SRC_IMM b_use_sp_imm1=0xa97 b_offset_imm0=0x723423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa9700723423 */
	mov r12, 0xa9700723423 /* STORE_IND: reg_value = value */
	mov r13, 0x800002a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1af4: /* paddr=0x1af4 verbose=Init Data 800002b0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800002b0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800002b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1af8: /* paddr=0x1af8 verbose=Init Data 800002b8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800002b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800002b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1afc: /* paddr=0x1afc verbose=Init Data 800002c0: 331011300000117 a_src=2=SRC_IMM a_offset_imm0=0x800002c0 b_src=2=SRC_IMM b_use_sp_imm1=0x3310113 b_offset_imm0=0x117 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x331011300000117 */
	mov r12, 0x331011300000117 /* STORE_IND: reg_value = value */
	mov r13, 0x800002c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b00: /* paddr=0x1b00 verbose=Init Data 800002c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800002c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800002c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b04: /* paddr=0x1b04 verbose=Init Data 800002d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800002d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800002d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b08: /* paddr=0x1b08 verbose=Init Data 800002d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800002d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800002d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b0c: /* paddr=0x1b0c verbose=Init Data 800002e0: 1300110ae7 a_src=2=SRC_IMM a_offset_imm0=0x800002e0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x110ae7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300110ae7 */
	mov r12, 0x1300110ae7 /* STORE_IND: reg_value = value */
	mov r13, 0x800002e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b10: /* paddr=0x1b10 verbose=Init Data 800002e8: 2aca9300000013 a_src=2=SRC_IMM a_offset_imm0=0x800002e8 b_src=2=SRC_IMM b_use_sp_imm1=0x2aca93 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2aca9300000013 */
	mov r12, 0x2aca9300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800002e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b14: /* paddr=0x1b14 verbose=Init Data 800002f0: 3aca9300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800002f0 b_src=2=SRC_IMM b_use_sp_imm1=0x3aca93 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3aca9300c0006f */
	mov r12, 0x3aca9300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800002f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b18: /* paddr=0x1b18 verbose=Init Data 800002f8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800002f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800002f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b1c: /* paddr=0x1b1c verbose=Init Data 80000300: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000300 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000300 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b20: /* paddr=0x1b20 verbose=Init Data 80000308: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000308 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000308 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b24: /* paddr=0x1b24 verbose=Init Data 80000310: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000310 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000310 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b28: /* paddr=0x1b28 verbose=Init Data 80000318: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000318 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000318 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b2c: /* paddr=0x1b2c verbose=Init Data 80000320: 408a8ab3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x80000320 b_src=2=SRC_IMM b_use_sp_imm1=0x408a8ab3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408a8ab3ffc47413 */
	mov r12, 0x408a8ab3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000320 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b30: /* paddr=0x1b30 verbose=Init Data 80000328: b9701523823 a_src=2=SRC_IMM a_offset_imm0=0x80000328 b_src=2=SRC_IMM b_use_sp_imm1=0xb97 b_offset_imm0=0x1523823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb9701523823 */
	mov r12, 0xb9701523823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000328 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b34: /* paddr=0x1b34 verbose=Init Data 80000330: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000330 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000330 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b38: /* paddr=0x1b38 verbose=Init Data 80000338: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000338 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000338 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b3c: /* paddr=0x1b3c verbose=Init Data 80000340: 32f0f1300000f17 a_src=2=SRC_IMM a_offset_imm0=0x80000340 b_src=2=SRC_IMM b_use_sp_imm1=0x32f0f13 b_offset_imm0=0xf17 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x32f0f1300000f17 */
	mov r12, 0x32f0f1300000f17 /* STORE_IND: reg_value = value */
	mov r13, 0x80000340 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b40: /* paddr=0x1b40 verbose=Init Data 80000348: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000348 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000348 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b44: /* paddr=0x1b44 verbose=Init Data 80000350: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000350 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000350 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b48: /* paddr=0x1b48 verbose=Init Data 80000358: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000358 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000358 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b4c: /* paddr=0x1b4c verbose=Init Data 80000360: 13002f0be7 a_src=2=SRC_IMM a_offset_imm0=0x80000360 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x2f0be7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13002f0be7 */
	mov r12, 0x13002f0be7 /* STORE_IND: reg_value = value */
	mov r13, 0x80000360 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b50: /* paddr=0x1b50 verbose=Init Data 80000368: 2bcb9300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000368 b_src=2=SRC_IMM b_use_sp_imm1=0x2bcb93 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2bcb9300000013 */
	mov r12, 0x2bcb9300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000368 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b54: /* paddr=0x1b54 verbose=Init Data 80000370: 3bcb9300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000370 b_src=2=SRC_IMM b_use_sp_imm1=0x3bcb93 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3bcb9300c0006f */
	mov r12, 0x3bcb9300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000370 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b58: /* paddr=0x1b58 verbose=Init Data 80000378: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000378 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000378 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b5c: /* paddr=0x1b5c verbose=Init Data 80000380: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000380 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000380 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b60: /* paddr=0x1b60 verbose=Init Data 80000388: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000388 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000388 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b64: /* paddr=0x1b64 verbose=Init Data 80000390: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000390 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000390 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b68: /* paddr=0x1b68 verbose=Init Data 80000398: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000398 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000398 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b6c: /* paddr=0x1b6c verbose=Init Data 800003a0: 408b8bb3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x800003a0 b_src=2=SRC_IMM b_use_sp_imm1=0x408b8bb3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408b8bb3ffc47413 */
	mov r12, 0x408b8bb3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x800003a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b70: /* paddr=0x1b70 verbose=Init Data 800003a8: 49701723c23 a_src=2=SRC_IMM a_offset_imm0=0x800003a8 b_src=2=SRC_IMM b_use_sp_imm1=0x497 b_offset_imm0=0x1723c23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x49701723c23 */
	mov r12, 0x49701723c23 /* STORE_IND: reg_value = value */
	mov r13, 0x800003a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b74: /* paddr=0x1b74 verbose=Init Data 800003b0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800003b0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800003b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b78: /* paddr=0x1b78 verbose=Init Data 800003b8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800003b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800003b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b7c: /* paddr=0x1b7c verbose=Init Data 800003c0: 303839300000397 a_src=2=SRC_IMM a_offset_imm0=0x800003c0 b_src=2=SRC_IMM b_use_sp_imm1=0x3038393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x303839300000397 */
	mov r12, 0x303839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x800003c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b80: /* paddr=0x1b80 verbose=Init Data 800003c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800003c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800003c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b84: /* paddr=0x1b84 verbose=Init Data 800003d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800003d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800003d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b88: /* paddr=0x1b88 verbose=Init Data 800003d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800003d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800003d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b8c: /* paddr=0x1b8c verbose=Init Data 800003e0: 13004384e7 a_src=2=SRC_IMM a_offset_imm0=0x800003e0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x4384e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13004384e7 */
	mov r12, 0x13004384e7 /* STORE_IND: reg_value = value */
	mov r13, 0x800003e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b90: /* paddr=0x1b90 verbose=Init Data 800003e8: 24c49300000013 a_src=2=SRC_IMM a_offset_imm0=0x800003e8 b_src=2=SRC_IMM b_use_sp_imm1=0x24c493 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x24c49300000013 */
	mov r12, 0x24c49300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800003e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b94: /* paddr=0x1b94 verbose=Init Data 800003f0: 34c49300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800003f0 b_src=2=SRC_IMM b_use_sp_imm1=0x34c493 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x34c49300c0006f */
	mov r12, 0x34c49300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800003f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b98: /* paddr=0x1b98 verbose=Init Data 800003f8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800003f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800003f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1b9c: /* paddr=0x1b9c verbose=Init Data 80000400: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000400 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000400 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ba0: /* paddr=0x1ba0 verbose=Init Data 80000408: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000408 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000408 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ba4: /* paddr=0x1ba4 verbose=Init Data 80000410: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000410 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000410 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ba8: /* paddr=0x1ba8 verbose=Init Data 80000418: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000418 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000418 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bac: /* paddr=0x1bac verbose=Init Data 80000420: 408484b3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x80000420 b_src=2=SRC_IMM b_use_sp_imm1=0x408484b3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408484b3ffc47413 */
	mov r12, 0x408484b3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000420 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bb0: /* paddr=0x1bb0 verbose=Init Data 80000428: c1702923023 a_src=2=SRC_IMM a_offset_imm0=0x80000428 b_src=2=SRC_IMM b_use_sp_imm1=0xc17 b_offset_imm0=0x2923023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xc1702923023 */
	mov r12, 0xc1702923023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000428 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bb4: /* paddr=0x1bb4 verbose=Init Data 80000430: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000430 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000430 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bb8: /* paddr=0x1bb8 verbose=Init Data 80000438: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000438 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000438 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bbc: /* paddr=0x1bbc verbose=Init Data 80000440: 2c7071300000717 a_src=2=SRC_IMM a_offset_imm0=0x80000440 b_src=2=SRC_IMM b_use_sp_imm1=0x2c70713 b_offset_imm0=0x717 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2c7071300000717 */
	mov r12, 0x2c7071300000717 /* STORE_IND: reg_value = value */
	mov r13, 0x80000440 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bc0: /* paddr=0x1bc0 verbose=Init Data 80000448: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000448 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000448 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bc4: /* paddr=0x1bc4 verbose=Init Data 80000450: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000450 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000450 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bc8: /* paddr=0x1bc8 verbose=Init Data 80000458: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000458 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000458 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bcc: /* paddr=0x1bcc verbose=Init Data 80000460: 1300870c67 a_src=2=SRC_IMM a_offset_imm0=0x80000460 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x870c67 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300870c67 */
	mov r12, 0x1300870c67 /* STORE_IND: reg_value = value */
	mov r13, 0x80000460 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bd0: /* paddr=0x1bd0 verbose=Init Data 80000468: 2c4c1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000468 b_src=2=SRC_IMM b_use_sp_imm1=0x2c4c13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2c4c1300000013 */
	mov r12, 0x2c4c1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000468 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bd4: /* paddr=0x1bd4 verbose=Init Data 80000470: 3c4c1300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000470 b_src=2=SRC_IMM b_use_sp_imm1=0x3c4c13 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3c4c1300c0006f */
	mov r12, 0x3c4c1300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000470 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bd8: /* paddr=0x1bd8 verbose=Init Data 80000478: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000478 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000478 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bdc: /* paddr=0x1bdc verbose=Init Data 80000480: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000480 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000480 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1be0: /* paddr=0x1be0 verbose=Init Data 80000488: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000488 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000488 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1be4: /* paddr=0x1be4 verbose=Init Data 80000490: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000490 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000490 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1be8: /* paddr=0x1be8 verbose=Init Data 80000498: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000498 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000498 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bec: /* paddr=0x1bec verbose=Init Data 800004a0: 408c0c33ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x800004a0 b_src=2=SRC_IMM b_use_sp_imm1=0x408c0c33 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408c0c33ffc47413 */
	mov r12, 0x408c0c33ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x800004a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bf0: /* paddr=0x1bf0 verbose=Init Data 800004a8: 19703823423 a_src=2=SRC_IMM a_offset_imm0=0x800004a8 b_src=2=SRC_IMM b_use_sp_imm1=0x197 b_offset_imm0=0x3823423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x19703823423 */
	mov r12, 0x19703823423 /* STORE_IND: reg_value = value */
	mov r13, 0x800004a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bf4: /* paddr=0x1bf4 verbose=Init Data 800004b0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800004b0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800004b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bf8: /* paddr=0x1bf8 verbose=Init Data 800004b8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800004b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800004b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1bfc: /* paddr=0x1bfc verbose=Init Data 800004c0: 247879300000797 a_src=2=SRC_IMM a_offset_imm0=0x800004c0 b_src=2=SRC_IMM b_use_sp_imm1=0x2478793 b_offset_imm0=0x797 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x247879300000797 */
	mov r12, 0x247879300000797 /* STORE_IND: reg_value = value */
	mov r13, 0x800004c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c00: /* paddr=0x1c00 verbose=Init Data 800004c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800004c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800004c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c04: /* paddr=0x1c04 verbose=Init Data 800004d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800004d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800004d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c08: /* paddr=0x1c08 verbose=Init Data 800004d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800004d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800004d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c0c: /* paddr=0x1c0c verbose=Init Data 800004e0: 13010781e7 a_src=2=SRC_IMM a_offset_imm0=0x800004e0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x10781e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13010781e7 */
	mov r12, 0x13010781e7 /* STORE_IND: reg_value = value */
	mov r13, 0x800004e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c10: /* paddr=0x1c10 verbose=Init Data 800004e8: 21c19300000013 a_src=2=SRC_IMM a_offset_imm0=0x800004e8 b_src=2=SRC_IMM b_use_sp_imm1=0x21c193 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x21c19300000013 */
	mov r12, 0x21c19300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800004e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c14: /* paddr=0x1c14 verbose=Init Data 800004f0: 31c19300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800004f0 b_src=2=SRC_IMM b_use_sp_imm1=0x31c193 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x31c19300c0006f */
	mov r12, 0x31c19300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800004f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c18: /* paddr=0x1c18 verbose=Init Data 800004f8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800004f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800004f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c1c: /* paddr=0x1c1c verbose=Init Data 80000500: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000500 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000500 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c20: /* paddr=0x1c20 verbose=Init Data 80000508: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000508 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000508 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c24: /* paddr=0x1c24 verbose=Init Data 80000510: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000510 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000510 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c28: /* paddr=0x1c28 verbose=Init Data 80000518: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000518 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000518 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c2c: /* paddr=0x1c2c verbose=Init Data 80000520: 408181b3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x80000520 b_src=2=SRC_IMM b_use_sp_imm1=0x408181b3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408181b3ffc47413 */
	mov r12, 0x408181b3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000520 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c30: /* paddr=0x1c30 verbose=Init Data 80000528: f1702323823 a_src=2=SRC_IMM a_offset_imm0=0x80000528 b_src=2=SRC_IMM b_use_sp_imm1=0xf17 b_offset_imm0=0x2323823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf1702323823 */
	mov r12, 0xf1702323823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000528 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c34: /* paddr=0x1c34 verbose=Init Data 80000530: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000530 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000530 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c38: /* paddr=0x1c38 verbose=Init Data 80000538: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000538 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000538 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c3c: /* paddr=0x1c3c verbose=Init Data 80000540: 145859300000597 a_src=2=SRC_IMM a_offset_imm0=0x80000540 b_src=2=SRC_IMM b_use_sp_imm1=0x1458593 b_offset_imm0=0x597 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x145859300000597 */
	mov r12, 0x145859300000597 /* STORE_IND: reg_value = value */
	mov r13, 0x80000540 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c40: /* paddr=0x1c40 verbose=Init Data 80000548: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000548 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000548 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c44: /* paddr=0x1c44 verbose=Init Data 80000550: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000550 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000550 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c48: /* paddr=0x1c48 verbose=Init Data 80000558: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000558 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000558 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c4c: /* paddr=0x1c4c verbose=Init Data 80000560: 1302058f67 a_src=2=SRC_IMM a_offset_imm0=0x80000560 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x2058f67 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1302058f67 */
	mov r12, 0x1302058f67 /* STORE_IND: reg_value = value */
	mov r13, 0x80000560 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c50: /* paddr=0x1c50 verbose=Init Data 80000568: 2f4f1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000568 b_src=2=SRC_IMM b_use_sp_imm1=0x2f4f13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2f4f1300000013 */
	mov r12, 0x2f4f1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000568 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c54: /* paddr=0x1c54 verbose=Init Data 80000570: 3f4f1300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000570 b_src=2=SRC_IMM b_use_sp_imm1=0x3f4f13 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3f4f1300c0006f */
	mov r12, 0x3f4f1300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000570 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c58: /* paddr=0x1c58 verbose=Init Data 80000578: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000578 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000578 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c5c: /* paddr=0x1c5c verbose=Init Data 80000580: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000580 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000580 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c60: /* paddr=0x1c60 verbose=Init Data 80000588: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000588 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000588 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c64: /* paddr=0x1c64 verbose=Init Data 80000590: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000590 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000590 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c68: /* paddr=0x1c68 verbose=Init Data 80000598: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000598 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000598 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c6c: /* paddr=0x1c6c verbose=Init Data 800005a0: 408f0f33ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x800005a0 b_src=2=SRC_IMM b_use_sp_imm1=0x408f0f33 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408f0f33ffc47413 */
	mov r12, 0x408f0f33ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x800005a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c70: /* paddr=0x1c70 verbose=Init Data 800005a8: f9703e23c23 a_src=2=SRC_IMM a_offset_imm0=0x800005a8 b_src=2=SRC_IMM b_use_sp_imm1=0xf97 b_offset_imm0=0x3e23c23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf9703e23c23 */
	mov r12, 0xf9703e23c23 /* STORE_IND: reg_value = value */
	mov r13, 0x800005a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c74: /* paddr=0x1c74 verbose=Init Data 800005b0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800005b0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800005b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c78: /* paddr=0x1c78 verbose=Init Data 800005b8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800005b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800005b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c7c: /* paddr=0x1c7c verbose=Init Data 800005c0: ff4e8e9300000e97 a_src=2=SRC_IMM a_offset_imm0=0x800005c0 b_src=2=SRC_IMM b_use_sp_imm1=0xff4e8e93 b_offset_imm0=0xe97 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xff4e8e9300000e97 */
	mov r12, 0xff4e8e9300000e97 /* STORE_IND: reg_value = value */
	mov r13, 0x800005c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c80: /* paddr=0x1c80 verbose=Init Data 800005c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800005c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800005c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c84: /* paddr=0x1c84 verbose=Init Data 800005d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800005d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800005d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c88: /* paddr=0x1c88 verbose=Init Data 800005d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800005d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800005d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c8c: /* paddr=0x1c8c verbose=Init Data 800005e0: 13040e8fe7 a_src=2=SRC_IMM a_offset_imm0=0x800005e0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40e8fe7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13040e8fe7 */
	mov r12, 0x13040e8fe7 /* STORE_IND: reg_value = value */
	mov r13, 0x800005e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c90: /* paddr=0x1c90 verbose=Init Data 800005e8: 2fcf9300000013 a_src=2=SRC_IMM a_offset_imm0=0x800005e8 b_src=2=SRC_IMM b_use_sp_imm1=0x2fcf93 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2fcf9300000013 */
	mov r12, 0x2fcf9300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800005e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c94: /* paddr=0x1c94 verbose=Init Data 800005f0: 3fcf9300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800005f0 b_src=2=SRC_IMM b_use_sp_imm1=0x3fcf93 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3fcf9300c0006f */
	mov r12, 0x3fcf9300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800005f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c98: /* paddr=0x1c98 verbose=Init Data 800005f8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800005f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800005f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1c9c: /* paddr=0x1c9c verbose=Init Data 80000600: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000600 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000600 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ca0: /* paddr=0x1ca0 verbose=Init Data 80000608: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000608 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000608 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ca4: /* paddr=0x1ca4 verbose=Init Data 80000610: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000610 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000610 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ca8: /* paddr=0x1ca8 verbose=Init Data 80000618: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000618 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000618 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cac: /* paddr=0x1cac verbose=Init Data 80000620: 408f8fb3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x80000620 b_src=2=SRC_IMM b_use_sp_imm1=0x408f8fb3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408f8fb3ffc47413 */
	mov r12, 0x408f8fb3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000620 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cb0: /* paddr=0x1cb0 verbose=Init Data 80000628: 81705f23023 a_src=2=SRC_IMM a_offset_imm0=0x80000628 b_src=2=SRC_IMM b_use_sp_imm1=0x817 b_offset_imm0=0x5f23023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x81705f23023 */
	mov r12, 0x81705f23023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000628 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cb4: /* paddr=0x1cb4 verbose=Init Data 80000630: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000630 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000630 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cb8: /* paddr=0x1cb8 verbose=Init Data 80000638: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000638 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000638 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cbc: /* paddr=0x1cbc verbose=Init Data 80000640: fb42829300000297 a_src=2=SRC_IMM a_offset_imm0=0x80000640 b_src=2=SRC_IMM b_use_sp_imm1=0xfb428293 b_offset_imm0=0x297 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfb42829300000297 */
	mov r12, 0xfb42829300000297 /* STORE_IND: reg_value = value */
	mov r13, 0x80000640 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cc0: /* paddr=0x1cc0 verbose=Init Data 80000648: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000648 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000648 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cc4: /* paddr=0x1cc4 verbose=Init Data 80000650: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000650 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000650 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cc8: /* paddr=0x1cc8 verbose=Init Data 80000658: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000658 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000658 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ccc: /* paddr=0x1ccc verbose=Init Data 80000660: 1308028867 a_src=2=SRC_IMM a_offset_imm0=0x80000660 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x8028867 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1308028867 */
	mov r12, 0x1308028867 /* STORE_IND: reg_value = value */
	mov r13, 0x80000660 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cd0: /* paddr=0x1cd0 verbose=Init Data 80000668: 28481300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000668 b_src=2=SRC_IMM b_use_sp_imm1=0x284813 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x28481300000013 */
	mov r12, 0x28481300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000668 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cd4: /* paddr=0x1cd4 verbose=Init Data 80000670: 38481300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000670 b_src=2=SRC_IMM b_use_sp_imm1=0x384813 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x38481300c0006f */
	mov r12, 0x38481300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000670 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cd8: /* paddr=0x1cd8 verbose=Init Data 80000678: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000678 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000678 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cdc: /* paddr=0x1cdc verbose=Init Data 80000680: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000680 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000680 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ce0: /* paddr=0x1ce0 verbose=Init Data 80000688: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000688 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000688 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ce4: /* paddr=0x1ce4 verbose=Init Data 80000690: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000690 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000690 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ce8: /* paddr=0x1ce8 verbose=Init Data 80000698: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000698 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000698 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cec: /* paddr=0x1cec verbose=Init Data 800006a0: 40880833ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x800006a0 b_src=2=SRC_IMM b_use_sp_imm1=0x40880833 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40880833ffc47413 */
	mov r12, 0x40880833ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x800006a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cf0: /* paddr=0x1cf0 verbose=Init Data 800006a8: e9705023423 a_src=2=SRC_IMM a_offset_imm0=0x800006a8 b_src=2=SRC_IMM b_use_sp_imm1=0xe97 b_offset_imm0=0x5023423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xe9705023423 */
	mov r12, 0xe9705023423 /* STORE_IND: reg_value = value */
	mov r13, 0x800006a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cf4: /* paddr=0x1cf4 verbose=Init Data 800006b0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800006b0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800006b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cf8: /* paddr=0x1cf8 verbose=Init Data 800006b8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800006b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800006b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1cfc: /* paddr=0x1cfc verbose=Init Data 800006c0: f34e0e1300000e17 a_src=2=SRC_IMM a_offset_imm0=0x800006c0 b_src=2=SRC_IMM b_use_sp_imm1=0xf34e0e13 b_offset_imm0=0xe17 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xf34e0e1300000e17 */
	mov r12, 0xf34e0e1300000e17 /* STORE_IND: reg_value = value */
	mov r13, 0x800006c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d00: /* paddr=0x1d00 verbose=Init Data 800006c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800006c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800006c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d04: /* paddr=0x1d04 verbose=Init Data 800006d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800006d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800006d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d08: /* paddr=0x1d08 verbose=Init Data 800006d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800006d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800006d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d0c: /* paddr=0x1d0c verbose=Init Data 800006e0: 13100e0ee7 a_src=2=SRC_IMM a_offset_imm0=0x800006e0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x100e0ee7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13100e0ee7 */
	mov r12, 0x13100e0ee7 /* STORE_IND: reg_value = value */
	mov r13, 0x800006e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d10: /* paddr=0x1d10 verbose=Init Data 800006e8: 2ece9300000013 a_src=2=SRC_IMM a_offset_imm0=0x800006e8 b_src=2=SRC_IMM b_use_sp_imm1=0x2ece93 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2ece9300000013 */
	mov r12, 0x2ece9300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800006e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d14: /* paddr=0x1d14 verbose=Init Data 800006f0: 3ece9300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800006f0 b_src=2=SRC_IMM b_use_sp_imm1=0x3ece93 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3ece9300c0006f */
	mov r12, 0x3ece9300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800006f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d18: /* paddr=0x1d18 verbose=Init Data 800006f8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800006f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800006f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d1c: /* paddr=0x1d1c verbose=Init Data 80000700: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000700 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000700 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d20: /* paddr=0x1d20 verbose=Init Data 80000708: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000708 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000708 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d24: /* paddr=0x1d24 verbose=Init Data 80000710: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000710 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000710 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d28: /* paddr=0x1d28 verbose=Init Data 80000718: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000718 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000718 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d2c: /* paddr=0x1d2c verbose=Init Data 80000720: 408e8eb3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x80000720 b_src=2=SRC_IMM b_use_sp_imm1=0x408e8eb3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408e8eb3ffc47413 */
	mov r12, 0x408e8eb3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000720 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d30: /* paddr=0x1d30 verbose=Init Data 80000728: a1705d23823 a_src=2=SRC_IMM a_offset_imm0=0x80000728 b_src=2=SRC_IMM b_use_sp_imm1=0xa17 b_offset_imm0=0x5d23823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa1705d23823 */
	mov r12, 0xa1705d23823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000728 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d34: /* paddr=0x1d34 verbose=Init Data 80000730: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000730 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000730 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d38: /* paddr=0x1d38 verbose=Init Data 80000738: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000738 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000738 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d3c: /* paddr=0x1d3c verbose=Init Data 80000740: e346061300000617 a_src=2=SRC_IMM a_offset_imm0=0x80000740 b_src=2=SRC_IMM b_use_sp_imm1=0xe3460613 b_offset_imm0=0x617 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xe346061300000617 */
	mov r12, 0xe346061300000617 /* STORE_IND: reg_value = value */
	mov r13, 0x80000740 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d40: /* paddr=0x1d40 verbose=Init Data 80000748: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000748 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000748 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d44: /* paddr=0x1d44 verbose=Init Data 80000750: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000750 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000750 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d48: /* paddr=0x1d48 verbose=Init Data 80000758: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000758 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000758 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d4c: /* paddr=0x1d4c verbose=Init Data 80000760: 1320060a67 a_src=2=SRC_IMM a_offset_imm0=0x80000760 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x20060a67 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1320060a67 */
	mov r12, 0x1320060a67 /* STORE_IND: reg_value = value */
	mov r13, 0x80000760 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d50: /* paddr=0x1d50 verbose=Init Data 80000768: 2a4a1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000768 b_src=2=SRC_IMM b_use_sp_imm1=0x2a4a13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2a4a1300000013 */
	mov r12, 0x2a4a1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000768 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d54: /* paddr=0x1d54 verbose=Init Data 80000770: 3a4a1300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000770 b_src=2=SRC_IMM b_use_sp_imm1=0x3a4a13 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3a4a1300c0006f */
	mov r12, 0x3a4a1300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000770 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d58: /* paddr=0x1d58 verbose=Init Data 80000778: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000778 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000778 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d5c: /* paddr=0x1d5c verbose=Init Data 80000780: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000780 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000780 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d60: /* paddr=0x1d60 verbose=Init Data 80000788: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000788 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000788 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d64: /* paddr=0x1d64 verbose=Init Data 80000790: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000790 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000790 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d68: /* paddr=0x1d68 verbose=Init Data 80000798: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000798 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000798 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d6c: /* paddr=0x1d6c verbose=Init Data 800007a0: 408a0a33ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x800007a0 b_src=2=SRC_IMM b_use_sp_imm1=0x408a0a33 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408a0a33ffc47413 */
	mov r12, 0x408a0a33ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x800007a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d70: /* paddr=0x1d70 verbose=Init Data 800007a8: b1705423c23 a_src=2=SRC_IMM a_offset_imm0=0x800007a8 b_src=2=SRC_IMM b_use_sp_imm1=0xb17 b_offset_imm0=0x5423c23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb1705423c23 */
	mov r12, 0xb1705423c23 /* STORE_IND: reg_value = value */
	mov r13, 0x800007a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d74: /* paddr=0x1d74 verbose=Init Data 800007b0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800007b0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800007b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d78: /* paddr=0x1d78 verbose=Init Data 800007b8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800007b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800007b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d7c: /* paddr=0x1d7c verbose=Init Data 800007c0: c344849300000497 a_src=2=SRC_IMM a_offset_imm0=0x800007c0 b_src=2=SRC_IMM b_use_sp_imm1=0xc3448493 b_offset_imm0=0x497 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xc344849300000497 */
	mov r12, 0xc344849300000497 /* STORE_IND: reg_value = value */
	mov r13, 0x800007c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d80: /* paddr=0x1d80 verbose=Init Data 800007c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800007c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800007c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d84: /* paddr=0x1d84 verbose=Init Data 800007d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800007d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800007d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d88: /* paddr=0x1d88 verbose=Init Data 800007d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800007d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800007d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d8c: /* paddr=0x1d8c verbose=Init Data 800007e0: 1340048b67 a_src=2=SRC_IMM a_offset_imm0=0x800007e0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40048b67 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1340048b67 */
	mov r12, 0x1340048b67 /* STORE_IND: reg_value = value */
	mov r13, 0x800007e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d90: /* paddr=0x1d90 verbose=Init Data 800007e8: 2b4b1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800007e8 b_src=2=SRC_IMM b_use_sp_imm1=0x2b4b13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2b4b1300000013 */
	mov r12, 0x2b4b1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800007e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d94: /* paddr=0x1d94 verbose=Init Data 800007f0: 3b4b1300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800007f0 b_src=2=SRC_IMM b_use_sp_imm1=0x3b4b13 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3b4b1300c0006f */
	mov r12, 0x3b4b1300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800007f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d98: /* paddr=0x1d98 verbose=Init Data 800007f8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800007f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800007f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1d9c: /* paddr=0x1d9c verbose=Init Data 80000800: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000800 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000800 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1da0: /* paddr=0x1da0 verbose=Init Data 80000808: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000808 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000808 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1da4: /* paddr=0x1da4 verbose=Init Data 80000810: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000810 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000810 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1da8: /* paddr=0x1da8 verbose=Init Data 80000818: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000818 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000818 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dac: /* paddr=0x1dac verbose=Init Data 80000820: 408b0b33ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x80000820 b_src=2=SRC_IMM b_use_sp_imm1=0x408b0b33 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408b0b33ffc47413 */
	mov r12, 0x408b0b33ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000820 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1db0: /* paddr=0x1db0 verbose=Init Data 80000828: 31707623023 a_src=2=SRC_IMM a_offset_imm0=0x80000828 b_src=2=SRC_IMM b_use_sp_imm1=0x317 b_offset_imm0=0x7623023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x31707623023 */
	mov r12, 0x31707623023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000828 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1db4: /* paddr=0x1db4 verbose=Init Data 80000830: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000830 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000830 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1db8: /* paddr=0x1db8 verbose=Init Data 80000838: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000838 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000838 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dbc: /* paddr=0x1dbc verbose=Init Data 80000840: 8346869300001697 a_src=2=SRC_IMM a_offset_imm0=0x80000840 b_src=2=SRC_IMM b_use_sp_imm1=0x83468693 b_offset_imm0=0x1697 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x8346869300001697 */
	mov r12, 0x8346869300001697 /* STORE_IND: reg_value = value */
	mov r13, 0x80000840 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dc0: /* paddr=0x1dc0 verbose=Init Data 80000848: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000848 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000848 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dc4: /* paddr=0x1dc4 verbose=Init Data 80000850: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000850 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000850 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dc8: /* paddr=0x1dc8 verbose=Init Data 80000858: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000858 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000858 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dcc: /* paddr=0x1dcc verbose=Init Data 80000860: 1380068367 a_src=2=SRC_IMM a_offset_imm0=0x80000860 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x80068367 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1380068367 */
	mov r12, 0x1380068367 /* STORE_IND: reg_value = value */
	mov r13, 0x80000860 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dd0: /* paddr=0x1dd0 verbose=Init Data 80000868: 23431300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000868 b_src=2=SRC_IMM b_use_sp_imm1=0x234313 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x23431300000013 */
	mov r12, 0x23431300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000868 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dd4: /* paddr=0x1dd4 verbose=Init Data 80000870: 33431300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000870 b_src=2=SRC_IMM b_use_sp_imm1=0x334313 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x33431300c0006f */
	mov r12, 0x33431300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000870 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dd8: /* paddr=0x1dd8 verbose=Init Data 80000878: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000878 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000878 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ddc: /* paddr=0x1ddc verbose=Init Data 80000880: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000880 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000880 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1de0: /* paddr=0x1de0 verbose=Init Data 80000888: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000888 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000888 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1de4: /* paddr=0x1de4 verbose=Init Data 80000890: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000890 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000890 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1de8: /* paddr=0x1de8 verbose=Init Data 80000898: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000898 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000898 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dec: /* paddr=0x1dec verbose=Init Data 800008a0: 40830333ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x800008a0 b_src=2=SRC_IMM b_use_sp_imm1=0x40830333 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40830333ffc47413 */
	mov r12, 0x40830333ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x800008a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1df0: /* paddr=0x1df0 verbose=Init Data 800008a8: 99706623423 a_src=2=SRC_IMM a_offset_imm0=0x800008a8 b_src=2=SRC_IMM b_use_sp_imm1=0x997 b_offset_imm0=0x6623423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x99706623423 */
	mov r12, 0x99706623423 /* STORE_IND: reg_value = value */
	mov r13, 0x800008a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1df4: /* paddr=0x1df4 verbose=Init Data 800008b0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800008b0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800008b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1df8: /* paddr=0x1df8 verbose=Init Data 800008b8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800008b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800008b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1dfc: /* paddr=0x1dfc verbose=Init Data 800008c0: 36d8d9300000d97 a_src=2=SRC_IMM a_offset_imm0=0x800008c0 b_src=2=SRC_IMM b_use_sp_imm1=0x36d8d93 b_offset_imm0=0xd97 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x36d8d9300000d97 */
	mov r12, 0x36d8d9300000d97 /* STORE_IND: reg_value = value */
	mov r13, 0x800008c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e00: /* paddr=0x1e00 verbose=Init Data 800008c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800008c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800008c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e04: /* paddr=0x1e04 verbose=Init Data 800008d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800008d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800008d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e08: /* paddr=0x1e08 verbose=Init Data 800008d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800008d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800008d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e0c: /* paddr=0x1e0c verbose=Init Data 800008e0: 13ffed89e7 a_src=2=SRC_IMM a_offset_imm0=0x800008e0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xffed89e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13ffed89e7 */
	mov r12, 0x13ffed89e7 /* STORE_IND: reg_value = value */
	mov r13, 0x800008e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e10: /* paddr=0x1e10 verbose=Init Data 800008e8: 29c99300000013 a_src=2=SRC_IMM a_offset_imm0=0x800008e8 b_src=2=SRC_IMM b_use_sp_imm1=0x29c993 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x29c99300000013 */
	mov r12, 0x29c99300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800008e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e14: /* paddr=0x1e14 verbose=Init Data 800008f0: 39c99300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800008f0 b_src=2=SRC_IMM b_use_sp_imm1=0x39c993 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39c99300c0006f */
	mov r12, 0x39c99300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800008f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e18: /* paddr=0x1e18 verbose=Init Data 800008f8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800008f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800008f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e1c: /* paddr=0x1e1c verbose=Init Data 80000900: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000900 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000900 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e20: /* paddr=0x1e20 verbose=Init Data 80000908: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000908 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000908 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e24: /* paddr=0x1e24 verbose=Init Data 80000910: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000910 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000910 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e28: /* paddr=0x1e28 verbose=Init Data 80000918: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000918 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000918 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e2c: /* paddr=0x1e2c verbose=Init Data 80000920: 408989b3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x80000920 b_src=2=SRC_IMM b_use_sp_imm1=0x408989b3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408989b3ffc47413 */
	mov r12, 0x408989b3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000920 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e30: /* paddr=0x1e30 verbose=Init Data 80000928: 89707323823 a_src=2=SRC_IMM a_offset_imm0=0x80000928 b_src=2=SRC_IMM b_use_sp_imm1=0x897 b_offset_imm0=0x7323823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x89707323823 */
	mov r12, 0x89707323823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000928 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e34: /* paddr=0x1e34 verbose=Init Data 80000930: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000930 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000930 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e38: /* paddr=0x1e38 verbose=Init Data 80000938: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000938 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000938 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e3c: /* paddr=0x1e3c verbose=Init Data 80000940: 373031300000317 a_src=2=SRC_IMM a_offset_imm0=0x80000940 b_src=2=SRC_IMM b_use_sp_imm1=0x3730313 b_offset_imm0=0x317 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x373031300000317 */
	mov r12, 0x373031300000317 /* STORE_IND: reg_value = value */
	mov r13, 0x80000940 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e40: /* paddr=0x1e40 verbose=Init Data 80000948: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000948 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000948 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e44: /* paddr=0x1e44 verbose=Init Data 80000950: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000950 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000950 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e48: /* paddr=0x1e48 verbose=Init Data 80000958: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000958 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000958 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e4c: /* paddr=0x1e4c verbose=Init Data 80000960: 13ffd308e7 a_src=2=SRC_IMM a_offset_imm0=0x80000960 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xffd308e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13ffd308e7 */
	mov r12, 0x13ffd308e7 /* STORE_IND: reg_value = value */
	mov r13, 0x80000960 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e50: /* paddr=0x1e50 verbose=Init Data 80000968: 28c89300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000968 b_src=2=SRC_IMM b_use_sp_imm1=0x28c893 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x28c89300000013 */
	mov r12, 0x28c89300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000968 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e54: /* paddr=0x1e54 verbose=Init Data 80000970: 38c89300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000970 b_src=2=SRC_IMM b_use_sp_imm1=0x38c893 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x38c89300c0006f */
	mov r12, 0x38c89300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000970 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e58: /* paddr=0x1e58 verbose=Init Data 80000978: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000978 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000978 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e5c: /* paddr=0x1e5c verbose=Init Data 80000980: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000980 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000980 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e60: /* paddr=0x1e60 verbose=Init Data 80000988: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000988 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000988 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e64: /* paddr=0x1e64 verbose=Init Data 80000990: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000990 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000990 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e68: /* paddr=0x1e68 verbose=Init Data 80000998: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000998 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000998 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e6c: /* paddr=0x1e6c verbose=Init Data 800009a0: 408888b3ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x800009a0 b_src=2=SRC_IMM b_use_sp_imm1=0x408888b3 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408888b3ffc47413 */
	mov r12, 0x408888b3ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x800009a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e70: /* paddr=0x1e70 verbose=Init Data 800009a8: d1707123c23 a_src=2=SRC_IMM a_offset_imm0=0x800009a8 b_src=2=SRC_IMM b_use_sp_imm1=0xd17 b_offset_imm0=0x7123c23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xd1707123c23 */
	mov r12, 0xd1707123c23 /* STORE_IND: reg_value = value */
	mov r13, 0x800009a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e74: /* paddr=0x1e74 verbose=Init Data 800009b0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800009b0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800009b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e78: /* paddr=0x1e78 verbose=Init Data 800009b8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800009b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800009b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e7c: /* paddr=0x1e7c verbose=Init Data 800009c0: 390809300000097 a_src=2=SRC_IMM a_offset_imm0=0x800009c0 b_src=2=SRC_IMM b_use_sp_imm1=0x3908093 b_offset_imm0=0x97 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x390809300000097 */
	mov r12, 0x390809300000097 /* STORE_IND: reg_value = value */
	mov r13, 0x800009c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e80: /* paddr=0x1e80 verbose=Init Data 800009c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800009c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800009c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e84: /* paddr=0x1e84 verbose=Init Data 800009d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800009d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800009d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e88: /* paddr=0x1e88 verbose=Init Data 800009d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800009d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800009d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e8c: /* paddr=0x1e8c verbose=Init Data 800009e0: 13ffb08d67 a_src=2=SRC_IMM a_offset_imm0=0x800009e0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xffb08d67 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13ffb08d67 */
	mov r12, 0x13ffb08d67 /* STORE_IND: reg_value = value */
	mov r13, 0x800009e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e90: /* paddr=0x1e90 verbose=Init Data 800009e8: 2d4d1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800009e8 b_src=2=SRC_IMM b_use_sp_imm1=0x2d4d13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2d4d1300000013 */
	mov r12, 0x2d4d1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800009e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e94: /* paddr=0x1e94 verbose=Init Data 800009f0: 3d4d1300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800009f0 b_src=2=SRC_IMM b_use_sp_imm1=0x3d4d13 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3d4d1300c0006f */
	mov r12, 0x3d4d1300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800009f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e98: /* paddr=0x1e98 verbose=Init Data 800009f8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800009f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800009f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1e9c: /* paddr=0x1e9c verbose=Init Data 80000a00: fac4041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000a00 b_src=2=SRC_IMM b_use_sp_imm1=0xfac40413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac4041300000417 */
	mov r12, 0xfac4041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ea0: /* paddr=0x1ea0 verbose=Init Data 80000a08: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a08 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ea4: /* paddr=0x1ea4 verbose=Init Data 80000a10: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a10 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ea8: /* paddr=0x1ea8 verbose=Init Data 80000a18: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a18 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eac: /* paddr=0x1eac verbose=Init Data 80000a20: 408d0d33ffc47413 a_src=2=SRC_IMM a_offset_imm0=0x80000a20 b_src=2=SRC_IMM b_use_sp_imm1=0x408d0d33 b_offset_imm0=0xffc47413 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x408d0d33ffc47413 */
	mov r12, 0x408d0d33ffc47413 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eb0: /* paddr=0x1eb0 verbose=Init Data 80000a28: 41709a23023 a_src=2=SRC_IMM a_offset_imm0=0x80000a28 b_src=2=SRC_IMM b_use_sp_imm1=0x417 b_offset_imm0=0x9a23023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x41709a23023 */
	mov r12, 0x41709a23023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eb4: /* paddr=0x1eb4 verbose=Init Data 80000a30: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a30 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eb8: /* paddr=0x1eb8 verbose=Init Data 80000a38: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a38 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ebc: /* paddr=0x1ebc verbose=Init Data 80000a40: 3d5051300000517 a_src=2=SRC_IMM a_offset_imm0=0x80000a40 b_src=2=SRC_IMM b_use_sp_imm1=0x3d50513 b_offset_imm0=0x517 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3d5051300000517 */
	mov r12, 0x3d5051300000517 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ec0: /* paddr=0x1ec0 verbose=Init Data 80000a48: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a48 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ec4: /* paddr=0x1ec4 verbose=Init Data 80000a50: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a50 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ec8: /* paddr=0x1ec8 verbose=Init Data 80000a58: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a58 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ecc: /* paddr=0x1ecc verbose=Init Data 80000a60: 13ff750467 a_src=2=SRC_IMM a_offset_imm0=0x80000a60 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xff750467 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13ff750467 */
	mov r12, 0x13ff750467 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ed0: /* paddr=0x1ed0 verbose=Init Data 80000a68: 24441300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a68 b_src=2=SRC_IMM b_use_sp_imm1=0x244413 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x24441300000013 */
	mov r12, 0x24441300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ed4: /* paddr=0x1ed4 verbose=Init Data 80000a70: 34441300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000a70 b_src=2=SRC_IMM b_use_sp_imm1=0x344413 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x34441300c0006f */
	mov r12, 0x34441300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000a70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ed8: /* paddr=0x1ed8 verbose=Init Data 80000a78: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000a78 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000a78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1edc: /* paddr=0x1edc verbose=Init Data 80000a80: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000a80 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ee0: /* paddr=0x1ee0 verbose=Init Data 80000a88: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a88 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ee4: /* paddr=0x1ee4 verbose=Init Data 80000a90: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a90 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ee8: /* paddr=0x1ee8 verbose=Init Data 80000a98: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000a98 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000a98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1eec: /* paddr=0x1eec verbose=Init Data 80000aa0: 40740433ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000aa0 b_src=2=SRC_IMM b_use_sp_imm1=0x40740433 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40740433ffc3f393 */
	mov r12, 0x40740433ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000aa0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ef0: /* paddr=0x1ef0 verbose=Init Data 80000aa8: 1308823423 a_src=2=SRC_IMM a_offset_imm0=0x80000aa8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x8823423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1308823423 */
	mov r12, 0x1308823423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000aa8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ef4: /* paddr=0x1ef4 verbose=Init Data 80000ab0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ab0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ab0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ef8: /* paddr=0x1ef8 verbose=Init Data 80000ab8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ab8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ab8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1efc: /* paddr=0x1efc verbose=Init Data 80000ac0: 6e83031320011317 a_src=2=SRC_IMM a_offset_imm0=0x80000ac0 b_src=2=SRC_IMM b_use_sp_imm1=0x6e830313 b_offset_imm0=0x20011317 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6e83031320011317 */
	mov r12, 0x6e83031320011317 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ac0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f00: /* paddr=0x1f00 verbose=Init Data 80000ac8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ac8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ac8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f04: /* paddr=0x1f04 verbose=Init Data 80000ad0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ad0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ad0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f08: /* paddr=0x1f08 verbose=Init Data 80000ad8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ad8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ad8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f0c: /* paddr=0x1f0c verbose=Init Data 80000ae0: 1300000697 a_src=2=SRC_IMM a_offset_imm0=0x80000ae0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x697 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000697 */
	mov r12, 0x1300000697 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ae0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f10: /* paddr=0x1f10 verbose=Init Data 80000ae8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ae8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ae8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f14: /* paddr=0x1f14 verbose=Init Data 80000af0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000af0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000af0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f18: /* paddr=0x1f18 verbose=Init Data 80000af8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000af8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000af8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f1c: /* paddr=0x1f1c verbose=Init Data 80000b00: 45b8b9300000b97 a_src=2=SRC_IMM a_offset_imm0=0x80000b00 b_src=2=SRC_IMM b_use_sp_imm1=0x45b8b93 b_offset_imm0=0xb97 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x45b8b9300000b97 */
	mov r12, 0x45b8b9300000b97 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f20: /* paddr=0x1f20 verbose=Init Data 80000b08: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b08 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f24: /* paddr=0x1f24 verbose=Init Data 80000b10: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b10 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f28: /* paddr=0x1f28 verbose=Init Data 80000b18: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b18 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f2c: /* paddr=0x1f2c verbose=Init Data 80000b20: 13fefb86e7 a_src=2=SRC_IMM a_offset_imm0=0x80000b20 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xfefb86e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13fefb86e7 */
	mov r12, 0x13fefb86e7 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f30: /* paddr=0x1f30 verbose=Init Data 80000b28: 26c69300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b28 b_src=2=SRC_IMM b_use_sp_imm1=0x26c693 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x26c69300000013 */
	mov r12, 0x26c69300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f34: /* paddr=0x1f34 verbose=Init Data 80000b30: 36c69300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000b30 b_src=2=SRC_IMM b_use_sp_imm1=0x36c693 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x36c69300c0006f */
	mov r12, 0x36c69300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000b30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f38: /* paddr=0x1f38 verbose=Init Data 80000b38: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000b38 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000b38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f3c: /* paddr=0x1f3c verbose=Init Data 80000b40: fa03839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000b40 b_src=2=SRC_IMM b_use_sp_imm1=0xfa038393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfa03839300000397 */
	mov r12, 0xfa03839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f40: /* paddr=0x1f40 verbose=Init Data 80000b48: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b48 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f44: /* paddr=0x1f44 verbose=Init Data 80000b50: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b50 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f48: /* paddr=0x1f48 verbose=Init Data 80000b58: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b58 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f4c: /* paddr=0x1f4c verbose=Init Data 80000b60: 407686b3ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000b60 b_src=2=SRC_IMM b_use_sp_imm1=0x407686b3 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x407686b3ffc3f393 */
	mov r12, 0x407686b3ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f50: /* paddr=0x1f50 verbose=Init Data 80000b68: 79700d33023 a_src=2=SRC_IMM a_offset_imm0=0x80000b68 b_src=2=SRC_IMM b_use_sp_imm1=0x797 b_offset_imm0=0xd33023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x79700d33023 */
	mov r12, 0x79700d33023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f54: /* paddr=0x1f54 verbose=Init Data 80000b70: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b70 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f58: /* paddr=0x1f58 verbose=Init Data 80000b78: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b78 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f5c: /* paddr=0x1f5c verbose=Init Data 80000b80: 55b0b1300000b17 a_src=2=SRC_IMM a_offset_imm0=0x80000b80 b_src=2=SRC_IMM b_use_sp_imm1=0x55b0b13 b_offset_imm0=0xb17 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x55b0b1300000b17 */
	mov r12, 0x55b0b1300000b17 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f60: /* paddr=0x1f60 verbose=Init Data 80000b88: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b88 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f64: /* paddr=0x1f64 verbose=Init Data 80000b90: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b90 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f68: /* paddr=0x1f68 verbose=Init Data 80000b98: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000b98 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000b98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f6c: /* paddr=0x1f6c verbose=Init Data 80000ba0: 13fdfb07e7 a_src=2=SRC_IMM a_offset_imm0=0x80000ba0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xfdfb07e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13fdfb07e7 */
	mov r12, 0x13fdfb07e7 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ba0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f70: /* paddr=0x1f70 verbose=Init Data 80000ba8: 27c79300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ba8 b_src=2=SRC_IMM b_use_sp_imm1=0x27c793 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x27c79300000013 */
	mov r12, 0x27c79300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ba8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f74: /* paddr=0x1f74 verbose=Init Data 80000bb0: 37c79300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000bb0 b_src=2=SRC_IMM b_use_sp_imm1=0x37c793 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x37c79300c0006f */
	mov r12, 0x37c79300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000bb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f78: /* paddr=0x1f78 verbose=Init Data 80000bb8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000bb8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000bb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f7c: /* paddr=0x1f7c verbose=Init Data 80000bc0: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000bc0 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f80: /* paddr=0x1f80 verbose=Init Data 80000bc8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000bc8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f84: /* paddr=0x1f84 verbose=Init Data 80000bd0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000bd0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f88: /* paddr=0x1f88 verbose=Init Data 80000bd8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000bd8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f8c: /* paddr=0x1f8c verbose=Init Data 80000be0: 407787b3ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000be0 b_src=2=SRC_IMM b_use_sp_imm1=0x407787b3 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x407787b3ffc3f393 */
	mov r12, 0x407787b3ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000be0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f90: /* paddr=0x1f90 verbose=Init Data 80000be8: 59700f33423 a_src=2=SRC_IMM a_offset_imm0=0x80000be8 b_src=2=SRC_IMM b_use_sp_imm1=0x597 b_offset_imm0=0xf33423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x59700f33423 */
	mov r12, 0x59700f33423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000be8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f94: /* paddr=0x1f94 verbose=Init Data 80000bf0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000bf0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bf0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f98: /* paddr=0x1f98 verbose=Init Data 80000bf8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000bf8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000bf8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1f9c: /* paddr=0x1f9c verbose=Init Data 80000c00: 751819300000197 a_src=2=SRC_IMM a_offset_imm0=0x80000c00 b_src=2=SRC_IMM b_use_sp_imm1=0x7518193 b_offset_imm0=0x197 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x751819300000197 */
	mov r12, 0x751819300000197 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fa0: /* paddr=0x1fa0 verbose=Init Data 80000c08: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c08 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fa4: /* paddr=0x1fa4 verbose=Init Data 80000c10: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c10 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fa8: /* paddr=0x1fa8 verbose=Init Data 80000c18: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c18 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fac: /* paddr=0x1fac verbose=Init Data 80000c20: 13fbf185e7 a_src=2=SRC_IMM a_offset_imm0=0x80000c20 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xfbf185e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13fbf185e7 */
	mov r12, 0x13fbf185e7 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fb0: /* paddr=0x1fb0 verbose=Init Data 80000c28: 25c59300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c28 b_src=2=SRC_IMM b_use_sp_imm1=0x25c593 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x25c59300000013 */
	mov r12, 0x25c59300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fb4: /* paddr=0x1fb4 verbose=Init Data 80000c30: 35c59300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000c30 b_src=2=SRC_IMM b_use_sp_imm1=0x35c593 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x35c59300c0006f */
	mov r12, 0x35c59300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000c30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fb8: /* paddr=0x1fb8 verbose=Init Data 80000c38: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000c38 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000c38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fbc: /* paddr=0x1fbc verbose=Init Data 80000c40: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000c40 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fc0: /* paddr=0x1fc0 verbose=Init Data 80000c48: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c48 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fc4: /* paddr=0x1fc4 verbose=Init Data 80000c50: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c50 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fc8: /* paddr=0x1fc8 verbose=Init Data 80000c58: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c58 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fcc: /* paddr=0x1fcc verbose=Init Data 80000c60: 407585b3ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000c60 b_src=2=SRC_IMM b_use_sp_imm1=0x407585b3 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x407585b3ffc3f393 */
	mov r12, 0x407585b3ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fd0: /* paddr=0x1fd0 verbose=Init Data 80000c68: e1700b33823 a_src=2=SRC_IMM a_offset_imm0=0x80000c68 b_src=2=SRC_IMM b_use_sp_imm1=0xe17 b_offset_imm0=0xb33823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xe1700b33823 */
	mov r12, 0xe1700b33823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fd4: /* paddr=0x1fd4 verbose=Init Data 80000c70: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c70 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fd8: /* paddr=0x1fd8 verbose=Init Data 80000c78: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c78 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fdc: /* paddr=0x1fdc verbose=Init Data 80000c80: b5f8f9300000f97 a_src=2=SRC_IMM a_offset_imm0=0x80000c80 b_src=2=SRC_IMM b_use_sp_imm1=0xb5f8f93 b_offset_imm0=0xf97 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb5f8f9300000f97 */
	mov r12, 0xb5f8f9300000f97 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fe0: /* paddr=0x1fe0 verbose=Init Data 80000c88: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c88 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fe4: /* paddr=0x1fe4 verbose=Init Data 80000c90: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c90 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fe8: /* paddr=0x1fe8 verbose=Init Data 80000c98: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000c98 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000c98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1fec: /* paddr=0x1fec verbose=Init Data 80000ca0: 13f7ff8e67 a_src=2=SRC_IMM a_offset_imm0=0x80000ca0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xf7ff8e67 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13f7ff8e67 */
	mov r12, 0x13f7ff8e67 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ca0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ff0: /* paddr=0x1ff0 verbose=Init Data 80000ca8: 2e4e1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ca8 b_src=2=SRC_IMM b_use_sp_imm1=0x2e4e13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2e4e1300000013 */
	mov r12, 0x2e4e1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ca8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ff4: /* paddr=0x1ff4 verbose=Init Data 80000cb0: 3e4e1300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000cb0 b_src=2=SRC_IMM b_use_sp_imm1=0x3e4e13 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3e4e1300c0006f */
	mov r12, 0x3e4e1300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000cb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ff8: /* paddr=0x1ff8 verbose=Init Data 80000cb8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000cb8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000cb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_1ffc: /* paddr=0x1ffc verbose=Init Data 80000cc0: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000cc0 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2000: /* paddr=0x2000 verbose=Init Data 80000cc8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000cc8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2004: /* paddr=0x2004 verbose=Init Data 80000cd0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000cd0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2008: /* paddr=0x2008 verbose=Init Data 80000cd8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000cd8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_200c: /* paddr=0x200c verbose=Init Data 80000ce0: 407e0e33ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000ce0 b_src=2=SRC_IMM b_use_sp_imm1=0x407e0e33 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x407e0e33ffc3f393 */
	mov r12, 0x407e0e33ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ce0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2010: /* paddr=0x2010 verbose=Init Data 80000ce8: 71701c33c23 a_src=2=SRC_IMM a_offset_imm0=0x80000ce8 b_src=2=SRC_IMM b_use_sp_imm1=0x717 b_offset_imm0=0x1c33c23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x71701c33c23 */
	mov r12, 0x71701c33c23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ce8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2014: /* paddr=0x2014 verbose=Init Data 80000cf0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000cf0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cf0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2018: /* paddr=0x2018 verbose=Init Data 80000cf8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000cf8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000cf8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_201c: /* paddr=0x201c verbose=Init Data 80000d00: 135c0c1300000c17 a_src=2=SRC_IMM a_offset_imm0=0x80000d00 b_src=2=SRC_IMM b_use_sp_imm1=0x135c0c13 b_offset_imm0=0xc17 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x135c0c1300000c17 */
	mov r12, 0x135c0c1300000c17 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2020: /* paddr=0x2020 verbose=Init Data 80000d08: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d08 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2024: /* paddr=0x2024 verbose=Init Data 80000d10: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d10 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2028: /* paddr=0x2028 verbose=Init Data 80000d18: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d18 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_202c: /* paddr=0x202c verbose=Init Data 80000d20: 13effc0767 a_src=2=SRC_IMM a_offset_imm0=0x80000d20 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xeffc0767 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13effc0767 */
	mov r12, 0x13effc0767 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2030: /* paddr=0x2030 verbose=Init Data 80000d28: 27471300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d28 b_src=2=SRC_IMM b_use_sp_imm1=0x274713 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x27471300000013 */
	mov r12, 0x27471300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2034: /* paddr=0x2034 verbose=Init Data 80000d30: 37471300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000d30 b_src=2=SRC_IMM b_use_sp_imm1=0x374713 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x37471300c0006f */
	mov r12, 0x37471300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000d30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2038: /* paddr=0x2038 verbose=Init Data 80000d38: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000d38 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000d38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_203c: /* paddr=0x203c verbose=Init Data 80000d40: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000d40 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2040: /* paddr=0x2040 verbose=Init Data 80000d48: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d48 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2044: /* paddr=0x2044 verbose=Init Data 80000d50: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d50 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2048: /* paddr=0x2048 verbose=Init Data 80000d58: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d58 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_204c: /* paddr=0x204c verbose=Init Data 80000d60: 40770733ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000d60 b_src=2=SRC_IMM b_use_sp_imm1=0x40770733 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40770733ffc3f393 */
	mov r12, 0x40770733ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2050: /* paddr=0x2050 verbose=Init Data 80000d68: 61702e33023 a_src=2=SRC_IMM a_offset_imm0=0x80000d68 b_src=2=SRC_IMM b_use_sp_imm1=0x617 b_offset_imm0=0x2e33023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x61702e33023 */
	mov r12, 0x61702e33023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2054: /* paddr=0x2054 verbose=Init Data 80000d70: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d70 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2058: /* paddr=0x2058 verbose=Init Data 80000d78: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d78 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_205c: /* paddr=0x205c verbose=Init Data 80000d80: 235a8a9300000a97 a_src=2=SRC_IMM a_offset_imm0=0x80000d80 b_src=2=SRC_IMM b_use_sp_imm1=0x235a8a93 b_offset_imm0=0xa97 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x235a8a9300000a97 */
	mov r12, 0x235a8a9300000a97 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2060: /* paddr=0x2060 verbose=Init Data 80000d88: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d88 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2064: /* paddr=0x2064 verbose=Init Data 80000d90: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d90 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2068: /* paddr=0x2068 verbose=Init Data 80000d98: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000d98 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000d98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_206c: /* paddr=0x206c verbose=Init Data 80000da0: 13dffa8667 a_src=2=SRC_IMM a_offset_imm0=0x80000da0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xdffa8667 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13dffa8667 */
	mov r12, 0x13dffa8667 /* STORE_IND: reg_value = value */
	mov r13, 0x80000da0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2070: /* paddr=0x2070 verbose=Init Data 80000da8: 26461300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000da8 b_src=2=SRC_IMM b_use_sp_imm1=0x264613 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x26461300000013 */
	mov r12, 0x26461300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000da8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2074: /* paddr=0x2074 verbose=Init Data 80000db0: 36461300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000db0 b_src=2=SRC_IMM b_use_sp_imm1=0x364613 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x36461300c0006f */
	mov r12, 0x36461300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000db0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2078: /* paddr=0x2078 verbose=Init Data 80000db8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000db8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000db8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_207c: /* paddr=0x207c verbose=Init Data 80000dc0: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000dc0 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000dc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2080: /* paddr=0x2080 verbose=Init Data 80000dc8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000dc8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000dc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2084: /* paddr=0x2084 verbose=Init Data 80000dd0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000dd0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000dd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2088: /* paddr=0x2088 verbose=Init Data 80000dd8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000dd8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000dd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_208c: /* paddr=0x208c verbose=Init Data 80000de0: 40760633ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000de0 b_src=2=SRC_IMM b_use_sp_imm1=0x40760633 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40760633ffc3f393 */
	mov r12, 0x40760633ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000de0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2090: /* paddr=0x2090 verbose=Init Data 80000de8: 1702c33423 a_src=2=SRC_IMM a_offset_imm0=0x80000de8 b_src=2=SRC_IMM b_use_sp_imm1=0x17 b_offset_imm0=0x2c33423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1702c33423 */
	mov r12, 0x1702c33423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000de8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2094: /* paddr=0x2094 verbose=Init Data 80000df0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000df0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000df0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2098: /* paddr=0x2098 verbose=Init Data 80000df8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000df8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000df8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_209c: /* paddr=0x209c verbose=Init Data 80000e00: 4352021300000217 a_src=2=SRC_IMM a_offset_imm0=0x80000e00 b_src=2=SRC_IMM b_use_sp_imm1=0x43520213 b_offset_imm0=0x217 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x4352021300000217 */
	mov r12, 0x4352021300000217 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20a0: /* paddr=0x20a0 verbose=Init Data 80000e08: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e08 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20a4: /* paddr=0x20a4 verbose=Init Data 80000e10: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e10 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20a8: /* paddr=0x20a8 verbose=Init Data 80000e18: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e18 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20ac: /* paddr=0x20ac verbose=Init Data 80000e20: 13bff20067 a_src=2=SRC_IMM a_offset_imm0=0x80000e20 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xbff20067 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13bff20067 */
	mov r12, 0x13bff20067 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20b0: /* paddr=0x20b0 verbose=Init Data 80000e28: 20401300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e28 b_src=2=SRC_IMM b_use_sp_imm1=0x204013 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x20401300000013 */
	mov r12, 0x20401300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20b4: /* paddr=0x20b4 verbose=Init Data 80000e30: 30401300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000e30 b_src=2=SRC_IMM b_use_sp_imm1=0x304013 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x30401300c0006f */
	mov r12, 0x30401300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000e30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20b8: /* paddr=0x20b8 verbose=Init Data 80000e38: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000e38 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000e38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20bc: /* paddr=0x20bc verbose=Init Data 80000e40: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000e40 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20c0: /* paddr=0x20c0 verbose=Init Data 80000e48: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e48 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20c4: /* paddr=0x20c4 verbose=Init Data 80000e50: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e50 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20c8: /* paddr=0x20c8 verbose=Init Data 80000e58: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e58 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20cc: /* paddr=0x20cc verbose=Init Data 80000e60: 40700033ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000e60 b_src=2=SRC_IMM b_use_sp_imm1=0x40700033 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40700033ffc3f393 */
	mov r12, 0x40700033ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20d0: /* paddr=0x20d0 verbose=Init Data 80000e68: 21702033823 a_src=2=SRC_IMM a_offset_imm0=0x80000e68 b_src=2=SRC_IMM b_use_sp_imm1=0x217 b_offset_imm0=0x2033823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x21702033823 */
	mov r12, 0x21702033823 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20d4: /* paddr=0x20d4 verbose=Init Data 80000e70: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e70 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20d8: /* paddr=0x20d8 verbose=Init Data 80000e78: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e78 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20dc: /* paddr=0x20dc verbose=Init Data 80000e80: 8354041300000417 a_src=2=SRC_IMM a_offset_imm0=0x80000e80 b_src=2=SRC_IMM b_use_sp_imm1=0x83540413 b_offset_imm0=0x417 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x8354041300000417 */
	mov r12, 0x8354041300000417 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20e0: /* paddr=0x20e0 verbose=Init Data 80000e88: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e88 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20e4: /* paddr=0x20e4 verbose=Init Data 80000e90: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e90 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20e8: /* paddr=0x20e8 verbose=Init Data 80000e98: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000e98 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000e98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20ec: /* paddr=0x20ec verbose=Init Data 80000ea0: 137ff40267 a_src=2=SRC_IMM a_offset_imm0=0x80000ea0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x7ff40267 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x137ff40267 */
	mov r12, 0x137ff40267 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ea0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20f0: /* paddr=0x20f0 verbose=Init Data 80000ea8: 22421300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ea8 b_src=2=SRC_IMM b_use_sp_imm1=0x224213 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x22421300000013 */
	mov r12, 0x22421300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ea8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20f4: /* paddr=0x20f4 verbose=Init Data 80000eb0: 32421300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000eb0 b_src=2=SRC_IMM b_use_sp_imm1=0x324213 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x32421300c0006f */
	mov r12, 0x32421300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000eb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20f8: /* paddr=0x20f8 verbose=Init Data 80000eb8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000eb8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000eb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_20fc: /* paddr=0x20fc verbose=Init Data 80000ec0: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000ec0 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ec0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2100: /* paddr=0x2100 verbose=Init Data 80000ec8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ec8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ec8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2104: /* paddr=0x2104 verbose=Init Data 80000ed0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ed0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ed0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2108: /* paddr=0x2108 verbose=Init Data 80000ed8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ed8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ed8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_210c: /* paddr=0x210c verbose=Init Data 80000ee0: 40720233ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000ee0 b_src=2=SRC_IMM b_use_sp_imm1=0x40720233 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40720233ffc3f393 */
	mov r12, 0x40720233ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ee0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2110: /* paddr=0x2110 verbose=Init Data 80000ee8: 91702433c23 a_src=2=SRC_IMM a_offset_imm0=0x80000ee8 b_src=2=SRC_IMM b_use_sp_imm1=0x917 b_offset_imm0=0x2433c23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x91702433c23 */
	mov r12, 0x91702433c23 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ee8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2114: /* paddr=0x2114 verbose=Init Data 80000ef0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ef0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ef0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2118: /* paddr=0x2118 verbose=Init Data 80000ef8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ef8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ef8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_211c: /* paddr=0x211c verbose=Init Data 80000f00: adfa0a1300000a17 a_src=2=SRC_IMM a_offset_imm0=0x80000f00 b_src=2=SRC_IMM b_use_sp_imm1=0xadfa0a13 b_offset_imm0=0xa17 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xadfa0a1300000a17 */
	mov r12, 0xadfa0a1300000a17 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f00 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2120: /* paddr=0x2120 verbose=Init Data 80000f08: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f08 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f08 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2124: /* paddr=0x2124 verbose=Init Data 80000f10: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f10 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f10 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2128: /* paddr=0x2128 verbose=Init Data 80000f18: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f18 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f18 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_212c: /* paddr=0x212c verbose=Init Data 80000f20: 13555a0967 a_src=2=SRC_IMM a_offset_imm0=0x80000f20 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x555a0967 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13555a0967 */
	mov r12, 0x13555a0967 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f20 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2130: /* paddr=0x2130 verbose=Init Data 80000f28: 29491300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f28 b_src=2=SRC_IMM b_use_sp_imm1=0x294913 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x29491300000013 */
	mov r12, 0x29491300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f28 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2134: /* paddr=0x2134 verbose=Init Data 80000f30: 39491300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000f30 b_src=2=SRC_IMM b_use_sp_imm1=0x394913 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x39491300c0006f */
	mov r12, 0x39491300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000f30 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2138: /* paddr=0x2138 verbose=Init Data 80000f38: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000f38 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000f38 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_213c: /* paddr=0x213c verbose=Init Data 80000f40: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000f40 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f40 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2140: /* paddr=0x2140 verbose=Init Data 80000f48: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f48 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f48 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2144: /* paddr=0x2144 verbose=Init Data 80000f50: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f50 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f50 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2148: /* paddr=0x2148 verbose=Init Data 80000f58: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f58 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f58 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_214c: /* paddr=0x214c verbose=Init Data 80000f60: 40790933ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000f60 b_src=2=SRC_IMM b_use_sp_imm1=0x40790933 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40790933ffc3f393 */
	mov r12, 0x40790933ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f60 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2150: /* paddr=0x2150 verbose=Init Data 80000f68: 11705233023 a_src=2=SRC_IMM a_offset_imm0=0x80000f68 b_src=2=SRC_IMM b_use_sp_imm1=0x117 b_offset_imm0=0x5233023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x11705233023 */
	mov r12, 0x11705233023 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f68 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2154: /* paddr=0x2154 verbose=Init Data 80000f70: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f70 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f70 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2158: /* paddr=0x2158 verbose=Init Data 80000f78: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f78 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f78 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_215c: /* paddr=0x215c verbose=Init Data 80000f80: 58a9091300000917 a_src=2=SRC_IMM a_offset_imm0=0x80000f80 b_src=2=SRC_IMM b_use_sp_imm1=0x58a90913 b_offset_imm0=0x917 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x58a9091300000917 */
	mov r12, 0x58a9091300000917 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f80 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2160: /* paddr=0x2160 verbose=Init Data 80000f88: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f88 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f88 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2164: /* paddr=0x2164 verbose=Init Data 80000f90: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f90 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f90 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2168: /* paddr=0x2168 verbose=Init Data 80000f98: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000f98 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000f98 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_216c: /* paddr=0x216c verbose=Init Data 80000fa0: 13aaa90167 a_src=2=SRC_IMM a_offset_imm0=0x80000fa0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xaaa90167 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13aaa90167 */
	mov r12, 0x13aaa90167 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fa0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2170: /* paddr=0x2170 verbose=Init Data 80000fa8: 21411300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000fa8 b_src=2=SRC_IMM b_use_sp_imm1=0x214113 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x21411300000013 */
	mov r12, 0x21411300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fa8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2174: /* paddr=0x2174 verbose=Init Data 80000fb0: 31411300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80000fb0 b_src=2=SRC_IMM b_use_sp_imm1=0x314113 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x31411300c0006f */
	mov r12, 0x31411300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000fb0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2178: /* paddr=0x2178 verbose=Init Data 80000fb8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80000fb8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80000fb8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_217c: /* paddr=0x217c verbose=Init Data 80000fc0: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80000fc0 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fc0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2180: /* paddr=0x2180 verbose=Init Data 80000fc8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000fc8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fc8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2184: /* paddr=0x2184 verbose=Init Data 80000fd0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000fd0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fd0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2188: /* paddr=0x2188 verbose=Init Data 80000fd8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000fd8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fd8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_218c: /* paddr=0x218c verbose=Init Data 80000fe0: 40710133ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80000fe0 b_src=2=SRC_IMM b_use_sp_imm1=0x40710133 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40710133ffc3f393 */
	mov r12, 0x40710133ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fe0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2190: /* paddr=0x2190 verbose=Init Data 80000fe8: 29704233423 a_src=2=SRC_IMM a_offset_imm0=0x80000fe8 b_src=2=SRC_IMM b_use_sp_imm1=0x297 b_offset_imm0=0x4233423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x29704233423 */
	mov r12, 0x29704233423 /* STORE_IND: reg_value = value */
	mov r13, 0x80000fe8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2194: /* paddr=0x2194 verbose=Init Data 80000ff0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ff0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ff0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2198: /* paddr=0x2198 verbose=Init Data 80000ff8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80000ff8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80000ff8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_219c: /* paddr=0x219c verbose=Init Data 80001000: 8348889300001897 a_src=2=SRC_IMM a_offset_imm0=0x80001000 b_src=2=SRC_IMM b_use_sp_imm1=0x83488893 b_offset_imm0=0x1897 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x8348889300001897 */
	mov r12, 0x8348889300001897 /* STORE_IND: reg_value = value */
	mov r13, 0x80001000 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21a0: /* paddr=0x21a0 verbose=Init Data 80001008: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001008 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001008 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21a4: /* paddr=0x21a4 verbose=Init Data 80001010: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001010 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001010 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21a8: /* paddr=0x21a8 verbose=Init Data 80001018: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001018 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001018 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21ac: /* paddr=0x21ac verbose=Init Data 80001020: 13800882e7 a_src=2=SRC_IMM a_offset_imm0=0x80001020 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x800882e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13800882e7 */
	mov r12, 0x13800882e7 /* STORE_IND: reg_value = value */
	mov r13, 0x80001020 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21b0: /* paddr=0x21b0 verbose=Init Data 80001028: 22c29300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001028 b_src=2=SRC_IMM b_use_sp_imm1=0x22c293 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x22c29300000013 */
	mov r12, 0x22c29300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001028 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21b4: /* paddr=0x21b4 verbose=Init Data 80001030: 32c29300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80001030 b_src=2=SRC_IMM b_use_sp_imm1=0x32c293 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x32c29300c0006f */
	mov r12, 0x32c29300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80001030 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21b8: /* paddr=0x21b8 verbose=Init Data 80001038: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80001038 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80001038 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21bc: /* paddr=0x21bc verbose=Init Data 80001040: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80001040 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80001040 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21c0: /* paddr=0x21c0 verbose=Init Data 80001048: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001048 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001048 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21c4: /* paddr=0x21c4 verbose=Init Data 80001050: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001050 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001050 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21c8: /* paddr=0x21c8 verbose=Init Data 80001058: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001058 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001058 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21cc: /* paddr=0x21cc verbose=Init Data 80001060: 407282b3ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80001060 b_src=2=SRC_IMM b_use_sp_imm1=0x407282b3 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x407282b3ffc3f393 */
	mov r12, 0x407282b3ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80001060 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21d0: /* paddr=0x21d0 verbose=Init Data 80001068: d9704533823 a_src=2=SRC_IMM a_offset_imm0=0x80001068 b_src=2=SRC_IMM b_use_sp_imm1=0xd97 b_offset_imm0=0x4533823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xd9704533823 */
	mov r12, 0xd9704533823 /* STORE_IND: reg_value = value */
	mov r13, 0x80001068 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21d4: /* paddr=0x21d4 verbose=Init Data 80001070: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001070 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001070 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21d8: /* paddr=0x21d8 verbose=Init Data 80001078: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001078 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001078 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21dc: /* paddr=0x21dc verbose=Init Data 80001080: 8348081300001817 a_src=2=SRC_IMM a_offset_imm0=0x80001080 b_src=2=SRC_IMM b_use_sp_imm1=0x83480813 b_offset_imm0=0x1817 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x8348081300001817 */
	mov r12, 0x8348081300001817 /* STORE_IND: reg_value = value */
	mov r13, 0x80001080 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21e0: /* paddr=0x21e0 verbose=Init Data 80001088: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001088 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001088 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21e4: /* paddr=0x21e4 verbose=Init Data 80001090: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001090 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001090 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21e8: /* paddr=0x21e8 verbose=Init Data 80001098: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001098 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001098 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21ec: /* paddr=0x21ec verbose=Init Data 800010a0: 1380080de7 a_src=2=SRC_IMM a_offset_imm0=0x800010a0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x80080de7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1380080de7 */
	mov r12, 0x1380080de7 /* STORE_IND: reg_value = value */
	mov r13, 0x800010a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21f0: /* paddr=0x21f0 verbose=Init Data 800010a8: 2dcd9300000013 a_src=2=SRC_IMM a_offset_imm0=0x800010a8 b_src=2=SRC_IMM b_use_sp_imm1=0x2dcd93 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2dcd9300000013 */
	mov r12, 0x2dcd9300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800010a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21f4: /* paddr=0x21f4 verbose=Init Data 800010b0: 3dcd9300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800010b0 b_src=2=SRC_IMM b_use_sp_imm1=0x3dcd93 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x3dcd9300c0006f */
	mov r12, 0x3dcd9300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800010b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21f8: /* paddr=0x21f8 verbose=Init Data 800010b8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800010b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800010b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_21fc: /* paddr=0x21fc verbose=Init Data 800010c0: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x800010c0 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x800010c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2200: /* paddr=0x2200 verbose=Init Data 800010c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800010c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800010c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2204: /* paddr=0x2204 verbose=Init Data 800010d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800010d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800010d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2208: /* paddr=0x2208 verbose=Init Data 800010d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800010d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800010d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_220c: /* paddr=0x220c verbose=Init Data 800010e0: 407d8db3ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x800010e0 b_src=2=SRC_IMM b_use_sp_imm1=0x407d8db3 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x407d8db3ffc3f393 */
	mov r12, 0x407d8db3ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x800010e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2210: /* paddr=0x2210 verbose=Init Data 800010e8: 9705b33c23 a_src=2=SRC_IMM a_offset_imm0=0x800010e8 b_src=2=SRC_IMM b_use_sp_imm1=0x97 b_offset_imm0=0x5b33c23 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x9705b33c23 */
	mov r12, 0x9705b33c23 /* STORE_IND: reg_value = value */
	mov r13, 0x800010e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2214: /* paddr=0x2214 verbose=Init Data 800010f0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800010f0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800010f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2218: /* paddr=0x2218 verbose=Init Data 800010f8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800010f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800010f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_221c: /* paddr=0x221c verbose=Init Data 80001100: 834d0d1300001d17 a_src=2=SRC_IMM a_offset_imm0=0x80001100 b_src=2=SRC_IMM b_use_sp_imm1=0x834d0d13 b_offset_imm0=0x1d17 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x834d0d1300001d17 */
	mov r12, 0x834d0d1300001d17 /* STORE_IND: reg_value = value */
	mov r13, 0x80001100 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2220: /* paddr=0x2220 verbose=Init Data 80001108: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001108 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001108 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2224: /* paddr=0x2224 verbose=Init Data 80001110: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001110 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001110 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2228: /* paddr=0x2228 verbose=Init Data 80001118: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001118 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001118 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_222c: /* paddr=0x222c verbose=Init Data 80001120: 13800d00e7 a_src=2=SRC_IMM a_offset_imm0=0x80001120 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x800d00e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13800d00e7 */
	mov r12, 0x13800d00e7 /* STORE_IND: reg_value = value */
	mov r13, 0x80001120 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2230: /* paddr=0x2230 verbose=Init Data 80001128: 20c09300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001128 b_src=2=SRC_IMM b_use_sp_imm1=0x20c093 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x20c09300000013 */
	mov r12, 0x20c09300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001128 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2234: /* paddr=0x2234 verbose=Init Data 80001130: 30c09300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80001130 b_src=2=SRC_IMM b_use_sp_imm1=0x30c093 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x30c09300c0006f */
	mov r12, 0x30c09300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80001130 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2238: /* paddr=0x2238 verbose=Init Data 80001138: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80001138 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80001138 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_223c: /* paddr=0x223c verbose=Init Data 80001140: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80001140 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80001140 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2240: /* paddr=0x2240 verbose=Init Data 80001148: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001148 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001148 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2244: /* paddr=0x2244 verbose=Init Data 80001150: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001150 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001150 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2248: /* paddr=0x2248 verbose=Init Data 80001158: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001158 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001158 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_224c: /* paddr=0x224c verbose=Init Data 80001160: 407080b3ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80001160 b_src=2=SRC_IMM b_use_sp_imm1=0x407080b3 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x407080b3ffc3f393 */
	mov r12, 0x407080b3ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80001160 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2250: /* paddr=0x2250 verbose=Init Data 80001168: 51706133023 a_src=2=SRC_IMM a_offset_imm0=0x80001168 b_src=2=SRC_IMM b_use_sp_imm1=0x517 b_offset_imm0=0x6133023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x51706133023 */
	mov r12, 0x51706133023 /* STORE_IND: reg_value = value */
	mov r13, 0x80001168 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2254: /* paddr=0x2254 verbose=Init Data 80001170: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001170 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001170 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2258: /* paddr=0x2258 verbose=Init Data 80001178: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001178 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001178 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_225c: /* paddr=0x225c verbose=Init Data 80001180: 834c0c1300001c17 a_src=2=SRC_IMM a_offset_imm0=0x80001180 b_src=2=SRC_IMM b_use_sp_imm1=0x834c0c13 b_offset_imm0=0x1c17 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x834c0c1300001c17 */
	mov r12, 0x834c0c1300001c17 /* STORE_IND: reg_value = value */
	mov r13, 0x80001180 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2260: /* paddr=0x2260 verbose=Init Data 80001188: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001188 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001188 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2264: /* paddr=0x2264 verbose=Init Data 80001190: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001190 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001190 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2268: /* paddr=0x2268 verbose=Init Data 80001198: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001198 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001198 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_226c: /* paddr=0x226c verbose=Init Data 800011a0: 13800c0567 a_src=2=SRC_IMM a_offset_imm0=0x800011a0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x800c0567 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13800c0567 */
	mov r12, 0x13800c0567 /* STORE_IND: reg_value = value */
	mov r13, 0x800011a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2270: /* paddr=0x2270 verbose=Init Data 800011a8: 25451300000013 a_src=2=SRC_IMM a_offset_imm0=0x800011a8 b_src=2=SRC_IMM b_use_sp_imm1=0x254513 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x25451300000013 */
	mov r12, 0x25451300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800011a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2274: /* paddr=0x2274 verbose=Init Data 800011b0: 35451300c0006f a_src=2=SRC_IMM a_offset_imm0=0x800011b0 b_src=2=SRC_IMM b_use_sp_imm1=0x354513 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x35451300c0006f */
	mov r12, 0x35451300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x800011b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2278: /* paddr=0x2278 verbose=Init Data 800011b8: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x800011b8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800011b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_227c: /* paddr=0x227c verbose=Init Data 800011c0: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x800011c0 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x800011c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2280: /* paddr=0x2280 verbose=Init Data 800011c8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800011c8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800011c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2284: /* paddr=0x2284 verbose=Init Data 800011d0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800011d0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800011d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2288: /* paddr=0x2288 verbose=Init Data 800011d8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800011d8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800011d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_228c: /* paddr=0x228c verbose=Init Data 800011e0: 40750533ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x800011e0 b_src=2=SRC_IMM b_use_sp_imm1=0x40750533 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40750533ffc3f393 */
	mov r12, 0x40750533ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x800011e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2290: /* paddr=0x2290 verbose=Init Data 800011e8: 59706a33423 a_src=2=SRC_IMM a_offset_imm0=0x800011e8 b_src=2=SRC_IMM b_use_sp_imm1=0x597 b_offset_imm0=0x6a33423 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x59706a33423 */
	mov r12, 0x59706a33423 /* STORE_IND: reg_value = value */
	mov r13, 0x800011e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2294: /* paddr=0x2294 verbose=Init Data 800011f0: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800011f0 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800011f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2298: /* paddr=0x2298 verbose=Init Data 800011f8: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x800011f8 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x800011f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_229c: /* paddr=0x229c verbose=Init Data 80001200: 4355051300000517 a_src=2=SRC_IMM a_offset_imm0=0x80001200 b_src=2=SRC_IMM b_use_sp_imm1=0x43550513 b_offset_imm0=0x517 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x4355051300000517 */
	mov r12, 0x4355051300000517 /* STORE_IND: reg_value = value */
	mov r13, 0x80001200 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22a0: /* paddr=0x22a0 verbose=Init Data 80001208: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001208 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001208 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22a4: /* paddr=0x22a4 verbose=Init Data 80001210: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001210 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001210 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22a8: /* paddr=0x22a8 verbose=Init Data 80001218: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001218 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001218 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22ac: /* paddr=0x22ac verbose=Init Data 80001220: 13bff505e7 a_src=2=SRC_IMM a_offset_imm0=0x80001220 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0xbff505e7 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x13bff505e7 */
	mov r12, 0x13bff505e7 /* STORE_IND: reg_value = value */
	mov r13, 0x80001220 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22b0: /* paddr=0x22b0 verbose=Init Data 80001228: 25c59300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001228 b_src=2=SRC_IMM b_use_sp_imm1=0x25c593 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x25c59300000013 */
	mov r12, 0x25c59300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001228 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22b4: /* paddr=0x22b4 verbose=Init Data 80001230: 35c59300c0006f a_src=2=SRC_IMM a_offset_imm0=0x80001230 b_src=2=SRC_IMM b_use_sp_imm1=0x35c593 b_offset_imm0=0xc0006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x35c59300c0006f */
	mov r12, 0x35c59300c0006f /* STORE_IND: reg_value = value */
	mov r13, 0x80001230 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22b8: /* paddr=0x22b8 verbose=Init Data 80001238: 130040006f a_src=2=SRC_IMM a_offset_imm0=0x80001238 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x130040006f */
	mov r12, 0x130040006f /* STORE_IND: reg_value = value */
	mov r13, 0x80001238 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22bc: /* paddr=0x22bc verbose=Init Data 80001240: fac3839300000397 a_src=2=SRC_IMM a_offset_imm0=0x80001240 b_src=2=SRC_IMM b_use_sp_imm1=0xfac38393 b_offset_imm0=0x397 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfac3839300000397 */
	mov r12, 0xfac3839300000397 /* STORE_IND: reg_value = value */
	mov r13, 0x80001240 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22c0: /* paddr=0x22c0 verbose=Init Data 80001248: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001248 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001248 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22c4: /* paddr=0x22c4 verbose=Init Data 80001250: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001250 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001250 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22c8: /* paddr=0x22c8 verbose=Init Data 80001258: 1300000013 a_src=2=SRC_IMM a_offset_imm0=0x80001258 b_src=2=SRC_IMM b_use_sp_imm1=0x13 b_offset_imm0=0x13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1300000013 */
	mov r12, 0x1300000013 /* STORE_IND: reg_value = value */
	mov r13, 0x80001258 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22cc: /* paddr=0x22cc verbose=Init Data 80001260: 407585b3ffc3f393 a_src=2=SRC_IMM a_offset_imm0=0x80001260 b_src=2=SRC_IMM b_use_sp_imm1=0x407585b3 b_offset_imm0=0xffc3f393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x407585b3ffc3f393 */
	mov r12, 0x407585b3ffc3f393 /* STORE_IND: reg_value = value */
	mov r13, 0x80001260 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22d0: /* paddr=0x22d0 verbose=Init Data 80001268: 380006f06b33823 a_src=2=SRC_IMM a_offset_imm0=0x80001268 b_src=2=SRC_IMM b_use_sp_imm1=0x380006f b_offset_imm0=0x6b33823 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x380006f06b33823 */
	mov r12, 0x380006f06b33823 /* STORE_IND: reg_value = value */
	mov r13, 0x80001268 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22d4: /* paddr=0x22d4 verbose=Init Data 80001270: 200133031f813483 a_src=2=SRC_IMM a_offset_imm0=0x80001270 b_src=2=SRC_IMM b_use_sp_imm1=0x20013303 b_offset_imm0=0x1f813483 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x200133031f813483 */
	mov r12, 0x200133031f813483 /* STORE_IND: reg_value = value */
	mov r13, 0x80001270 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22d8: /* paddr=0x22d8 verbose=Init Data 80001278: 33700930333 a_src=2=SRC_IMM a_offset_imm0=0x80001278 b_src=2=SRC_IMM b_use_sp_imm1=0x337 b_offset_imm0=0x930333 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x33700930333 */
	mov r12, 0x33700930333 /* STORE_IND: reg_value = value */
	mov r13, 0x80001278 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22dc: /* paddr=0x22dc verbose=Init Data 80001280: b3131300030313 a_src=2=SRC_IMM a_offset_imm0=0x80001280 b_src=2=SRC_IMM b_use_sp_imm1=0xb31313 b_offset_imm0=0x30313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb3131300030313 */
	mov r12, 0xb3131300030313 /* STORE_IND: reg_value = value */
	mov r13, 0x80001280 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22e0: /* paddr=0x22e0 verbose=Init Data 80001288: b313135d630313 a_src=2=SRC_IMM a_offset_imm0=0x80001288 b_src=2=SRC_IMM b_use_sp_imm1=0xb31313 b_offset_imm0=0x5d630313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xb313135d630313 */
	mov r12, 0xb313135d630313 /* STORE_IND: reg_value = value */
	mov r13, 0x80001288 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22e4: /* paddr=0x22e4 verbose=Init Data 80001290: a3131343630313 a_src=2=SRC_IMM a_offset_imm0=0x80001290 b_src=2=SRC_IMM b_use_sp_imm1=0xa31313 b_offset_imm0=0x43630313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa3131343630313 */
	mov r12, 0xa3131343630313 /* STORE_IND: reg_value = value */
	mov r13, 0x80001290 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22e8: /* paddr=0x22e8 verbose=Init Data 80001298: fe64be232d030313 a_src=2=SRC_IMM a_offset_imm0=0x80001298 b_src=2=SRC_IMM b_use_sp_imm1=0xfe64be23 b_offset_imm0=0x2d030313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfe64be232d030313 */
	mov r12, 0xfe64be232d030313 /* STORE_IND: reg_value = value */
	mov r13, 0x80001298 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22ec: /* paddr=0x22ec verbose=Init Data 800012a0: 200112970040006f a_src=2=SRC_IMM a_offset_imm0=0x800012a0 b_src=2=SRC_IMM b_use_sp_imm1=0x20011297 b_offset_imm0=0x40006f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x200112970040006f */
	mov r12, 0x200112970040006f /* STORE_IND: reg_value = value */
	mov r13, 0x800012a0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22f0: /* paddr=0x22f0 verbose=Init Data 800012a8: 20011317e6c28293 a_src=2=SRC_IMM a_offset_imm0=0x800012a8 b_src=2=SRC_IMM b_use_sp_imm1=0x20011317 b_offset_imm0=0xe6c28293 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x20011317e6c28293 */
	mov r12, 0x20011317e6c28293 /* STORE_IND: reg_value = value */
	mov r13, 0x800012a8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22f4: /* paddr=0x22f4 verbose=Init Data 800012b0: 2000f397f8430313 a_src=2=SRC_IMM a_offset_imm0=0x800012b0 b_src=2=SRC_IMM b_use_sp_imm1=0x2000f397 b_offset_imm0=0xf8430313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2000f397f8430313 */
	mov r12, 0x2000f397f8430313 /* STORE_IND: reg_value = value */
	mov r13, 0x800012b0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22f8: /* paddr=0x22f8 verbose=Init Data 800012b8: 40530e33d4c38393 a_src=2=SRC_IMM a_offset_imm0=0x800012b8 b_src=2=SRC_IMM b_use_sp_imm1=0x40530e33 b_offset_imm0=0xd4c38393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x40530e33d4c38393 */
	mov r12, 0x40530e33d4c38393 /* STORE_IND: reg_value = value */
	mov r13, 0x800012b8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_22fc: /* paddr=0x22fc verbose=Init Data 800012c0: 1c3a023402e5e13 a_src=2=SRC_IMM a_offset_imm0=0x800012c0 b_src=2=SRC_IMM b_use_sp_imm1=0x1c3a023 b_offset_imm0=0x402e5e13 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1c3a023402e5e13 */
	mov r12, 0x1c3a023402e5e13 /* STORE_IND: reg_value = value */
	mov r13, 0x800012c0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2300: /* paddr=0x2300 verbose=Init Data 800012c8: 62dc6300438393 a_src=2=SRC_IMM a_offset_imm0=0x800012c8 b_src=2=SRC_IMM b_use_sp_imm1=0x62dc63 b_offset_imm0=0x438393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x62dc6300438393 */
	mov r12, 0x62dc6300438393 /* STORE_IND: reg_value = value */
	mov r13, 0x800012c8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2304: /* paddr=0x2304 verbose=Init Data 800012d0: 1d3a0230002ae83 a_src=2=SRC_IMM a_offset_imm0=0x800012d0 b_src=2=SRC_IMM b_use_sp_imm1=0x1d3a023 b_offset_imm0=0x2ae83 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1d3a0230002ae83 */
	mov r12, 0x1d3a0230002ae83 /* STORE_IND: reg_value = value */
	mov r13, 0x800012d0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2308: /* paddr=0x2308 verbose=Init Data 800012d8: 42829300438393 a_src=2=SRC_IMM a_offset_imm0=0x800012d8 b_src=2=SRC_IMM b_use_sp_imm1=0x428293 b_offset_imm0=0x438393 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x42829300438393 */
	mov r12, 0x42829300438393 /* STORE_IND: reg_value = value */
	mov r13, 0x800012d8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_230c: /* paddr=0x230c verbose=Init Data 800012e0: a0337fedff06f a_src=2=SRC_IMM a_offset_imm0=0x800012e0 b_src=2=SRC_IMM b_use_sp_imm1=0xa0337 b_offset_imm0=0xfedff06f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0337fedff06f */
	mov r12, 0xa0337fedff06f /* STORE_IND: reg_value = value */
	mov r13, 0x800012e0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2310: /* paddr=0x2310 verbose=Init Data 800012e8: c313130093031b a_src=2=SRC_IMM a_offset_imm0=0x800012e8 b_src=2=SRC_IMM b_use_sp_imm1=0xc31313 b_offset_imm0=0x93031b ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xc313130093031b */
	mov r12, 0xc313130093031b /* STORE_IND: reg_value = value */
	mov r13, 0x800012e8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2314: /* paddr=0x2314 verbose=Init Data 800012f0: 32283f1230313 a_src=2=SRC_IMM a_offset_imm0=0x800012f0 b_src=2=SRC_IMM b_use_sp_imm1=0x32283 b_offset_imm0=0xf1230313 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x32283f1230313 */
	mov r12, 0x32283f1230313 /* STORE_IND: reg_value = value */
	mov r13, 0x800012f0 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2318: /* paddr=0x2318 verbose=Init Data 800012f8: eee3031b0ffff337 a_src=2=SRC_IMM a_offset_imm0=0x800012f8 b_src=2=SRC_IMM b_use_sp_imm1=0xeee3031b b_offset_imm0=0xffff337 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xeee3031b0ffff337 */
	mov r12, 0xeee3031b0ffff337 /* STORE_IND: reg_value = value */
	mov r13, 0x800012f8 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_231c: /* paddr=0x231c verbose=Init Data 80001300: 1002b700628c63 a_src=2=SRC_IMM a_offset_imm0=0x80001300 b_src=2=SRC_IMM b_use_sp_imm1=0x1002b7 b_offset_imm0=0x628c63 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x1002b700628c63 */
	mov r12, 0x1002b700628c63 /* STORE_IND: reg_value = value */
	mov r13, 0x80001300 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2320: /* paddr=0x2320 verbose=Init Data 80001308: 5553031b00005337 a_src=2=SRC_IMM a_offset_imm0=0x80001308 b_src=2=SRC_IMM b_use_sp_imm1=0x5553031b b_offset_imm0=0x5337 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5553031b00005337 */
	mov r12, 0x5553031b00005337 /* STORE_IND: reg_value = value */
	mov r13, 0x80001308 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2324: /* paddr=0x2324 verbose=Init Data 80001310: c0006f0062a023 a_src=2=SRC_IMM a_offset_imm0=0x80001310 b_src=2=SRC_IMM b_use_sp_imm1=0xc0006f b_offset_imm0=0x62a023 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xc0006f0062a023 */
	mov r12, 0xc0006f0062a023 /* STORE_IND: reg_value = value */
	mov r13, 0x80001310 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2328: /* paddr=0x2328 verbose=Init Data 80001318: 7305d00893 a_src=2=SRC_IMM a_offset_imm0=0x80001318 b_src=2=SRC_IMM b_use_sp_imm1=0x73 b_offset_imm0=0x5d00893 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7305d00893 */
	mov r12, 0x7305d00893 /* STORE_IND: reg_value = value */
	mov r13, 0x80001318 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_232c: /* paddr=0x232c verbose=Init Data 80001320: 0000006f a_src=2=SRC_IMM a_offset_imm0=0x80001320 b_src=2=SRC_IMM b_offset_imm0=0x6f ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x6f */
	mov r12, 0x6f /* STORE_IND: reg_value = value */
	mov r13, 0x80001320 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2330: /* paddr=0x2330 verbose=Init Data 80001328: 00000000 a_src=2=SRC_IMM a_offset_imm0=0x80001328 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0x80001328 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2334: /* paddr=0x2334 verbose=Init Data 80001330: 00000000 a_src=2=SRC_IMM a_offset_imm0=0x80001330 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0x80001330 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_2338: /* paddr=0x2338 verbose=Init Data 80001338: 00000000 a_src=2=SRC_IMM a_offset_imm0=0x80001338 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, 0x80001338 /* STORE_IND: address = a */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_233c: /* paddr=0x233c verbose=Set marchid: fffeeee a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xfffeeee op=1=copyb store=1=STORE_MEM store_offset=0xa0008f12 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfffeeee */
	mov r13, 0xa0008f12/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffeeee /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_2340: /* paddr=0x2340 verbose=Set mtvec: 9076 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x2374 op=1=copyb store=1=STORE_MEM store_offset=0xa0008305 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x2374 */
	mov r13, 0xa0008305/* STORE_MEM: address = i.store_offset */
	mov r12, 0x2374 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_2344: /* paddr=0x2344 verbose=Set 1st Param (pInput): 0x90000000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x90000000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000050 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x90000000 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x90000000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_2348: /* paddr=0x2348 verbose=Set 2nd Param (pOutput): 0xa0010000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa0010000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000058 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0010000 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0010000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_234c: /* paddr=0x234c verbose=CALL to entry: 0x80000000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x80000000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000008 store_ra=true set_pc=true jmp_offset2=0x4 */
	/* CopyB: c = b = 0x80000000 */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, 0x2350 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, 0x80000000 /* set_pc 1: pc = c + i.jmp_offset1 */
	inc r11 /* increment step */
	jmp pc_80000000 /* set_pc 1: jump to static pc */

pc_2350: /* paddr=0x2350 verbose=Set reg1 to output data length read at OUTPUT_ADDR a_src=2=SRC_IMM a_offset_imm0=0xa0010000 b_src=5=SRC_IND ind_width=4 op=1=copyb store=1=STORE_MEM store_offset=0xa0000008 jmp_offset2=0x4 */
	mov r13, 0xa0010000 /* b=SRC_IND: address = a */
	add r13, 0x0 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov eax, [r13] /* b=SRC_IND(4): b = mem[address] */
	/* CopyB: c = b = rax */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rax /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_2354: /* paddr=0x2354 verbose=Set reg2 to 0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb store=1=STORE_MEM store_offset=0xa0000010 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_2358: /* paddr=0x2358 verbose=Set reg3 to OUTPUT_ADDR + 4 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa0010004 op=1=copyb store=1=STORE_MEM store_offset=0xa0000018 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0010004 */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0010004 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_235c: /* paddr=0x235c verbose=If reg1==reg2 jumpt to end a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=1=SRC_MEM b_offset_imm0=0xa0000010 op=11=eq jmp_offset1=14 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000010 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	cmp rbx, rax /* Eq: a == b ? */
	je pc_235c_equal_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_235c_equal_done
pc_235c_equal_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_235c_equal_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_235c_flag_false /* flag == 1 ? */
	mov r9, 0x2370 /* pc += i.jmp_offset1 */
	jmp pc_235c_flag_done
pc_235c_flag_false:
	mov r9, 0x2360 /* pc += i.jmp_offset2 */
pc_235c_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_235c_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_235c_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_2360: /* paddr=0x2360 verbose=Set c to mem(output_data[index]), a=index a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=5=SRC_IND ind_width=4 op=1=copyb jmp_offset2=0x4 */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x0 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov eax, [r13] /* b=SRC_IND(4): b = mem[address] */
	/* CopyB: c = b = rax */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_2364: /* paddr=0x2364 verbose=Public output, set c to output_data[index], a=index a_src=1=SRC_MEM a_offset_imm0=0xa0000010 op=48=pubout jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rax, rcx /* b=SRC_C: b = c */
	/* PubOut: c = b = rax */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_2368: /* paddr=0x2368 verbose=Set reg3 to reg3 + 4 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000018 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4 /* Add: c = c + b = a + b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_236c: /* paddr=0x236c verbose=Set reg2 to reg2 + 1 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=2=SRC_IMM b_offset_imm0=0x1 op=12=add store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0xfffffffffffffff0 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x1 /* Add: c = c + b = a + b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	mov r9, 0x235c /* set_pc 3: pc += i.jmp_offset2 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_236c_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_236c_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_2370: /* paddr=0x2370 verbose=jump to end successfully a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x10000000 op=1=copyb set_pc=true */
	/* CopyB: c = b = 0x10000000 */
	/* STORE_NONE */
	mov r9, 0x10000000 /* set_pc 1: pc = c + i.jmp_offset1 */
	inc r11 /* increment step */
	jmp pc_10000000 /* set_pc 1: jump to static pc */

pc_2374: /* paddr=0x2374 verbose=beq r17, 93 # Check if is exit a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x5d op=11=eq jmp_offset1=4 jmp_offset2=0x8 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	cmp rbx, 0x5d /* Eq: a == b ? */
	je pc_2374_equal_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_2374_equal_done
pc_2374_equal_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_2374_equal_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_2374_flag_false /* flag == 1 ? */
	mov r9, 0x2378 /* pc += i.jmp_offset1 */
	jmp pc_2374_flag_done
pc_2374_flag_false:
	mov r9, 0x237c /* pc += i.jmp_offset2 */
pc_2374_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_2374_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_2374_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_2378: /* paddr=0x2378 verbose=jump to end due to error a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x10000000 op=1=copyb set_pc=true */
	/* CopyB: c = b = 0x10000000 */
	/* STORE_NONE */
	mov r9, 0x10000000 /* set_pc 1: pc = c + i.jmp_offset1 */
	inc r11 /* increment step */
	jmp pc_10000000 /* set_pc 1: jump to static pc */

pc_237c: /* paddr=0x237c verbose=beq r17, 65793 # Check if is keccak a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x10101 op=11=eq jmp_offset1=4 jmp_offset2=0x8 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	cmp rbx, 0x10101 /* Eq: a == b ? */
	je pc_237c_equal_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_237c_equal_done
pc_237c_equal_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_237c_equal_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_237c_flag_false /* flag == 1 ? */
	mov r9, 0x2380 /* pc += i.jmp_offset1 */
	jmp pc_237c_flag_done
pc_237c_flag_false:
	mov r9, 0x2384 /* pc += i.jmp_offset2 */
pc_237c_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_237c_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_237c_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_2380: /* paddr=0x2380 verbose=keccak a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM op=241=keccak jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, 0 /* Keccak */
	mov rdx, 0
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_2380_flag_false /* flag == 1 ? */
	mov r9, 0x2384 /* pc += i.jmp_offset1 */
	jmp pc_2380_flag_done
pc_2380_flag_false:
	mov r9, 0x2384 /* pc += i.jmp_offset2 */
pc_2380_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_2380_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_2380_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_2384: /* paddr=0x2384 verbose=ret a_src=2=SRC_IMM b_src=1=SRC_MEM b_offset_imm0=0xa0000008 op=1=copyb set_pc=true jmp_offset2=0x4 */
	mov r13, 0xa0000008 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	/* STORE_NONE */
	mov r9, rax /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_2384_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_2384_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_10000000: /* paddr=0x10000000 verbose=end a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb end=true */
	/* CopyB: c = b = 0x0 */
	/* STORE_NONE */
	mov r9, 0x10000000 /* set_pc 3: pc += i.jmp_offset2 */
	inc r11 /* increment step */
	jmp execute_end /* end */

pc_80000000: /* paddr=0x80000000 verbose=lui r16, 0x7d5c0000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x7d5c0000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x7d5c0000 */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, 0x7d5c0000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000004: /* paddr=0x80000004 verbose=addi r16, r16, 0xfffffddb a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffddb op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffddb /* Add: c = c + b = a + b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000008: /* paddr=0x80000008 verbose=slli r16, r16, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000000c: /* paddr=0x8000000c verbose=addi r16, r16, 0x3ea a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x3ea op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x3ea /* Add: c = c + b = a + b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000010: /* paddr=0x80000010 verbose=slli r16, r16, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000014: /* paddr=0x80000014 verbose=addi r16, r16, 0x6ff a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x6ff op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x6ff /* Add: c = c + b = a + b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000018: /* paddr=0x80000018 verbose=slli r16, r16, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000001c: /* paddr=0x8000001c verbose=addi r16, r16, 0x1db a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x1db op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x1db /* Add: c = c + b = a + b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000020: /* paddr=0x80000020 verbose=srli r17, r16, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000024: /* paddr=0x80000024 verbose=srli r15, r16, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000028: /* paddr=0x80000028 verbose=or r17, r17, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000002c: /* paddr=0x8000002c verbose=srli r18, r17, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000030: /* paddr=0x80000030 verbose=srli r15, r17, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000034: /* paddr=0x80000034 verbose=or r18, r18, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000038: /* paddr=0x80000038 verbose=srli r19, r18, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000003c: /* paddr=0x8000003c verbose=srli r15, r18, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000040: /* paddr=0x80000040 verbose=or r19, r19, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000044: /* paddr=0x80000044 verbose=srli r20, r19, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000048: /* paddr=0x80000048 verbose=srli r15, r19, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000004c: /* paddr=0x8000004c verbose=or r20, r20, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000050: /* paddr=0x80000050 verbose=srli r21, r20, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000054: /* paddr=0x80000054 verbose=srli r15, r20, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000058: /* paddr=0x80000058 verbose=or r21, r21, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000005c: /* paddr=0x8000005c verbose=srli r22, r21, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000060: /* paddr=0x80000060 verbose=srli r15, r21, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000064: /* paddr=0x80000064 verbose=or r22, r22, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000068: /* paddr=0x80000068 verbose=srli r23, r22, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000006c: /* paddr=0x8000006c verbose=srli r15, r22, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000070: /* paddr=0x80000070 verbose=or r23, r23, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000074: /* paddr=0x80000074 verbose=srli r24, r23, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000078: /* paddr=0x80000078 verbose=srli r15, r23, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000007c: /* paddr=0x8000007c verbose=or r24, r24, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000080: /* paddr=0x80000080 verbose=srli r25, r24, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000084: /* paddr=0x80000084 verbose=srli r15, r24, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000088: /* paddr=0x80000088 verbose=or r25, r25, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000008c: /* paddr=0x8000008c verbose=srli r26, r25, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000090: /* paddr=0x80000090 verbose=srli r15, r25, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000094: /* paddr=0x80000094 verbose=or r26, r26, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000098: /* paddr=0x80000098 verbose=srli r27, r26, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000009c: /* paddr=0x8000009c verbose=srli r15, r26, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000a0: /* paddr=0x800000a0 verbose=or r27, r27, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000a4: /* paddr=0x800000a4 verbose=srli r28, r27, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000a8: /* paddr=0x800000a8 verbose=srli r15, r27, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000ac: /* paddr=0x800000ac verbose=or r28, r28, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000b0: /* paddr=0x800000b0 verbose=srli r29, r28, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000b4: /* paddr=0x800000b4 verbose=srli r15, r28, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000b8: /* paddr=0x800000b8 verbose=or r29, r29, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000bc: /* paddr=0x800000bc verbose=srli r30, r29, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000c0: /* paddr=0x800000c0 verbose=srli r15, r29, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000c4: /* paddr=0x800000c4 verbose=or r30, r30, r15 a_src=1=SRC_MEM a_offset_imm0=0xa00000f0 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000c8: /* paddr=0x800000c8 verbose=lui r1, 0xfeedc000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfeedc000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xfffffffffeedc000 */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, 0xfffffffffeedc000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000cc: /* paddr=0x800000cc verbose=addi r1, r1, 0xfffffead a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffead op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffead /* Add: c = c + b = a + b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000d0: /* paddr=0x800000d0 verbose=slli r1, r1, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000d4: /* paddr=0x800000d4 verbose=addi r1, r1, 0x7f7 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x7f7 op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x7f7 /* Add: c = c + b = a + b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000d8: /* paddr=0x800000d8 verbose=slli r1, r1, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000dc: /* paddr=0x800000dc verbose=addi r1, r1, 0x36f a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x36f op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x36f /* Add: c = c + b = a + b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000e0: /* paddr=0x800000e0 verbose=slli r1, r1, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000e4: /* paddr=0x800000e4 verbose=addi r1, r1, 0x2ad a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x2ad op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2ad /* Add: c = c + b = a + b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000e8: /* paddr=0x800000e8 verbose=srli r2, r1, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000ec: /* paddr=0x800000ec verbose=srli r15, r1, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000f0: /* paddr=0x800000f0 verbose=or r2, r2, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000f4: /* paddr=0x800000f4 verbose=srli r3, r2, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000f8: /* paddr=0x800000f8 verbose=srli r15, r2, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800000fc: /* paddr=0x800000fc verbose=or r3, r3, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000100: /* paddr=0x80000100 verbose=srli r4, r3, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000104: /* paddr=0x80000104 verbose=srli r15, r3, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000108: /* paddr=0x80000108 verbose=or r4, r4, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000010c: /* paddr=0x8000010c verbose=srli r5, r4, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000110: /* paddr=0x80000110 verbose=srli r15, r4, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000114: /* paddr=0x80000114 verbose=or r5, r5, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000118: /* paddr=0x80000118 verbose=srli r6, r5, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000011c: /* paddr=0x8000011c verbose=srli r15, r5, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000120: /* paddr=0x80000120 verbose=or r6, r6, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000124: /* paddr=0x80000124 verbose=srli r7, r6, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000128: /* paddr=0x80000128 verbose=srli r15, r6, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000012c: /* paddr=0x8000012c verbose=or r7, r7, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000130: /* paddr=0x80000130 verbose=srli r8, r7, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000134: /* paddr=0x80000134 verbose=srli r15, r7, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000138: /* paddr=0x80000138 verbose=or r8, r8, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000013c: /* paddr=0x8000013c verbose=srli r9, r8, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000140: /* paddr=0x80000140 verbose=srli r15, r8, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000144: /* paddr=0x80000144 verbose=or r9, r9, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000148: /* paddr=0x80000148 verbose=srli r10, r9, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000014c: /* paddr=0x8000014c verbose=srli r15, r9, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000150: /* paddr=0x80000150 verbose=or r10, r10, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000154: /* paddr=0x80000154 verbose=srli r11, r10, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000158: /* paddr=0x80000158 verbose=srli r15, r10, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000015c: /* paddr=0x8000015c verbose=or r11, r11, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000160: /* paddr=0x80000160 verbose=srli r12, r11, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000164: /* paddr=0x80000164 verbose=srli r15, r11, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000168: /* paddr=0x80000168 verbose=or r12, r12, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000016c: /* paddr=0x8000016c verbose=srli r13, r12, 0x7 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=2=SRC_IMM b_offset_imm0=0x7 op=50=srl store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x7 /* Srl: c = a >> b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000170: /* paddr=0x80000170 verbose=srli r15, r12, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=2=SRC_IMM b_offset_imm0=0x39 op=50=srl store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Srl: c = a */
	shr rcx, 0x39 /* Srl: c = a >> b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000174: /* paddr=0x80000174 verbose=or r13, r13, r15 a_src=1=SRC_MEM a_offset_imm0=0xa0000068 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=17=or store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000068 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Or: c = a */
	or rcx, rax /* Or: c = c OR b = a OR b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000178: /* paddr=0x80000178 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000017c: /* paddr=0x8000017c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000180: /* paddr=0x80000180 verbose=auipc r4, 0x20012000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000020 store_ra=true jmp_offset1=4 jmp_offset2=0x20012000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0012180 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000184: /* paddr=0x80000184 verbose=addi r4, r4, 0xffffff98 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffff98 op=12=add store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffff98 /* Add: c = c + b = a + b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000188: /* paddr=0x80000188 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000018c: /* paddr=0x8000018c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000190: /* paddr=0x80000190 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000194: /* paddr=0x80000194 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000198: /* paddr=0x80000198 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000019c: /* paddr=0x8000019c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001a0: /* paddr=0x800001a0 verbose=auipc r25, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000c8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800001a0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800001a4: /* paddr=0x800001a4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001a8: /* paddr=0x800001a8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001ac: /* paddr=0x800001ac verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001b0: /* paddr=0x800001b0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001b4: /* paddr=0x800001b4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001b8: /* paddr=0x800001b8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001bc: /* paddr=0x800001bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001c0: /* paddr=0x800001c0 verbose=auipc r25, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000c8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800001c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800001c4: /* paddr=0x800001c4 verbose=addi r25, r25, 0x2d a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=2=SRC_IMM b_offset_imm0=0x2d op=12=add store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2d /* Add: c = c + b = a + b */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001c8: /* paddr=0x800001c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001cc: /* paddr=0x800001cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001d0: /* paddr=0x800001d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001d4: /* paddr=0x800001d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001d8: /* paddr=0x800001d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001dc: /* paddr=0x800001dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001e0: /* paddr=0x800001e0 verbose=jalr r25, r25, 0x7 ; 1/2 a_src=2=SRC_IMM a_offset_imm0=0x7 b_src=1=SRC_MEM b_offset_imm0=0xa00000c8 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa00000c8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0x7 /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001e1: /* paddr=0x800001e1 verbose=jalr r25, r25, 0x7 ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa00000c8 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800001e4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800001e1_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800001e1_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800001e4: /* paddr=0x800001e4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001e8: /* paddr=0x800001e8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001ec: /* paddr=0x800001ec verbose=xori r25, r25, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001f0: /* paddr=0x800001f0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800001fc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800001f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800001f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800001f4: /* paddr=0x800001f4 verbose=xori r25, r25, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800001f8: /* paddr=0x800001f8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800001fc: /* paddr=0x800001fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000200: /* paddr=0x80000200 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000200 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000204: /* paddr=0x80000204 verbose=addi r8, r8, 0xffffffa0 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffa0 op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffa0 /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000208: /* paddr=0x80000208 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000020c: /* paddr=0x8000020c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000210: /* paddr=0x80000210 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000214: /* paddr=0x80000214 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000218: /* paddr=0x80000218 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000021c: /* paddr=0x8000021c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000220: /* paddr=0x80000220 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000224: /* paddr=0x80000224 verbose=sub r25, r25, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000c8 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000c8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000c8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000228: /* paddr=0x80000228 verbose=sd r25, 0x0(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000c8 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000c8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000022c: /* paddr=0x8000022c verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000022c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000230: /* paddr=0x80000230 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000234: /* paddr=0x80000234 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000238: /* paddr=0x80000238 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000023c: /* paddr=0x8000023c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000240: /* paddr=0x80000240 verbose=auipc r19, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000098 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000240 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000244: /* paddr=0x80000244 verbose=addi r19, r19, 0x3e a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=2=SRC_IMM b_offset_imm0=0x3e op=12=add store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x3e /* Add: c = c + b = a + b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000248: /* paddr=0x80000248 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000024c: /* paddr=0x8000024c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000250: /* paddr=0x80000250 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000254: /* paddr=0x80000254 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000258: /* paddr=0x80000258 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000025c: /* paddr=0x8000025c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000260: /* paddr=0x80000260 verbose=jalr r7, r19, 0xfffffff6 ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffff6 b_src=1=SRC_MEM b_offset_imm0=0xa0000098 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000098 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffff6 /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000261: /* paddr=0x80000261 verbose=jalr r7, r19, 0xfffffff6 ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000264 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000261_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000261_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000264: /* paddr=0x80000264 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000268: /* paddr=0x80000268 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000026c: /* paddr=0x8000026c verbose=xori r7, r7, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000270: /* paddr=0x80000270 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000027c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000270_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000270_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000274: /* paddr=0x80000274 verbose=xori r7, r7, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000278: /* paddr=0x80000278 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000027c: /* paddr=0x8000027c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000280: /* paddr=0x80000280 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000280 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000284: /* paddr=0x80000284 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000288: /* paddr=0x80000288 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000028c: /* paddr=0x8000028c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000290: /* paddr=0x80000290 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000294: /* paddr=0x80000294 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000298: /* paddr=0x80000298 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000029c: /* paddr=0x8000029c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002a0: /* paddr=0x800002a0 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002a4: /* paddr=0x800002a4 verbose=sub r7, r7, r8 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002a8: /* paddr=0x800002a8 verbose=sd r7, 0x8(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800002ac: /* paddr=0x800002ac verbose=auipc r21, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000a8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800002ac /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800002b0: /* paddr=0x800002b0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002b4: /* paddr=0x800002b4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002b8: /* paddr=0x800002b8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002bc: /* paddr=0x800002bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002c0: /* paddr=0x800002c0 verbose=auipc r2, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000010 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800002c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800002c4: /* paddr=0x800002c4 verbose=addi r2, r2, 0x33 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=2=SRC_IMM b_offset_imm0=0x33 op=12=add store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x33 /* Add: c = c + b = a + b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002c8: /* paddr=0x800002c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002cc: /* paddr=0x800002cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002d0: /* paddr=0x800002d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002d4: /* paddr=0x800002d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002d8: /* paddr=0x800002d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002dc: /* paddr=0x800002dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002e0: /* paddr=0x800002e0 verbose=jalr r21, r2, 0x1 ; 1/2 a_src=2=SRC_IMM a_offset_imm0=0x1 b_src=1=SRC_MEM b_offset_imm0=0xa0000010 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000010 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0x1 /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002e1: /* paddr=0x800002e1 verbose=jalr r21, r2, 0x1 ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa00000a8 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800002e4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800002e1_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800002e1_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800002e4: /* paddr=0x800002e4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002e8: /* paddr=0x800002e8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002ec: /* paddr=0x800002ec verbose=xori r21, r21, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002f0: /* paddr=0x800002f0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800002fc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800002f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800002f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800002f4: /* paddr=0x800002f4 verbose=xori r21, r21, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800002f8: /* paddr=0x800002f8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800002fc: /* paddr=0x800002fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000300: /* paddr=0x80000300 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000300 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000304: /* paddr=0x80000304 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000308: /* paddr=0x80000308 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000030c: /* paddr=0x8000030c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000310: /* paddr=0x80000310 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000314: /* paddr=0x80000314 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000318: /* paddr=0x80000318 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000031c: /* paddr=0x8000031c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000320: /* paddr=0x80000320 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000324: /* paddr=0x80000324 verbose=sub r21, r21, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000328: /* paddr=0x80000328 verbose=sd r21, 0x16(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000a8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x10 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000a8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x10 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000032c: /* paddr=0x8000032c verbose=auipc r23, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000b8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000032c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000330: /* paddr=0x80000330 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000334: /* paddr=0x80000334 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000338: /* paddr=0x80000338 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000033c: /* paddr=0x8000033c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000340: /* paddr=0x80000340 verbose=auipc r30, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000f0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000340 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000344: /* paddr=0x80000344 verbose=addi r30, r30, 0x32 a_src=1=SRC_MEM a_offset_imm0=0xa00000f0 b_src=2=SRC_IMM b_offset_imm0=0x32 op=12=add store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x32 /* Add: c = c + b = a + b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000348: /* paddr=0x80000348 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000034c: /* paddr=0x8000034c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000350: /* paddr=0x80000350 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000354: /* paddr=0x80000354 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000358: /* paddr=0x80000358 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000035c: /* paddr=0x8000035c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000360: /* paddr=0x80000360 verbose=jalr r23, r30, 0x2 ; 1/2 a_src=2=SRC_IMM a_offset_imm0=0x2 b_src=1=SRC_MEM b_offset_imm0=0xa00000f0 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa00000f0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0x2 /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000361: /* paddr=0x80000361 verbose=jalr r23, r30, 0x2 ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa00000b8 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000364 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000361_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000361_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000364: /* paddr=0x80000364 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000368: /* paddr=0x80000368 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000036c: /* paddr=0x8000036c verbose=xori r23, r23, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000370: /* paddr=0x80000370 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000037c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000370_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000370_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000374: /* paddr=0x80000374 verbose=xori r23, r23, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000378: /* paddr=0x80000378 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000037c: /* paddr=0x8000037c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000380: /* paddr=0x80000380 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000380 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000384: /* paddr=0x80000384 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000388: /* paddr=0x80000388 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000038c: /* paddr=0x8000038c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000390: /* paddr=0x80000390 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000394: /* paddr=0x80000394 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000398: /* paddr=0x80000398 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000039c: /* paddr=0x8000039c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003a0: /* paddr=0x800003a0 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003a4: /* paddr=0x800003a4 verbose=sub r23, r23, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003a8: /* paddr=0x800003a8 verbose=sd r23, 0x24(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000b8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x18 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000b8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x18 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800003ac: /* paddr=0x800003ac verbose=auipc r9, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000048 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800003ac /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800003b0: /* paddr=0x800003b0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003b4: /* paddr=0x800003b4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003b8: /* paddr=0x800003b8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003bc: /* paddr=0x800003bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003c0: /* paddr=0x800003c0 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800003c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800003c4: /* paddr=0x800003c4 verbose=addi r7, r7, 0x30 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x30 op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x30 /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003c8: /* paddr=0x800003c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003cc: /* paddr=0x800003cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003d0: /* paddr=0x800003d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003d4: /* paddr=0x800003d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003d8: /* paddr=0x800003d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003dc: /* paddr=0x800003dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003e0: /* paddr=0x800003e0 verbose=jalr r9, r7, 0x4 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=16=and store=1=STORE_MEM store_offset=0xa0000048 store_ra=true set_pc=true jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800003e4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x4 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800003e0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800003e0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800003e4: /* paddr=0x800003e4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003e8: /* paddr=0x800003e8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003ec: /* paddr=0x800003ec verbose=xori r9, r9, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003f0: /* paddr=0x800003f0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800003fc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800003f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800003f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800003f4: /* paddr=0x800003f4 verbose=xori r9, r9, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800003f8: /* paddr=0x800003f8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800003fc: /* paddr=0x800003fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000400: /* paddr=0x80000400 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000400 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000404: /* paddr=0x80000404 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000408: /* paddr=0x80000408 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000040c: /* paddr=0x8000040c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000410: /* paddr=0x80000410 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000414: /* paddr=0x80000414 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000418: /* paddr=0x80000418 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000041c: /* paddr=0x8000041c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000420: /* paddr=0x80000420 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000424: /* paddr=0x80000424 verbose=sub r9, r9, r8 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000428: /* paddr=0x80000428 verbose=sd r9, 0x32(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000048 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x20 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000048 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x20 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000042c: /* paddr=0x8000042c verbose=auipc r24, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000c0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000042c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000430: /* paddr=0x80000430 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000434: /* paddr=0x80000434 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000438: /* paddr=0x80000438 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000043c: /* paddr=0x8000043c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000440: /* paddr=0x80000440 verbose=auipc r14, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000070 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000440 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000444: /* paddr=0x80000444 verbose=addi r14, r14, 0x2c a_src=1=SRC_MEM a_offset_imm0=0xa0000070 b_src=2=SRC_IMM b_offset_imm0=0x2c op=12=add store=1=STORE_MEM store_offset=0xa0000070 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000070 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2c /* Add: c = c + b = a + b */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000448: /* paddr=0x80000448 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000044c: /* paddr=0x8000044c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000450: /* paddr=0x80000450 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000454: /* paddr=0x80000454 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000458: /* paddr=0x80000458 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000045c: /* paddr=0x8000045c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000460: /* paddr=0x80000460 verbose=jalr r24, r14, 0x8 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000070 op=16=and store=1=STORE_MEM store_offset=0xa00000c0 store_ra=true set_pc=true jmp_offset1=8 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000070 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000464 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x8 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000460_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000460_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000464: /* paddr=0x80000464 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000468: /* paddr=0x80000468 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000046c: /* paddr=0x8000046c verbose=xori r24, r24, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000470: /* paddr=0x80000470 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000047c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000470_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000470_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000474: /* paddr=0x80000474 verbose=xori r24, r24, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000478: /* paddr=0x80000478 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000047c: /* paddr=0x8000047c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000480: /* paddr=0x80000480 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000480 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000484: /* paddr=0x80000484 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000488: /* paddr=0x80000488 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000048c: /* paddr=0x8000048c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000490: /* paddr=0x80000490 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000494: /* paddr=0x80000494 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000498: /* paddr=0x80000498 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000049c: /* paddr=0x8000049c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004a0: /* paddr=0x800004a0 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004a4: /* paddr=0x800004a4 verbose=sub r24, r24, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004a8: /* paddr=0x800004a8 verbose=sd r24, 0x40(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000c0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x28 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000c0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x28 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800004ac: /* paddr=0x800004ac verbose=auipc r3, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000018 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800004ac /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800004b0: /* paddr=0x800004b0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004b4: /* paddr=0x800004b4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004b8: /* paddr=0x800004b8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004bc: /* paddr=0x800004bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004c0: /* paddr=0x800004c0 verbose=auipc r15, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000078 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800004c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800004c4: /* paddr=0x800004c4 verbose=addi r15, r15, 0x24 a_src=1=SRC_MEM a_offset_imm0=0xa0000078 b_src=2=SRC_IMM b_offset_imm0=0x24 op=12=add store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000078 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x24 /* Add: c = c + b = a + b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004c8: /* paddr=0x800004c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004cc: /* paddr=0x800004cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004d0: /* paddr=0x800004d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004d4: /* paddr=0x800004d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004d8: /* paddr=0x800004d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004dc: /* paddr=0x800004dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004e0: /* paddr=0x800004e0 verbose=jalr r3, r15, 0x10 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000078 op=16=and store=1=STORE_MEM store_offset=0xa0000018 store_ra=true set_pc=true jmp_offset1=10 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800004e4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x10 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800004e0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800004e0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800004e4: /* paddr=0x800004e4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004e8: /* paddr=0x800004e8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004ec: /* paddr=0x800004ec verbose=xori r3, r3, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004f0: /* paddr=0x800004f0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800004fc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800004f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800004f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800004f4: /* paddr=0x800004f4 verbose=xori r3, r3, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800004f8: /* paddr=0x800004f8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800004fc: /* paddr=0x800004fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000500: /* paddr=0x80000500 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000500 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000504: /* paddr=0x80000504 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000508: /* paddr=0x80000508 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000050c: /* paddr=0x8000050c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000510: /* paddr=0x80000510 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000514: /* paddr=0x80000514 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000518: /* paddr=0x80000518 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000051c: /* paddr=0x8000051c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000520: /* paddr=0x80000520 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000524: /* paddr=0x80000524 verbose=sub r3, r3, r8 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000528: /* paddr=0x80000528 verbose=sd r3, 0x48(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000018 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x30 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000018 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x30 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000052c: /* paddr=0x8000052c verbose=auipc r30, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000f0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000052c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000530: /* paddr=0x80000530 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000534: /* paddr=0x80000534 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000538: /* paddr=0x80000538 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000053c: /* paddr=0x8000053c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000540: /* paddr=0x80000540 verbose=auipc r11, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000058 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000540 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000544: /* paddr=0x80000544 verbose=addi r11, r11, 0x14 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM b_offset_imm0=0x14 op=12=add store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x14 /* Add: c = c + b = a + b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000548: /* paddr=0x80000548 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000054c: /* paddr=0x8000054c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000550: /* paddr=0x80000550 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000554: /* paddr=0x80000554 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000558: /* paddr=0x80000558 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000055c: /* paddr=0x8000055c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000560: /* paddr=0x80000560 verbose=jalr r30, r11, 0x20 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000058 op=16=and store=1=STORE_MEM store_offset=0xa00000f0 store_ra=true set_pc=true jmp_offset1=20 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000564 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x20 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000560_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000560_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000564: /* paddr=0x80000564 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000568: /* paddr=0x80000568 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000056c: /* paddr=0x8000056c verbose=xori r30, r30, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000f0 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000570: /* paddr=0x80000570 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000057c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000570_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000570_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000574: /* paddr=0x80000574 verbose=xori r30, r30, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000f0 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000578: /* paddr=0x80000578 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000057c: /* paddr=0x8000057c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000580: /* paddr=0x80000580 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000580 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000584: /* paddr=0x80000584 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000588: /* paddr=0x80000588 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000058c: /* paddr=0x8000058c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000590: /* paddr=0x80000590 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000594: /* paddr=0x80000594 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000598: /* paddr=0x80000598 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000059c: /* paddr=0x8000059c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005a0: /* paddr=0x800005a0 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005a4: /* paddr=0x800005a4 verbose=sub r30, r30, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000f0 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000f0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000f0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005a8: /* paddr=0x800005a8 verbose=sd r30, 0x56(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000f0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x38 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000f0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x38 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800005ac: /* paddr=0x800005ac verbose=auipc r31, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000f8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800005ac /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800005b0: /* paddr=0x800005b0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005b4: /* paddr=0x800005b4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005b8: /* paddr=0x800005b8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005bc: /* paddr=0x800005bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005c0: /* paddr=0x800005c0 verbose=auipc r29, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000e8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800005c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800005c4: /* paddr=0x800005c4 verbose=addi r29, r29, 0xfffffff4 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffff4 op=12=add store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffff4 /* Add: c = c + b = a + b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005c8: /* paddr=0x800005c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005cc: /* paddr=0x800005cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005d0: /* paddr=0x800005d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005d4: /* paddr=0x800005d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005d8: /* paddr=0x800005d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005dc: /* paddr=0x800005dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005e0: /* paddr=0x800005e0 verbose=jalr r31, r29, 0x40 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa00000e8 op=16=and store=1=STORE_MEM store_offset=0xa00000f8 store_ra=true set_pc=true jmp_offset1=40 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800005e4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x40 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800005e0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800005e0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800005e4: /* paddr=0x800005e4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005e8: /* paddr=0x800005e8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005ec: /* paddr=0x800005ec verbose=xori r31, r31, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000f8 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000f8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005f0: /* paddr=0x800005f0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800005fc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800005f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800005f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800005f4: /* paddr=0x800005f4 verbose=xori r31, r31, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000f8 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000f8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800005f8: /* paddr=0x800005f8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800005fc: /* paddr=0x800005fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000600: /* paddr=0x80000600 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000600 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000604: /* paddr=0x80000604 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000608: /* paddr=0x80000608 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000060c: /* paddr=0x8000060c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000610: /* paddr=0x80000610 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000614: /* paddr=0x80000614 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000618: /* paddr=0x80000618 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000061c: /* paddr=0x8000061c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000620: /* paddr=0x80000620 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000624: /* paddr=0x80000624 verbose=sub r31, r31, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000f8 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000f8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000628: /* paddr=0x80000628 verbose=sd r31, 0x64(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000f8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x40 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000f8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x40 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000062c: /* paddr=0x8000062c verbose=auipc r16, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000080 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000062c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000630: /* paddr=0x80000630 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000634: /* paddr=0x80000634 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000638: /* paddr=0x80000638 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000063c: /* paddr=0x8000063c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000640: /* paddr=0x80000640 verbose=auipc r5, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000028 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000640 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000644: /* paddr=0x80000644 verbose=addi r5, r5, 0xffffffb4 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffb4 op=12=add store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffb4 /* Add: c = c + b = a + b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000648: /* paddr=0x80000648 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000064c: /* paddr=0x8000064c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000650: /* paddr=0x80000650 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000654: /* paddr=0x80000654 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000658: /* paddr=0x80000658 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000065c: /* paddr=0x8000065c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000660: /* paddr=0x80000660 verbose=jalr r16, r5, 0x80 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000028 op=16=and store=1=STORE_MEM store_offset=0xa0000080 store_ra=true set_pc=true jmp_offset1=80 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000664 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x80 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000660_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000660_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000664: /* paddr=0x80000664 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000668: /* paddr=0x80000668 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000066c: /* paddr=0x8000066c verbose=xori r16, r16, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000670: /* paddr=0x80000670 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000067c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000670_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000670_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000674: /* paddr=0x80000674 verbose=xori r16, r16, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000678: /* paddr=0x80000678 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000067c: /* paddr=0x8000067c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000680: /* paddr=0x80000680 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000680 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000684: /* paddr=0x80000684 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000688: /* paddr=0x80000688 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000068c: /* paddr=0x8000068c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000690: /* paddr=0x80000690 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000694: /* paddr=0x80000694 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000698: /* paddr=0x80000698 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000069c: /* paddr=0x8000069c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006a0: /* paddr=0x800006a0 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006a4: /* paddr=0x800006a4 verbose=sub r16, r16, r8 a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006a8: /* paddr=0x800006a8 verbose=sd r16, 0x72(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000080 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x48 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000080 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x48 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800006ac: /* paddr=0x800006ac verbose=auipc r29, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000e8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800006ac /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800006b0: /* paddr=0x800006b0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006b4: /* paddr=0x800006b4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006b8: /* paddr=0x800006b8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006bc: /* paddr=0x800006bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006c0: /* paddr=0x800006c0 verbose=auipc r28, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000e0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800006c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800006c4: /* paddr=0x800006c4 verbose=addi r28, r28, 0xffffff34 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffff34 op=12=add store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffff34 /* Add: c = c + b = a + b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006c8: /* paddr=0x800006c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006cc: /* paddr=0x800006cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006d0: /* paddr=0x800006d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006d4: /* paddr=0x800006d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006d8: /* paddr=0x800006d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006dc: /* paddr=0x800006dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006e0: /* paddr=0x800006e0 verbose=jalr r29, r28, 0x100 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa00000e0 op=16=and store=1=STORE_MEM store_offset=0xa00000e8 store_ra=true set_pc=true jmp_offset1=100 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800006e4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x100 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800006e0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800006e0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800006e4: /* paddr=0x800006e4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006e8: /* paddr=0x800006e8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006ec: /* paddr=0x800006ec verbose=xori r29, r29, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006f0: /* paddr=0x800006f0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800006fc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800006f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800006f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800006f4: /* paddr=0x800006f4 verbose=xori r29, r29, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800006f8: /* paddr=0x800006f8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800006fc: /* paddr=0x800006fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000700: /* paddr=0x80000700 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000700 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000704: /* paddr=0x80000704 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000708: /* paddr=0x80000708 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000070c: /* paddr=0x8000070c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000710: /* paddr=0x80000710 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000714: /* paddr=0x80000714 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000718: /* paddr=0x80000718 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000071c: /* paddr=0x8000071c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000720: /* paddr=0x80000720 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000724: /* paddr=0x80000724 verbose=sub r29, r29, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000e8 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000728: /* paddr=0x80000728 verbose=sd r29, 0x80(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000e8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x50 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x50 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000072c: /* paddr=0x8000072c verbose=auipc r20, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000a0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000072c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000730: /* paddr=0x80000730 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000734: /* paddr=0x80000734 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000738: /* paddr=0x80000738 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000073c: /* paddr=0x8000073c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000740: /* paddr=0x80000740 verbose=auipc r12, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000060 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000740 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000744: /* paddr=0x80000744 verbose=addi r12, r12, 0xfffffe34 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffe34 op=12=add store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffe34 /* Add: c = c + b = a + b */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000748: /* paddr=0x80000748 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000074c: /* paddr=0x8000074c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000750: /* paddr=0x80000750 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000754: /* paddr=0x80000754 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000758: /* paddr=0x80000758 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000075c: /* paddr=0x8000075c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000760: /* paddr=0x80000760 verbose=jalr r20, r12, 0x200 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000060 op=16=and store=1=STORE_MEM store_offset=0xa00000a0 store_ra=true set_pc=true jmp_offset1=200 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000764 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x200 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000760_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000760_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000764: /* paddr=0x80000764 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000768: /* paddr=0x80000768 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000076c: /* paddr=0x8000076c verbose=xori r20, r20, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000770: /* paddr=0x80000770 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000077c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000770_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000770_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000774: /* paddr=0x80000774 verbose=xori r20, r20, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000778: /* paddr=0x80000778 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000077c: /* paddr=0x8000077c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000780: /* paddr=0x80000780 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000780 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000784: /* paddr=0x80000784 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000788: /* paddr=0x80000788 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000078c: /* paddr=0x8000078c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000790: /* paddr=0x80000790 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000794: /* paddr=0x80000794 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000798: /* paddr=0x80000798 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000079c: /* paddr=0x8000079c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007a0: /* paddr=0x800007a0 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007a4: /* paddr=0x800007a4 verbose=sub r20, r20, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007a8: /* paddr=0x800007a8 verbose=sd r20, 0x88(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000a0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x58 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000a0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x58 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800007ac: /* paddr=0x800007ac verbose=auipc r22, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000b0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800007ac /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800007b0: /* paddr=0x800007b0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007b4: /* paddr=0x800007b4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007b8: /* paddr=0x800007b8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007bc: /* paddr=0x800007bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007c0: /* paddr=0x800007c0 verbose=auipc r9, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000048 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800007c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800007c4: /* paddr=0x800007c4 verbose=addi r9, r9, 0xfffffc34 a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffc34 op=12=add store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffc34 /* Add: c = c + b = a + b */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007c8: /* paddr=0x800007c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007cc: /* paddr=0x800007cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007d0: /* paddr=0x800007d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007d4: /* paddr=0x800007d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007d8: /* paddr=0x800007d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007dc: /* paddr=0x800007dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007e0: /* paddr=0x800007e0 verbose=jalr r22, r9, 0x400 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000048 op=16=and store=1=STORE_MEM store_offset=0xa00000b0 store_ra=true set_pc=true jmp_offset1=400 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000048 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800007e4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x400 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800007e0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800007e0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800007e4: /* paddr=0x800007e4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007e8: /* paddr=0x800007e8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007ec: /* paddr=0x800007ec verbose=xori r22, r22, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007f0: /* paddr=0x800007f0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800007fc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800007f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800007f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800007f4: /* paddr=0x800007f4 verbose=xori r22, r22, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800007f8: /* paddr=0x800007f8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800007fc: /* paddr=0x800007fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000800: /* paddr=0x80000800 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000800 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000804: /* paddr=0x80000804 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000808: /* paddr=0x80000808 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000080c: /* paddr=0x8000080c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000810: /* paddr=0x80000810 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000814: /* paddr=0x80000814 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000818: /* paddr=0x80000818 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000081c: /* paddr=0x8000081c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000820: /* paddr=0x80000820 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000824: /* paddr=0x80000824 verbose=sub r22, r22, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000828: /* paddr=0x80000828 verbose=sd r22, 0x96(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000b0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x60 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000b0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x60 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000082c: /* paddr=0x8000082c verbose=auipc r6, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000030 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000082c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000830: /* paddr=0x80000830 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000834: /* paddr=0x80000834 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000838: /* paddr=0x80000838 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000083c: /* paddr=0x8000083c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000840: /* paddr=0x80000840 verbose=auipc r13, 0x1000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000068 store_ra=true jmp_offset1=4 jmp_offset2=0x1000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80001840 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000844: /* paddr=0x80000844 verbose=addi r13, r13, 0xfffff834 a_src=1=SRC_MEM a_offset_imm0=0xa0000068 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffff834 op=12=add store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000068 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffff834 /* Add: c = c + b = a + b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000848: /* paddr=0x80000848 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000084c: /* paddr=0x8000084c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000850: /* paddr=0x80000850 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000854: /* paddr=0x80000854 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000858: /* paddr=0x80000858 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000085c: /* paddr=0x8000085c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000860: /* paddr=0x80000860 verbose=jalr r6, r13, 0xfffff800 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000068 op=16=and store=1=STORE_MEM store_offset=0xa0000030 store_ra=true set_pc=true jmp_offset1=fffffffffffff800 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000068 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000864 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0xfffffffffffff800 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000860_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000860_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000864: /* paddr=0x80000864 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000868: /* paddr=0x80000868 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000086c: /* paddr=0x8000086c verbose=xori r6, r6, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000870: /* paddr=0x80000870 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000087c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000870_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000870_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000874: /* paddr=0x80000874 verbose=xori r6, r6, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000878: /* paddr=0x80000878 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000087c: /* paddr=0x8000087c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000880: /* paddr=0x80000880 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000880 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000884: /* paddr=0x80000884 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000888: /* paddr=0x80000888 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000088c: /* paddr=0x8000088c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000890: /* paddr=0x80000890 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000894: /* paddr=0x80000894 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000898: /* paddr=0x80000898 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000089c: /* paddr=0x8000089c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008a0: /* paddr=0x800008a0 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008a4: /* paddr=0x800008a4 verbose=sub r6, r6, r8 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008a8: /* paddr=0x800008a8 verbose=sd r6, 0x104(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x68 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x68 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800008ac: /* paddr=0x800008ac verbose=auipc r19, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000098 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800008ac /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800008b0: /* paddr=0x800008b0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008b4: /* paddr=0x800008b4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008b8: /* paddr=0x800008b8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008bc: /* paddr=0x800008bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008c0: /* paddr=0x800008c0 verbose=auipc r27, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000d8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800008c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800008c4: /* paddr=0x800008c4 verbose=addi r27, r27, 0x36 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=2=SRC_IMM b_offset_imm0=0x36 op=12=add store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x36 /* Add: c = c + b = a + b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008c8: /* paddr=0x800008c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008cc: /* paddr=0x800008cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008d0: /* paddr=0x800008d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008d4: /* paddr=0x800008d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008d8: /* paddr=0x800008d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008dc: /* paddr=0x800008dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008e0: /* paddr=0x800008e0 verbose=jalr r19, r27, 0xfffffffe ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffe b_src=1=SRC_MEM b_offset_imm0=0xa00000d8 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa00000d8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffe /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008e1: /* paddr=0x800008e1 verbose=jalr r19, r27, 0xfffffffe ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000098 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800008e4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800008e1_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800008e1_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800008e4: /* paddr=0x800008e4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008e8: /* paddr=0x800008e8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008ec: /* paddr=0x800008ec verbose=xori r19, r19, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008f0: /* paddr=0x800008f0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800008fc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800008f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800008f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800008f4: /* paddr=0x800008f4 verbose=xori r19, r19, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800008f8: /* paddr=0x800008f8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800008fc: /* paddr=0x800008fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000900: /* paddr=0x80000900 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000900 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000904: /* paddr=0x80000904 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000908: /* paddr=0x80000908 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000090c: /* paddr=0x8000090c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000910: /* paddr=0x80000910 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000914: /* paddr=0x80000914 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000918: /* paddr=0x80000918 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000091c: /* paddr=0x8000091c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000920: /* paddr=0x80000920 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000924: /* paddr=0x80000924 verbose=sub r19, r19, r8 a_src=1=SRC_MEM a_offset_imm0=0xa0000098 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa0000098 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000098 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000098/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000928: /* paddr=0x80000928 verbose=sd r19, 0x112(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000098 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x70 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000098 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x70 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000092c: /* paddr=0x8000092c verbose=auipc r17, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000088 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000092c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000930: /* paddr=0x80000930 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000934: /* paddr=0x80000934 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000938: /* paddr=0x80000938 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000093c: /* paddr=0x8000093c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000940: /* paddr=0x80000940 verbose=auipc r6, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000030 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000940 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000944: /* paddr=0x80000944 verbose=addi r6, r6, 0x37 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x37 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x37 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000948: /* paddr=0x80000948 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000094c: /* paddr=0x8000094c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000950: /* paddr=0x80000950 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000954: /* paddr=0x80000954 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000958: /* paddr=0x80000958 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000095c: /* paddr=0x8000095c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000960: /* paddr=0x80000960 verbose=jalr r17, r6, 0xfffffffd ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffd b_src=1=SRC_MEM b_offset_imm0=0xa0000030 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffd /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000961: /* paddr=0x80000961 verbose=jalr r17, r6, 0xfffffffd ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000088 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000964 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000961_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000961_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000964: /* paddr=0x80000964 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000968: /* paddr=0x80000968 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000096c: /* paddr=0x8000096c verbose=xori r17, r17, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000970: /* paddr=0x80000970 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000097c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000970_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000970_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000974: /* paddr=0x80000974 verbose=xori r17, r17, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000978: /* paddr=0x80000978 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000097c: /* paddr=0x8000097c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000980: /* paddr=0x80000980 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000980 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000984: /* paddr=0x80000984 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000988: /* paddr=0x80000988 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000098c: /* paddr=0x8000098c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000990: /* paddr=0x80000990 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000994: /* paddr=0x80000994 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000998: /* paddr=0x80000998 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000099c: /* paddr=0x8000099c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009a0: /* paddr=0x800009a0 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009a4: /* paddr=0x800009a4 verbose=sub r17, r17, r8 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009a8: /* paddr=0x800009a8 verbose=sd r17, 0x120(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000088 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x78 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000088 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x78 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800009ac: /* paddr=0x800009ac verbose=auipc r26, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000d0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800009ac /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800009b0: /* paddr=0x800009b0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009b4: /* paddr=0x800009b4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009b8: /* paddr=0x800009b8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009bc: /* paddr=0x800009bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009c0: /* paddr=0x800009c0 verbose=auipc r1, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000008 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800009c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800009c4: /* paddr=0x800009c4 verbose=addi r1, r1, 0x39 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x39 op=12=add store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x39 /* Add: c = c + b = a + b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009c8: /* paddr=0x800009c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009cc: /* paddr=0x800009cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009d0: /* paddr=0x800009d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009d4: /* paddr=0x800009d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009d8: /* paddr=0x800009d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009dc: /* paddr=0x800009dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009e0: /* paddr=0x800009e0 verbose=jalr r26, r1, 0xfffffffb ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffb b_src=1=SRC_MEM b_offset_imm0=0xa0000008 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000008 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffb /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009e1: /* paddr=0x800009e1 verbose=jalr r26, r1, 0xfffffffb ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa00000d0 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800009e4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800009e1_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800009e1_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800009e4: /* paddr=0x800009e4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009e8: /* paddr=0x800009e8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009ec: /* paddr=0x800009ec verbose=xori r26, r26, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009f0: /* paddr=0x800009f0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800009fc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800009f0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800009f0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800009f4: /* paddr=0x800009f4 verbose=xori r26, r26, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800009f8: /* paddr=0x800009f8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800009fc: /* paddr=0x800009fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a00: /* paddr=0x80000a00 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000a00 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000a04: /* paddr=0x80000a04 verbose=addi r8, r8, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a08: /* paddr=0x80000a08 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a0c: /* paddr=0x80000a0c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a10: /* paddr=0x80000a10 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a14: /* paddr=0x80000a14 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a18: /* paddr=0x80000a18 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a1c: /* paddr=0x80000a1c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a20: /* paddr=0x80000a20 verbose=andi r8, r8, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a24: /* paddr=0x80000a24 verbose=sub r26, r26, r8 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=13=sub store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a28: /* paddr=0x80000a28 verbose=sd r26, 0x128(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa00000d0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x80 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000d0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x80 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a2c: /* paddr=0x80000a2c verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000a2c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000a30: /* paddr=0x80000a30 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a34: /* paddr=0x80000a34 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a38: /* paddr=0x80000a38 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a3c: /* paddr=0x80000a3c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a40: /* paddr=0x80000a40 verbose=auipc r10, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000050 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000a40 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000a44: /* paddr=0x80000a44 verbose=addi r10, r10, 0x3d a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3d op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x3d /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a48: /* paddr=0x80000a48 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a4c: /* paddr=0x80000a4c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a50: /* paddr=0x80000a50 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a54: /* paddr=0x80000a54 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a58: /* paddr=0x80000a58 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a5c: /* paddr=0x80000a5c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a60: /* paddr=0x80000a60 verbose=jalr r8, r10, 0xfffffff7 ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffff7 b_src=1=SRC_MEM b_offset_imm0=0xa0000050 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000050 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffff7 /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a61: /* paddr=0x80000a61 verbose=jalr r8, r10, 0xfffffff7 ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000040 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000a64 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000a61_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000a61_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000a64: /* paddr=0x80000a64 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a68: /* paddr=0x80000a68 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a6c: /* paddr=0x80000a6c verbose=xori r8, r8, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a70: /* paddr=0x80000a70 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000a7c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000a70_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000a70_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000a74: /* paddr=0x80000a74 verbose=xori r8, r8, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a78: /* paddr=0x80000a78 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a7c: /* paddr=0x80000a7c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a80: /* paddr=0x80000a80 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000a80 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000a84: /* paddr=0x80000a84 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000a88: /* paddr=0x80000a88 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a8c: /* paddr=0x80000a8c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a90: /* paddr=0x80000a90 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a94: /* paddr=0x80000a94 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a98: /* paddr=0x80000a98 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000a9c: /* paddr=0x80000a9c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000aa0: /* paddr=0x80000aa0 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000aa4: /* paddr=0x80000aa4 verbose=sub r8, r8, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000aa8: /* paddr=0x80000aa8 verbose=sd r8, 0x136(r4) a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000040 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x88 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x88 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000aac: /* paddr=0x80000aac verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ab0: /* paddr=0x80000ab0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ab4: /* paddr=0x80000ab4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ab8: /* paddr=0x80000ab8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000abc: /* paddr=0x80000abc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ac0: /* paddr=0x80000ac0 verbose=auipc r6, 0x20011000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000030 store_ra=true jmp_offset1=4 jmp_offset2=0x20011000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0011ac0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000ac4: /* paddr=0x80000ac4 verbose=addi r6, r6, 0x6e8 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x6e8 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x6e8 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ac8: /* paddr=0x80000ac8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000acc: /* paddr=0x80000acc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ad0: /* paddr=0x80000ad0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ad4: /* paddr=0x80000ad4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ad8: /* paddr=0x80000ad8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000adc: /* paddr=0x80000adc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ae0: /* paddr=0x80000ae0 verbose=auipc r13, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000068 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000ae0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000ae4: /* paddr=0x80000ae4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ae8: /* paddr=0x80000ae8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000aec: /* paddr=0x80000aec verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000af0: /* paddr=0x80000af0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000af4: /* paddr=0x80000af4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000af8: /* paddr=0x80000af8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000afc: /* paddr=0x80000afc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b00: /* paddr=0x80000b00 verbose=auipc r23, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000b8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000b00 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000b04: /* paddr=0x80000b04 verbose=addi r23, r23, 0x45 a_src=1=SRC_MEM a_offset_imm0=0xa00000b8 b_src=2=SRC_IMM b_offset_imm0=0x45 op=12=add store=1=STORE_MEM store_offset=0xa00000b8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x45 /* Add: c = c + b = a + b */
	mov r13, 0xa00000b8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b08: /* paddr=0x80000b08 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b0c: /* paddr=0x80000b0c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b10: /* paddr=0x80000b10 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b14: /* paddr=0x80000b14 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b18: /* paddr=0x80000b18 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b1c: /* paddr=0x80000b1c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b20: /* paddr=0x80000b20 verbose=jalr r13, r23, 0xffffffef ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xffffffef b_src=1=SRC_MEM b_offset_imm0=0xa00000b8 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa00000b8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xffffffffffffffef /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b21: /* paddr=0x80000b21 verbose=jalr r13, r23, 0xffffffef ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000068 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000b24 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000b21_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000b21_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000b24: /* paddr=0x80000b24 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b28: /* paddr=0x80000b28 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b2c: /* paddr=0x80000b2c verbose=xori r13, r13, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000068 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000068 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b30: /* paddr=0x80000b30 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000b3c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000b30_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000b30_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000b34: /* paddr=0x80000b34 verbose=xori r13, r13, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000068 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000068 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b38: /* paddr=0x80000b38 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b3c: /* paddr=0x80000b3c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b40: /* paddr=0x80000b40 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000b40 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000b44: /* paddr=0x80000b44 verbose=addi r7, r7, 0xffffffa0 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffa0 op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffa0 /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b48: /* paddr=0x80000b48 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b4c: /* paddr=0x80000b4c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b50: /* paddr=0x80000b50 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b54: /* paddr=0x80000b54 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b58: /* paddr=0x80000b58 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b5c: /* paddr=0x80000b5c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b60: /* paddr=0x80000b60 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b64: /* paddr=0x80000b64 verbose=sub r13, r13, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000068 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000068 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000068 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000068/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b68: /* paddr=0x80000b68 verbose=sd r13, 0x0(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000068 ind_width=8 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000068 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b6c: /* paddr=0x80000b6c verbose=auipc r15, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000078 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000b6c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000b70: /* paddr=0x80000b70 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b74: /* paddr=0x80000b74 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b78: /* paddr=0x80000b78 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b7c: /* paddr=0x80000b7c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b80: /* paddr=0x80000b80 verbose=auipc r22, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000b0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000b80 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000b84: /* paddr=0x80000b84 verbose=addi r22, r22, 0x55 a_src=1=SRC_MEM a_offset_imm0=0xa00000b0 b_src=2=SRC_IMM b_offset_imm0=0x55 op=12=add store=1=STORE_MEM store_offset=0xa00000b0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000b0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x55 /* Add: c = c + b = a + b */
	mov r13, 0xa00000b0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000b88: /* paddr=0x80000b88 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b8c: /* paddr=0x80000b8c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b90: /* paddr=0x80000b90 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b94: /* paddr=0x80000b94 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b98: /* paddr=0x80000b98 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000b9c: /* paddr=0x80000b9c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ba0: /* paddr=0x80000ba0 verbose=jalr r15, r22, 0xffffffdf ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xffffffdf b_src=1=SRC_MEM b_offset_imm0=0xa00000b0 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa00000b0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xffffffffffffffdf /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ba1: /* paddr=0x80000ba1 verbose=jalr r15, r22, 0xffffffdf ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000078 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000ba4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000ba1_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000ba1_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000ba4: /* paddr=0x80000ba4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ba8: /* paddr=0x80000ba8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bac: /* paddr=0x80000bac verbose=xori r15, r15, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000078 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000078 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bb0: /* paddr=0x80000bb0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000bbc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000bb0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000bb0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000bb4: /* paddr=0x80000bb4 verbose=xori r15, r15, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000078 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000078 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bb8: /* paddr=0x80000bb8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bbc: /* paddr=0x80000bbc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bc0: /* paddr=0x80000bc0 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000bc0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000bc4: /* paddr=0x80000bc4 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bc8: /* paddr=0x80000bc8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bcc: /* paddr=0x80000bcc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bd0: /* paddr=0x80000bd0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bd4: /* paddr=0x80000bd4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bd8: /* paddr=0x80000bd8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bdc: /* paddr=0x80000bdc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000be0: /* paddr=0x80000be0 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000be4: /* paddr=0x80000be4 verbose=sub r15, r15, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000078 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000078 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000078 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000078/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000be8: /* paddr=0x80000be8 verbose=sd r15, 0x8(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000078 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x8 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000078 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x8 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000bec: /* paddr=0x80000bec verbose=auipc r11, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000058 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000bec /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000bf0: /* paddr=0x80000bf0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bf4: /* paddr=0x80000bf4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bf8: /* paddr=0x80000bf8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000bfc: /* paddr=0x80000bfc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c00: /* paddr=0x80000c00 verbose=auipc r3, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000018 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000c00 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000c04: /* paddr=0x80000c04 verbose=addi r3, r3, 0x75 a_src=1=SRC_MEM a_offset_imm0=0xa0000018 b_src=2=SRC_IMM b_offset_imm0=0x75 op=12=add store=1=STORE_MEM store_offset=0xa0000018 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000018 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x75 /* Add: c = c + b = a + b */
	mov r13, 0xa0000018/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c08: /* paddr=0x80000c08 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c0c: /* paddr=0x80000c0c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c10: /* paddr=0x80000c10 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c14: /* paddr=0x80000c14 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c18: /* paddr=0x80000c18 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c1c: /* paddr=0x80000c1c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c20: /* paddr=0x80000c20 verbose=jalr r11, r3, 0xffffffbf ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xffffffbf b_src=1=SRC_MEM b_offset_imm0=0xa0000018 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000018 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xffffffffffffffbf /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c21: /* paddr=0x80000c21 verbose=jalr r11, r3, 0xffffffbf ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000058 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000c24 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000c21_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000c21_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000c24: /* paddr=0x80000c24 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c28: /* paddr=0x80000c28 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c2c: /* paddr=0x80000c2c verbose=xori r11, r11, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c30: /* paddr=0x80000c30 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000c3c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000c30_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000c30_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000c34: /* paddr=0x80000c34 verbose=xori r11, r11, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c38: /* paddr=0x80000c38 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c3c: /* paddr=0x80000c3c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c40: /* paddr=0x80000c40 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000c40 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000c44: /* paddr=0x80000c44 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c48: /* paddr=0x80000c48 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c4c: /* paddr=0x80000c4c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c50: /* paddr=0x80000c50 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c54: /* paddr=0x80000c54 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c58: /* paddr=0x80000c58 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c5c: /* paddr=0x80000c5c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c60: /* paddr=0x80000c60 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c64: /* paddr=0x80000c64 verbose=sub r11, r11, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c68: /* paddr=0x80000c68 verbose=sd r11, 0x16(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x10 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x10 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c6c: /* paddr=0x80000c6c verbose=auipc r28, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000e0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000c6c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000c70: /* paddr=0x80000c70 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c74: /* paddr=0x80000c74 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c78: /* paddr=0x80000c78 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c7c: /* paddr=0x80000c7c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c80: /* paddr=0x80000c80 verbose=auipc r31, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000f8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000c80 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000c84: /* paddr=0x80000c84 verbose=addi r31, r31, 0xb5 a_src=1=SRC_MEM a_offset_imm0=0xa00000f8 b_src=2=SRC_IMM b_offset_imm0=0xb5 op=12=add store=1=STORE_MEM store_offset=0xa00000f8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000f8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xb5 /* Add: c = c + b = a + b */
	mov r13, 0xa00000f8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000c88: /* paddr=0x80000c88 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c8c: /* paddr=0x80000c8c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c90: /* paddr=0x80000c90 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c94: /* paddr=0x80000c94 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c98: /* paddr=0x80000c98 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000c9c: /* paddr=0x80000c9c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ca0: /* paddr=0x80000ca0 verbose=jalr r28, r31, 0xffffff7f ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xffffff7f b_src=1=SRC_MEM b_offset_imm0=0xa00000f8 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa00000f8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xffffffffffffff7f /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ca1: /* paddr=0x80000ca1 verbose=jalr r28, r31, 0xffffff7f ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa00000e0 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000ca4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000ca1_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000ca1_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000ca4: /* paddr=0x80000ca4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ca8: /* paddr=0x80000ca8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cac: /* paddr=0x80000cac verbose=xori r28, r28, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cb0: /* paddr=0x80000cb0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000cbc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000cb0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000cb0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000cb4: /* paddr=0x80000cb4 verbose=xori r28, r28, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cb8: /* paddr=0x80000cb8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cbc: /* paddr=0x80000cbc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cc0: /* paddr=0x80000cc0 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000cc0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000cc4: /* paddr=0x80000cc4 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cc8: /* paddr=0x80000cc8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ccc: /* paddr=0x80000ccc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cd0: /* paddr=0x80000cd0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cd4: /* paddr=0x80000cd4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cd8: /* paddr=0x80000cd8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cdc: /* paddr=0x80000cdc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ce0: /* paddr=0x80000ce0 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ce4: /* paddr=0x80000ce4 verbose=sub r28, r28, r7 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ce8: /* paddr=0x80000ce8 verbose=sd r28, 0x24(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa00000e0 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x18 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x18 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000cec: /* paddr=0x80000cec verbose=auipc r14, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000070 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000cec /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000cf0: /* paddr=0x80000cf0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cf4: /* paddr=0x80000cf4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cf8: /* paddr=0x80000cf8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000cfc: /* paddr=0x80000cfc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d00: /* paddr=0x80000d00 verbose=auipc r24, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000c0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000d00 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000d04: /* paddr=0x80000d04 verbose=addi r24, r24, 0x135 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=2=SRC_IMM b_offset_imm0=0x135 op=12=add store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x135 /* Add: c = c + b = a + b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d08: /* paddr=0x80000d08 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d0c: /* paddr=0x80000d0c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d10: /* paddr=0x80000d10 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d14: /* paddr=0x80000d14 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d18: /* paddr=0x80000d18 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d1c: /* paddr=0x80000d1c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d20: /* paddr=0x80000d20 verbose=jalr r14, r24, 0xfffffeff ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffeff b_src=1=SRC_MEM b_offset_imm0=0xa00000c0 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa00000c0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffeff /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d21: /* paddr=0x80000d21 verbose=jalr r14, r24, 0xfffffeff ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000070 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000d24 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000d21_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000d21_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000d24: /* paddr=0x80000d24 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d28: /* paddr=0x80000d28 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d2c: /* paddr=0x80000d2c verbose=xori r14, r14, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000070 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000070 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000070 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d30: /* paddr=0x80000d30 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000d3c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000d30_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000d30_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000d34: /* paddr=0x80000d34 verbose=xori r14, r14, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000070 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000070 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000070 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d38: /* paddr=0x80000d38 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d3c: /* paddr=0x80000d3c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d40: /* paddr=0x80000d40 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000d40 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000d44: /* paddr=0x80000d44 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d48: /* paddr=0x80000d48 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d4c: /* paddr=0x80000d4c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d50: /* paddr=0x80000d50 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d54: /* paddr=0x80000d54 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d58: /* paddr=0x80000d58 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d5c: /* paddr=0x80000d5c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d60: /* paddr=0x80000d60 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d64: /* paddr=0x80000d64 verbose=sub r14, r14, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000070 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000070 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000070 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000070/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d68: /* paddr=0x80000d68 verbose=sd r14, 0x32(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000070 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x20 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000070 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x20 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d6c: /* paddr=0x80000d6c verbose=auipc r12, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000060 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000d6c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000d70: /* paddr=0x80000d70 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d74: /* paddr=0x80000d74 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d78: /* paddr=0x80000d78 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d7c: /* paddr=0x80000d7c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d80: /* paddr=0x80000d80 verbose=auipc r21, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000a8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000d80 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000d84: /* paddr=0x80000d84 verbose=addi r21, r21, 0x235 a_src=1=SRC_MEM a_offset_imm0=0xa00000a8 b_src=2=SRC_IMM b_offset_imm0=0x235 op=12=add store=1=STORE_MEM store_offset=0xa00000a8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x235 /* Add: c = c + b = a + b */
	mov r13, 0xa00000a8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000d88: /* paddr=0x80000d88 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d8c: /* paddr=0x80000d8c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d90: /* paddr=0x80000d90 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d94: /* paddr=0x80000d94 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d98: /* paddr=0x80000d98 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000d9c: /* paddr=0x80000d9c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000da0: /* paddr=0x80000da0 verbose=jalr r12, r21, 0xfffffdff ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffdff b_src=1=SRC_MEM b_offset_imm0=0xa00000a8 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa00000a8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffdff /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000da1: /* paddr=0x80000da1 verbose=jalr r12, r21, 0xfffffdff ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000060 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000da4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000da1_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000da1_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000da4: /* paddr=0x80000da4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000da8: /* paddr=0x80000da8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000dac: /* paddr=0x80000dac verbose=xori r12, r12, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000db0: /* paddr=0x80000db0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000dbc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000db0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000db0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000db4: /* paddr=0x80000db4 verbose=xori r12, r12, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000db8: /* paddr=0x80000db8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000dbc: /* paddr=0x80000dbc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000dc0: /* paddr=0x80000dc0 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000dc0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000dc4: /* paddr=0x80000dc4 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dc8: /* paddr=0x80000dc8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000dcc: /* paddr=0x80000dcc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000dd0: /* paddr=0x80000dd0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000dd4: /* paddr=0x80000dd4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000dd8: /* paddr=0x80000dd8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ddc: /* paddr=0x80000ddc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000de0: /* paddr=0x80000de0 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000de4: /* paddr=0x80000de4 verbose=sub r12, r12, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000060 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000060 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000060 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000060/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000de8: /* paddr=0x80000de8 verbose=sd r12, 0x40(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000060 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x28 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000060 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x28 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000dec: /* paddr=0x80000dec verbose=auipc r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000df0: /* paddr=0x80000df0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000df4: /* paddr=0x80000df4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000df8: /* paddr=0x80000df8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000dfc: /* paddr=0x80000dfc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e00: /* paddr=0x80000e00 verbose=auipc r4, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000020 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000e00 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000e04: /* paddr=0x80000e04 verbose=addi r4, r4, 0x435 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_offset_imm0=0x435 op=12=add store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x435 /* Add: c = c + b = a + b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e08: /* paddr=0x80000e08 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e0c: /* paddr=0x80000e0c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e10: /* paddr=0x80000e10 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e14: /* paddr=0x80000e14 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e18: /* paddr=0x80000e18 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e1c: /* paddr=0x80000e1c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e20: /* paddr=0x80000e20 verbose=jalr r0, r4, 0xfffffbff ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffbff b_src=1=SRC_MEM b_offset_imm0=0xa0000020 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000020 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffbff /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e21: /* paddr=0x80000e21 verbose=jalr r0, r4, 0xfffffbff ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	/* STORE_NONE */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000e21_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000e21_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000e24: /* paddr=0x80000e24 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e28: /* paddr=0x80000e28 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e2c: /* paddr=0x80000e2c verbose=xori r0, r0, 0x2 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov rcx, 0x0 /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e30: /* paddr=0x80000e30 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000e3c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000e30_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000e30_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000e34: /* paddr=0x80000e34 verbose=xori r0, r0, 0x3 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov rcx, 0x0 /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e38: /* paddr=0x80000e38 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e3c: /* paddr=0x80000e3c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e40: /* paddr=0x80000e40 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000e40 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000e44: /* paddr=0x80000e44 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e48: /* paddr=0x80000e48 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e4c: /* paddr=0x80000e4c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e50: /* paddr=0x80000e50 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e54: /* paddr=0x80000e54 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e58: /* paddr=0x80000e58 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e5c: /* paddr=0x80000e5c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e60: /* paddr=0x80000e60 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e64: /* paddr=0x80000e64 verbose=sub r0, r0, r7 a_src=2=SRC_IMM b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0x0 /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e68: /* paddr=0x80000e68 verbose=sd r0, 0x48(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x30 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	/* CopyB: c = b = 0x0 */
	mov r12, 0x0 /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x30 /* STORE_IND: address = i.store_offset */
	mov qword ptr [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e6c: /* paddr=0x80000e6c verbose=auipc r4, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000020 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000e6c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000e70: /* paddr=0x80000e70 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e74: /* paddr=0x80000e74 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e78: /* paddr=0x80000e78 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e7c: /* paddr=0x80000e7c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e80: /* paddr=0x80000e80 verbose=auipc r8, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000040 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000e80 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000e84: /* paddr=0x80000e84 verbose=addi r8, r8, 0xfffff835 a_src=1=SRC_MEM a_offset_imm0=0xa0000040 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffff835 op=12=add store=1=STORE_MEM store_offset=0xa0000040 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000040 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffff835 /* Add: c = c + b = a + b */
	mov r13, 0xa0000040/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000e88: /* paddr=0x80000e88 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e8c: /* paddr=0x80000e8c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e90: /* paddr=0x80000e90 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e94: /* paddr=0x80000e94 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e98: /* paddr=0x80000e98 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000e9c: /* paddr=0x80000e9c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ea0: /* paddr=0x80000ea0 verbose=jalr r4, r8, 0x7ff ; 1/2 a_src=2=SRC_IMM a_offset_imm0=0x7ff b_src=1=SRC_MEM b_offset_imm0=0xa0000040 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000040 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0x7ff /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ea1: /* paddr=0x80000ea1 verbose=jalr r4, r8, 0x7ff ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000020 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000ea4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000ea1_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000ea1_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000ea4: /* paddr=0x80000ea4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ea8: /* paddr=0x80000ea8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000eac: /* paddr=0x80000eac verbose=xori r4, r4, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000eb0: /* paddr=0x80000eb0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000ebc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000eb0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000eb0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000eb4: /* paddr=0x80000eb4 verbose=xori r4, r4, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000eb8: /* paddr=0x80000eb8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ebc: /* paddr=0x80000ebc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ec0: /* paddr=0x80000ec0 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000ec0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000ec4: /* paddr=0x80000ec4 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ec8: /* paddr=0x80000ec8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ecc: /* paddr=0x80000ecc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ed0: /* paddr=0x80000ed0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ed4: /* paddr=0x80000ed4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ed8: /* paddr=0x80000ed8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000edc: /* paddr=0x80000edc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ee0: /* paddr=0x80000ee0 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ee4: /* paddr=0x80000ee4 verbose=sub r4, r4, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000020 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000020 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000020 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000020/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000ee8: /* paddr=0x80000ee8 verbose=sd r4, 0x56(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000020 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x38 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000020 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x38 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000eec: /* paddr=0x80000eec verbose=auipc r18, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000090 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000eec /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000ef0: /* paddr=0x80000ef0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ef4: /* paddr=0x80000ef4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ef8: /* paddr=0x80000ef8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000efc: /* paddr=0x80000efc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f00: /* paddr=0x80000f00 verbose=auipc r20, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000a0 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000f00 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000f04: /* paddr=0x80000f04 verbose=addi r20, r20, 0xfffffadf a_src=1=SRC_MEM a_offset_imm0=0xa00000a0 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffadf op=12=add store=1=STORE_MEM store_offset=0xa00000a0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000a0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffadf /* Add: c = c + b = a + b */
	mov r13, 0xa00000a0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f08: /* paddr=0x80000f08 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f0c: /* paddr=0x80000f0c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f10: /* paddr=0x80000f10 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f14: /* paddr=0x80000f14 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f18: /* paddr=0x80000f18 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f1c: /* paddr=0x80000f1c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f20: /* paddr=0x80000f20 verbose=jalr r18, r20, 0x555 ; 1/2 a_src=2=SRC_IMM a_offset_imm0=0x555 b_src=1=SRC_MEM b_offset_imm0=0xa00000a0 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa00000a0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0x555 /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f21: /* paddr=0x80000f21 verbose=jalr r18, r20, 0x555 ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000090 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000f24 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000f21_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000f21_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000f24: /* paddr=0x80000f24 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f28: /* paddr=0x80000f28 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f2c: /* paddr=0x80000f2c verbose=xori r18, r18, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f30: /* paddr=0x80000f30 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000f3c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000f30_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000f30_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000f34: /* paddr=0x80000f34 verbose=xori r18, r18, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f38: /* paddr=0x80000f38 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f3c: /* paddr=0x80000f3c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f40: /* paddr=0x80000f40 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000f40 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000f44: /* paddr=0x80000f44 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f48: /* paddr=0x80000f48 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f4c: /* paddr=0x80000f4c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f50: /* paddr=0x80000f50 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f54: /* paddr=0x80000f54 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f58: /* paddr=0x80000f58 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f5c: /* paddr=0x80000f5c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f60: /* paddr=0x80000f60 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f64: /* paddr=0x80000f64 verbose=sub r18, r18, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f68: /* paddr=0x80000f68 verbose=sd r18, 0x64(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000090 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x40 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000090 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x40 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f6c: /* paddr=0x80000f6c verbose=auipc r2, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000010 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000f6c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000f70: /* paddr=0x80000f70 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f74: /* paddr=0x80000f74 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f78: /* paddr=0x80000f78 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f7c: /* paddr=0x80000f7c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f80: /* paddr=0x80000f80 verbose=auipc r18, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000090 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000f80 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000f84: /* paddr=0x80000f84 verbose=addi r18, r18, 0x58a a_src=1=SRC_MEM a_offset_imm0=0xa0000090 b_src=2=SRC_IMM b_offset_imm0=0x58a op=12=add store=1=STORE_MEM store_offset=0xa0000090 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000090 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x58a /* Add: c = c + b = a + b */
	mov r13, 0xa0000090/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000f88: /* paddr=0x80000f88 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f8c: /* paddr=0x80000f8c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f90: /* paddr=0x80000f90 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f94: /* paddr=0x80000f94 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f98: /* paddr=0x80000f98 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000f9c: /* paddr=0x80000f9c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fa0: /* paddr=0x80000fa0 verbose=jalr r2, r18, 0xfffffaaa ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffaaa b_src=1=SRC_MEM b_offset_imm0=0xa0000090 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000090 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffaaa /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fa1: /* paddr=0x80000fa1 verbose=jalr r2, r18, 0xfffffaaa ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000010 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000fa4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000fa1_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000fa1_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000fa4: /* paddr=0x80000fa4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fa8: /* paddr=0x80000fa8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fac: /* paddr=0x80000fac verbose=xori r2, r2, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fb0: /* paddr=0x80000fb0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80000fbc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80000fb0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80000fb0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80000fb4: /* paddr=0x80000fb4 verbose=xori r2, r2, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fb8: /* paddr=0x80000fb8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fbc: /* paddr=0x80000fbc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fc0: /* paddr=0x80000fc0 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000fc0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000fc4: /* paddr=0x80000fc4 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fc8: /* paddr=0x80000fc8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fcc: /* paddr=0x80000fcc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fd0: /* paddr=0x80000fd0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fd4: /* paddr=0x80000fd4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fd8: /* paddr=0x80000fd8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fdc: /* paddr=0x80000fdc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000fe0: /* paddr=0x80000fe0 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fe4: /* paddr=0x80000fe4 verbose=sub r2, r2, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000010 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000010/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fe8: /* paddr=0x80000fe8 verbose=sd r2, 0x72(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000010 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x48 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000010 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x48 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_80000fec: /* paddr=0x80000fec verbose=auipc r5, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000028 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80000fec /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80000ff0: /* paddr=0x80000ff0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ff4: /* paddr=0x80000ff4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ff8: /* paddr=0x80000ff8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80000ffc: /* paddr=0x80000ffc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001000: /* paddr=0x80001000 verbose=auipc r17, 0x1000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000088 store_ra=true jmp_offset1=4 jmp_offset2=0x1000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80002000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001004: /* paddr=0x80001004 verbose=addi r17, r17, 0xfffff834 a_src=1=SRC_MEM a_offset_imm0=0xa0000088 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffff834 op=12=add store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffff834 /* Add: c = c + b = a + b */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001008: /* paddr=0x80001008 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000100c: /* paddr=0x8000100c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001010: /* paddr=0x80001010 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001014: /* paddr=0x80001014 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001018: /* paddr=0x80001018 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000101c: /* paddr=0x8000101c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001020: /* paddr=0x80001020 verbose=jalr r5, r17, 0xfffff800 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000088 op=16=and store=1=STORE_MEM store_offset=0xa0000028 store_ra=true set_pc=true jmp_offset1=fffffffffffff800 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000088 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80001024 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0xfffffffffffff800 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001020_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001020_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001024: /* paddr=0x80001024 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001028: /* paddr=0x80001028 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000102c: /* paddr=0x8000102c verbose=xori r5, r5, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001030: /* paddr=0x80001030 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000103c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001030_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001030_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001034: /* paddr=0x80001034 verbose=xori r5, r5, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001038: /* paddr=0x80001038 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000103c: /* paddr=0x8000103c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001040: /* paddr=0x80001040 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80001040 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001044: /* paddr=0x80001044 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001048: /* paddr=0x80001048 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000104c: /* paddr=0x8000104c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001050: /* paddr=0x80001050 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001054: /* paddr=0x80001054 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001058: /* paddr=0x80001058 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000105c: /* paddr=0x8000105c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001060: /* paddr=0x80001060 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001064: /* paddr=0x80001064 verbose=sub r5, r5, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001068: /* paddr=0x80001068 verbose=sd r5, 0x80(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000028 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x50 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000028 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x50 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000106c: /* paddr=0x8000106c verbose=auipc r27, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000d8 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000106c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001070: /* paddr=0x80001070 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001074: /* paddr=0x80001074 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001078: /* paddr=0x80001078 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000107c: /* paddr=0x8000107c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001080: /* paddr=0x80001080 verbose=auipc r16, 0x1000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000080 store_ra=true jmp_offset1=4 jmp_offset2=0x1000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80002080 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001084: /* paddr=0x80001084 verbose=addi r16, r16, 0xfffff834 a_src=1=SRC_MEM a_offset_imm0=0xa0000080 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffff834 op=12=add store=1=STORE_MEM store_offset=0xa0000080 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffff834 /* Add: c = c + b = a + b */
	mov r13, 0xa0000080/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001088: /* paddr=0x80001088 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000108c: /* paddr=0x8000108c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001090: /* paddr=0x80001090 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001094: /* paddr=0x80001094 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001098: /* paddr=0x80001098 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000109c: /* paddr=0x8000109c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010a0: /* paddr=0x800010a0 verbose=jalr r27, r16, 0xfffff800 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa0000080 op=16=and store=1=STORE_MEM store_offset=0xa00000d8 store_ra=true set_pc=true jmp_offset1=fffffffffffff800 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000080 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800010a4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0xfffffffffffff800 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800010a0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800010a0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800010a4: /* paddr=0x800010a4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010a8: /* paddr=0x800010a8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010ac: /* paddr=0x800010ac verbose=xori r27, r27, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800010b0: /* paddr=0x800010b0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800010bc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800010b0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800010b0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800010b4: /* paddr=0x800010b4 verbose=xori r27, r27, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800010b8: /* paddr=0x800010b8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010bc: /* paddr=0x800010bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010c0: /* paddr=0x800010c0 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800010c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800010c4: /* paddr=0x800010c4 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800010c8: /* paddr=0x800010c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010cc: /* paddr=0x800010cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010d0: /* paddr=0x800010d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010d4: /* paddr=0x800010d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010d8: /* paddr=0x800010d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010dc: /* paddr=0x800010dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010e0: /* paddr=0x800010e0 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800010e4: /* paddr=0x800010e4 verbose=sub r27, r27, r7 a_src=1=SRC_MEM a_offset_imm0=0xa00000d8 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa00000d8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d8 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000d8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800010e8: /* paddr=0x800010e8 verbose=sd r27, 0x88(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa00000d8 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x58 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000d8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x58 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800010ec: /* paddr=0x800010ec verbose=auipc r1, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000008 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800010ec /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800010f0: /* paddr=0x800010f0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010f4: /* paddr=0x800010f4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010f8: /* paddr=0x800010f8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800010fc: /* paddr=0x800010fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001100: /* paddr=0x80001100 verbose=auipc r26, 0x1000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000d0 store_ra=true jmp_offset1=4 jmp_offset2=0x1000 */
	/* Flag: c = 0 */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80002100 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001104: /* paddr=0x80001104 verbose=addi r26, r26, 0xfffff834 a_src=1=SRC_MEM a_offset_imm0=0xa00000d0 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffff834 op=12=add store=1=STORE_MEM store_offset=0xa00000d0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffff834 /* Add: c = c + b = a + b */
	mov r13, 0xa00000d0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001108: /* paddr=0x80001108 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000110c: /* paddr=0x8000110c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001110: /* paddr=0x80001110 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001114: /* paddr=0x80001114 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001118: /* paddr=0x80001118 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000111c: /* paddr=0x8000111c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001120: /* paddr=0x80001120 verbose=jalr r1, r26, 0xfffff800 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa00000d0 op=16=and store=1=STORE_MEM store_offset=0xa0000008 store_ra=true set_pc=true jmp_offset1=fffffffffffff800 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000d0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80001124 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0xfffffffffffff800 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001120_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001120_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001124: /* paddr=0x80001124 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001128: /* paddr=0x80001128 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000112c: /* paddr=0x8000112c verbose=xori r1, r1, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001130: /* paddr=0x80001130 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000113c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001130_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001130_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001134: /* paddr=0x80001134 verbose=xori r1, r1, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001138: /* paddr=0x80001138 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000113c: /* paddr=0x8000113c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001140: /* paddr=0x80001140 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80001140 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001144: /* paddr=0x80001144 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001148: /* paddr=0x80001148 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000114c: /* paddr=0x8000114c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001150: /* paddr=0x80001150 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001154: /* paddr=0x80001154 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001158: /* paddr=0x80001158 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000115c: /* paddr=0x8000115c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001160: /* paddr=0x80001160 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001164: /* paddr=0x80001164 verbose=sub r1, r1, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000008 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000008 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000008 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000008/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001168: /* paddr=0x80001168 verbose=sd r1, 0x96(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000008 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x60 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000008 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x60 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000116c: /* paddr=0x8000116c verbose=auipc r10, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000050 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x8000116c /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001170: /* paddr=0x80001170 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001174: /* paddr=0x80001174 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001178: /* paddr=0x80001178 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000117c: /* paddr=0x8000117c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001180: /* paddr=0x80001180 verbose=auipc r24, 0x1000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa00000c0 store_ra=true jmp_offset1=4 jmp_offset2=0x1000 */
	/* Flag: c = 0 */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80002180 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001184: /* paddr=0x80001184 verbose=addi r24, r24, 0xfffff834 a_src=1=SRC_MEM a_offset_imm0=0xa00000c0 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffff834 op=12=add store=1=STORE_MEM store_offset=0xa00000c0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffff834 /* Add: c = c + b = a + b */
	mov r13, 0xa00000c0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001188: /* paddr=0x80001188 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000118c: /* paddr=0x8000118c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001190: /* paddr=0x80001190 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001194: /* paddr=0x80001194 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001198: /* paddr=0x80001198 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000119c: /* paddr=0x8000119c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011a0: /* paddr=0x800011a0 verbose=jalr r10, r24, 0xfffff800 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc b_src=1=SRC_MEM b_offset_imm0=0xa00000c0 op=16=and store=1=STORE_MEM store_offset=0xa0000050 store_ra=true set_pc=true jmp_offset1=fffffffffffff800 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000c0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800011a4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0xfffffffffffff800 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800011a0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800011a0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800011a4: /* paddr=0x800011a4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011a8: /* paddr=0x800011a8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011ac: /* paddr=0x800011ac verbose=xori r10, r10, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800011b0: /* paddr=0x800011b0 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800011bc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800011b0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800011b0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800011b4: /* paddr=0x800011b4 verbose=xori r10, r10, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800011b8: /* paddr=0x800011b8 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011bc: /* paddr=0x800011bc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011c0: /* paddr=0x800011c0 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800011c0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800011c4: /* paddr=0x800011c4 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800011c8: /* paddr=0x800011c8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011cc: /* paddr=0x800011cc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011d0: /* paddr=0x800011d0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011d4: /* paddr=0x800011d4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011d8: /* paddr=0x800011d8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011dc: /* paddr=0x800011dc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011e0: /* paddr=0x800011e0 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800011e4: /* paddr=0x800011e4 verbose=sub r10, r10, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800011e8: /* paddr=0x800011e8 verbose=sd r10, 0x104(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000050 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x68 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000050 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x68 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800011ec: /* paddr=0x800011ec verbose=auipc r11, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000058 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x800011ec /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800011f0: /* paddr=0x800011f0 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011f4: /* paddr=0x800011f4 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011f8: /* paddr=0x800011f8 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800011fc: /* paddr=0x800011fc verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001200: /* paddr=0x80001200 verbose=auipc r10, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000050 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80001200 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001204: /* paddr=0x80001204 verbose=addi r10, r10, 0x435 a_src=1=SRC_MEM a_offset_imm0=0xa0000050 b_src=2=SRC_IMM b_offset_imm0=0x435 op=12=add store=1=STORE_MEM store_offset=0xa0000050 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000050 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x435 /* Add: c = c + b = a + b */
	mov r13, 0xa0000050/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001208: /* paddr=0x80001208 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000120c: /* paddr=0x8000120c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001210: /* paddr=0x80001210 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001214: /* paddr=0x80001214 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001218: /* paddr=0x80001218 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000121c: /* paddr=0x8000121c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001220: /* paddr=0x80001220 verbose=jalr r11, r10, 0xfffffbff ; 1/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffbff b_src=1=SRC_MEM b_offset_imm0=0xa0000050 op=12=add jmp_offset1=1 jmp_offset2=0x1 is_external_op=true */
	mov r13, 0xa0000050 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, 0xfffffffffffffbff /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001221: /* paddr=0x80001221 verbose=jalr r11, r10, 0xfffffbff ; 2/2 a_src=2=SRC_IMM a_use_sp_imm1=0xffffffff a_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000058 store_ra=true set_pc=true jmp_offset2=0x3 is_external_op=true */
	mov rax, rcx /* b=SRC_C: b = c */
	mov rcx, 0xfffffffffffffffc /* And: c = a */
	and rcx, rax /* And: c = c AND b = a AND b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80001224 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	mov r9, rcx /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001221_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001221_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001224: /* paddr=0x80001224 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001228: /* paddr=0x80001228 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000122c: /* paddr=0x8000122c verbose=xori r11, r11, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM b_offset_imm0=0x2 op=18=xor store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x2 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001230: /* paddr=0x80001230 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x8000123c /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001230_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001230_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001234: /* paddr=0x80001234 verbose=xori r11, r11, 0x3 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=2=SRC_IMM b_offset_imm0=0x3 op=18=xor store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Xor: c = a */
	xor rcx, 0x3 /* Xor: c = c XOR b = a XOR b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001238: /* paddr=0x80001238 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000123c: /* paddr=0x8000123c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001240: /* paddr=0x80001240 verbose=auipc r7, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0x80001240 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_80001244: /* paddr=0x80001244 verbose=addi r7, r7, 0xffffffac a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffffac op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffffac /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001248: /* paddr=0x80001248 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000124c: /* paddr=0x8000124c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001250: /* paddr=0x80001250 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001254: /* paddr=0x80001254 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001258: /* paddr=0x80001258 verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_8000125c: /* paddr=0x8000125c verbose=addi r0, r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=12=add jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_80001260: /* paddr=0x80001260 verbose=andi r7, r7, 0xfffffffc a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffffc op=16=and store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* And: c = a */
	and rcx, 0xfffffffffffffffc /* And: c = c AND b = a AND b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001264: /* paddr=0x80001264 verbose=sub r11, r11, r7 a_src=1=SRC_MEM a_offset_imm0=0xa0000058 b_src=1=SRC_MEM b_offset_imm0=0xa0000038 op=13=sub store=1=STORE_MEM store_offset=0xa0000058 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000058 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000038 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa0000058/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001268: /* paddr=0x80001268 verbose=sd r11, 0x112(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000058 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0x70 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000058 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0x70 /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_8000126c: /* paddr=0x8000126c verbose=jal r0, 0x38 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=38 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800012a4 /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_8000126c_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_8000126c_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001270: /* paddr=0x80001270 verbose=ld r9, 0x1f8(r2) a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=5=SRC_IND b_offset_imm0=0x1f8 ind_width=8 op=1=copyb store=1=STORE_MEM store_offset=0xa0000048 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x1f8 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov rax, qword ptr [r13] /* b=SRC_IND(8): b = mem[address] */
	/* CopyB: c = b = rax */
	mov r13, 0xa0000048/* STORE_MEM: address = i.store_offset */
	mov r12, rax /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001274: /* paddr=0x80001274 verbose=ld r6, 0x200(r2) a_src=1=SRC_MEM a_offset_imm0=0xa0000010 b_src=5=SRC_IND b_offset_imm0=0x200 ind_width=8 op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000010 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x200 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov rax, qword ptr [r13] /* b=SRC_IND(8): b = mem[address] */
	/* CopyB: c = b = rax */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rax /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001278: /* paddr=0x80001278 verbose=add r6, r6, r9 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000048 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000048 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, rax /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000127c: /* paddr=0x8000127c verbose=lui r6, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x0 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0x0 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001280: /* paddr=0x80001280 verbose=addi r6, r6, 0x0 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x0 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001284: /* paddr=0x80001284 verbose=slli r6, r6, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001288: /* paddr=0x80001288 verbose=addi r6, r6, 0x5d6 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x5d6 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x5d6 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000128c: /* paddr=0x8000128c verbose=slli r6, r6, 0xb a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0xb op=49=sll store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xb /* Sll: c = a << b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001290: /* paddr=0x80001290 verbose=addi r6, r6, 0x436 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x436 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x436 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001294: /* paddr=0x80001294 verbose=slli r6, r6, 0xa a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0xa op=49=sll store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xa /* Sll: c = a << b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001298: /* paddr=0x80001298 verbose=addi r6, r6, 0x2d0 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x2d0 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x2d0 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000129c: /* paddr=0x8000129c verbose=sd r6, 0x-4(r9) a_src=1=SRC_MEM a_offset_imm0=0xa0000048 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 ind_width=8 op=1=copyb store=2=STORE_IND store_offset=0xfffffffffffffffc jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000048 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	add r13, 0xfffffffffffffffc /* STORE_IND: address = i.store_offset */
	mov [r13], r12 /* STORE_IND(8): mem[address] = value = c */
	inc r11 /* increment step */

pc_800012a0: /* paddr=0x800012a0 verbose=jal r0, 0x4 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=4 jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	inc r11 /* increment step */

pc_800012a4: /* paddr=0x800012a4 verbose=auipc r5, 0x20011000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000028 store_ra=true jmp_offset1=4 jmp_offset2=0x20011000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa00122a4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800012a8: /* paddr=0x800012a8 verbose=addi r5, r5, 0xfffffe6c a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffe6c op=12=add store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffe6c /* Add: c = c + b = a + b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012ac: /* paddr=0x800012ac verbose=auipc r6, 0x20011000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000030 store_ra=true jmp_offset1=4 jmp_offset2=0x20011000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa00122ac /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800012b0: /* paddr=0x800012b0 verbose=addi r6, r6, 0xffffff84 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffff84 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffff84 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012b4: /* paddr=0x800012b4 verbose=auipc r7, 0x2000f000 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag store=1=STORE_MEM store_offset=0xa0000038 store_ra=true jmp_offset1=4 jmp_offset2=0x2000f000 */
	/* Flag: c = 0 */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa00102b4 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value */
	inc r11 /* increment step */

pc_800012b8: /* paddr=0x800012b8 verbose=addi r7, r7, 0xfffffd4c a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffd4c op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xfffffffffffffd4c /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012bc: /* paddr=0x800012bc verbose=sub r28, r6, r5 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=1=SRC_MEM b_offset_imm0=0xa0000028 op=13=sub store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000028 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	mov rcx, rbx /* Sub: c = a */
	sub rcx, rax /* Sub: c = c - b = a - b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012c0: /* paddr=0x800012c0 verbose=srai r28, r28, 0x2 a_src=1=SRC_MEM a_offset_imm0=0xa00000e0 b_src=2=SRC_IMM b_offset_imm0=0x2 op=51=sra store=1=STORE_MEM store_offset=0xa00000e0 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa00000e0 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sra: c = a */
	mov rcx, rbx /* Sra: c = a */
	sar rcx, 0x2 /* Sra: c = a >> b */
	mov r13, 0xa00000e0/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012c4: /* paddr=0x800012c4 verbose=sw r28, 0x0(r7) a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=1=SRC_MEM b_offset_imm0=0xa00000e0 ind_width=4 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e0 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12d /* STORE_IND(4): mem[address] = value = c */
	inc r11 /* increment step */

pc_800012c8: /* paddr=0x800012c8 verbose=addi r7, r7, 0x4 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4 /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012cc: /* paddr=0x800012cc verbose=bge r5, r6, 0x18 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 op=9=lt jmp_offset1=4 jmp_offset2=0x18 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	cmp rbx, rax /* Lt: a == b ? */
	jl pc_800012cc_lt_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_800012cc_lt_done
pc_800012cc_lt_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_800012cc_lt_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_800012cc_flag_false /* flag == 1 ? */
	mov r9, 0x800012d0 /* pc += i.jmp_offset1 */
	jmp pc_800012cc_flag_done
pc_800012cc_flag_false:
	mov r9, 0x800012e4 /* pc += i.jmp_offset2 */
pc_800012cc_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800012cc_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800012cc_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800012d0: /* paddr=0x800012d0 verbose=lw r29, 0x0(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=5=SRC_IND ind_width=4 op=57=signextend_w store=1=STORE_MEM store_offset=0xa00000e8 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x0 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov eax, [r13] /* b=SRC_IND(4): b = mem[address] */
	movsxd rcx, eax
	mov r13, 0xa00000e8/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012d4: /* paddr=0x800012d4 verbose=sw r29, 0x0(r7) a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=1=SRC_MEM b_offset_imm0=0xa00000e8 ind_width=4 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa00000e8 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12d /* STORE_IND(4): mem[address] = value = c */
	inc r11 /* increment step */

pc_800012d8: /* paddr=0x800012d8 verbose=addi r7, r7, 0x4 a_src=1=SRC_MEM a_offset_imm0=0xa0000038 b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000038 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000038 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4 /* Add: c = c + b = a + b */
	mov r13, 0xa0000038/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012dc: /* paddr=0x800012dc verbose=addi r5, r5, 0x4 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=2=SRC_IMM b_offset_imm0=0x4 op=12=add store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0x4 /* Add: c = c + b = a + b */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012e0: /* paddr=0x800012e0 verbose=jal r0, 0xffffffec a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=ffffffffffffffec jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x800012cc /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_800012e0_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_800012e0_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_800012e4: /* paddr=0x800012e4 verbose=lui r6, 0xa0000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xa0000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xa0000 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0xa0000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012e8: /* paddr=0x800012e8 verbose=addiw r6, r6, 0x9 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x9 op=44=add_w store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rax, 0x9 /* AddW: b = value */
	add rax, rbx /* AddW: b += a */
	cdqe /* AddW: trunk b */
	mov rcx, rax /* AddW: c = b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012ec: /* paddr=0x800012ec verbose=slli r6, r6, 0xc a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0xc op=49=sll store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Sll: c = a */
	shl rcx, 0xc /* Sll: c = a << b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012f0: /* paddr=0x800012f0 verbose=addi r6, r6, 0xffffff12 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xffffff12 op=12=add store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rcx, rbx /* Add: c = a */
	add rcx, 0xffffffffffffff12 /* Add: c = c + b = a + b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012f4: /* paddr=0x800012f4 verbose=lw r5, 0x0(r6) a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=5=SRC_IND ind_width=4 op=57=signextend_w store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, rbx /* b=SRC_IND: address = a */
	add r13, 0x0 /* b=SRC_IND: address += i.b_offset_imm0 */
	mov eax, [r13] /* b=SRC_IND(4): b = mem[address] */
	movsxd rcx, eax
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012f8: /* paddr=0x800012f8 verbose=lui r6, 0xffff000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0xffff000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0xffff000 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0xffff000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_800012fc: /* paddr=0x800012fc verbose=addiw r6, r6, 0xfffffeee a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_use_sp_imm1=0xffffffff b_offset_imm0=0xfffffeee op=44=add_w store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rax, 0xfffffffffffffeee /* AddW: b = value */
	add rax, rbx /* AddW: b += a */
	cdqe /* AddW: trunk b */
	mov rcx, rax /* AddW: c = b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001300: /* paddr=0x80001300 verbose=beq r5, r6, 0x18 a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 op=11=eq jmp_offset1=18 jmp_offset2=0x4 is_external_op=true */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	cmp rbx, rax /* Eq: a == b ? */
	je pc_80001300_equal_true
	mov rcx, 0 /* c = 0 */
	mov rdx, 0 /* flag = 0 */
	jmp pc_80001300_equal_done
pc_80001300_equal_true:
	mov rcx, 1 /* c = 1 */
	mov rdx, 1 /* flag = 1 */
pc_80001300_equal_done:
	/* STORE_NONE */
	cmp rdx, 1 /* set_pc 5: flag == 1 ? */
	jne pc_80001300_flag_false /* flag == 1 ? */
	mov r9, 0x80001318 /* pc += i.jmp_offset1 */
	jmp pc_80001300_flag_done
pc_80001300_flag_false:
	mov r9, 0x80001304 /* pc += i.jmp_offset2 */
pc_80001300_flag_done:
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001300_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001300_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001304: /* paddr=0x80001304 verbose=lui r5, 0x100000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x100000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000028 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x100000 */
	mov r13, 0xa0000028/* STORE_MEM: address = i.store_offset */
	mov r12, 0x100000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001308: /* paddr=0x80001308 verbose=lui r6, 0x5000 a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5000 op=1=copyb store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 */
	/* CopyB: c = b = 0x5000 */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5000 /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000130c: /* paddr=0x8000130c verbose=addiw r6, r6, 0x555 a_src=1=SRC_MEM a_offset_imm0=0xa0000030 b_src=2=SRC_IMM b_offset_imm0=0x555 op=44=add_w store=1=STORE_MEM store_offset=0xa0000030 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true m32=true */
	mov r13, 0xa0000030 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov rax, 0x555 /* AddW: b = value */
	add rax, rbx /* AddW: b += a */
	cdqe /* AddW: trunk b */
	mov rcx, rax /* AddW: c = b */
	mov r13, 0xa0000030/* STORE_MEM: address = i.store_offset */
	mov r12, rcx /* STORE_MEM: reg_value = value */
	mov [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_80001310: /* paddr=0x80001310 verbose=sw r6, 0x0(r5) a_src=1=SRC_MEM a_offset_imm0=0xa0000028 b_src=1=SRC_MEM b_offset_imm0=0xa0000030 ind_width=4 op=1=copyb store=2=STORE_IND jmp_offset1=4 jmp_offset2=0x4 */
	mov r13, 0xa0000028 /* a=SRC_MEM: address = i.a_offset_imm0 */
	add r13, r10 /* a=SRC_MEM: address += sp */
	mov rbx, [r13] /* a=SRC_MEM: a = mem[address] */
	mov r13, 0xa0000030 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	mov r12, rax /* STORE_IND: reg_value = value */
	mov r13, rbx /* STORE_IND: address = a */
	mov [r13], r12d /* STORE_IND(4): mem[address] = value = c */
	inc r11 /* increment step */

pc_80001314: /* paddr=0x80001314 verbose=jal r0, 0xc a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset1=c jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80001320 /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001314_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001314_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001318: /* paddr=0x80001318 verbose=addi r17, r0, 0x5d a_src=2=SRC_IMM b_src=2=SRC_IMM b_offset_imm0=0x5d op=12=add store=1=STORE_MEM store_offset=0xa0000088 jmp_offset1=4 jmp_offset2=0x4 is_external_op=true */
	/* Add: c = a(0) + b = b = 0x5d */
	mov r13, 0xa0000088/* STORE_MEM: address = i.store_offset */
	mov r12, 0x5d /* STORE_MEM: reg_value = value */
	mov qword ptr [r13], r12 /* STORE_MEM: mem[address] = value = c */
	inc r11 /* increment step */

pc_8000131c: /* paddr=0x8000131c verbose=ecall a_src=2=SRC_IMM b_src=1=SRC_MEM b_offset_imm0=0xa0008305 op=1=copyb set_pc=true jmp_offset2=0x4 */
	mov r13, 0xa0008305 /* b=SRC_MEM: address = i.b_offset_imm0 */
	add r13, r10 /* b=SRC_MEM: address += sp */
	mov rax, [r13] /* b=SRC_MEM: b = mem[address] */
	/* CopyB: c = b = rax */
	/* STORE_NONE */
	mov r9, rax /* set_pc 2: pc = c */
	add r9, 0x0 /* set_pc 2: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_8000131c_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_8000131c_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

pc_80001320: /* paddr=0x80001320 verbose=jal r0, 0x0 a_src=2=SRC_IMM b_src=2=SRC_IMM op=0=flag jmp_offset2=0x4 */
	/* Flag: c = 0 */
	/* STORE_NONE */
	mov r9, 0x80001320 /* set_pc 4: pc += i.jmp_offset1 */
	inc r11 /* increment step */
	/* jump to dynamic pc */
	mov r13, 0x80000000 /* is pc a low address? */
	cmp r9, r13
	jb pc_80001320_jump_to_low_address
	sub r9, r13 /* pc -= 0x80000000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_80000000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */
pc_80001320_jump_to_low_address:
	sub r9, 0x1000 /* pc -= 0x1000 */
	mov rax, r9 /* rax = pc */
	lea rbx, [map_pc_1000] /* rbx = index table base address */
	mov rax, [rbx + rax*2] /* rax = table entry address */
	jmp rax /* jump to table entry address */

execute_end:
	ret

.section .rodata
.align 64
map_pc_1000: 	.quad pc_1000
map_pc_1004: 	.quad pc_1004
map_pc_1008: 	.quad pc_1008
map_pc_100c: 	.quad pc_100c
map_pc_1010: 	.quad pc_1010
map_pc_1014: 	.quad pc_1014
map_pc_1018: 	.quad pc_1018
map_pc_101c: 	.quad pc_101c
map_pc_1020: 	.quad pc_1020
map_pc_1024: 	.quad pc_1024
map_pc_1028: 	.quad pc_1028
map_pc_102c: 	.quad pc_102c
map_pc_1030: 	.quad pc_1030
map_pc_1034: 	.quad pc_1034
map_pc_1038: 	.quad pc_1038
map_pc_103c: 	.quad pc_103c
map_pc_1040: 	.quad pc_1040
map_pc_1044: 	.quad pc_1044
map_pc_1048: 	.quad pc_1048
map_pc_104c: 	.quad pc_104c
map_pc_1050: 	.quad pc_1050
map_pc_1054: 	.quad pc_1054
map_pc_1058: 	.quad pc_1058
map_pc_105c: 	.quad pc_105c
map_pc_1060: 	.quad pc_1060
map_pc_1064: 	.quad pc_1064
map_pc_1068: 	.quad pc_1068
map_pc_106c: 	.quad pc_106c
map_pc_1070: 	.quad pc_1070
map_pc_1074: 	.quad pc_1074
map_pc_1078: 	.quad pc_1078
map_pc_107c: 	.quad pc_107c
map_pc_1080: 	.quad pc_1080
map_pc_1084: 	.quad pc_1084
map_pc_1088: 	.quad pc_1088
map_pc_108c: 	.quad pc_108c
map_pc_1090: 	.quad pc_1090
map_pc_1094: 	.quad pc_1094
map_pc_1098: 	.quad pc_1098
map_pc_109c: 	.quad pc_109c
map_pc_10a0: 	.quad pc_10a0
map_pc_10a4: 	.quad pc_10a4
map_pc_10a8: 	.quad pc_10a8
map_pc_10ac: 	.quad pc_10ac
map_pc_10b0: 	.quad pc_10b0
map_pc_10b4: 	.quad pc_10b4
map_pc_10b8: 	.quad pc_10b8
map_pc_10bc: 	.quad pc_10bc
map_pc_10c0: 	.quad pc_10c0
map_pc_10c4: 	.quad pc_10c4
map_pc_10c8: 	.quad pc_10c8
map_pc_10cc: 	.quad pc_10cc
map_pc_10d0: 	.quad pc_10d0
map_pc_10d4: 	.quad pc_10d4
map_pc_10d8: 	.quad pc_10d8
map_pc_10dc: 	.quad pc_10dc
map_pc_10e0: 	.quad pc_10e0
map_pc_10e4: 	.quad pc_10e4
map_pc_10e8: 	.quad pc_10e8
map_pc_10ec: 	.quad pc_10ec
map_pc_10f0: 	.quad pc_10f0
map_pc_10f4: 	.quad pc_10f4
map_pc_10f8: 	.quad pc_10f8
map_pc_10fc: 	.quad pc_10fc
map_pc_1100: 	.quad pc_1100
map_pc_1104: 	.quad pc_1104
map_pc_1108: 	.quad pc_1108
map_pc_110c: 	.quad pc_110c
map_pc_1110: 	.quad pc_1110
map_pc_1114: 	.quad pc_1114
map_pc_1118: 	.quad pc_1118
map_pc_111c: 	.quad pc_111c
map_pc_1120: 	.quad pc_1120
map_pc_1124: 	.quad pc_1124
map_pc_1128: 	.quad pc_1128
map_pc_112c: 	.quad pc_112c
map_pc_1130: 	.quad pc_1130
map_pc_1134: 	.quad pc_1134
map_pc_1138: 	.quad pc_1138
map_pc_113c: 	.quad pc_113c
map_pc_1140: 	.quad pc_1140
map_pc_1144: 	.quad pc_1144
map_pc_1148: 	.quad pc_1148
map_pc_114c: 	.quad pc_114c
map_pc_1150: 	.quad pc_1150
map_pc_1154: 	.quad pc_1154
map_pc_1158: 	.quad pc_1158
map_pc_115c: 	.quad pc_115c
map_pc_1160: 	.quad pc_1160
map_pc_1164: 	.quad pc_1164
map_pc_1168: 	.quad pc_1168
map_pc_116c: 	.quad pc_116c
map_pc_1170: 	.quad pc_1170
map_pc_1174: 	.quad pc_1174
map_pc_1178: 	.quad pc_1178
map_pc_117c: 	.quad pc_117c
map_pc_1180: 	.quad pc_1180
map_pc_1184: 	.quad pc_1184
map_pc_1188: 	.quad pc_1188
map_pc_118c: 	.quad pc_118c
map_pc_1190: 	.quad pc_1190
map_pc_1194: 	.quad pc_1194
map_pc_1198: 	.quad pc_1198
map_pc_119c: 	.quad pc_119c
map_pc_11a0: 	.quad pc_11a0
map_pc_11a4: 	.quad pc_11a4
map_pc_11a8: 	.quad pc_11a8
map_pc_11ac: 	.quad pc_11ac
map_pc_11b0: 	.quad pc_11b0
map_pc_11b4: 	.quad pc_11b4
map_pc_11b8: 	.quad pc_11b8
map_pc_11bc: 	.quad pc_11bc
map_pc_11c0: 	.quad pc_11c0
map_pc_11c4: 	.quad pc_11c4
map_pc_11c8: 	.quad pc_11c8
map_pc_11cc: 	.quad pc_11cc
map_pc_11d0: 	.quad pc_11d0
map_pc_11d4: 	.quad pc_11d4
map_pc_11d8: 	.quad pc_11d8
map_pc_11dc: 	.quad pc_11dc
map_pc_11e0: 	.quad pc_11e0
map_pc_11e4: 	.quad pc_11e4
map_pc_11e8: 	.quad pc_11e8
map_pc_11ec: 	.quad pc_11ec
map_pc_11f0: 	.quad pc_11f0
map_pc_11f4: 	.quad pc_11f4
map_pc_11f8: 	.quad pc_11f8
map_pc_11fc: 	.quad pc_11fc
map_pc_1200: 	.quad pc_1200
map_pc_1204: 	.quad pc_1204
map_pc_1208: 	.quad pc_1208
map_pc_120c: 	.quad pc_120c
map_pc_1210: 	.quad pc_1210
map_pc_1214: 	.quad pc_1214
map_pc_1218: 	.quad pc_1218
map_pc_121c: 	.quad pc_121c
map_pc_1220: 	.quad pc_1220
map_pc_1224: 	.quad pc_1224
map_pc_1228: 	.quad pc_1228
map_pc_122c: 	.quad pc_122c
map_pc_1230: 	.quad pc_1230
map_pc_1234: 	.quad pc_1234
map_pc_1238: 	.quad pc_1238
map_pc_123c: 	.quad pc_123c
map_pc_1240: 	.quad pc_1240
map_pc_1244: 	.quad pc_1244
map_pc_1248: 	.quad pc_1248
map_pc_124c: 	.quad pc_124c
map_pc_1250: 	.quad pc_1250
map_pc_1254: 	.quad pc_1254
map_pc_1258: 	.quad pc_1258
map_pc_125c: 	.quad pc_125c
map_pc_1260: 	.quad pc_1260
map_pc_1264: 	.quad pc_1264
map_pc_1268: 	.quad pc_1268
map_pc_126c: 	.quad pc_126c
map_pc_1270: 	.quad pc_1270
map_pc_1274: 	.quad pc_1274
map_pc_1278: 	.quad pc_1278
map_pc_127c: 	.quad pc_127c
map_pc_1280: 	.quad pc_1280
map_pc_1284: 	.quad pc_1284
map_pc_1288: 	.quad pc_1288
map_pc_128c: 	.quad pc_128c
map_pc_1290: 	.quad pc_1290
map_pc_1294: 	.quad pc_1294
map_pc_1298: 	.quad pc_1298
map_pc_129c: 	.quad pc_129c
map_pc_12a0: 	.quad pc_12a0
map_pc_12a4: 	.quad pc_12a4
map_pc_12a8: 	.quad pc_12a8
map_pc_12ac: 	.quad pc_12ac
map_pc_12b0: 	.quad pc_12b0
map_pc_12b4: 	.quad pc_12b4
map_pc_12b8: 	.quad pc_12b8
map_pc_12bc: 	.quad pc_12bc
map_pc_12c0: 	.quad pc_12c0
map_pc_12c4: 	.quad pc_12c4
map_pc_12c8: 	.quad pc_12c8
map_pc_12cc: 	.quad pc_12cc
map_pc_12d0: 	.quad pc_12d0
map_pc_12d4: 	.quad pc_12d4
map_pc_12d8: 	.quad pc_12d8
map_pc_12dc: 	.quad pc_12dc
map_pc_12e0: 	.quad pc_12e0
map_pc_12e4: 	.quad pc_12e4
map_pc_12e8: 	.quad pc_12e8
map_pc_12ec: 	.quad pc_12ec
map_pc_12f0: 	.quad pc_12f0
map_pc_12f4: 	.quad pc_12f4
map_pc_12f8: 	.quad pc_12f8
map_pc_12fc: 	.quad pc_12fc
map_pc_1300: 	.quad pc_1300
map_pc_1304: 	.quad pc_1304
map_pc_1308: 	.quad pc_1308
map_pc_130c: 	.quad pc_130c
map_pc_1310: 	.quad pc_1310
map_pc_1314: 	.quad pc_1314
map_pc_1318: 	.quad pc_1318
map_pc_131c: 	.quad pc_131c
map_pc_1320: 	.quad pc_1320
map_pc_1324: 	.quad pc_1324
map_pc_1328: 	.quad pc_1328
map_pc_132c: 	.quad pc_132c
map_pc_1330: 	.quad pc_1330
map_pc_1334: 	.quad pc_1334
map_pc_1338: 	.quad pc_1338
map_pc_133c: 	.quad pc_133c
map_pc_1340: 	.quad pc_1340
map_pc_1344: 	.quad pc_1344
map_pc_1348: 	.quad pc_1348
map_pc_134c: 	.quad pc_134c
map_pc_1350: 	.quad pc_1350
map_pc_1354: 	.quad pc_1354
map_pc_1358: 	.quad pc_1358
map_pc_135c: 	.quad pc_135c
map_pc_1360: 	.quad pc_1360
map_pc_1364: 	.quad pc_1364
map_pc_1368: 	.quad pc_1368
map_pc_136c: 	.quad pc_136c
map_pc_1370: 	.quad pc_1370
map_pc_1374: 	.quad pc_1374
map_pc_1378: 	.quad pc_1378
map_pc_137c: 	.quad pc_137c
map_pc_1380: 	.quad pc_1380
map_pc_1384: 	.quad pc_1384
map_pc_1388: 	.quad pc_1388
map_pc_138c: 	.quad pc_138c
map_pc_1390: 	.quad pc_1390
map_pc_1394: 	.quad pc_1394
map_pc_1398: 	.quad pc_1398
map_pc_139c: 	.quad pc_139c
map_pc_13a0: 	.quad pc_13a0
map_pc_13a4: 	.quad pc_13a4
map_pc_13a8: 	.quad pc_13a8
map_pc_13ac: 	.quad pc_13ac
map_pc_13b0: 	.quad pc_13b0
map_pc_13b4: 	.quad pc_13b4
map_pc_13b8: 	.quad pc_13b8
map_pc_13bc: 	.quad pc_13bc
map_pc_13c0: 	.quad pc_13c0
map_pc_13c4: 	.quad pc_13c4
map_pc_13c8: 	.quad pc_13c8
map_pc_13cc: 	.quad pc_13cc
map_pc_13d0: 	.quad pc_13d0
map_pc_13d4: 	.quad pc_13d4
map_pc_13d8: 	.quad pc_13d8
map_pc_13dc: 	.quad pc_13dc
map_pc_13e0: 	.quad pc_13e0
map_pc_13e4: 	.quad pc_13e4
map_pc_13e8: 	.quad pc_13e8
map_pc_13ec: 	.quad pc_13ec
map_pc_13f0: 	.quad pc_13f0
map_pc_13f4: 	.quad pc_13f4
map_pc_13f8: 	.quad pc_13f8
map_pc_13fc: 	.quad pc_13fc
map_pc_1400: 	.quad pc_1400
map_pc_1404: 	.quad pc_1404
map_pc_1408: 	.quad pc_1408
map_pc_140c: 	.quad pc_140c
map_pc_1410: 	.quad pc_1410
map_pc_1414: 	.quad pc_1414
map_pc_1418: 	.quad pc_1418
map_pc_141c: 	.quad pc_141c
map_pc_1420: 	.quad pc_1420
map_pc_1424: 	.quad pc_1424
map_pc_1428: 	.quad pc_1428
map_pc_142c: 	.quad pc_142c
map_pc_1430: 	.quad pc_1430
map_pc_1434: 	.quad pc_1434
map_pc_1438: 	.quad pc_1438
map_pc_143c: 	.quad pc_143c
map_pc_1440: 	.quad pc_1440
map_pc_1444: 	.quad pc_1444
map_pc_1448: 	.quad pc_1448
map_pc_144c: 	.quad pc_144c
map_pc_1450: 	.quad pc_1450
map_pc_1454: 	.quad pc_1454
map_pc_1458: 	.quad pc_1458
map_pc_145c: 	.quad pc_145c
map_pc_1460: 	.quad pc_1460
map_pc_1464: 	.quad pc_1464
map_pc_1468: 	.quad pc_1468
map_pc_146c: 	.quad pc_146c
map_pc_1470: 	.quad pc_1470
map_pc_1474: 	.quad pc_1474
map_pc_1478: 	.quad pc_1478
map_pc_147c: 	.quad pc_147c
map_pc_1480: 	.quad pc_1480
map_pc_1484: 	.quad pc_1484
map_pc_1488: 	.quad pc_1488
map_pc_148c: 	.quad pc_148c
map_pc_1490: 	.quad pc_1490
map_pc_1494: 	.quad pc_1494
map_pc_1498: 	.quad pc_1498
map_pc_149c: 	.quad pc_149c
map_pc_14a0: 	.quad pc_14a0
map_pc_14a4: 	.quad pc_14a4
map_pc_14a8: 	.quad pc_14a8
map_pc_14ac: 	.quad pc_14ac
map_pc_14b0: 	.quad pc_14b0
map_pc_14b4: 	.quad pc_14b4
map_pc_14b8: 	.quad pc_14b8
map_pc_14bc: 	.quad pc_14bc
map_pc_14c0: 	.quad pc_14c0
map_pc_14c4: 	.quad pc_14c4
map_pc_14c8: 	.quad pc_14c8
map_pc_14cc: 	.quad pc_14cc
map_pc_14d0: 	.quad pc_14d0
map_pc_14d4: 	.quad pc_14d4
map_pc_14d8: 	.quad pc_14d8
map_pc_14dc: 	.quad pc_14dc
map_pc_14e0: 	.quad pc_14e0
map_pc_14e4: 	.quad pc_14e4
map_pc_14e8: 	.quad pc_14e8
map_pc_14ec: 	.quad pc_14ec
map_pc_14f0: 	.quad pc_14f0
map_pc_14f4: 	.quad pc_14f4
map_pc_14f8: 	.quad pc_14f8
map_pc_14fc: 	.quad pc_14fc
map_pc_1500: 	.quad pc_1500
map_pc_1504: 	.quad pc_1504
map_pc_1508: 	.quad pc_1508
map_pc_150c: 	.quad pc_150c
map_pc_1510: 	.quad pc_1510
map_pc_1514: 	.quad pc_1514
map_pc_1518: 	.quad pc_1518
map_pc_151c: 	.quad pc_151c
map_pc_1520: 	.quad pc_1520
map_pc_1524: 	.quad pc_1524
map_pc_1528: 	.quad pc_1528
map_pc_152c: 	.quad pc_152c
map_pc_1530: 	.quad pc_1530
map_pc_1534: 	.quad pc_1534
map_pc_1538: 	.quad pc_1538
map_pc_153c: 	.quad pc_153c
map_pc_1540: 	.quad pc_1540
map_pc_1544: 	.quad pc_1544
map_pc_1548: 	.quad pc_1548
map_pc_154c: 	.quad pc_154c
map_pc_1550: 	.quad pc_1550
map_pc_1554: 	.quad pc_1554
map_pc_1558: 	.quad pc_1558
map_pc_155c: 	.quad pc_155c
map_pc_1560: 	.quad pc_1560
map_pc_1564: 	.quad pc_1564
map_pc_1568: 	.quad pc_1568
map_pc_156c: 	.quad pc_156c
map_pc_1570: 	.quad pc_1570
map_pc_1574: 	.quad pc_1574
map_pc_1578: 	.quad pc_1578
map_pc_157c: 	.quad pc_157c
map_pc_1580: 	.quad pc_1580
map_pc_1584: 	.quad pc_1584
map_pc_1588: 	.quad pc_1588
map_pc_158c: 	.quad pc_158c
map_pc_1590: 	.quad pc_1590
map_pc_1594: 	.quad pc_1594
map_pc_1598: 	.quad pc_1598
map_pc_159c: 	.quad pc_159c
map_pc_15a0: 	.quad pc_15a0
map_pc_15a4: 	.quad pc_15a4
map_pc_15a8: 	.quad pc_15a8
map_pc_15ac: 	.quad pc_15ac
map_pc_15b0: 	.quad pc_15b0
map_pc_15b4: 	.quad pc_15b4
map_pc_15b8: 	.quad pc_15b8
map_pc_15bc: 	.quad pc_15bc
map_pc_15c0: 	.quad pc_15c0
map_pc_15c4: 	.quad pc_15c4
map_pc_15c8: 	.quad pc_15c8
map_pc_15cc: 	.quad pc_15cc
map_pc_15d0: 	.quad pc_15d0
map_pc_15d4: 	.quad pc_15d4
map_pc_15d8: 	.quad pc_15d8
map_pc_15dc: 	.quad pc_15dc
map_pc_15e0: 	.quad pc_15e0
map_pc_15e4: 	.quad pc_15e4
map_pc_15e8: 	.quad pc_15e8
map_pc_15ec: 	.quad pc_15ec
map_pc_15f0: 	.quad pc_15f0
map_pc_15f4: 	.quad pc_15f4
map_pc_15f8: 	.quad pc_15f8
map_pc_15fc: 	.quad pc_15fc
map_pc_1600: 	.quad pc_1600
map_pc_1604: 	.quad pc_1604
map_pc_1608: 	.quad pc_1608
map_pc_160c: 	.quad pc_160c
map_pc_1610: 	.quad pc_1610
map_pc_1614: 	.quad pc_1614
map_pc_1618: 	.quad pc_1618
map_pc_161c: 	.quad pc_161c
map_pc_1620: 	.quad pc_1620
map_pc_1624: 	.quad pc_1624
map_pc_1628: 	.quad pc_1628
map_pc_162c: 	.quad pc_162c
map_pc_1630: 	.quad pc_1630
map_pc_1634: 	.quad pc_1634
map_pc_1638: 	.quad pc_1638
map_pc_163c: 	.quad pc_163c
map_pc_1640: 	.quad pc_1640
map_pc_1644: 	.quad pc_1644
map_pc_1648: 	.quad pc_1648
map_pc_164c: 	.quad pc_164c
map_pc_1650: 	.quad pc_1650
map_pc_1654: 	.quad pc_1654
map_pc_1658: 	.quad pc_1658
map_pc_165c: 	.quad pc_165c
map_pc_1660: 	.quad pc_1660
map_pc_1664: 	.quad pc_1664
map_pc_1668: 	.quad pc_1668
map_pc_166c: 	.quad pc_166c
map_pc_1670: 	.quad pc_1670
map_pc_1674: 	.quad pc_1674
map_pc_1678: 	.quad pc_1678
map_pc_167c: 	.quad pc_167c
map_pc_1680: 	.quad pc_1680
map_pc_1684: 	.quad pc_1684
map_pc_1688: 	.quad pc_1688
map_pc_168c: 	.quad pc_168c
map_pc_1690: 	.quad pc_1690
map_pc_1694: 	.quad pc_1694
map_pc_1698: 	.quad pc_1698
map_pc_169c: 	.quad pc_169c
map_pc_16a0: 	.quad pc_16a0
map_pc_16a4: 	.quad pc_16a4
map_pc_16a8: 	.quad pc_16a8
map_pc_16ac: 	.quad pc_16ac
map_pc_16b0: 	.quad pc_16b0
map_pc_16b4: 	.quad pc_16b4
map_pc_16b8: 	.quad pc_16b8
map_pc_16bc: 	.quad pc_16bc
map_pc_16c0: 	.quad pc_16c0
map_pc_16c4: 	.quad pc_16c4
map_pc_16c8: 	.quad pc_16c8
map_pc_16cc: 	.quad pc_16cc
map_pc_16d0: 	.quad pc_16d0
map_pc_16d4: 	.quad pc_16d4
map_pc_16d8: 	.quad pc_16d8
map_pc_16dc: 	.quad pc_16dc
map_pc_16e0: 	.quad pc_16e0
map_pc_16e4: 	.quad pc_16e4
map_pc_16e8: 	.quad pc_16e8
map_pc_16ec: 	.quad pc_16ec
map_pc_16f0: 	.quad pc_16f0
map_pc_16f4: 	.quad pc_16f4
map_pc_16f8: 	.quad pc_16f8
map_pc_16fc: 	.quad pc_16fc
map_pc_1700: 	.quad pc_1700
map_pc_1704: 	.quad pc_1704
map_pc_1708: 	.quad pc_1708
map_pc_170c: 	.quad pc_170c
map_pc_1710: 	.quad pc_1710
map_pc_1714: 	.quad pc_1714
map_pc_1718: 	.quad pc_1718
map_pc_171c: 	.quad pc_171c
map_pc_1720: 	.quad pc_1720
map_pc_1724: 	.quad pc_1724
map_pc_1728: 	.quad pc_1728
map_pc_172c: 	.quad pc_172c
map_pc_1730: 	.quad pc_1730
map_pc_1734: 	.quad pc_1734
map_pc_1738: 	.quad pc_1738
map_pc_173c: 	.quad pc_173c
map_pc_1740: 	.quad pc_1740
map_pc_1744: 	.quad pc_1744
map_pc_1748: 	.quad pc_1748
map_pc_174c: 	.quad pc_174c
map_pc_1750: 	.quad pc_1750
map_pc_1754: 	.quad pc_1754
map_pc_1758: 	.quad pc_1758
map_pc_175c: 	.quad pc_175c
map_pc_1760: 	.quad pc_1760
map_pc_1764: 	.quad pc_1764
map_pc_1768: 	.quad pc_1768
map_pc_176c: 	.quad pc_176c
map_pc_1770: 	.quad pc_1770
map_pc_1774: 	.quad pc_1774
map_pc_1778: 	.quad pc_1778
map_pc_177c: 	.quad pc_177c
map_pc_1780: 	.quad pc_1780
map_pc_1784: 	.quad pc_1784
map_pc_1788: 	.quad pc_1788
map_pc_178c: 	.quad pc_178c
map_pc_1790: 	.quad pc_1790
map_pc_1794: 	.quad pc_1794
map_pc_1798: 	.quad pc_1798
map_pc_179c: 	.quad pc_179c
map_pc_17a0: 	.quad pc_17a0
map_pc_17a4: 	.quad pc_17a4
map_pc_17a8: 	.quad pc_17a8
map_pc_17ac: 	.quad pc_17ac
map_pc_17b0: 	.quad pc_17b0
map_pc_17b4: 	.quad pc_17b4
map_pc_17b8: 	.quad pc_17b8
map_pc_17bc: 	.quad pc_17bc
map_pc_17c0: 	.quad pc_17c0
map_pc_17c4: 	.quad pc_17c4
map_pc_17c8: 	.quad pc_17c8
map_pc_17cc: 	.quad pc_17cc
map_pc_17d0: 	.quad pc_17d0
map_pc_17d4: 	.quad pc_17d4
map_pc_17d8: 	.quad pc_17d8
map_pc_17dc: 	.quad pc_17dc
map_pc_17e0: 	.quad pc_17e0
map_pc_17e4: 	.quad pc_17e4
map_pc_17e8: 	.quad pc_17e8
map_pc_17ec: 	.quad pc_17ec
map_pc_17f0: 	.quad pc_17f0
map_pc_17f4: 	.quad pc_17f4
map_pc_17f8: 	.quad pc_17f8
map_pc_17fc: 	.quad pc_17fc
map_pc_1800: 	.quad pc_1800
map_pc_1804: 	.quad pc_1804
map_pc_1808: 	.quad pc_1808
map_pc_180c: 	.quad pc_180c
map_pc_1810: 	.quad pc_1810
map_pc_1814: 	.quad pc_1814
map_pc_1818: 	.quad pc_1818
map_pc_181c: 	.quad pc_181c
map_pc_1820: 	.quad pc_1820
map_pc_1824: 	.quad pc_1824
map_pc_1828: 	.quad pc_1828
map_pc_182c: 	.quad pc_182c
map_pc_1830: 	.quad pc_1830
map_pc_1834: 	.quad pc_1834
map_pc_1838: 	.quad pc_1838
map_pc_183c: 	.quad pc_183c
map_pc_1840: 	.quad pc_1840
map_pc_1844: 	.quad pc_1844
map_pc_1848: 	.quad pc_1848
map_pc_184c: 	.quad pc_184c
map_pc_1850: 	.quad pc_1850
map_pc_1854: 	.quad pc_1854
map_pc_1858: 	.quad pc_1858
map_pc_185c: 	.quad pc_185c
map_pc_1860: 	.quad pc_1860
map_pc_1864: 	.quad pc_1864
map_pc_1868: 	.quad pc_1868
map_pc_186c: 	.quad pc_186c
map_pc_1870: 	.quad pc_1870
map_pc_1874: 	.quad pc_1874
map_pc_1878: 	.quad pc_1878
map_pc_187c: 	.quad pc_187c
map_pc_1880: 	.quad pc_1880
map_pc_1884: 	.quad pc_1884
map_pc_1888: 	.quad pc_1888
map_pc_188c: 	.quad pc_188c
map_pc_1890: 	.quad pc_1890
map_pc_1894: 	.quad pc_1894
map_pc_1898: 	.quad pc_1898
map_pc_189c: 	.quad pc_189c
map_pc_18a0: 	.quad pc_18a0
map_pc_18a4: 	.quad pc_18a4
map_pc_18a8: 	.quad pc_18a8
map_pc_18ac: 	.quad pc_18ac
map_pc_18b0: 	.quad pc_18b0
map_pc_18b4: 	.quad pc_18b4
map_pc_18b8: 	.quad pc_18b8
map_pc_18bc: 	.quad pc_18bc
map_pc_18c0: 	.quad pc_18c0
map_pc_18c4: 	.quad pc_18c4
map_pc_18c8: 	.quad pc_18c8
map_pc_18cc: 	.quad pc_18cc
map_pc_18d0: 	.quad pc_18d0
map_pc_18d4: 	.quad pc_18d4
map_pc_18d8: 	.quad pc_18d8
map_pc_18dc: 	.quad pc_18dc
map_pc_18e0: 	.quad pc_18e0
map_pc_18e4: 	.quad pc_18e4
map_pc_18e8: 	.quad pc_18e8
map_pc_18ec: 	.quad pc_18ec
map_pc_18f0: 	.quad pc_18f0
map_pc_18f4: 	.quad pc_18f4
map_pc_18f8: 	.quad pc_18f8
map_pc_18fc: 	.quad pc_18fc
map_pc_1900: 	.quad pc_1900
map_pc_1904: 	.quad pc_1904
map_pc_1908: 	.quad pc_1908
map_pc_190c: 	.quad pc_190c
map_pc_1910: 	.quad pc_1910
map_pc_1914: 	.quad pc_1914
map_pc_1918: 	.quad pc_1918
map_pc_191c: 	.quad pc_191c
map_pc_1920: 	.quad pc_1920
map_pc_1924: 	.quad pc_1924
map_pc_1928: 	.quad pc_1928
map_pc_192c: 	.quad pc_192c
map_pc_1930: 	.quad pc_1930
map_pc_1934: 	.quad pc_1934
map_pc_1938: 	.quad pc_1938
map_pc_193c: 	.quad pc_193c
map_pc_1940: 	.quad pc_1940
map_pc_1944: 	.quad pc_1944
map_pc_1948: 	.quad pc_1948
map_pc_194c: 	.quad pc_194c
map_pc_1950: 	.quad pc_1950
map_pc_1954: 	.quad pc_1954
map_pc_1958: 	.quad pc_1958
map_pc_195c: 	.quad pc_195c
map_pc_1960: 	.quad pc_1960
map_pc_1964: 	.quad pc_1964
map_pc_1968: 	.quad pc_1968
map_pc_196c: 	.quad pc_196c
map_pc_1970: 	.quad pc_1970
map_pc_1974: 	.quad pc_1974
map_pc_1978: 	.quad pc_1978
map_pc_197c: 	.quad pc_197c
map_pc_1980: 	.quad pc_1980
map_pc_1984: 	.quad pc_1984
map_pc_1988: 	.quad pc_1988
map_pc_198c: 	.quad pc_198c
map_pc_1990: 	.quad pc_1990
map_pc_1994: 	.quad pc_1994
map_pc_1998: 	.quad pc_1998
map_pc_199c: 	.quad pc_199c
map_pc_19a0: 	.quad pc_19a0
map_pc_19a4: 	.quad pc_19a4
map_pc_19a8: 	.quad pc_19a8
map_pc_19ac: 	.quad pc_19ac
map_pc_19b0: 	.quad pc_19b0
map_pc_19b4: 	.quad pc_19b4
map_pc_19b8: 	.quad pc_19b8
map_pc_19bc: 	.quad pc_19bc
map_pc_19c0: 	.quad pc_19c0
map_pc_19c4: 	.quad pc_19c4
map_pc_19c8: 	.quad pc_19c8
map_pc_19cc: 	.quad pc_19cc
map_pc_19d0: 	.quad pc_19d0
map_pc_19d4: 	.quad pc_19d4
map_pc_19d8: 	.quad pc_19d8
map_pc_19dc: 	.quad pc_19dc
map_pc_19e0: 	.quad pc_19e0
map_pc_19e4: 	.quad pc_19e4
map_pc_19e8: 	.quad pc_19e8
map_pc_19ec: 	.quad pc_19ec
map_pc_19f0: 	.quad pc_19f0
map_pc_19f4: 	.quad pc_19f4
map_pc_19f8: 	.quad pc_19f8
map_pc_19fc: 	.quad pc_19fc
map_pc_1a00: 	.quad pc_1a00
map_pc_1a04: 	.quad pc_1a04
map_pc_1a08: 	.quad pc_1a08
map_pc_1a0c: 	.quad pc_1a0c
map_pc_1a10: 	.quad pc_1a10
map_pc_1a14: 	.quad pc_1a14
map_pc_1a18: 	.quad pc_1a18
map_pc_1a1c: 	.quad pc_1a1c
map_pc_1a20: 	.quad pc_1a20
map_pc_1a24: 	.quad pc_1a24
map_pc_1a28: 	.quad pc_1a28
map_pc_1a2c: 	.quad pc_1a2c
map_pc_1a30: 	.quad pc_1a30
map_pc_1a34: 	.quad pc_1a34
map_pc_1a38: 	.quad pc_1a38
map_pc_1a3c: 	.quad pc_1a3c
map_pc_1a40: 	.quad pc_1a40
map_pc_1a44: 	.quad pc_1a44
map_pc_1a48: 	.quad pc_1a48
map_pc_1a4c: 	.quad pc_1a4c
map_pc_1a50: 	.quad pc_1a50
map_pc_1a54: 	.quad pc_1a54
map_pc_1a58: 	.quad pc_1a58
map_pc_1a5c: 	.quad pc_1a5c
map_pc_1a60: 	.quad pc_1a60
map_pc_1a64: 	.quad pc_1a64
map_pc_1a68: 	.quad pc_1a68
map_pc_1a6c: 	.quad pc_1a6c
map_pc_1a70: 	.quad pc_1a70
map_pc_1a74: 	.quad pc_1a74
map_pc_1a78: 	.quad pc_1a78
map_pc_1a7c: 	.quad pc_1a7c
map_pc_1a80: 	.quad pc_1a80
map_pc_1a84: 	.quad pc_1a84
map_pc_1a88: 	.quad pc_1a88
map_pc_1a8c: 	.quad pc_1a8c
map_pc_1a90: 	.quad pc_1a90
map_pc_1a94: 	.quad pc_1a94
map_pc_1a98: 	.quad pc_1a98
map_pc_1a9c: 	.quad pc_1a9c
map_pc_1aa0: 	.quad pc_1aa0
map_pc_1aa4: 	.quad pc_1aa4
map_pc_1aa8: 	.quad pc_1aa8
map_pc_1aac: 	.quad pc_1aac
map_pc_1ab0: 	.quad pc_1ab0
map_pc_1ab4: 	.quad pc_1ab4
map_pc_1ab8: 	.quad pc_1ab8
map_pc_1abc: 	.quad pc_1abc
map_pc_1ac0: 	.quad pc_1ac0
map_pc_1ac4: 	.quad pc_1ac4
map_pc_1ac8: 	.quad pc_1ac8
map_pc_1acc: 	.quad pc_1acc
map_pc_1ad0: 	.quad pc_1ad0
map_pc_1ad4: 	.quad pc_1ad4
map_pc_1ad8: 	.quad pc_1ad8
map_pc_1adc: 	.quad pc_1adc
map_pc_1ae0: 	.quad pc_1ae0
map_pc_1ae4: 	.quad pc_1ae4
map_pc_1ae8: 	.quad pc_1ae8
map_pc_1aec: 	.quad pc_1aec
map_pc_1af0: 	.quad pc_1af0
map_pc_1af4: 	.quad pc_1af4
map_pc_1af8: 	.quad pc_1af8
map_pc_1afc: 	.quad pc_1afc
map_pc_1b00: 	.quad pc_1b00
map_pc_1b04: 	.quad pc_1b04
map_pc_1b08: 	.quad pc_1b08
map_pc_1b0c: 	.quad pc_1b0c
map_pc_1b10: 	.quad pc_1b10
map_pc_1b14: 	.quad pc_1b14
map_pc_1b18: 	.quad pc_1b18
map_pc_1b1c: 	.quad pc_1b1c
map_pc_1b20: 	.quad pc_1b20
map_pc_1b24: 	.quad pc_1b24
map_pc_1b28: 	.quad pc_1b28
map_pc_1b2c: 	.quad pc_1b2c
map_pc_1b30: 	.quad pc_1b30
map_pc_1b34: 	.quad pc_1b34
map_pc_1b38: 	.quad pc_1b38
map_pc_1b3c: 	.quad pc_1b3c
map_pc_1b40: 	.quad pc_1b40
map_pc_1b44: 	.quad pc_1b44
map_pc_1b48: 	.quad pc_1b48
map_pc_1b4c: 	.quad pc_1b4c
map_pc_1b50: 	.quad pc_1b50
map_pc_1b54: 	.quad pc_1b54
map_pc_1b58: 	.quad pc_1b58
map_pc_1b5c: 	.quad pc_1b5c
map_pc_1b60: 	.quad pc_1b60
map_pc_1b64: 	.quad pc_1b64
map_pc_1b68: 	.quad pc_1b68
map_pc_1b6c: 	.quad pc_1b6c
map_pc_1b70: 	.quad pc_1b70
map_pc_1b74: 	.quad pc_1b74
map_pc_1b78: 	.quad pc_1b78
map_pc_1b7c: 	.quad pc_1b7c
map_pc_1b80: 	.quad pc_1b80
map_pc_1b84: 	.quad pc_1b84
map_pc_1b88: 	.quad pc_1b88
map_pc_1b8c: 	.quad pc_1b8c
map_pc_1b90: 	.quad pc_1b90
map_pc_1b94: 	.quad pc_1b94
map_pc_1b98: 	.quad pc_1b98
map_pc_1b9c: 	.quad pc_1b9c
map_pc_1ba0: 	.quad pc_1ba0
map_pc_1ba4: 	.quad pc_1ba4
map_pc_1ba8: 	.quad pc_1ba8
map_pc_1bac: 	.quad pc_1bac
map_pc_1bb0: 	.quad pc_1bb0
map_pc_1bb4: 	.quad pc_1bb4
map_pc_1bb8: 	.quad pc_1bb8
map_pc_1bbc: 	.quad pc_1bbc
map_pc_1bc0: 	.quad pc_1bc0
map_pc_1bc4: 	.quad pc_1bc4
map_pc_1bc8: 	.quad pc_1bc8
map_pc_1bcc: 	.quad pc_1bcc
map_pc_1bd0: 	.quad pc_1bd0
map_pc_1bd4: 	.quad pc_1bd4
map_pc_1bd8: 	.quad pc_1bd8
map_pc_1bdc: 	.quad pc_1bdc
map_pc_1be0: 	.quad pc_1be0
map_pc_1be4: 	.quad pc_1be4
map_pc_1be8: 	.quad pc_1be8
map_pc_1bec: 	.quad pc_1bec
map_pc_1bf0: 	.quad pc_1bf0
map_pc_1bf4: 	.quad pc_1bf4
map_pc_1bf8: 	.quad pc_1bf8
map_pc_1bfc: 	.quad pc_1bfc
map_pc_1c00: 	.quad pc_1c00
map_pc_1c04: 	.quad pc_1c04
map_pc_1c08: 	.quad pc_1c08
map_pc_1c0c: 	.quad pc_1c0c
map_pc_1c10: 	.quad pc_1c10
map_pc_1c14: 	.quad pc_1c14
map_pc_1c18: 	.quad pc_1c18
map_pc_1c1c: 	.quad pc_1c1c
map_pc_1c20: 	.quad pc_1c20
map_pc_1c24: 	.quad pc_1c24
map_pc_1c28: 	.quad pc_1c28
map_pc_1c2c: 	.quad pc_1c2c
map_pc_1c30: 	.quad pc_1c30
map_pc_1c34: 	.quad pc_1c34
map_pc_1c38: 	.quad pc_1c38
map_pc_1c3c: 	.quad pc_1c3c
map_pc_1c40: 	.quad pc_1c40
map_pc_1c44: 	.quad pc_1c44
map_pc_1c48: 	.quad pc_1c48
map_pc_1c4c: 	.quad pc_1c4c
map_pc_1c50: 	.quad pc_1c50
map_pc_1c54: 	.quad pc_1c54
map_pc_1c58: 	.quad pc_1c58
map_pc_1c5c: 	.quad pc_1c5c
map_pc_1c60: 	.quad pc_1c60
map_pc_1c64: 	.quad pc_1c64
map_pc_1c68: 	.quad pc_1c68
map_pc_1c6c: 	.quad pc_1c6c
map_pc_1c70: 	.quad pc_1c70
map_pc_1c74: 	.quad pc_1c74
map_pc_1c78: 	.quad pc_1c78
map_pc_1c7c: 	.quad pc_1c7c
map_pc_1c80: 	.quad pc_1c80
map_pc_1c84: 	.quad pc_1c84
map_pc_1c88: 	.quad pc_1c88
map_pc_1c8c: 	.quad pc_1c8c
map_pc_1c90: 	.quad pc_1c90
map_pc_1c94: 	.quad pc_1c94
map_pc_1c98: 	.quad pc_1c98
map_pc_1c9c: 	.quad pc_1c9c
map_pc_1ca0: 	.quad pc_1ca0
map_pc_1ca4: 	.quad pc_1ca4
map_pc_1ca8: 	.quad pc_1ca8
map_pc_1cac: 	.quad pc_1cac
map_pc_1cb0: 	.quad pc_1cb0
map_pc_1cb4: 	.quad pc_1cb4
map_pc_1cb8: 	.quad pc_1cb8
map_pc_1cbc: 	.quad pc_1cbc
map_pc_1cc0: 	.quad pc_1cc0
map_pc_1cc4: 	.quad pc_1cc4
map_pc_1cc8: 	.quad pc_1cc8
map_pc_1ccc: 	.quad pc_1ccc
map_pc_1cd0: 	.quad pc_1cd0
map_pc_1cd4: 	.quad pc_1cd4
map_pc_1cd8: 	.quad pc_1cd8
map_pc_1cdc: 	.quad pc_1cdc
map_pc_1ce0: 	.quad pc_1ce0
map_pc_1ce4: 	.quad pc_1ce4
map_pc_1ce8: 	.quad pc_1ce8
map_pc_1cec: 	.quad pc_1cec
map_pc_1cf0: 	.quad pc_1cf0
map_pc_1cf4: 	.quad pc_1cf4
map_pc_1cf8: 	.quad pc_1cf8
map_pc_1cfc: 	.quad pc_1cfc
map_pc_1d00: 	.quad pc_1d00
map_pc_1d04: 	.quad pc_1d04
map_pc_1d08: 	.quad pc_1d08
map_pc_1d0c: 	.quad pc_1d0c
map_pc_1d10: 	.quad pc_1d10
map_pc_1d14: 	.quad pc_1d14
map_pc_1d18: 	.quad pc_1d18
map_pc_1d1c: 	.quad pc_1d1c
map_pc_1d20: 	.quad pc_1d20
map_pc_1d24: 	.quad pc_1d24
map_pc_1d28: 	.quad pc_1d28
map_pc_1d2c: 	.quad pc_1d2c
map_pc_1d30: 	.quad pc_1d30
map_pc_1d34: 	.quad pc_1d34
map_pc_1d38: 	.quad pc_1d38
map_pc_1d3c: 	.quad pc_1d3c
map_pc_1d40: 	.quad pc_1d40
map_pc_1d44: 	.quad pc_1d44
map_pc_1d48: 	.quad pc_1d48
map_pc_1d4c: 	.quad pc_1d4c
map_pc_1d50: 	.quad pc_1d50
map_pc_1d54: 	.quad pc_1d54
map_pc_1d58: 	.quad pc_1d58
map_pc_1d5c: 	.quad pc_1d5c
map_pc_1d60: 	.quad pc_1d60
map_pc_1d64: 	.quad pc_1d64
map_pc_1d68: 	.quad pc_1d68
map_pc_1d6c: 	.quad pc_1d6c
map_pc_1d70: 	.quad pc_1d70
map_pc_1d74: 	.quad pc_1d74
map_pc_1d78: 	.quad pc_1d78
map_pc_1d7c: 	.quad pc_1d7c
map_pc_1d80: 	.quad pc_1d80
map_pc_1d84: 	.quad pc_1d84
map_pc_1d88: 	.quad pc_1d88
map_pc_1d8c: 	.quad pc_1d8c
map_pc_1d90: 	.quad pc_1d90
map_pc_1d94: 	.quad pc_1d94
map_pc_1d98: 	.quad pc_1d98
map_pc_1d9c: 	.quad pc_1d9c
map_pc_1da0: 	.quad pc_1da0
map_pc_1da4: 	.quad pc_1da4
map_pc_1da8: 	.quad pc_1da8
map_pc_1dac: 	.quad pc_1dac
map_pc_1db0: 	.quad pc_1db0
map_pc_1db4: 	.quad pc_1db4
map_pc_1db8: 	.quad pc_1db8
map_pc_1dbc: 	.quad pc_1dbc
map_pc_1dc0: 	.quad pc_1dc0
map_pc_1dc4: 	.quad pc_1dc4
map_pc_1dc8: 	.quad pc_1dc8
map_pc_1dcc: 	.quad pc_1dcc
map_pc_1dd0: 	.quad pc_1dd0
map_pc_1dd4: 	.quad pc_1dd4
map_pc_1dd8: 	.quad pc_1dd8
map_pc_1ddc: 	.quad pc_1ddc
map_pc_1de0: 	.quad pc_1de0
map_pc_1de4: 	.quad pc_1de4
map_pc_1de8: 	.quad pc_1de8
map_pc_1dec: 	.quad pc_1dec
map_pc_1df0: 	.quad pc_1df0
map_pc_1df4: 	.quad pc_1df4
map_pc_1df8: 	.quad pc_1df8
map_pc_1dfc: 	.quad pc_1dfc
map_pc_1e00: 	.quad pc_1e00
map_pc_1e04: 	.quad pc_1e04
map_pc_1e08: 	.quad pc_1e08
map_pc_1e0c: 	.quad pc_1e0c
map_pc_1e10: 	.quad pc_1e10
map_pc_1e14: 	.quad pc_1e14
map_pc_1e18: 	.quad pc_1e18
map_pc_1e1c: 	.quad pc_1e1c
map_pc_1e20: 	.quad pc_1e20
map_pc_1e24: 	.quad pc_1e24
map_pc_1e28: 	.quad pc_1e28
map_pc_1e2c: 	.quad pc_1e2c
map_pc_1e30: 	.quad pc_1e30
map_pc_1e34: 	.quad pc_1e34
map_pc_1e38: 	.quad pc_1e38
map_pc_1e3c: 	.quad pc_1e3c
map_pc_1e40: 	.quad pc_1e40
map_pc_1e44: 	.quad pc_1e44
map_pc_1e48: 	.quad pc_1e48
map_pc_1e4c: 	.quad pc_1e4c
map_pc_1e50: 	.quad pc_1e50
map_pc_1e54: 	.quad pc_1e54
map_pc_1e58: 	.quad pc_1e58
map_pc_1e5c: 	.quad pc_1e5c
map_pc_1e60: 	.quad pc_1e60
map_pc_1e64: 	.quad pc_1e64
map_pc_1e68: 	.quad pc_1e68
map_pc_1e6c: 	.quad pc_1e6c
map_pc_1e70: 	.quad pc_1e70
map_pc_1e74: 	.quad pc_1e74
map_pc_1e78: 	.quad pc_1e78
map_pc_1e7c: 	.quad pc_1e7c
map_pc_1e80: 	.quad pc_1e80
map_pc_1e84: 	.quad pc_1e84
map_pc_1e88: 	.quad pc_1e88
map_pc_1e8c: 	.quad pc_1e8c
map_pc_1e90: 	.quad pc_1e90
map_pc_1e94: 	.quad pc_1e94
map_pc_1e98: 	.quad pc_1e98
map_pc_1e9c: 	.quad pc_1e9c
map_pc_1ea0: 	.quad pc_1ea0
map_pc_1ea4: 	.quad pc_1ea4
map_pc_1ea8: 	.quad pc_1ea8
map_pc_1eac: 	.quad pc_1eac
map_pc_1eb0: 	.quad pc_1eb0
map_pc_1eb4: 	.quad pc_1eb4
map_pc_1eb8: 	.quad pc_1eb8
map_pc_1ebc: 	.quad pc_1ebc
map_pc_1ec0: 	.quad pc_1ec0
map_pc_1ec4: 	.quad pc_1ec4
map_pc_1ec8: 	.quad pc_1ec8
map_pc_1ecc: 	.quad pc_1ecc
map_pc_1ed0: 	.quad pc_1ed0
map_pc_1ed4: 	.quad pc_1ed4
map_pc_1ed8: 	.quad pc_1ed8
map_pc_1edc: 	.quad pc_1edc
map_pc_1ee0: 	.quad pc_1ee0
map_pc_1ee4: 	.quad pc_1ee4
map_pc_1ee8: 	.quad pc_1ee8
map_pc_1eec: 	.quad pc_1eec
map_pc_1ef0: 	.quad pc_1ef0
map_pc_1ef4: 	.quad pc_1ef4
map_pc_1ef8: 	.quad pc_1ef8
map_pc_1efc: 	.quad pc_1efc
map_pc_1f00: 	.quad pc_1f00
map_pc_1f04: 	.quad pc_1f04
map_pc_1f08: 	.quad pc_1f08
map_pc_1f0c: 	.quad pc_1f0c
map_pc_1f10: 	.quad pc_1f10
map_pc_1f14: 	.quad pc_1f14
map_pc_1f18: 	.quad pc_1f18
map_pc_1f1c: 	.quad pc_1f1c
map_pc_1f20: 	.quad pc_1f20
map_pc_1f24: 	.quad pc_1f24
map_pc_1f28: 	.quad pc_1f28
map_pc_1f2c: 	.quad pc_1f2c
map_pc_1f30: 	.quad pc_1f30
map_pc_1f34: 	.quad pc_1f34
map_pc_1f38: 	.quad pc_1f38
map_pc_1f3c: 	.quad pc_1f3c
map_pc_1f40: 	.quad pc_1f40
map_pc_1f44: 	.quad pc_1f44
map_pc_1f48: 	.quad pc_1f48
map_pc_1f4c: 	.quad pc_1f4c
map_pc_1f50: 	.quad pc_1f50
map_pc_1f54: 	.quad pc_1f54
map_pc_1f58: 	.quad pc_1f58
map_pc_1f5c: 	.quad pc_1f5c
map_pc_1f60: 	.quad pc_1f60
map_pc_1f64: 	.quad pc_1f64
map_pc_1f68: 	.quad pc_1f68
map_pc_1f6c: 	.quad pc_1f6c
map_pc_1f70: 	.quad pc_1f70
map_pc_1f74: 	.quad pc_1f74
map_pc_1f78: 	.quad pc_1f78
map_pc_1f7c: 	.quad pc_1f7c
map_pc_1f80: 	.quad pc_1f80
map_pc_1f84: 	.quad pc_1f84
map_pc_1f88: 	.quad pc_1f88
map_pc_1f8c: 	.quad pc_1f8c
map_pc_1f90: 	.quad pc_1f90
map_pc_1f94: 	.quad pc_1f94
map_pc_1f98: 	.quad pc_1f98
map_pc_1f9c: 	.quad pc_1f9c
map_pc_1fa0: 	.quad pc_1fa0
map_pc_1fa4: 	.quad pc_1fa4
map_pc_1fa8: 	.quad pc_1fa8
map_pc_1fac: 	.quad pc_1fac
map_pc_1fb0: 	.quad pc_1fb0
map_pc_1fb4: 	.quad pc_1fb4
map_pc_1fb8: 	.quad pc_1fb8
map_pc_1fbc: 	.quad pc_1fbc
map_pc_1fc0: 	.quad pc_1fc0
map_pc_1fc4: 	.quad pc_1fc4
map_pc_1fc8: 	.quad pc_1fc8
map_pc_1fcc: 	.quad pc_1fcc
map_pc_1fd0: 	.quad pc_1fd0
map_pc_1fd4: 	.quad pc_1fd4
map_pc_1fd8: 	.quad pc_1fd8
map_pc_1fdc: 	.quad pc_1fdc
map_pc_1fe0: 	.quad pc_1fe0
map_pc_1fe4: 	.quad pc_1fe4
map_pc_1fe8: 	.quad pc_1fe8
map_pc_1fec: 	.quad pc_1fec
map_pc_1ff0: 	.quad pc_1ff0
map_pc_1ff4: 	.quad pc_1ff4
map_pc_1ff8: 	.quad pc_1ff8
map_pc_1ffc: 	.quad pc_1ffc
map_pc_2000: 	.quad pc_2000
map_pc_2004: 	.quad pc_2004
map_pc_2008: 	.quad pc_2008
map_pc_200c: 	.quad pc_200c
map_pc_2010: 	.quad pc_2010
map_pc_2014: 	.quad pc_2014
map_pc_2018: 	.quad pc_2018
map_pc_201c: 	.quad pc_201c
map_pc_2020: 	.quad pc_2020
map_pc_2024: 	.quad pc_2024
map_pc_2028: 	.quad pc_2028
map_pc_202c: 	.quad pc_202c
map_pc_2030: 	.quad pc_2030
map_pc_2034: 	.quad pc_2034
map_pc_2038: 	.quad pc_2038
map_pc_203c: 	.quad pc_203c
map_pc_2040: 	.quad pc_2040
map_pc_2044: 	.quad pc_2044
map_pc_2048: 	.quad pc_2048
map_pc_204c: 	.quad pc_204c
map_pc_2050: 	.quad pc_2050
map_pc_2054: 	.quad pc_2054
map_pc_2058: 	.quad pc_2058
map_pc_205c: 	.quad pc_205c
map_pc_2060: 	.quad pc_2060
map_pc_2064: 	.quad pc_2064
map_pc_2068: 	.quad pc_2068
map_pc_206c: 	.quad pc_206c
map_pc_2070: 	.quad pc_2070
map_pc_2074: 	.quad pc_2074
map_pc_2078: 	.quad pc_2078
map_pc_207c: 	.quad pc_207c
map_pc_2080: 	.quad pc_2080
map_pc_2084: 	.quad pc_2084
map_pc_2088: 	.quad pc_2088
map_pc_208c: 	.quad pc_208c
map_pc_2090: 	.quad pc_2090
map_pc_2094: 	.quad pc_2094
map_pc_2098: 	.quad pc_2098
map_pc_209c: 	.quad pc_209c
map_pc_20a0: 	.quad pc_20a0
map_pc_20a4: 	.quad pc_20a4
map_pc_20a8: 	.quad pc_20a8
map_pc_20ac: 	.quad pc_20ac
map_pc_20b0: 	.quad pc_20b0
map_pc_20b4: 	.quad pc_20b4
map_pc_20b8: 	.quad pc_20b8
map_pc_20bc: 	.quad pc_20bc
map_pc_20c0: 	.quad pc_20c0
map_pc_20c4: 	.quad pc_20c4
map_pc_20c8: 	.quad pc_20c8
map_pc_20cc: 	.quad pc_20cc
map_pc_20d0: 	.quad pc_20d0
map_pc_20d4: 	.quad pc_20d4
map_pc_20d8: 	.quad pc_20d8
map_pc_20dc: 	.quad pc_20dc
map_pc_20e0: 	.quad pc_20e0
map_pc_20e4: 	.quad pc_20e4
map_pc_20e8: 	.quad pc_20e8
map_pc_20ec: 	.quad pc_20ec
map_pc_20f0: 	.quad pc_20f0
map_pc_20f4: 	.quad pc_20f4
map_pc_20f8: 	.quad pc_20f8
map_pc_20fc: 	.quad pc_20fc
map_pc_2100: 	.quad pc_2100
map_pc_2104: 	.quad pc_2104
map_pc_2108: 	.quad pc_2108
map_pc_210c: 	.quad pc_210c
map_pc_2110: 	.quad pc_2110
map_pc_2114: 	.quad pc_2114
map_pc_2118: 	.quad pc_2118
map_pc_211c: 	.quad pc_211c
map_pc_2120: 	.quad pc_2120
map_pc_2124: 	.quad pc_2124
map_pc_2128: 	.quad pc_2128
map_pc_212c: 	.quad pc_212c
map_pc_2130: 	.quad pc_2130
map_pc_2134: 	.quad pc_2134
map_pc_2138: 	.quad pc_2138
map_pc_213c: 	.quad pc_213c
map_pc_2140: 	.quad pc_2140
map_pc_2144: 	.quad pc_2144
map_pc_2148: 	.quad pc_2148
map_pc_214c: 	.quad pc_214c
map_pc_2150: 	.quad pc_2150
map_pc_2154: 	.quad pc_2154
map_pc_2158: 	.quad pc_2158
map_pc_215c: 	.quad pc_215c
map_pc_2160: 	.quad pc_2160
map_pc_2164: 	.quad pc_2164
map_pc_2168: 	.quad pc_2168
map_pc_216c: 	.quad pc_216c
map_pc_2170: 	.quad pc_2170
map_pc_2174: 	.quad pc_2174
map_pc_2178: 	.quad pc_2178
map_pc_217c: 	.quad pc_217c
map_pc_2180: 	.quad pc_2180
map_pc_2184: 	.quad pc_2184
map_pc_2188: 	.quad pc_2188
map_pc_218c: 	.quad pc_218c
map_pc_2190: 	.quad pc_2190
map_pc_2194: 	.quad pc_2194
map_pc_2198: 	.quad pc_2198
map_pc_219c: 	.quad pc_219c
map_pc_21a0: 	.quad pc_21a0
map_pc_21a4: 	.quad pc_21a4
map_pc_21a8: 	.quad pc_21a8
map_pc_21ac: 	.quad pc_21ac
map_pc_21b0: 	.quad pc_21b0
map_pc_21b4: 	.quad pc_21b4
map_pc_21b8: 	.quad pc_21b8
map_pc_21bc: 	.quad pc_21bc
map_pc_21c0: 	.quad pc_21c0
map_pc_21c4: 	.quad pc_21c4
map_pc_21c8: 	.quad pc_21c8
map_pc_21cc: 	.quad pc_21cc
map_pc_21d0: 	.quad pc_21d0
map_pc_21d4: 	.quad pc_21d4
map_pc_21d8: 	.quad pc_21d8
map_pc_21dc: 	.quad pc_21dc
map_pc_21e0: 	.quad pc_21e0
map_pc_21e4: 	.quad pc_21e4
map_pc_21e8: 	.quad pc_21e8
map_pc_21ec: 	.quad pc_21ec
map_pc_21f0: 	.quad pc_21f0
map_pc_21f4: 	.quad pc_21f4
map_pc_21f8: 	.quad pc_21f8
map_pc_21fc: 	.quad pc_21fc
map_pc_2200: 	.quad pc_2200
map_pc_2204: 	.quad pc_2204
map_pc_2208: 	.quad pc_2208
map_pc_220c: 	.quad pc_220c
map_pc_2210: 	.quad pc_2210
map_pc_2214: 	.quad pc_2214
map_pc_2218: 	.quad pc_2218
map_pc_221c: 	.quad pc_221c
map_pc_2220: 	.quad pc_2220
map_pc_2224: 	.quad pc_2224
map_pc_2228: 	.quad pc_2228
map_pc_222c: 	.quad pc_222c
map_pc_2230: 	.quad pc_2230
map_pc_2234: 	.quad pc_2234
map_pc_2238: 	.quad pc_2238
map_pc_223c: 	.quad pc_223c
map_pc_2240: 	.quad pc_2240
map_pc_2244: 	.quad pc_2244
map_pc_2248: 	.quad pc_2248
map_pc_224c: 	.quad pc_224c
map_pc_2250: 	.quad pc_2250
map_pc_2254: 	.quad pc_2254
map_pc_2258: 	.quad pc_2258
map_pc_225c: 	.quad pc_225c
map_pc_2260: 	.quad pc_2260
map_pc_2264: 	.quad pc_2264
map_pc_2268: 	.quad pc_2268
map_pc_226c: 	.quad pc_226c
map_pc_2270: 	.quad pc_2270
map_pc_2274: 	.quad pc_2274
map_pc_2278: 	.quad pc_2278
map_pc_227c: 	.quad pc_227c
map_pc_2280: 	.quad pc_2280
map_pc_2284: 	.quad pc_2284
map_pc_2288: 	.quad pc_2288
map_pc_228c: 	.quad pc_228c
map_pc_2290: 	.quad pc_2290
map_pc_2294: 	.quad pc_2294
map_pc_2298: 	.quad pc_2298
map_pc_229c: 	.quad pc_229c
map_pc_22a0: 	.quad pc_22a0
map_pc_22a4: 	.quad pc_22a4
map_pc_22a8: 	.quad pc_22a8
map_pc_22ac: 	.quad pc_22ac
map_pc_22b0: 	.quad pc_22b0
map_pc_22b4: 	.quad pc_22b4
map_pc_22b8: 	.quad pc_22b8
map_pc_22bc: 	.quad pc_22bc
map_pc_22c0: 	.quad pc_22c0
map_pc_22c4: 	.quad pc_22c4
map_pc_22c8: 	.quad pc_22c8
map_pc_22cc: 	.quad pc_22cc
map_pc_22d0: 	.quad pc_22d0
map_pc_22d4: 	.quad pc_22d4
map_pc_22d8: 	.quad pc_22d8
map_pc_22dc: 	.quad pc_22dc
map_pc_22e0: 	.quad pc_22e0
map_pc_22e4: 	.quad pc_22e4
map_pc_22e8: 	.quad pc_22e8
map_pc_22ec: 	.quad pc_22ec
map_pc_22f0: 	.quad pc_22f0
map_pc_22f4: 	.quad pc_22f4
map_pc_22f8: 	.quad pc_22f8
map_pc_22fc: 	.quad pc_22fc
map_pc_2300: 	.quad pc_2300
map_pc_2304: 	.quad pc_2304
map_pc_2308: 	.quad pc_2308
map_pc_230c: 	.quad pc_230c
map_pc_2310: 	.quad pc_2310
map_pc_2314: 	.quad pc_2314
map_pc_2318: 	.quad pc_2318
map_pc_231c: 	.quad pc_231c
map_pc_2320: 	.quad pc_2320
map_pc_2324: 	.quad pc_2324
map_pc_2328: 	.quad pc_2328
map_pc_232c: 	.quad pc_232c
map_pc_2330: 	.quad pc_2330
map_pc_2334: 	.quad pc_2334
map_pc_2338: 	.quad pc_2338
map_pc_233c: 	.quad pc_233c
map_pc_2340: 	.quad pc_2340
map_pc_2344: 	.quad pc_2344
map_pc_2348: 	.quad pc_2348
map_pc_234c: 	.quad pc_234c
map_pc_2350: 	.quad pc_2350
map_pc_2354: 	.quad pc_2354
map_pc_2358: 	.quad pc_2358
map_pc_235c: 	.quad pc_235c
map_pc_2360: 	.quad pc_2360
map_pc_2364: 	.quad pc_2364
map_pc_2368: 	.quad pc_2368
map_pc_236c: 	.quad pc_236c
map_pc_2370: 	.quad pc_2370
map_pc_2374: 	.quad pc_2374
map_pc_2378: 	.quad pc_2378
map_pc_237c: 	.quad pc_237c
map_pc_2380: 	.quad pc_2380
map_pc_2384: 	.quad pc_2384
map_pc_10000000: 	.quad pc_10000000
map_pc_80000000: 	.quad pc_80000000
map_pc_80000004: 	.quad pc_80000004
map_pc_80000008: 	.quad pc_80000008
map_pc_8000000c: 	.quad pc_8000000c
map_pc_80000010: 	.quad pc_80000010
map_pc_80000014: 	.quad pc_80000014
map_pc_80000018: 	.quad pc_80000018
map_pc_8000001c: 	.quad pc_8000001c
map_pc_80000020: 	.quad pc_80000020
map_pc_80000024: 	.quad pc_80000024
map_pc_80000028: 	.quad pc_80000028
map_pc_8000002c: 	.quad pc_8000002c
map_pc_80000030: 	.quad pc_80000030
map_pc_80000034: 	.quad pc_80000034
map_pc_80000038: 	.quad pc_80000038
map_pc_8000003c: 	.quad pc_8000003c
map_pc_80000040: 	.quad pc_80000040
map_pc_80000044: 	.quad pc_80000044
map_pc_80000048: 	.quad pc_80000048
map_pc_8000004c: 	.quad pc_8000004c
map_pc_80000050: 	.quad pc_80000050
map_pc_80000054: 	.quad pc_80000054
map_pc_80000058: 	.quad pc_80000058
map_pc_8000005c: 	.quad pc_8000005c
map_pc_80000060: 	.quad pc_80000060
map_pc_80000064: 	.quad pc_80000064
map_pc_80000068: 	.quad pc_80000068
map_pc_8000006c: 	.quad pc_8000006c
map_pc_80000070: 	.quad pc_80000070
map_pc_80000074: 	.quad pc_80000074
map_pc_80000078: 	.quad pc_80000078
map_pc_8000007c: 	.quad pc_8000007c
map_pc_80000080: 	.quad pc_80000080
map_pc_80000084: 	.quad pc_80000084
map_pc_80000088: 	.quad pc_80000088
map_pc_8000008c: 	.quad pc_8000008c
map_pc_80000090: 	.quad pc_80000090
map_pc_80000094: 	.quad pc_80000094
map_pc_80000098: 	.quad pc_80000098
map_pc_8000009c: 	.quad pc_8000009c
map_pc_800000a0: 	.quad pc_800000a0
map_pc_800000a4: 	.quad pc_800000a4
map_pc_800000a8: 	.quad pc_800000a8
map_pc_800000ac: 	.quad pc_800000ac
map_pc_800000b0: 	.quad pc_800000b0
map_pc_800000b4: 	.quad pc_800000b4
map_pc_800000b8: 	.quad pc_800000b8
map_pc_800000bc: 	.quad pc_800000bc
map_pc_800000c0: 	.quad pc_800000c0
map_pc_800000c4: 	.quad pc_800000c4
map_pc_800000c8: 	.quad pc_800000c8
map_pc_800000cc: 	.quad pc_800000cc
map_pc_800000d0: 	.quad pc_800000d0
map_pc_800000d4: 	.quad pc_800000d4
map_pc_800000d8: 	.quad pc_800000d8
map_pc_800000dc: 	.quad pc_800000dc
map_pc_800000e0: 	.quad pc_800000e0
map_pc_800000e4: 	.quad pc_800000e4
map_pc_800000e8: 	.quad pc_800000e8
map_pc_800000ec: 	.quad pc_800000ec
map_pc_800000f0: 	.quad pc_800000f0
map_pc_800000f4: 	.quad pc_800000f4
map_pc_800000f8: 	.quad pc_800000f8
map_pc_800000fc: 	.quad pc_800000fc
map_pc_80000100: 	.quad pc_80000100
map_pc_80000104: 	.quad pc_80000104
map_pc_80000108: 	.quad pc_80000108
map_pc_8000010c: 	.quad pc_8000010c
map_pc_80000110: 	.quad pc_80000110
map_pc_80000114: 	.quad pc_80000114
map_pc_80000118: 	.quad pc_80000118
map_pc_8000011c: 	.quad pc_8000011c
map_pc_80000120: 	.quad pc_80000120
map_pc_80000124: 	.quad pc_80000124
map_pc_80000128: 	.quad pc_80000128
map_pc_8000012c: 	.quad pc_8000012c
map_pc_80000130: 	.quad pc_80000130
map_pc_80000134: 	.quad pc_80000134
map_pc_80000138: 	.quad pc_80000138
map_pc_8000013c: 	.quad pc_8000013c
map_pc_80000140: 	.quad pc_80000140
map_pc_80000144: 	.quad pc_80000144
map_pc_80000148: 	.quad pc_80000148
map_pc_8000014c: 	.quad pc_8000014c
map_pc_80000150: 	.quad pc_80000150
map_pc_80000154: 	.quad pc_80000154
map_pc_80000158: 	.quad pc_80000158
map_pc_8000015c: 	.quad pc_8000015c
map_pc_80000160: 	.quad pc_80000160
map_pc_80000164: 	.quad pc_80000164
map_pc_80000168: 	.quad pc_80000168
map_pc_8000016c: 	.quad pc_8000016c
map_pc_80000170: 	.quad pc_80000170
map_pc_80000174: 	.quad pc_80000174
map_pc_80000178: 	.quad pc_80000178
map_pc_8000017c: 	.quad pc_8000017c
map_pc_80000180: 	.quad pc_80000180
map_pc_80000184: 	.quad pc_80000184
map_pc_80000188: 	.quad pc_80000188
map_pc_8000018c: 	.quad pc_8000018c
map_pc_80000190: 	.quad pc_80000190
map_pc_80000194: 	.quad pc_80000194
map_pc_80000198: 	.quad pc_80000198
map_pc_8000019c: 	.quad pc_8000019c
map_pc_800001a0: 	.quad pc_800001a0
map_pc_800001a4: 	.quad pc_800001a4
map_pc_800001a8: 	.quad pc_800001a8
map_pc_800001ac: 	.quad pc_800001ac
map_pc_800001b0: 	.quad pc_800001b0
map_pc_800001b4: 	.quad pc_800001b4
map_pc_800001b8: 	.quad pc_800001b8
map_pc_800001bc: 	.quad pc_800001bc
map_pc_800001c0: 	.quad pc_800001c0
map_pc_800001c4: 	.quad pc_800001c4
map_pc_800001c8: 	.quad pc_800001c8
map_pc_800001cc: 	.quad pc_800001cc
map_pc_800001d0: 	.quad pc_800001d0
map_pc_800001d4: 	.quad pc_800001d4
map_pc_800001d8: 	.quad pc_800001d8
map_pc_800001dc: 	.quad pc_800001dc
map_pc_800001e0: 	.quad pc_800001e0
map_pc_800001e4: 	.quad pc_800001e4
map_pc_800001e8: 	.quad pc_800001e8
map_pc_800001ec: 	.quad pc_800001ec
map_pc_800001f0: 	.quad pc_800001f0
map_pc_800001f4: 	.quad pc_800001f4
map_pc_800001f8: 	.quad pc_800001f8
map_pc_800001fc: 	.quad pc_800001fc
map_pc_80000200: 	.quad pc_80000200
map_pc_80000204: 	.quad pc_80000204
map_pc_80000208: 	.quad pc_80000208
map_pc_8000020c: 	.quad pc_8000020c
map_pc_80000210: 	.quad pc_80000210
map_pc_80000214: 	.quad pc_80000214
map_pc_80000218: 	.quad pc_80000218
map_pc_8000021c: 	.quad pc_8000021c
map_pc_80000220: 	.quad pc_80000220
map_pc_80000224: 	.quad pc_80000224
map_pc_80000228: 	.quad pc_80000228
map_pc_8000022c: 	.quad pc_8000022c
map_pc_80000230: 	.quad pc_80000230
map_pc_80000234: 	.quad pc_80000234
map_pc_80000238: 	.quad pc_80000238
map_pc_8000023c: 	.quad pc_8000023c
map_pc_80000240: 	.quad pc_80000240
map_pc_80000244: 	.quad pc_80000244
map_pc_80000248: 	.quad pc_80000248
map_pc_8000024c: 	.quad pc_8000024c
map_pc_80000250: 	.quad pc_80000250
map_pc_80000254: 	.quad pc_80000254
map_pc_80000258: 	.quad pc_80000258
map_pc_8000025c: 	.quad pc_8000025c
map_pc_80000260: 	.quad pc_80000260
map_pc_80000264: 	.quad pc_80000264
map_pc_80000268: 	.quad pc_80000268
map_pc_8000026c: 	.quad pc_8000026c
map_pc_80000270: 	.quad pc_80000270
map_pc_80000274: 	.quad pc_80000274
map_pc_80000278: 	.quad pc_80000278
map_pc_8000027c: 	.quad pc_8000027c
map_pc_80000280: 	.quad pc_80000280
map_pc_80000284: 	.quad pc_80000284
map_pc_80000288: 	.quad pc_80000288
map_pc_8000028c: 	.quad pc_8000028c
map_pc_80000290: 	.quad pc_80000290
map_pc_80000294: 	.quad pc_80000294
map_pc_80000298: 	.quad pc_80000298
map_pc_8000029c: 	.quad pc_8000029c
map_pc_800002a0: 	.quad pc_800002a0
map_pc_800002a4: 	.quad pc_800002a4
map_pc_800002a8: 	.quad pc_800002a8
map_pc_800002ac: 	.quad pc_800002ac
map_pc_800002b0: 	.quad pc_800002b0
map_pc_800002b4: 	.quad pc_800002b4
map_pc_800002b8: 	.quad pc_800002b8
map_pc_800002bc: 	.quad pc_800002bc
map_pc_800002c0: 	.quad pc_800002c0
map_pc_800002c4: 	.quad pc_800002c4
map_pc_800002c8: 	.quad pc_800002c8
map_pc_800002cc: 	.quad pc_800002cc
map_pc_800002d0: 	.quad pc_800002d0
map_pc_800002d4: 	.quad pc_800002d4
map_pc_800002d8: 	.quad pc_800002d8
map_pc_800002dc: 	.quad pc_800002dc
map_pc_800002e0: 	.quad pc_800002e0
map_pc_800002e4: 	.quad pc_800002e4
map_pc_800002e8: 	.quad pc_800002e8
map_pc_800002ec: 	.quad pc_800002ec
map_pc_800002f0: 	.quad pc_800002f0
map_pc_800002f4: 	.quad pc_800002f4
map_pc_800002f8: 	.quad pc_800002f8
map_pc_800002fc: 	.quad pc_800002fc
map_pc_80000300: 	.quad pc_80000300
map_pc_80000304: 	.quad pc_80000304
map_pc_80000308: 	.quad pc_80000308
map_pc_8000030c: 	.quad pc_8000030c
map_pc_80000310: 	.quad pc_80000310
map_pc_80000314: 	.quad pc_80000314
map_pc_80000318: 	.quad pc_80000318
map_pc_8000031c: 	.quad pc_8000031c
map_pc_80000320: 	.quad pc_80000320
map_pc_80000324: 	.quad pc_80000324
map_pc_80000328: 	.quad pc_80000328
map_pc_8000032c: 	.quad pc_8000032c
map_pc_80000330: 	.quad pc_80000330
map_pc_80000334: 	.quad pc_80000334
map_pc_80000338: 	.quad pc_80000338
map_pc_8000033c: 	.quad pc_8000033c
map_pc_80000340: 	.quad pc_80000340
map_pc_80000344: 	.quad pc_80000344
map_pc_80000348: 	.quad pc_80000348
map_pc_8000034c: 	.quad pc_8000034c
map_pc_80000350: 	.quad pc_80000350
map_pc_80000354: 	.quad pc_80000354
map_pc_80000358: 	.quad pc_80000358
map_pc_8000035c: 	.quad pc_8000035c
map_pc_80000360: 	.quad pc_80000360
map_pc_80000364: 	.quad pc_80000364
map_pc_80000368: 	.quad pc_80000368
map_pc_8000036c: 	.quad pc_8000036c
map_pc_80000370: 	.quad pc_80000370
map_pc_80000374: 	.quad pc_80000374
map_pc_80000378: 	.quad pc_80000378
map_pc_8000037c: 	.quad pc_8000037c
map_pc_80000380: 	.quad pc_80000380
map_pc_80000384: 	.quad pc_80000384
map_pc_80000388: 	.quad pc_80000388
map_pc_8000038c: 	.quad pc_8000038c
map_pc_80000390: 	.quad pc_80000390
map_pc_80000394: 	.quad pc_80000394
map_pc_80000398: 	.quad pc_80000398
map_pc_8000039c: 	.quad pc_8000039c
map_pc_800003a0: 	.quad pc_800003a0
map_pc_800003a4: 	.quad pc_800003a4
map_pc_800003a8: 	.quad pc_800003a8
map_pc_800003ac: 	.quad pc_800003ac
map_pc_800003b0: 	.quad pc_800003b0
map_pc_800003b4: 	.quad pc_800003b4
map_pc_800003b8: 	.quad pc_800003b8
map_pc_800003bc: 	.quad pc_800003bc
map_pc_800003c0: 	.quad pc_800003c0
map_pc_800003c4: 	.quad pc_800003c4
map_pc_800003c8: 	.quad pc_800003c8
map_pc_800003cc: 	.quad pc_800003cc
map_pc_800003d0: 	.quad pc_800003d0
map_pc_800003d4: 	.quad pc_800003d4
map_pc_800003d8: 	.quad pc_800003d8
map_pc_800003dc: 	.quad pc_800003dc
map_pc_800003e0: 	.quad pc_800003e0
map_pc_800003e4: 	.quad pc_800003e4
map_pc_800003e8: 	.quad pc_800003e8
map_pc_800003ec: 	.quad pc_800003ec
map_pc_800003f0: 	.quad pc_800003f0
map_pc_800003f4: 	.quad pc_800003f4
map_pc_800003f8: 	.quad pc_800003f8
map_pc_800003fc: 	.quad pc_800003fc
map_pc_80000400: 	.quad pc_80000400
map_pc_80000404: 	.quad pc_80000404
map_pc_80000408: 	.quad pc_80000408
map_pc_8000040c: 	.quad pc_8000040c
map_pc_80000410: 	.quad pc_80000410
map_pc_80000414: 	.quad pc_80000414
map_pc_80000418: 	.quad pc_80000418
map_pc_8000041c: 	.quad pc_8000041c
map_pc_80000420: 	.quad pc_80000420
map_pc_80000424: 	.quad pc_80000424
map_pc_80000428: 	.quad pc_80000428
map_pc_8000042c: 	.quad pc_8000042c
map_pc_80000430: 	.quad pc_80000430
map_pc_80000434: 	.quad pc_80000434
map_pc_80000438: 	.quad pc_80000438
map_pc_8000043c: 	.quad pc_8000043c
map_pc_80000440: 	.quad pc_80000440
map_pc_80000444: 	.quad pc_80000444
map_pc_80000448: 	.quad pc_80000448
map_pc_8000044c: 	.quad pc_8000044c
map_pc_80000450: 	.quad pc_80000450
map_pc_80000454: 	.quad pc_80000454
map_pc_80000458: 	.quad pc_80000458
map_pc_8000045c: 	.quad pc_8000045c
map_pc_80000460: 	.quad pc_80000460
map_pc_80000464: 	.quad pc_80000464
map_pc_80000468: 	.quad pc_80000468
map_pc_8000046c: 	.quad pc_8000046c
map_pc_80000470: 	.quad pc_80000470
map_pc_80000474: 	.quad pc_80000474
map_pc_80000478: 	.quad pc_80000478
map_pc_8000047c: 	.quad pc_8000047c
map_pc_80000480: 	.quad pc_80000480
map_pc_80000484: 	.quad pc_80000484
map_pc_80000488: 	.quad pc_80000488
map_pc_8000048c: 	.quad pc_8000048c
map_pc_80000490: 	.quad pc_80000490
map_pc_80000494: 	.quad pc_80000494
map_pc_80000498: 	.quad pc_80000498
map_pc_8000049c: 	.quad pc_8000049c
map_pc_800004a0: 	.quad pc_800004a0
map_pc_800004a4: 	.quad pc_800004a4
map_pc_800004a8: 	.quad pc_800004a8
map_pc_800004ac: 	.quad pc_800004ac
map_pc_800004b0: 	.quad pc_800004b0
map_pc_800004b4: 	.quad pc_800004b4
map_pc_800004b8: 	.quad pc_800004b8
map_pc_800004bc: 	.quad pc_800004bc
map_pc_800004c0: 	.quad pc_800004c0
map_pc_800004c4: 	.quad pc_800004c4
map_pc_800004c8: 	.quad pc_800004c8
map_pc_800004cc: 	.quad pc_800004cc
map_pc_800004d0: 	.quad pc_800004d0
map_pc_800004d4: 	.quad pc_800004d4
map_pc_800004d8: 	.quad pc_800004d8
map_pc_800004dc: 	.quad pc_800004dc
map_pc_800004e0: 	.quad pc_800004e0
map_pc_800004e4: 	.quad pc_800004e4
map_pc_800004e8: 	.quad pc_800004e8
map_pc_800004ec: 	.quad pc_800004ec
map_pc_800004f0: 	.quad pc_800004f0
map_pc_800004f4: 	.quad pc_800004f4
map_pc_800004f8: 	.quad pc_800004f8
map_pc_800004fc: 	.quad pc_800004fc
map_pc_80000500: 	.quad pc_80000500
map_pc_80000504: 	.quad pc_80000504
map_pc_80000508: 	.quad pc_80000508
map_pc_8000050c: 	.quad pc_8000050c
map_pc_80000510: 	.quad pc_80000510
map_pc_80000514: 	.quad pc_80000514
map_pc_80000518: 	.quad pc_80000518
map_pc_8000051c: 	.quad pc_8000051c
map_pc_80000520: 	.quad pc_80000520
map_pc_80000524: 	.quad pc_80000524
map_pc_80000528: 	.quad pc_80000528
map_pc_8000052c: 	.quad pc_8000052c
map_pc_80000530: 	.quad pc_80000530
map_pc_80000534: 	.quad pc_80000534
map_pc_80000538: 	.quad pc_80000538
map_pc_8000053c: 	.quad pc_8000053c
map_pc_80000540: 	.quad pc_80000540
map_pc_80000544: 	.quad pc_80000544
map_pc_80000548: 	.quad pc_80000548
map_pc_8000054c: 	.quad pc_8000054c
map_pc_80000550: 	.quad pc_80000550
map_pc_80000554: 	.quad pc_80000554
map_pc_80000558: 	.quad pc_80000558
map_pc_8000055c: 	.quad pc_8000055c
map_pc_80000560: 	.quad pc_80000560
map_pc_80000564: 	.quad pc_80000564
map_pc_80000568: 	.quad pc_80000568
map_pc_8000056c: 	.quad pc_8000056c
map_pc_80000570: 	.quad pc_80000570
map_pc_80000574: 	.quad pc_80000574
map_pc_80000578: 	.quad pc_80000578
map_pc_8000057c: 	.quad pc_8000057c
map_pc_80000580: 	.quad pc_80000580
map_pc_80000584: 	.quad pc_80000584
map_pc_80000588: 	.quad pc_80000588
map_pc_8000058c: 	.quad pc_8000058c
map_pc_80000590: 	.quad pc_80000590
map_pc_80000594: 	.quad pc_80000594
map_pc_80000598: 	.quad pc_80000598
map_pc_8000059c: 	.quad pc_8000059c
map_pc_800005a0: 	.quad pc_800005a0
map_pc_800005a4: 	.quad pc_800005a4
map_pc_800005a8: 	.quad pc_800005a8
map_pc_800005ac: 	.quad pc_800005ac
map_pc_800005b0: 	.quad pc_800005b0
map_pc_800005b4: 	.quad pc_800005b4
map_pc_800005b8: 	.quad pc_800005b8
map_pc_800005bc: 	.quad pc_800005bc
map_pc_800005c0: 	.quad pc_800005c0
map_pc_800005c4: 	.quad pc_800005c4
map_pc_800005c8: 	.quad pc_800005c8
map_pc_800005cc: 	.quad pc_800005cc
map_pc_800005d0: 	.quad pc_800005d0
map_pc_800005d4: 	.quad pc_800005d4
map_pc_800005d8: 	.quad pc_800005d8
map_pc_800005dc: 	.quad pc_800005dc
map_pc_800005e0: 	.quad pc_800005e0
map_pc_800005e4: 	.quad pc_800005e4
map_pc_800005e8: 	.quad pc_800005e8
map_pc_800005ec: 	.quad pc_800005ec
map_pc_800005f0: 	.quad pc_800005f0
map_pc_800005f4: 	.quad pc_800005f4
map_pc_800005f8: 	.quad pc_800005f8
map_pc_800005fc: 	.quad pc_800005fc
map_pc_80000600: 	.quad pc_80000600
map_pc_80000604: 	.quad pc_80000604
map_pc_80000608: 	.quad pc_80000608
map_pc_8000060c: 	.quad pc_8000060c
map_pc_80000610: 	.quad pc_80000610
map_pc_80000614: 	.quad pc_80000614
map_pc_80000618: 	.quad pc_80000618
map_pc_8000061c: 	.quad pc_8000061c
map_pc_80000620: 	.quad pc_80000620
map_pc_80000624: 	.quad pc_80000624
map_pc_80000628: 	.quad pc_80000628
map_pc_8000062c: 	.quad pc_8000062c
map_pc_80000630: 	.quad pc_80000630
map_pc_80000634: 	.quad pc_80000634
map_pc_80000638: 	.quad pc_80000638
map_pc_8000063c: 	.quad pc_8000063c
map_pc_80000640: 	.quad pc_80000640
map_pc_80000644: 	.quad pc_80000644
map_pc_80000648: 	.quad pc_80000648
map_pc_8000064c: 	.quad pc_8000064c
map_pc_80000650: 	.quad pc_80000650
map_pc_80000654: 	.quad pc_80000654
map_pc_80000658: 	.quad pc_80000658
map_pc_8000065c: 	.quad pc_8000065c
map_pc_80000660: 	.quad pc_80000660
map_pc_80000664: 	.quad pc_80000664
map_pc_80000668: 	.quad pc_80000668
map_pc_8000066c: 	.quad pc_8000066c
map_pc_80000670: 	.quad pc_80000670
map_pc_80000674: 	.quad pc_80000674
map_pc_80000678: 	.quad pc_80000678
map_pc_8000067c: 	.quad pc_8000067c
map_pc_80000680: 	.quad pc_80000680
map_pc_80000684: 	.quad pc_80000684
map_pc_80000688: 	.quad pc_80000688
map_pc_8000068c: 	.quad pc_8000068c
map_pc_80000690: 	.quad pc_80000690
map_pc_80000694: 	.quad pc_80000694
map_pc_80000698: 	.quad pc_80000698
map_pc_8000069c: 	.quad pc_8000069c
map_pc_800006a0: 	.quad pc_800006a0
map_pc_800006a4: 	.quad pc_800006a4
map_pc_800006a8: 	.quad pc_800006a8
map_pc_800006ac: 	.quad pc_800006ac
map_pc_800006b0: 	.quad pc_800006b0
map_pc_800006b4: 	.quad pc_800006b4
map_pc_800006b8: 	.quad pc_800006b8
map_pc_800006bc: 	.quad pc_800006bc
map_pc_800006c0: 	.quad pc_800006c0
map_pc_800006c4: 	.quad pc_800006c4
map_pc_800006c8: 	.quad pc_800006c8
map_pc_800006cc: 	.quad pc_800006cc
map_pc_800006d0: 	.quad pc_800006d0
map_pc_800006d4: 	.quad pc_800006d4
map_pc_800006d8: 	.quad pc_800006d8
map_pc_800006dc: 	.quad pc_800006dc
map_pc_800006e0: 	.quad pc_800006e0
map_pc_800006e4: 	.quad pc_800006e4
map_pc_800006e8: 	.quad pc_800006e8
map_pc_800006ec: 	.quad pc_800006ec
map_pc_800006f0: 	.quad pc_800006f0
map_pc_800006f4: 	.quad pc_800006f4
map_pc_800006f8: 	.quad pc_800006f8
map_pc_800006fc: 	.quad pc_800006fc
map_pc_80000700: 	.quad pc_80000700
map_pc_80000704: 	.quad pc_80000704
map_pc_80000708: 	.quad pc_80000708
map_pc_8000070c: 	.quad pc_8000070c
map_pc_80000710: 	.quad pc_80000710
map_pc_80000714: 	.quad pc_80000714
map_pc_80000718: 	.quad pc_80000718
map_pc_8000071c: 	.quad pc_8000071c
map_pc_80000720: 	.quad pc_80000720
map_pc_80000724: 	.quad pc_80000724
map_pc_80000728: 	.quad pc_80000728
map_pc_8000072c: 	.quad pc_8000072c
map_pc_80000730: 	.quad pc_80000730
map_pc_80000734: 	.quad pc_80000734
map_pc_80000738: 	.quad pc_80000738
map_pc_8000073c: 	.quad pc_8000073c
map_pc_80000740: 	.quad pc_80000740
map_pc_80000744: 	.quad pc_80000744
map_pc_80000748: 	.quad pc_80000748
map_pc_8000074c: 	.quad pc_8000074c
map_pc_80000750: 	.quad pc_80000750
map_pc_80000754: 	.quad pc_80000754
map_pc_80000758: 	.quad pc_80000758
map_pc_8000075c: 	.quad pc_8000075c
map_pc_80000760: 	.quad pc_80000760
map_pc_80000764: 	.quad pc_80000764
map_pc_80000768: 	.quad pc_80000768
map_pc_8000076c: 	.quad pc_8000076c
map_pc_80000770: 	.quad pc_80000770
map_pc_80000774: 	.quad pc_80000774
map_pc_80000778: 	.quad pc_80000778
map_pc_8000077c: 	.quad pc_8000077c
map_pc_80000780: 	.quad pc_80000780
map_pc_80000784: 	.quad pc_80000784
map_pc_80000788: 	.quad pc_80000788
map_pc_8000078c: 	.quad pc_8000078c
map_pc_80000790: 	.quad pc_80000790
map_pc_80000794: 	.quad pc_80000794
map_pc_80000798: 	.quad pc_80000798
map_pc_8000079c: 	.quad pc_8000079c
map_pc_800007a0: 	.quad pc_800007a0
map_pc_800007a4: 	.quad pc_800007a4
map_pc_800007a8: 	.quad pc_800007a8
map_pc_800007ac: 	.quad pc_800007ac
map_pc_800007b0: 	.quad pc_800007b0
map_pc_800007b4: 	.quad pc_800007b4
map_pc_800007b8: 	.quad pc_800007b8
map_pc_800007bc: 	.quad pc_800007bc
map_pc_800007c0: 	.quad pc_800007c0
map_pc_800007c4: 	.quad pc_800007c4
map_pc_800007c8: 	.quad pc_800007c8
map_pc_800007cc: 	.quad pc_800007cc
map_pc_800007d0: 	.quad pc_800007d0
map_pc_800007d4: 	.quad pc_800007d4
map_pc_800007d8: 	.quad pc_800007d8
map_pc_800007dc: 	.quad pc_800007dc
map_pc_800007e0: 	.quad pc_800007e0
map_pc_800007e4: 	.quad pc_800007e4
map_pc_800007e8: 	.quad pc_800007e8
map_pc_800007ec: 	.quad pc_800007ec
map_pc_800007f0: 	.quad pc_800007f0
map_pc_800007f4: 	.quad pc_800007f4
map_pc_800007f8: 	.quad pc_800007f8
map_pc_800007fc: 	.quad pc_800007fc
map_pc_80000800: 	.quad pc_80000800
map_pc_80000804: 	.quad pc_80000804
map_pc_80000808: 	.quad pc_80000808
map_pc_8000080c: 	.quad pc_8000080c
map_pc_80000810: 	.quad pc_80000810
map_pc_80000814: 	.quad pc_80000814
map_pc_80000818: 	.quad pc_80000818
map_pc_8000081c: 	.quad pc_8000081c
map_pc_80000820: 	.quad pc_80000820
map_pc_80000824: 	.quad pc_80000824
map_pc_80000828: 	.quad pc_80000828
map_pc_8000082c: 	.quad pc_8000082c
map_pc_80000830: 	.quad pc_80000830
map_pc_80000834: 	.quad pc_80000834
map_pc_80000838: 	.quad pc_80000838
map_pc_8000083c: 	.quad pc_8000083c
map_pc_80000840: 	.quad pc_80000840
map_pc_80000844: 	.quad pc_80000844
map_pc_80000848: 	.quad pc_80000848
map_pc_8000084c: 	.quad pc_8000084c
map_pc_80000850: 	.quad pc_80000850
map_pc_80000854: 	.quad pc_80000854
map_pc_80000858: 	.quad pc_80000858
map_pc_8000085c: 	.quad pc_8000085c
map_pc_80000860: 	.quad pc_80000860
map_pc_80000864: 	.quad pc_80000864
map_pc_80000868: 	.quad pc_80000868
map_pc_8000086c: 	.quad pc_8000086c
map_pc_80000870: 	.quad pc_80000870
map_pc_80000874: 	.quad pc_80000874
map_pc_80000878: 	.quad pc_80000878
map_pc_8000087c: 	.quad pc_8000087c
map_pc_80000880: 	.quad pc_80000880
map_pc_80000884: 	.quad pc_80000884
map_pc_80000888: 	.quad pc_80000888
map_pc_8000088c: 	.quad pc_8000088c
map_pc_80000890: 	.quad pc_80000890
map_pc_80000894: 	.quad pc_80000894
map_pc_80000898: 	.quad pc_80000898
map_pc_8000089c: 	.quad pc_8000089c
map_pc_800008a0: 	.quad pc_800008a0
map_pc_800008a4: 	.quad pc_800008a4
map_pc_800008a8: 	.quad pc_800008a8
map_pc_800008ac: 	.quad pc_800008ac
map_pc_800008b0: 	.quad pc_800008b0
map_pc_800008b4: 	.quad pc_800008b4
map_pc_800008b8: 	.quad pc_800008b8
map_pc_800008bc: 	.quad pc_800008bc
map_pc_800008c0: 	.quad pc_800008c0
map_pc_800008c4: 	.quad pc_800008c4
map_pc_800008c8: 	.quad pc_800008c8
map_pc_800008cc: 	.quad pc_800008cc
map_pc_800008d0: 	.quad pc_800008d0
map_pc_800008d4: 	.quad pc_800008d4
map_pc_800008d8: 	.quad pc_800008d8
map_pc_800008dc: 	.quad pc_800008dc
map_pc_800008e0: 	.quad pc_800008e0
map_pc_800008e4: 	.quad pc_800008e4
map_pc_800008e8: 	.quad pc_800008e8
map_pc_800008ec: 	.quad pc_800008ec
map_pc_800008f0: 	.quad pc_800008f0
map_pc_800008f4: 	.quad pc_800008f4
map_pc_800008f8: 	.quad pc_800008f8
map_pc_800008fc: 	.quad pc_800008fc
map_pc_80000900: 	.quad pc_80000900
map_pc_80000904: 	.quad pc_80000904
map_pc_80000908: 	.quad pc_80000908
map_pc_8000090c: 	.quad pc_8000090c
map_pc_80000910: 	.quad pc_80000910
map_pc_80000914: 	.quad pc_80000914
map_pc_80000918: 	.quad pc_80000918
map_pc_8000091c: 	.quad pc_8000091c
map_pc_80000920: 	.quad pc_80000920
map_pc_80000924: 	.quad pc_80000924
map_pc_80000928: 	.quad pc_80000928
map_pc_8000092c: 	.quad pc_8000092c
map_pc_80000930: 	.quad pc_80000930
map_pc_80000934: 	.quad pc_80000934
map_pc_80000938: 	.quad pc_80000938
map_pc_8000093c: 	.quad pc_8000093c
map_pc_80000940: 	.quad pc_80000940
map_pc_80000944: 	.quad pc_80000944
map_pc_80000948: 	.quad pc_80000948
map_pc_8000094c: 	.quad pc_8000094c
map_pc_80000950: 	.quad pc_80000950
map_pc_80000954: 	.quad pc_80000954
map_pc_80000958: 	.quad pc_80000958
map_pc_8000095c: 	.quad pc_8000095c
map_pc_80000960: 	.quad pc_80000960
map_pc_80000964: 	.quad pc_80000964
map_pc_80000968: 	.quad pc_80000968
map_pc_8000096c: 	.quad pc_8000096c
map_pc_80000970: 	.quad pc_80000970
map_pc_80000974: 	.quad pc_80000974
map_pc_80000978: 	.quad pc_80000978
map_pc_8000097c: 	.quad pc_8000097c
map_pc_80000980: 	.quad pc_80000980
map_pc_80000984: 	.quad pc_80000984
map_pc_80000988: 	.quad pc_80000988
map_pc_8000098c: 	.quad pc_8000098c
map_pc_80000990: 	.quad pc_80000990
map_pc_80000994: 	.quad pc_80000994
map_pc_80000998: 	.quad pc_80000998
map_pc_8000099c: 	.quad pc_8000099c
map_pc_800009a0: 	.quad pc_800009a0
map_pc_800009a4: 	.quad pc_800009a4
map_pc_800009a8: 	.quad pc_800009a8
map_pc_800009ac: 	.quad pc_800009ac
map_pc_800009b0: 	.quad pc_800009b0
map_pc_800009b4: 	.quad pc_800009b4
map_pc_800009b8: 	.quad pc_800009b8
map_pc_800009bc: 	.quad pc_800009bc
map_pc_800009c0: 	.quad pc_800009c0
map_pc_800009c4: 	.quad pc_800009c4
map_pc_800009c8: 	.quad pc_800009c8
map_pc_800009cc: 	.quad pc_800009cc
map_pc_800009d0: 	.quad pc_800009d0
map_pc_800009d4: 	.quad pc_800009d4
map_pc_800009d8: 	.quad pc_800009d8
map_pc_800009dc: 	.quad pc_800009dc
map_pc_800009e0: 	.quad pc_800009e0
map_pc_800009e4: 	.quad pc_800009e4
map_pc_800009e8: 	.quad pc_800009e8
map_pc_800009ec: 	.quad pc_800009ec
map_pc_800009f0: 	.quad pc_800009f0
map_pc_800009f4: 	.quad pc_800009f4
map_pc_800009f8: 	.quad pc_800009f8
map_pc_800009fc: 	.quad pc_800009fc
map_pc_80000a00: 	.quad pc_80000a00
map_pc_80000a04: 	.quad pc_80000a04
map_pc_80000a08: 	.quad pc_80000a08
map_pc_80000a0c: 	.quad pc_80000a0c
map_pc_80000a10: 	.quad pc_80000a10
map_pc_80000a14: 	.quad pc_80000a14
map_pc_80000a18: 	.quad pc_80000a18
map_pc_80000a1c: 	.quad pc_80000a1c
map_pc_80000a20: 	.quad pc_80000a20
map_pc_80000a24: 	.quad pc_80000a24
map_pc_80000a28: 	.quad pc_80000a28
map_pc_80000a2c: 	.quad pc_80000a2c
map_pc_80000a30: 	.quad pc_80000a30
map_pc_80000a34: 	.quad pc_80000a34
map_pc_80000a38: 	.quad pc_80000a38
map_pc_80000a3c: 	.quad pc_80000a3c
map_pc_80000a40: 	.quad pc_80000a40
map_pc_80000a44: 	.quad pc_80000a44
map_pc_80000a48: 	.quad pc_80000a48
map_pc_80000a4c: 	.quad pc_80000a4c
map_pc_80000a50: 	.quad pc_80000a50
map_pc_80000a54: 	.quad pc_80000a54
map_pc_80000a58: 	.quad pc_80000a58
map_pc_80000a5c: 	.quad pc_80000a5c
map_pc_80000a60: 	.quad pc_80000a60
map_pc_80000a64: 	.quad pc_80000a64
map_pc_80000a68: 	.quad pc_80000a68
map_pc_80000a6c: 	.quad pc_80000a6c
map_pc_80000a70: 	.quad pc_80000a70
map_pc_80000a74: 	.quad pc_80000a74
map_pc_80000a78: 	.quad pc_80000a78
map_pc_80000a7c: 	.quad pc_80000a7c
map_pc_80000a80: 	.quad pc_80000a80
map_pc_80000a84: 	.quad pc_80000a84
map_pc_80000a88: 	.quad pc_80000a88
map_pc_80000a8c: 	.quad pc_80000a8c
map_pc_80000a90: 	.quad pc_80000a90
map_pc_80000a94: 	.quad pc_80000a94
map_pc_80000a98: 	.quad pc_80000a98
map_pc_80000a9c: 	.quad pc_80000a9c
map_pc_80000aa0: 	.quad pc_80000aa0
map_pc_80000aa4: 	.quad pc_80000aa4
map_pc_80000aa8: 	.quad pc_80000aa8
map_pc_80000aac: 	.quad pc_80000aac
map_pc_80000ab0: 	.quad pc_80000ab0
map_pc_80000ab4: 	.quad pc_80000ab4
map_pc_80000ab8: 	.quad pc_80000ab8
map_pc_80000abc: 	.quad pc_80000abc
map_pc_80000ac0: 	.quad pc_80000ac0
map_pc_80000ac4: 	.quad pc_80000ac4
map_pc_80000ac8: 	.quad pc_80000ac8
map_pc_80000acc: 	.quad pc_80000acc
map_pc_80000ad0: 	.quad pc_80000ad0
map_pc_80000ad4: 	.quad pc_80000ad4
map_pc_80000ad8: 	.quad pc_80000ad8
map_pc_80000adc: 	.quad pc_80000adc
map_pc_80000ae0: 	.quad pc_80000ae0
map_pc_80000ae4: 	.quad pc_80000ae4
map_pc_80000ae8: 	.quad pc_80000ae8
map_pc_80000aec: 	.quad pc_80000aec
map_pc_80000af0: 	.quad pc_80000af0
map_pc_80000af4: 	.quad pc_80000af4
map_pc_80000af8: 	.quad pc_80000af8
map_pc_80000afc: 	.quad pc_80000afc
map_pc_80000b00: 	.quad pc_80000b00
map_pc_80000b04: 	.quad pc_80000b04
map_pc_80000b08: 	.quad pc_80000b08
map_pc_80000b0c: 	.quad pc_80000b0c
map_pc_80000b10: 	.quad pc_80000b10
map_pc_80000b14: 	.quad pc_80000b14
map_pc_80000b18: 	.quad pc_80000b18
map_pc_80000b1c: 	.quad pc_80000b1c
map_pc_80000b20: 	.quad pc_80000b20
map_pc_80000b24: 	.quad pc_80000b24
map_pc_80000b28: 	.quad pc_80000b28
map_pc_80000b2c: 	.quad pc_80000b2c
map_pc_80000b30: 	.quad pc_80000b30
map_pc_80000b34: 	.quad pc_80000b34
map_pc_80000b38: 	.quad pc_80000b38
map_pc_80000b3c: 	.quad pc_80000b3c
map_pc_80000b40: 	.quad pc_80000b40
map_pc_80000b44: 	.quad pc_80000b44
map_pc_80000b48: 	.quad pc_80000b48
map_pc_80000b4c: 	.quad pc_80000b4c
map_pc_80000b50: 	.quad pc_80000b50
map_pc_80000b54: 	.quad pc_80000b54
map_pc_80000b58: 	.quad pc_80000b58
map_pc_80000b5c: 	.quad pc_80000b5c
map_pc_80000b60: 	.quad pc_80000b60
map_pc_80000b64: 	.quad pc_80000b64
map_pc_80000b68: 	.quad pc_80000b68
map_pc_80000b6c: 	.quad pc_80000b6c
map_pc_80000b70: 	.quad pc_80000b70
map_pc_80000b74: 	.quad pc_80000b74
map_pc_80000b78: 	.quad pc_80000b78
map_pc_80000b7c: 	.quad pc_80000b7c
map_pc_80000b80: 	.quad pc_80000b80
map_pc_80000b84: 	.quad pc_80000b84
map_pc_80000b88: 	.quad pc_80000b88
map_pc_80000b8c: 	.quad pc_80000b8c
map_pc_80000b90: 	.quad pc_80000b90
map_pc_80000b94: 	.quad pc_80000b94
map_pc_80000b98: 	.quad pc_80000b98
map_pc_80000b9c: 	.quad pc_80000b9c
map_pc_80000ba0: 	.quad pc_80000ba0
map_pc_80000ba4: 	.quad pc_80000ba4
map_pc_80000ba8: 	.quad pc_80000ba8
map_pc_80000bac: 	.quad pc_80000bac
map_pc_80000bb0: 	.quad pc_80000bb0
map_pc_80000bb4: 	.quad pc_80000bb4
map_pc_80000bb8: 	.quad pc_80000bb8
map_pc_80000bbc: 	.quad pc_80000bbc
map_pc_80000bc0: 	.quad pc_80000bc0
map_pc_80000bc4: 	.quad pc_80000bc4
map_pc_80000bc8: 	.quad pc_80000bc8
map_pc_80000bcc: 	.quad pc_80000bcc
map_pc_80000bd0: 	.quad pc_80000bd0
map_pc_80000bd4: 	.quad pc_80000bd4
map_pc_80000bd8: 	.quad pc_80000bd8
map_pc_80000bdc: 	.quad pc_80000bdc
map_pc_80000be0: 	.quad pc_80000be0
map_pc_80000be4: 	.quad pc_80000be4
map_pc_80000be8: 	.quad pc_80000be8
map_pc_80000bec: 	.quad pc_80000bec
map_pc_80000bf0: 	.quad pc_80000bf0
map_pc_80000bf4: 	.quad pc_80000bf4
map_pc_80000bf8: 	.quad pc_80000bf8
map_pc_80000bfc: 	.quad pc_80000bfc
map_pc_80000c00: 	.quad pc_80000c00
map_pc_80000c04: 	.quad pc_80000c04
map_pc_80000c08: 	.quad pc_80000c08
map_pc_80000c0c: 	.quad pc_80000c0c
map_pc_80000c10: 	.quad pc_80000c10
map_pc_80000c14: 	.quad pc_80000c14
map_pc_80000c18: 	.quad pc_80000c18
map_pc_80000c1c: 	.quad pc_80000c1c
map_pc_80000c20: 	.quad pc_80000c20
map_pc_80000c24: 	.quad pc_80000c24
map_pc_80000c28: 	.quad pc_80000c28
map_pc_80000c2c: 	.quad pc_80000c2c
map_pc_80000c30: 	.quad pc_80000c30
map_pc_80000c34: 	.quad pc_80000c34
map_pc_80000c38: 	.quad pc_80000c38
map_pc_80000c3c: 	.quad pc_80000c3c
map_pc_80000c40: 	.quad pc_80000c40
map_pc_80000c44: 	.quad pc_80000c44
map_pc_80000c48: 	.quad pc_80000c48
map_pc_80000c4c: 	.quad pc_80000c4c
map_pc_80000c50: 	.quad pc_80000c50
map_pc_80000c54: 	.quad pc_80000c54
map_pc_80000c58: 	.quad pc_80000c58
map_pc_80000c5c: 	.quad pc_80000c5c
map_pc_80000c60: 	.quad pc_80000c60
map_pc_80000c64: 	.quad pc_80000c64
map_pc_80000c68: 	.quad pc_80000c68
map_pc_80000c6c: 	.quad pc_80000c6c
map_pc_80000c70: 	.quad pc_80000c70
map_pc_80000c74: 	.quad pc_80000c74
map_pc_80000c78: 	.quad pc_80000c78
map_pc_80000c7c: 	.quad pc_80000c7c
map_pc_80000c80: 	.quad pc_80000c80
map_pc_80000c84: 	.quad pc_80000c84
map_pc_80000c88: 	.quad pc_80000c88
map_pc_80000c8c: 	.quad pc_80000c8c
map_pc_80000c90: 	.quad pc_80000c90
map_pc_80000c94: 	.quad pc_80000c94
map_pc_80000c98: 	.quad pc_80000c98
map_pc_80000c9c: 	.quad pc_80000c9c
map_pc_80000ca0: 	.quad pc_80000ca0
map_pc_80000ca4: 	.quad pc_80000ca4
map_pc_80000ca8: 	.quad pc_80000ca8
map_pc_80000cac: 	.quad pc_80000cac
map_pc_80000cb0: 	.quad pc_80000cb0
map_pc_80000cb4: 	.quad pc_80000cb4
map_pc_80000cb8: 	.quad pc_80000cb8
map_pc_80000cbc: 	.quad pc_80000cbc
map_pc_80000cc0: 	.quad pc_80000cc0
map_pc_80000cc4: 	.quad pc_80000cc4
map_pc_80000cc8: 	.quad pc_80000cc8
map_pc_80000ccc: 	.quad pc_80000ccc
map_pc_80000cd0: 	.quad pc_80000cd0
map_pc_80000cd4: 	.quad pc_80000cd4
map_pc_80000cd8: 	.quad pc_80000cd8
map_pc_80000cdc: 	.quad pc_80000cdc
map_pc_80000ce0: 	.quad pc_80000ce0
map_pc_80000ce4: 	.quad pc_80000ce4
map_pc_80000ce8: 	.quad pc_80000ce8
map_pc_80000cec: 	.quad pc_80000cec
map_pc_80000cf0: 	.quad pc_80000cf0
map_pc_80000cf4: 	.quad pc_80000cf4
map_pc_80000cf8: 	.quad pc_80000cf8
map_pc_80000cfc: 	.quad pc_80000cfc
map_pc_80000d00: 	.quad pc_80000d00
map_pc_80000d04: 	.quad pc_80000d04
map_pc_80000d08: 	.quad pc_80000d08
map_pc_80000d0c: 	.quad pc_80000d0c
map_pc_80000d10: 	.quad pc_80000d10
map_pc_80000d14: 	.quad pc_80000d14
map_pc_80000d18: 	.quad pc_80000d18
map_pc_80000d1c: 	.quad pc_80000d1c
map_pc_80000d20: 	.quad pc_80000d20
map_pc_80000d24: 	.quad pc_80000d24
map_pc_80000d28: 	.quad pc_80000d28
map_pc_80000d2c: 	.quad pc_80000d2c
map_pc_80000d30: 	.quad pc_80000d30
map_pc_80000d34: 	.quad pc_80000d34
map_pc_80000d38: 	.quad pc_80000d38
map_pc_80000d3c: 	.quad pc_80000d3c
map_pc_80000d40: 	.quad pc_80000d40
map_pc_80000d44: 	.quad pc_80000d44
map_pc_80000d48: 	.quad pc_80000d48
map_pc_80000d4c: 	.quad pc_80000d4c
map_pc_80000d50: 	.quad pc_80000d50
map_pc_80000d54: 	.quad pc_80000d54
map_pc_80000d58: 	.quad pc_80000d58
map_pc_80000d5c: 	.quad pc_80000d5c
map_pc_80000d60: 	.quad pc_80000d60
map_pc_80000d64: 	.quad pc_80000d64
map_pc_80000d68: 	.quad pc_80000d68
map_pc_80000d6c: 	.quad pc_80000d6c
map_pc_80000d70: 	.quad pc_80000d70
map_pc_80000d74: 	.quad pc_80000d74
map_pc_80000d78: 	.quad pc_80000d78
map_pc_80000d7c: 	.quad pc_80000d7c
map_pc_80000d80: 	.quad pc_80000d80
map_pc_80000d84: 	.quad pc_80000d84
map_pc_80000d88: 	.quad pc_80000d88
map_pc_80000d8c: 	.quad pc_80000d8c
map_pc_80000d90: 	.quad pc_80000d90
map_pc_80000d94: 	.quad pc_80000d94
map_pc_80000d98: 	.quad pc_80000d98
map_pc_80000d9c: 	.quad pc_80000d9c
map_pc_80000da0: 	.quad pc_80000da0
map_pc_80000da4: 	.quad pc_80000da4
map_pc_80000da8: 	.quad pc_80000da8
map_pc_80000dac: 	.quad pc_80000dac
map_pc_80000db0: 	.quad pc_80000db0
map_pc_80000db4: 	.quad pc_80000db4
map_pc_80000db8: 	.quad pc_80000db8
map_pc_80000dbc: 	.quad pc_80000dbc
map_pc_80000dc0: 	.quad pc_80000dc0
map_pc_80000dc4: 	.quad pc_80000dc4
map_pc_80000dc8: 	.quad pc_80000dc8
map_pc_80000dcc: 	.quad pc_80000dcc
map_pc_80000dd0: 	.quad pc_80000dd0
map_pc_80000dd4: 	.quad pc_80000dd4
map_pc_80000dd8: 	.quad pc_80000dd8
map_pc_80000ddc: 	.quad pc_80000ddc
map_pc_80000de0: 	.quad pc_80000de0
map_pc_80000de4: 	.quad pc_80000de4
map_pc_80000de8: 	.quad pc_80000de8
map_pc_80000dec: 	.quad pc_80000dec
map_pc_80000df0: 	.quad pc_80000df0
map_pc_80000df4: 	.quad pc_80000df4
map_pc_80000df8: 	.quad pc_80000df8
map_pc_80000dfc: 	.quad pc_80000dfc
map_pc_80000e00: 	.quad pc_80000e00
map_pc_80000e04: 	.quad pc_80000e04
map_pc_80000e08: 	.quad pc_80000e08
map_pc_80000e0c: 	.quad pc_80000e0c
map_pc_80000e10: 	.quad pc_80000e10
map_pc_80000e14: 	.quad pc_80000e14
map_pc_80000e18: 	.quad pc_80000e18
map_pc_80000e1c: 	.quad pc_80000e1c
map_pc_80000e20: 	.quad pc_80000e20
map_pc_80000e24: 	.quad pc_80000e24
map_pc_80000e28: 	.quad pc_80000e28
map_pc_80000e2c: 	.quad pc_80000e2c
map_pc_80000e30: 	.quad pc_80000e30
map_pc_80000e34: 	.quad pc_80000e34
map_pc_80000e38: 	.quad pc_80000e38
map_pc_80000e3c: 	.quad pc_80000e3c
map_pc_80000e40: 	.quad pc_80000e40
map_pc_80000e44: 	.quad pc_80000e44
map_pc_80000e48: 	.quad pc_80000e48
map_pc_80000e4c: 	.quad pc_80000e4c
map_pc_80000e50: 	.quad pc_80000e50
map_pc_80000e54: 	.quad pc_80000e54
map_pc_80000e58: 	.quad pc_80000e58
map_pc_80000e5c: 	.quad pc_80000e5c
map_pc_80000e60: 	.quad pc_80000e60
map_pc_80000e64: 	.quad pc_80000e64
map_pc_80000e68: 	.quad pc_80000e68
map_pc_80000e6c: 	.quad pc_80000e6c
map_pc_80000e70: 	.quad pc_80000e70
map_pc_80000e74: 	.quad pc_80000e74
map_pc_80000e78: 	.quad pc_80000e78
map_pc_80000e7c: 	.quad pc_80000e7c
map_pc_80000e80: 	.quad pc_80000e80
map_pc_80000e84: 	.quad pc_80000e84
map_pc_80000e88: 	.quad pc_80000e88
map_pc_80000e8c: 	.quad pc_80000e8c
map_pc_80000e90: 	.quad pc_80000e90
map_pc_80000e94: 	.quad pc_80000e94
map_pc_80000e98: 	.quad pc_80000e98
map_pc_80000e9c: 	.quad pc_80000e9c
map_pc_80000ea0: 	.quad pc_80000ea0
map_pc_80000ea4: 	.quad pc_80000ea4
map_pc_80000ea8: 	.quad pc_80000ea8
map_pc_80000eac: 	.quad pc_80000eac
map_pc_80000eb0: 	.quad pc_80000eb0
map_pc_80000eb4: 	.quad pc_80000eb4
map_pc_80000eb8: 	.quad pc_80000eb8
map_pc_80000ebc: 	.quad pc_80000ebc
map_pc_80000ec0: 	.quad pc_80000ec0
map_pc_80000ec4: 	.quad pc_80000ec4
map_pc_80000ec8: 	.quad pc_80000ec8
map_pc_80000ecc: 	.quad pc_80000ecc
map_pc_80000ed0: 	.quad pc_80000ed0
map_pc_80000ed4: 	.quad pc_80000ed4
map_pc_80000ed8: 	.quad pc_80000ed8
map_pc_80000edc: 	.quad pc_80000edc
map_pc_80000ee0: 	.quad pc_80000ee0
map_pc_80000ee4: 	.quad pc_80000ee4
map_pc_80000ee8: 	.quad pc_80000ee8
map_pc_80000eec: 	.quad pc_80000eec
map_pc_80000ef0: 	.quad pc_80000ef0
map_pc_80000ef4: 	.quad pc_80000ef4
map_pc_80000ef8: 	.quad pc_80000ef8
map_pc_80000efc: 	.quad pc_80000efc
map_pc_80000f00: 	.quad pc_80000f00
map_pc_80000f04: 	.quad pc_80000f04
map_pc_80000f08: 	.quad pc_80000f08
map_pc_80000f0c: 	.quad pc_80000f0c
map_pc_80000f10: 	.quad pc_80000f10
map_pc_80000f14: 	.quad pc_80000f14
map_pc_80000f18: 	.quad pc_80000f18
map_pc_80000f1c: 	.quad pc_80000f1c
map_pc_80000f20: 	.quad pc_80000f20
map_pc_80000f24: 	.quad pc_80000f24
map_pc_80000f28: 	.quad pc_80000f28
map_pc_80000f2c: 	.quad pc_80000f2c
map_pc_80000f30: 	.quad pc_80000f30
map_pc_80000f34: 	.quad pc_80000f34
map_pc_80000f38: 	.quad pc_80000f38
map_pc_80000f3c: 	.quad pc_80000f3c
map_pc_80000f40: 	.quad pc_80000f40
map_pc_80000f44: 	.quad pc_80000f44
map_pc_80000f48: 	.quad pc_80000f48
map_pc_80000f4c: 	.quad pc_80000f4c
map_pc_80000f50: 	.quad pc_80000f50
map_pc_80000f54: 	.quad pc_80000f54
map_pc_80000f58: 	.quad pc_80000f58
map_pc_80000f5c: 	.quad pc_80000f5c
map_pc_80000f60: 	.quad pc_80000f60
map_pc_80000f64: 	.quad pc_80000f64
map_pc_80000f68: 	.quad pc_80000f68
map_pc_80000f6c: 	.quad pc_80000f6c
map_pc_80000f70: 	.quad pc_80000f70
map_pc_80000f74: 	.quad pc_80000f74
map_pc_80000f78: 	.quad pc_80000f78
map_pc_80000f7c: 	.quad pc_80000f7c
map_pc_80000f80: 	.quad pc_80000f80
map_pc_80000f84: 	.quad pc_80000f84
map_pc_80000f88: 	.quad pc_80000f88
map_pc_80000f8c: 	.quad pc_80000f8c
map_pc_80000f90: 	.quad pc_80000f90
map_pc_80000f94: 	.quad pc_80000f94
map_pc_80000f98: 	.quad pc_80000f98
map_pc_80000f9c: 	.quad pc_80000f9c
map_pc_80000fa0: 	.quad pc_80000fa0
map_pc_80000fa4: 	.quad pc_80000fa4
map_pc_80000fa8: 	.quad pc_80000fa8
map_pc_80000fac: 	.quad pc_80000fac
map_pc_80000fb0: 	.quad pc_80000fb0
map_pc_80000fb4: 	.quad pc_80000fb4
map_pc_80000fb8: 	.quad pc_80000fb8
map_pc_80000fbc: 	.quad pc_80000fbc
map_pc_80000fc0: 	.quad pc_80000fc0
map_pc_80000fc4: 	.quad pc_80000fc4
map_pc_80000fc8: 	.quad pc_80000fc8
map_pc_80000fcc: 	.quad pc_80000fcc
map_pc_80000fd0: 	.quad pc_80000fd0
map_pc_80000fd4: 	.quad pc_80000fd4
map_pc_80000fd8: 	.quad pc_80000fd8
map_pc_80000fdc: 	.quad pc_80000fdc
map_pc_80000fe0: 	.quad pc_80000fe0
map_pc_80000fe4: 	.quad pc_80000fe4
map_pc_80000fe8: 	.quad pc_80000fe8
map_pc_80000fec: 	.quad pc_80000fec
map_pc_80000ff0: 	.quad pc_80000ff0
map_pc_80000ff4: 	.quad pc_80000ff4
map_pc_80000ff8: 	.quad pc_80000ff8
map_pc_80000ffc: 	.quad pc_80000ffc
map_pc_80001000: 	.quad pc_80001000
map_pc_80001004: 	.quad pc_80001004
map_pc_80001008: 	.quad pc_80001008
map_pc_8000100c: 	.quad pc_8000100c
map_pc_80001010: 	.quad pc_80001010
map_pc_80001014: 	.quad pc_80001014
map_pc_80001018: 	.quad pc_80001018
map_pc_8000101c: 	.quad pc_8000101c
map_pc_80001020: 	.quad pc_80001020
map_pc_80001024: 	.quad pc_80001024
map_pc_80001028: 	.quad pc_80001028
map_pc_8000102c: 	.quad pc_8000102c
map_pc_80001030: 	.quad pc_80001030
map_pc_80001034: 	.quad pc_80001034
map_pc_80001038: 	.quad pc_80001038
map_pc_8000103c: 	.quad pc_8000103c
map_pc_80001040: 	.quad pc_80001040
map_pc_80001044: 	.quad pc_80001044
map_pc_80001048: 	.quad pc_80001048
map_pc_8000104c: 	.quad pc_8000104c
map_pc_80001050: 	.quad pc_80001050
map_pc_80001054: 	.quad pc_80001054
map_pc_80001058: 	.quad pc_80001058
map_pc_8000105c: 	.quad pc_8000105c
map_pc_80001060: 	.quad pc_80001060
map_pc_80001064: 	.quad pc_80001064
map_pc_80001068: 	.quad pc_80001068
map_pc_8000106c: 	.quad pc_8000106c
map_pc_80001070: 	.quad pc_80001070
map_pc_80001074: 	.quad pc_80001074
map_pc_80001078: 	.quad pc_80001078
map_pc_8000107c: 	.quad pc_8000107c
map_pc_80001080: 	.quad pc_80001080
map_pc_80001084: 	.quad pc_80001084
map_pc_80001088: 	.quad pc_80001088
map_pc_8000108c: 	.quad pc_8000108c
map_pc_80001090: 	.quad pc_80001090
map_pc_80001094: 	.quad pc_80001094
map_pc_80001098: 	.quad pc_80001098
map_pc_8000109c: 	.quad pc_8000109c
map_pc_800010a0: 	.quad pc_800010a0
map_pc_800010a4: 	.quad pc_800010a4
map_pc_800010a8: 	.quad pc_800010a8
map_pc_800010ac: 	.quad pc_800010ac
map_pc_800010b0: 	.quad pc_800010b0
map_pc_800010b4: 	.quad pc_800010b4
map_pc_800010b8: 	.quad pc_800010b8
map_pc_800010bc: 	.quad pc_800010bc
map_pc_800010c0: 	.quad pc_800010c0
map_pc_800010c4: 	.quad pc_800010c4
map_pc_800010c8: 	.quad pc_800010c8
map_pc_800010cc: 	.quad pc_800010cc
map_pc_800010d0: 	.quad pc_800010d0
map_pc_800010d4: 	.quad pc_800010d4
map_pc_800010d8: 	.quad pc_800010d8
map_pc_800010dc: 	.quad pc_800010dc
map_pc_800010e0: 	.quad pc_800010e0
map_pc_800010e4: 	.quad pc_800010e4
map_pc_800010e8: 	.quad pc_800010e8
map_pc_800010ec: 	.quad pc_800010ec
map_pc_800010f0: 	.quad pc_800010f0
map_pc_800010f4: 	.quad pc_800010f4
map_pc_800010f8: 	.quad pc_800010f8
map_pc_800010fc: 	.quad pc_800010fc
map_pc_80001100: 	.quad pc_80001100
map_pc_80001104: 	.quad pc_80001104
map_pc_80001108: 	.quad pc_80001108
map_pc_8000110c: 	.quad pc_8000110c
map_pc_80001110: 	.quad pc_80001110
map_pc_80001114: 	.quad pc_80001114
map_pc_80001118: 	.quad pc_80001118
map_pc_8000111c: 	.quad pc_8000111c
map_pc_80001120: 	.quad pc_80001120
map_pc_80001124: 	.quad pc_80001124
map_pc_80001128: 	.quad pc_80001128
map_pc_8000112c: 	.quad pc_8000112c
map_pc_80001130: 	.quad pc_80001130
map_pc_80001134: 	.quad pc_80001134
map_pc_80001138: 	.quad pc_80001138
map_pc_8000113c: 	.quad pc_8000113c
map_pc_80001140: 	.quad pc_80001140
map_pc_80001144: 	.quad pc_80001144
map_pc_80001148: 	.quad pc_80001148
map_pc_8000114c: 	.quad pc_8000114c
map_pc_80001150: 	.quad pc_80001150
map_pc_80001154: 	.quad pc_80001154
map_pc_80001158: 	.quad pc_80001158
map_pc_8000115c: 	.quad pc_8000115c
map_pc_80001160: 	.quad pc_80001160
map_pc_80001164: 	.quad pc_80001164
map_pc_80001168: 	.quad pc_80001168
map_pc_8000116c: 	.quad pc_8000116c
map_pc_80001170: 	.quad pc_80001170
map_pc_80001174: 	.quad pc_80001174
map_pc_80001178: 	.quad pc_80001178
map_pc_8000117c: 	.quad pc_8000117c
map_pc_80001180: 	.quad pc_80001180
map_pc_80001184: 	.quad pc_80001184
map_pc_80001188: 	.quad pc_80001188
map_pc_8000118c: 	.quad pc_8000118c
map_pc_80001190: 	.quad pc_80001190
map_pc_80001194: 	.quad pc_80001194
map_pc_80001198: 	.quad pc_80001198
map_pc_8000119c: 	.quad pc_8000119c
map_pc_800011a0: 	.quad pc_800011a0
map_pc_800011a4: 	.quad pc_800011a4
map_pc_800011a8: 	.quad pc_800011a8
map_pc_800011ac: 	.quad pc_800011ac
map_pc_800011b0: 	.quad pc_800011b0
map_pc_800011b4: 	.quad pc_800011b4
map_pc_800011b8: 	.quad pc_800011b8
map_pc_800011bc: 	.quad pc_800011bc
map_pc_800011c0: 	.quad pc_800011c0
map_pc_800011c4: 	.quad pc_800011c4
map_pc_800011c8: 	.quad pc_800011c8
map_pc_800011cc: 	.quad pc_800011cc
map_pc_800011d0: 	.quad pc_800011d0
map_pc_800011d4: 	.quad pc_800011d4
map_pc_800011d8: 	.quad pc_800011d8
map_pc_800011dc: 	.quad pc_800011dc
map_pc_800011e0: 	.quad pc_800011e0
map_pc_800011e4: 	.quad pc_800011e4
map_pc_800011e8: 	.quad pc_800011e8
map_pc_800011ec: 	.quad pc_800011ec
map_pc_800011f0: 	.quad pc_800011f0
map_pc_800011f4: 	.quad pc_800011f4
map_pc_800011f8: 	.quad pc_800011f8
map_pc_800011fc: 	.quad pc_800011fc
map_pc_80001200: 	.quad pc_80001200
map_pc_80001204: 	.quad pc_80001204
map_pc_80001208: 	.quad pc_80001208
map_pc_8000120c: 	.quad pc_8000120c
map_pc_80001210: 	.quad pc_80001210
map_pc_80001214: 	.quad pc_80001214
map_pc_80001218: 	.quad pc_80001218
map_pc_8000121c: 	.quad pc_8000121c
map_pc_80001220: 	.quad pc_80001220
map_pc_80001224: 	.quad pc_80001224
map_pc_80001228: 	.quad pc_80001228
map_pc_8000122c: 	.quad pc_8000122c
map_pc_80001230: 	.quad pc_80001230
map_pc_80001234: 	.quad pc_80001234
map_pc_80001238: 	.quad pc_80001238
map_pc_8000123c: 	.quad pc_8000123c
map_pc_80001240: 	.quad pc_80001240
map_pc_80001244: 	.quad pc_80001244
map_pc_80001248: 	.quad pc_80001248
map_pc_8000124c: 	.quad pc_8000124c
map_pc_80001250: 	.quad pc_80001250
map_pc_80001254: 	.quad pc_80001254
map_pc_80001258: 	.quad pc_80001258
map_pc_8000125c: 	.quad pc_8000125c
map_pc_80001260: 	.quad pc_80001260
map_pc_80001264: 	.quad pc_80001264
map_pc_80001268: 	.quad pc_80001268
map_pc_8000126c: 	.quad pc_8000126c
map_pc_80001270: 	.quad pc_80001270
map_pc_80001274: 	.quad pc_80001274
map_pc_80001278: 	.quad pc_80001278
map_pc_8000127c: 	.quad pc_8000127c
map_pc_80001280: 	.quad pc_80001280
map_pc_80001284: 	.quad pc_80001284
map_pc_80001288: 	.quad pc_80001288
map_pc_8000128c: 	.quad pc_8000128c
map_pc_80001290: 	.quad pc_80001290
map_pc_80001294: 	.quad pc_80001294
map_pc_80001298: 	.quad pc_80001298
map_pc_8000129c: 	.quad pc_8000129c
map_pc_800012a0: 	.quad pc_800012a0
map_pc_800012a4: 	.quad pc_800012a4
map_pc_800012a8: 	.quad pc_800012a8
map_pc_800012ac: 	.quad pc_800012ac
map_pc_800012b0: 	.quad pc_800012b0
map_pc_800012b4: 	.quad pc_800012b4
map_pc_800012b8: 	.quad pc_800012b8
map_pc_800012bc: 	.quad pc_800012bc
map_pc_800012c0: 	.quad pc_800012c0
map_pc_800012c4: 	.quad pc_800012c4
map_pc_800012c8: 	.quad pc_800012c8
map_pc_800012cc: 	.quad pc_800012cc
map_pc_800012d0: 	.quad pc_800012d0
map_pc_800012d4: 	.quad pc_800012d4
map_pc_800012d8: 	.quad pc_800012d8
map_pc_800012dc: 	.quad pc_800012dc
map_pc_800012e0: 	.quad pc_800012e0
map_pc_800012e4: 	.quad pc_800012e4
map_pc_800012e8: 	.quad pc_800012e8
map_pc_800012ec: 	.quad pc_800012ec
map_pc_800012f0: 	.quad pc_800012f0
map_pc_800012f4: 	.quad pc_800012f4
map_pc_800012f8: 	.quad pc_800012f8
map_pc_800012fc: 	.quad pc_800012fc
map_pc_80001300: 	.quad pc_80001300
map_pc_80001304: 	.quad pc_80001304
map_pc_80001308: 	.quad pc_80001308
map_pc_8000130c: 	.quad pc_8000130c
map_pc_80001310: 	.quad pc_80001310
map_pc_80001314: 	.quad pc_80001314
map_pc_80001318: 	.quad pc_80001318
map_pc_8000131c: 	.quad pc_8000131c
map_pc_80001320: 	.quad pc_80001320

