require "std_direct.pil"
require "rom/pil/rom.pil"
require "main/pil/main.pil"
require "mem/pil/mem.pil"
require "mem/pil/mem_align.pil"
require "mem/pil/mem_align_rom.pil"
require "binary/pil/binary.pil"
require "binary/pil/binary_table.pil"
require "binary/pil/binary_extension.pil"
require "binary/pil/binary_extension_table.pil"
require "binary/pil/binary_add.pil"
require "arith/pil/arith.pil"
require "arith_eq/pil/arith_eq.pil"
require "keccakf/pil/keccakf.pil"
require "keccakf/pil/keccakf_table.pil"
require "sha256f/pil/sha256f.pil"

const int OPERATION_BUS_ID = 5000;

proofval enable_input_data;
enable_input_data * (1 - enable_input_data);

const int PUBLIC_INPUTS_64_BITS = 32;  // 32 x 64 bits = 2048 bits
public inputs[PUBLIC_INPUTS_64_BITS * 2]; // 2 x 32-bits = 64 bits

const int PUBLIC_OP = 0x30;

// Limit the std's tables size
set_max_std_tables_bits(21);

airgroup Zisk {
    // Main Program
    Main(N: 2**22, RC: 2, operation_bus_id: OPERATION_BUS_ID);
    Rom(N: 2**21);

    // Standard Operations
    Mem(N: 2**22, RC: 2, base_address: 0xA000_0000, size_mb: 512, large_mem: 1);
    Mem(N: 2**21, RC: 2, base_address: 0x8000_0000, immutable: 1) alias RomData;
    Mem(N: 2**21, RC: 2, base_address: 0x9000_0000, free_input_mem: 1, enable_flag: enable_input_data, use_predefined_ranges: 0) alias InputData;

    MemAlign(N: 2**22, use_predefined_ranges: 0);
    MemAlignRom();

    Arith(N: 2**21, operation_bus_id: OPERATION_BUS_ID);
    ArithTable();
    ArithRangeTable();

    Binary(N: 2**22, operation_bus_id: OPERATION_BUS_ID);
    BinaryAdd(N: 2**22, operation_bus_id: OPERATION_BUS_ID);
    BinaryTable();
    BinaryExtension(N: 2**22, operation_bus_id: OPERATION_BUS_ID);
    BinaryExtensionTable();

    // Precompiles
    ArithEq(N: 2**21, operation_bus_id: OPERATION_BUS_ID);
    ArithEqLtTable();

    const int KECCAKF_CHUNKS = 9;
    const int KECCAKF_BITS = 7;
    Keccakf(N: 2**21, chunks: KECCAKF_CHUNKS, bits: KECCAKF_BITS, RC: 2, RB: 32, mem_bits_in_parallel: 4, operation_bus_id: OPERATION_BUS_ID);
    const int KECCAKF_TABLE_CHUNKS = 1;
    const int KECCAKF_TABLE_BITS = (KECCAKF_BITS - KECCAKF_TABLE_CHUNKS + 1) + KECCAKF_BITS + KECCAKF_BITS + 1;
    KeccakfTable(N: 2**KECCAKF_TABLE_BITS, chunks: KECCAKF_TABLE_CHUNKS, bits: KECCAKF_BITS);

    Sha256f(N: 2**18, RC: 2, RB: 32, operation_bus_id: OPERATION_BUS_ID);

    // Public Inputs
    for (int i = 0; i < PUBLIC_INPUTS_64_BITS; i++) {
        direct_global_update_proves(OPERATION_BUS_ID, [PUBLIC_OP, i, 0, inputs[i*2], inputs[i*2 + 1], inputs[i*2], inputs[i*2 + 1], 0]);
    }
}
