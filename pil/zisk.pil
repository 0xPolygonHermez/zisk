require "rom/pil/rom.pil"
require "main/pil/main.pil"
require "mem/pil/mem.pil"
require "mem/pil/mem_align.pil"
require "mem/pil/mem_align_rom.pil"
require "binary/pil/binary.pil"
require "binary/pil/binary_table.pil"
require "binary/pil/binary_extension.pil"
require "binary/pil/binary_extension_table.pil"
require "arith/pil/arith.pil"
require "keccakf/pil/keccakf.pil"
require "keccakf/pil/keccakf_table.pil"

const int OPERATION_BUS_ID = 5000;

proofval enable_input_data;
enable_input_data * (1 - enable_input_data);

airgroup Zisk {
    Main(N: 2**21, RC: 2, operation_bus_id: OPERATION_BUS_ID);
    Rom(N: 2**22);

    Mem(N: 2**21, RC: 2, base_address: 0xA000_0000);
    Mem(N: 2**21, RC: 2, base_address: 0x8000_0000, immutable: 1) alias RomData;
    Mem(N: 2**21, RC: 2, base_address: 0x9000_0000, free_input_mem: 1, enable_flag: enable_input_data) alias InputData;

    MemAlign(N: 2**21);
    MemAlignRom();

    Arith(N: 2**21, operation_bus_id: OPERATION_BUS_ID);
    ArithTable();
    ArithRangeTable();
    Binary(N: 2**21, operation_bus_id: OPERATION_BUS_ID);
    BinaryTable();
    BinaryExtension(N: 2**21, operation_bus_id: OPERATION_BUS_ID);
    BinaryExtensionTable();

    Keccakf(N: 2**21, RC: 2, chunks: 6, bits: 10, operation_bus_id: OPERATION_BUS_ID);
    KeccakfTable(N: 2**21, bits: 10);
}