{"documentCount":139,"nextId":139,"documentIds":{"0":"docs/pages/developers/installation.md#installation-guide","1":"docs/pages/developers/installation.md#system-requirements","2":"docs/pages/developers/installation.md#required-tools","3":"docs/pages/developers/installation.md#installing-dependencies","4":"docs/pages/developers/installation.md#ubuntu","5":"docs/pages/developers/installation.md#macos","6":"docs/pages/developers/installation.md#installing-zisk","7":"docs/pages/developers/installation.md#option-1-prebuilt-binaries-recommended","8":"docs/pages/developers/installation.md#updating-zisk","9":"docs/pages/developers/installation.md#option-2-building-from-source","10":"docs/pages/developers/installation.md#build-zisk","11":"docs/pages/developers/installation.md#build-setup","12":"docs/pages/developers/installation.md#uninstall-zisk","13":"docs/pages/developers/precompile.md#precompiles","14":"docs/pages/developers/precompile.md#how-precompiles-work","15":"docs/pages/developers/precompile.md#available-precompiles-in-zisk","16":"docs/pages/developers/quickstart.md#quickstart","17":"docs/pages/developers/quickstart.md#installation","18":"docs/pages/developers/quickstart.md#create-a-project","19":"docs/pages/developers/quickstart.md#build","20":"docs/pages/developers/quickstart.md#execute","21":"docs/pages/developers/quickstart.md#prove","22":"docs/pages/developers/quickstart.md#verify-proof","23":"docs/pages/developers/writing-programs.md#writing-programs","24":"docs/pages/developers/writing-programs.md#setup","25":"docs/pages/developers/writing-programs.md#code-changes","26":"docs/pages/developers/writing-programs.md#example-program","27":"docs/pages/developers/writing-programs.md#inputoutput-data","28":"docs/pages/developers/writing-programs.md#build","29":"docs/pages/developers/writing-programs.md#execute","30":"docs/pages/developers/writing-programs.md#metrics-and-statistics","31":"docs/pages/developers/writing-programs.md#performance-metrics","32":"docs/pages/developers/writing-programs.md#execution-statistics","33":"docs/pages/developers/writing-programs.md#prove","34":"docs/pages/developers/writing-programs.md#program-setup","35":"docs/pages/developers/writing-programs.md#verify-constraints","36":"docs/pages/developers/writing-programs.md#generate-proof","37":"docs/pages/developers/writing-programs.md#concurrent-proof-generation","38":"docs/pages/developers/writing-programs.md#gpu-proof-generation","39":"docs/pages/developers/writing-programs.md#verify-proof","40":"docs/pages/examples/ethereum-block-exec.md#ethereum-block-execution-example","41":"docs/pages/examples/ethereum-block-exec.md#overview","42":"docs/pages/examples/ethereum-block-exec.md#program-code","43":"docs/pages/examples/ethereum-block-exec.md#mainrs","44":"docs/pages/examples/ethereum-block-exec.md#cargotoml","45":"docs/pages/examples/ethereum-block-exec.md#key-features","46":"docs/pages/examples/ethereum-block-exec.md#stateless-validation","47":"docs/pages/examples/ethereum-block-exec.md#reth-integration","48":"docs/pages/examples/ethereum-block-exec.md#input-structure","49":"docs/pages/examples/ethereum-block-exec.md#architecture","50":"docs/pages/examples/ethereum-block-exec.md#data-flow","51":"docs/pages/examples/ethereum-block-exec.md#validation-process","52":"docs/pages/examples/ethereum-block-exec.md#input-data-format","53":"docs/pages/examples/ethereum-block-exec.md#creating-input-data","54":"docs/pages/examples/ethereum-block-exec.md#witness-data","55":"docs/pages/examples/ethereum-block-exec.md#running-the-example","56":"docs/pages/examples/ethereum-block-exec.md#prerequisites","57":"docs/pages/examples/ethereum-block-exec.md#build-and-execute","58":"docs/pages/examples/ethereum-block-exec.md#performance-tuning","59":"docs/pages/examples/ethereum-block-exec.md#use-cases","60":"docs/pages/examples/ethereum-block-exec.md#layer-2-scaling","61":"docs/pages/examples/ethereum-block-exec.md#cross-chain-bridges","62":"docs/pages/examples/ethereum-block-exec.md#compliance-and-auditing","63":"docs/pages/examples/ethereum-block-exec.md#advanced-configuration","64":"docs/pages/examples/ethereum-block-exec.md#fork-specifications","65":"docs/pages/examples/ethereum-block-exec.md#chain-specifications","66":"docs/pages/examples/ethereum-block-exec.md#generate-proof","67":"docs/pages/examples/ethereum-block-exec.md#parallel-proof-generation","68":"docs/pages/examples/ethereum-block-exec.md#troubleshooting","69":"docs/pages/examples/ethereum-block-exec.md#common-issues","70":"docs/pages/examples/ethereum-block-exec.md#debug-mode","71":"docs/pages/examples/ethereum-block-exec.md#integration-ideas","72":"docs/pages/examples/ethereum-block-exec.md#web3-application-integration","73":"docs/pages/examples/ethereum-block-exec.md#smart-contract-verification","74":"docs/pages/examples/fibonacci.md#fibonacci-example","75":"docs/pages/examples/fibonacci.md#overview","76":"docs/pages/examples/fibonacci.md#program-code","77":"docs/pages/examples/fibonacci.md#mainrs","78":"docs/pages/examples/fibonacci.md#cargotoml","79":"docs/pages/examples/fibonacci.md#buildrs","80":"docs/pages/examples/fibonacci.md#key-features","81":"docs/pages/examples/fibonacci.md#input-handling","82":"docs/pages/examples/fibonacci.md#fibonacci-computation","83":"docs/pages/examples/fibonacci.md#output-format","84":"docs/pages/examples/fibonacci.md#running-the-example","85":"docs/pages/examples/fibonacci.md#build-and-execute","86":"docs/pages/examples/fibonacci.md#expected-results","87":"docs/pages/examples/fibonacci.md#performance-considerations","88":"docs/pages/examples/fibonacci.md#generate-proof","89":"docs/pages/examples/keccak.md#keccak-example","90":"docs/pages/examples/keccak.md#overview","91":"docs/pages/examples/keccak.md#program-code","92":"docs/pages/examples/keccak.md#mainrs","93":"docs/pages/examples/keccak.md#cargotoml","94":"docs/pages/examples/keccak.md#buildrs","95":"docs/pages/examples/keccak.md#key-features","96":"docs/pages/examples/keccak.md#input-handling","97":"docs/pages/examples/keccak.md#keccak-256-computation","98":"docs/pages/examples/keccak.md#hash-chain-process","99":"docs/pages/examples/keccak.md#output-format","100":"docs/pages/examples/keccak.md#running-the-example","101":"docs/pages/examples/keccak.md#build-and-execute","102":"docs/pages/examples/keccak.md#expected-results","103":"docs/pages/examples/keccak.md#use-cases","104":"docs/pages/examples/keccak.md#blockchain-applications","105":"docs/pages/examples/keccak.md#proof-of-work-simulations","106":"docs/pages/examples/keccak.md#cryptographic-research","107":"docs/pages/examples/keccak.md#performance-considerations","108":"docs/pages/examples/keccak.md#computational-complexity","109":"docs/pages/examples/keccak.md#zisk-specific-optimizations","110":"docs/pages/examples/keccak.md#scaling-considerations","111":"docs/pages/examples/keccak.md#generate-proof","112":"docs/pages/examples/keccak.md#advanced-usage","113":"docs/pages/examples/keccak.md#custom-input-generation","114":"docs/pages/examples/keccak.md#verification-of-results","115":"docs/pages/protocols/overview.md#zisk-overview","116":"docs/pages/protocols/overview.md#system-architecture-overview","117":"docs/pages/protocols/overview.md#high-level-system-architecture","118":"docs/pages/protocols/overview.md#core-components","119":"docs/pages/protocols/overview.md#state-machine-packages","120":"docs/pages/protocols/overview.md#key-dependencies","121":"docs/pages/protocols/overview.md#execution-pipeline","122":"docs/pages/protocols/overview.md#execution-stages","123":"docs/pages/protocols/overview.md#state-machine-architecture","124":"docs/pages/protocols/overview.md#main-state-machine-sm-main","125":"docs/pages/protocols/overview.md#specialized-state-machines","126":"docs/pages/protocols/overview.md#binary-operations-sm-binary","127":"docs/pages/protocols/overview.md#arithmetic-operations-sm-arith","128":"docs/pages/protocols/overview.md#memory-management-sm-mem","129":"docs/pages/protocols/overview.md#rom-access-sm-rom","130":"docs/pages/protocols/overview.md#communication-and-coordination","131":"docs/pages/protocols/overview.md#developer-workflow","132":"docs/pages/protocols/overview.md#core-development-tools","133":"docs/pages/protocols/overview.md#testing-and-verification","134":"docs/pages/protocols/overview.md#development-status","135":"docs/pages/protocols/airs-building/overview.md#procotol-overview","136":"docs/pages/protocols/execution/overview.md#procotol-overview","137":"docs/pages/protocols/final-aggregation/overview.md#procotol-overview","138":"docs/pages/protocols/witness-generation/overview.md#procotol-overview"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,19],"1":[2,2,30],"2":[2,4,9],"3":[2,2,1],"4":[1,4,44],"5":[1,4,28],"6":[2,2,1],"7":[6,4,92],"8":[2,10,26],"9":[5,4,1],"10":[2,9,147],"11":[2,9,171],"12":[2,2,12],"13":[1,1,52],"14":[3,1,57],"15":[4,3,52],"16":[1,1,19],"17":[1,1,105],"18":[3,1,94],"19":[1,1,41],"20":[1,1,54],"21":[1,1,97],"22":[2,1,19],"23":[2,1,16],"24":[1,2,1],"25":[2,3,58],"26":[2,3,113],"27":[3,3,88],"28":[1,2,68],"29":[1,2,73],"30":[3,2,1],"31":[2,5,68],"32":[2,5,132],"33":[1,2,1],"34":[2,3,68],"35":[2,3,77],"36":[2,3,101],"37":[3,3,139],"38":[3,3,127],"39":[2,3,57],"40":[4,1,31],"41":[1,4,57],"42":[2,4,1],"43":[2,6,45],"44":[2,6,47],"45":[2,4,1],"46":[2,6,29],"47":[2,6,28],"48":[2,6,24],"49":[1,4,1],"50":[2,5,34],"51":[2,5,30],"52":[3,4,1],"53":[3,7,46],"54":[2,7,27],"55":[3,4,1],"56":[1,6,30],"57":[3,6,23],"58":[2,6,44],"59":[2,4,1],"60":[3,6,24],"61":[3,6,21],"62":[3,6,19],"63":[2,4,1],"64":[2,6,27],"65":[2,6,16],"66":[2,4,37],"67":[3,6,37],"68":[1,4,1],"69":[2,5,57],"70":[2,5,20],"71":[2,4,1],"72":[3,6,36],"73":[3,6,47],"74":[2,1,28],"75":[1,2,49],"76":[2,2,1],"77":[2,4,97],"78":[2,4,23],"79":[2,4,73],"80":[2,2,1],"81":[2,4,22],"82":[2,4,24],"83":[2,4,26],"84":[3,2,1],"85":[3,4,33],"86":[2,4,22],"87":[2,2,28],"88":[2,2,53],"89":[2,1,32],"90":[1,2,56],"91":[2,2,1],"92":[2,4,98],"93":[2,4,26],"94":[2,4,73],"95":[2,2,1],"96":[2,4,26],"97":[3,4,38],"98":[3,4,30],"99":[2,4,27],"100":[3,2,1],"101":[3,4,33],"102":[2,4,41],"103":[2,2,7],"104":[2,4,11],"105":[4,4,11],"106":[2,4,14],"107":[2,2,1],"108":[2,4,26],"109":[3,4,26],"110":[2,4,23],"111":[2,2,35],"112":[2,2,1],"113":[3,4,41],"114":[3,4,79],"115":[2,1,106],"116":[3,2,25],"117":[4,4,43],"118":[2,4,58],"119":[3,4,31],"120":[2,4,32],"121":[2,2,16],"122":[2,4,73],"123":[3,2,26],"124":[6,5,54],"125":[3,5,1],"126":[5,7,23],"127":[5,7,18],"128":[5,7,16],"129":[5,7,15],"130":[3,5,52],"131":[2,2,18],"132":[3,4,16],"133":[3,4,45],"134":[2,2,62],"135":[2,1,1],"136":[2,1,1],"137":[2,1,1],"138":[2,1,1]},"averageFieldLength":[2.323741007194245,3.6546762589928057,37.24460431654675],"storedFields":{"0":{"href":"/developers/installation#installation-guide","html":"</header>\n<p>ZisK can be installed from prebuilt binaries (recommended) or by building the ZisK tools, toolchain and setup files from source.</p>\n","isPage":true,"text":"\nZisK can be installed from prebuilt binaries (recommended) or by building the ZisK tools, toolchain and setup files from source.\n","title":"Installation Guide","titles":[]},"1":{"href":"/developers/installation#system-requirements","html":"\n<p>ZisK currently supports <strong>Linux x86_64</strong> and <strong>macOS</strong> platforms (see note below).</p>\n<blockquote>\n<p><strong>Note:</strong> Proof generation and verification on <strong>macOS</strong> are not yet supported. We’re actively working to add this functionality.</p>\n</blockquote>\n","isPage":false,"text":"\nZisK currently supports Linux x86_64 and macOS platforms (see note below).\n\nNote: Proof generation and verification on macOS are not yet supported. We’re actively working to add this functionality.\n\n","title":"System Requirements","titles":["Installation Guide"]},"2":{"href":"/developers/installation#required-tools","html":"\n<p>Ensure the following tools are installed:</p>\n<ul>\n<li><a href=\"https://www.rust-lang.org/tools/install\">Rust</a></li>\n<li><a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">Git</a></li>\n</ul>\n","isPage":false,"text":"\nEnsure the following tools are installed:\n\nRust\nGit\n\n","title":"Required Tools","titles":["Installation Guide","System Requirements"]},"3":{"href":"/developers/installation#installing-dependencies","html":"\n","isPage":false,"text":"\n","title":"Installing Dependencies","titles":["Installation Guide"]},"4":{"href":"/developers/installation#ubuntu","html":"\n<p>Ubuntu 22.04 or higher is required.</p>\n<p>Install all required dependencies with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> apt-get</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> xz-utils</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> jq</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build-essential</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> qemu-system</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libomp-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libgmp-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> nlohmann-json3-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> protobuf-compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> uuid-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libgrpc++-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libsecp256k1-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libsodium-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libpqxx-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> nasm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libopenmpi-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> openmpi-bin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> openmpi-common</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libclang-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clang</span></span></code></pre>\n","isPage":false,"text":"\nUbuntu 22.04 or higher is required.\nInstall all required dependencies with:\nsudo apt-get install -y xz-utils jq curl build-essential qemu-system libomp-dev libgmp-dev nlohmann-json3-dev protobuf-compiler uuid-dev libgrpc++-dev libsecp256k1-dev libsodium-dev libpqxx-dev nasm libopenmpi-dev openmpi-bin openmpi-common libclang-dev clang\n","title":"Ubuntu","titles":["Installation Guide","Installing Dependencies"]},"5":{"href":"/developers/installation#macos","html":"\n<p>macOS 14 or higher is required.</p>\n<p>You must have <a href=\"https://brew.sh/\">Homebrew</a> installed.</p>\n<p>Install all required dependencies with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">brew</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> reinstall</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> jq</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libomp</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> protobuf</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> openssl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> nasm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pkgconf</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> open-mpi</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libffi</span></span></code></pre>\n","isPage":false,"text":"\nmacOS 14 or higher is required.\nYou must have Homebrew installed.\nInstall all required dependencies with:\nbrew reinstall jq curl libomp protobuf openssl nasm pkgconf open-mpi libffi\n","title":"macOS","titles":["Installation Guide","Installing Dependencies"]},"6":{"href":"/developers/installation#installing-zisk","html":"\n","isPage":false,"text":"\n","title":"Installing ZisK","titles":["Installation Guide"]},"7":{"href":"/developers/installation#option-1-prebuilt-binaries-recommended","html":"\n<ol>\n<li>\n<p>To install ZisK using ziskup, run the following command in your terminal:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://raw.githubusercontent.com/0xPolygonHermez/zisk/main/ziskup/install.sh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> bash</span></span></code></pre>\n</li>\n<li>\n<p>During the installation, you will be prompted to select a setup option. You can choose from the following:</p>\n<ol>\n<li><strong>Install proving key (default)</strong> – Required for generating and verifying proofs.</li>\n<li><strong>Install verify key</strong> – Needed only if you want to verify proofs.</li>\n<li><strong>None</strong> – Choose this if you only want to compile programs and execute them using the ZisK emulator.</li>\n</ol>\n</li>\n<li>\n<p>Verify the Rust toolchain: (which includes support for the <code>riscv64ima-zisk-zkvm</code> compilation target):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rustup</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> toolchain</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> list</span></span></code></pre>\n<p>The output should include an entry for <code>zisk</code>, similar to this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stable-x86_64-unknown-linux-gnu (default)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">nightly-x86_64-unknown-linux-gnu</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">zisk</span></span></code></pre>\n</li>\n<li>\n<p>Verify the <code>cargo-zisk</code> CLI tool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --version</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nTo install ZisK using ziskup, run the following command in your terminal:\ncurl https://raw.githubusercontent.com/0xPolygonHermez/zisk/main/ziskup/install.sh  | bash\n\n\nDuring the installation, you will be prompted to select a setup option. You can choose from the following:\n\nInstall proving key (default) – Required for generating and verifying proofs.\nInstall verify key – Needed only if you want to verify proofs.\nNone – Choose this if you only want to compile programs and execute them using the ZisK emulator.\n\n\n\nVerify the Rust toolchain: (which includes support for the riscv64ima-zisk-zkvm compilation target):\nrustup toolchain list\nThe output should include an entry for zisk, similar to this:\nstable-x86_64-unknown-linux-gnu (default)\nnightly-x86_64-unknown-linux-gnu\nzisk\n\n\nVerify the cargo-zisk CLI tool:\ncargo-zisk --version\n\n\n","title":"Option 1: Prebuilt Binaries (Recommended)","titles":["Installation Guide","Installing ZisK"]},"8":{"href":"/developers/installation#updating-zisk","html":"\n<p>To update ZisK to the latest version, simply run:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskup</span></span></code></pre>\n<p>You can use the flags <code>--provingkey</code>, <code>--verifykey</code> or <code>--nokey</code> to specify the installation setup and skip the selection prompt.</p>\n","isPage":false,"text":"\nTo update ZisK to the latest version, simply run:\nziskup\nYou can use the flags --provingkey, --verifykey or --nokey to specify the installation setup and skip the selection prompt.\n","title":"Updating ZisK","titles":["Installation Guide","Installing ZisK","Option 1: Prebuilt Binaries (Recommended)"]},"9":{"href":"/developers/installation#option-2-building-from-source","html":"\n","isPage":false,"text":"\n","title":"Option 2: Building from Source","titles":["Installation Guide","Installing ZisK"]},"10":{"href":"/developers/installation#build-zisk","html":"\n<ol>\n<li>\n<p>Clone the ZisK repository:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/0xPolygonHermez/zisk.git</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> zisk</span></span></code></pre>\n</li>\n<li>\n<p>Build ZisK tools:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span></span></code></pre>\n<p><strong>Note</strong>: If you encounter the following error during compilation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">---</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> stderr</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">/usr/lib/x86_64-linux-gnu/openmpi/include/mpi.h:237:10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">fatal error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;stddef.h&#x27;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> file not found</span></span></code></pre>\n<p>Follow these steps to resolve it:</p>\n<ol>\n<li>Locate the <code>stddef.h</code> file:\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">find</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -name</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;stddef.h&quot;</span></span></code></pre>\n</li>\n<li>Set the environment variables to include the directory where <code>stddef.h</code> is located (e.g.):\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> C_INCLUDE_PATH</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">/usr/lib/gcc/x86_64-linux-gnu/13/include</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> CPLUS_INCLUDE_PATH</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">$C_INCLUDE_PATH</span></span></code></pre>\n</li>\n<li>Try building again</li>\n</ol>\n</li>\n<li>\n<p>Copy the tools to <code>~/.zisk/bin</code> directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mkdir</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -p</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/bin</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cp</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/release/cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/release/ziskemu</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/release/riscv2zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/release/libzisk_witness.so</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> precompiles/sha256f/src/sha256f_script.json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/bin</span></span></code></pre>\n</li>\n<li>\n<p>Copy required files to support <code>cargo-zisk rom-setup</code> command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mkdir</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -p</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/zisk/emulator-asm</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cp</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -r</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./emulator-asm/src</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/zisk/emulator-asm</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cp</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./emulator-asm/Makefile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/zisk/emulator-asm</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cp</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -r</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./lib-c</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/zisk</span></span></code></pre>\n</li>\n<li>\n<p>Add <code>~/.zisk/bin</code> to your system PATH:\nFor example, if you are using <code>bash</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">$HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.bashrc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;export PATH=</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;\\$</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">PATH:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">$HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/bin</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.bashrc</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">source</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.bashrc</span></span></code></pre>\n</li>\n<li>\n<p>Install the ZisK Rust toolchain:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sdk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install-toolchain</span></span></code></pre>\n<p><strong>Note</strong>: This command installs the ZisK Rust toolchain from prebuilt binaries. If you prefer to build the toolchain from source, follow these steps:</p>\n<ol>\n<li>\n<p>Ensure all <a href=\"https://github.com/rust-lang/rust/blob/master/INSTALL.md#dependencies\">dependencies</a> required to build the Rust toolchain from source are installed.</p>\n</li>\n<li>\n<p>Build and install the Rust ZisK toolchain:</p>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sdk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build-toolchain</span></span></code></pre>\n</li>\n<li>\n<p>Verify the installation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rustup</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> toolchain</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> list</span></span></code></pre>\n<p>Confirm taht <code>zisk</code> appears in the list of installed toolchains.</p>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nClone the ZisK repository:\ngit clone https://github.com/0xPolygonHermez/zisk.git\ncd zisk\n\n\nBuild ZisK tools:\ncargo build --release\nNote: If you encounter the following error during compilation:\n--- stderr\n/usr/lib/x86_64-linux-gnu/openmpi/include/mpi.h:237:10: fatal error: &#x27;stddef.h&#x27; file not found\nFollow these steps to resolve it:\n\nLocate the stddef.h file:\nfind /usr -name &quot;stddef.h&quot;\n\nSet the environment variables to include the directory where stddef.h is located (e.g.):\nexport C_INCLUDE_PATH=/usr/lib/gcc/x86_64-linux-gnu/13/include\nexport CPLUS_INCLUDE_PATH=$C_INCLUDE_PATH\n\nTry building again\n\n\n\nCopy the tools to ~/.zisk/bin directory:\nmkdir -p $HOME/.zisk/bin\ncp target/release/cargo-zisk target/release/ziskemu target/release/riscv2zisk target/release/libzisk_witness.so precompiles/sha256f/src/sha256f_script.json $HOME/.zisk/bin\n\n\nCopy required files to support cargo-zisk rom-setup command:\nmkdir -p $HOME/.zisk/zisk/emulator-asm\ncp -r ./emulator-asm/src $HOME/.zisk/zisk/emulator-asm\ncp ./emulator-asm/Makefile $HOME/.zisk/zisk/emulator-asm\ncp -r ./lib-c $HOME/.zisk/zisk\n\n\nAdd ~/.zisk/bin to your system PATH:\nFor example, if you are using bash:\necho &gt;&gt;$HOME/.bashrc &amp;&amp; echo &quot;export PATH=\\&quot;\\$PATH:$HOME/.zisk/bin\\&quot;&quot; &gt;&gt; $HOME/.bashrc\nsource $HOME/.bashrc\n\n\nInstall the ZisK Rust toolchain:\ncargo-zisk sdk install-toolchain\nNote: This command installs the ZisK Rust toolchain from prebuilt binaries. If you prefer to build the toolchain from source, follow these steps:\n\n\nEnsure all dependencies required to build the Rust toolchain from source are installed.\n\n\nBuild and install the Rust ZisK toolchain:\n\n\ncargo-zisk sdk build-toolchain\n\n\nVerify the installation:\nrustup toolchain list\nConfirm taht zisk appears in the list of installed toolchains.\n\n\n","title":"Build ZisK","titles":["Installation Guide","Installing ZisK","Option 2: Building from Source"]},"11":{"href":"/developers/installation#build-setup","html":"\n<p>The setup building process is highly intensive in terms of CPU and memory usage. You will need a machine with at least the following hardware requirements:</p>\n<ul>\n<li>32 CPUs</li>\n<li>512 GB of RAM</li>\n<li>100 GB of free disk space</li>\n</ul>\n<p>Please note that the process can be long, taking approximately 2–3 hours depending on the machine used.</p>\n<p><a href=\"https://nodejs.org/en/download\">NodeJS</a> version 20.x or higher is required to build the setup files.</p>\n<ol>\n<li>\n<p>Clone the following repositories in the parent folder of the <code>zisk</code> folder created in the previous section:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/0xPolygonHermez/pil2-compiler.git</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/0xPolygonHermez/pil2-proofman.git</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/0xPolygonHermez/pil2-proofman-js</span></span></code></pre>\n</li>\n<li>\n<p>Install packages:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pil2-compiler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> i</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pil2-proofman-js</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> &amp;&amp; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> i</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n</li>\n<li>\n<p>All subsequent commands must be executed from the <code>zisk</code> folder created in the previous section:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~/zisk</span></span></code></pre>\n</li>\n<li>\n<p>Adjust memory mapped areas and JavaScript heap size:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">echo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;vm.max_map_count=655300&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tee</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -a</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /etc/sysctl.conf</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sysctl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> vm.max_map_count=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">655300</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> NODE_OPTIONS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;--max-old-space-size=230000&quot;</span></span></code></pre>\n</li>\n<li>\n<p>Compile ZisK PIL: (Note that this command may take 20-30 minutes to complete)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">node</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --max-old-space-size=131072</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ../pil2-compiler/src/pil.js</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pil/zisk.pil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -I</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pil,../pil2-proofman/pil2-components/lib/std/pil,state-machines,precompiles</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pil/zisk.pilout</span></span></code></pre>\n<p>This command will create the <code>pil/zisk.pilout</code> file</p>\n</li>\n<li>\n<p>Generate fixed data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --bin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> keccakf_fixed_gen</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --bin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sha256f_fixed_gen</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mkdir</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -p</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> precompiles/keccakf/src/keccakf_fixed.bin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> </span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mv</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> precompiles/sha256f/src/sha256f_fixed.bin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span></span></code></pre>\n<p>These commands generate the <code>keccakf_fixed.bin</code> and <code>sha256f_fixed.bin</code> files in the <code>build</code> directory.</p>\n</li>\n<li>\n<p>Generate setup data: (Note that this command may take 2–3 hours to complete):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">node</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --max-old-space-size=131072</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ../pil2-proofman-js/src/main_setup.js</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -a</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./pil/zisk.pilout</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -b</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./build/keccakf_fixed.bin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./build/sha256f_fixed.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -r</span></span></code></pre>\n<p>This command generates the <code>provingKey</code> directory.</p>\n</li>\n<li>\n<p>Copy (or move) the <code>provingKey</code> directory to <code>$HOME/.zisk</code> directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cp</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -R</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/provingKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk</span></span></code></pre>\n</li>\n<li>\n<p>Generate constant tree files:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> check-setup</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -a</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\nThe setup building process is highly intensive in terms of CPU and memory usage. You will need a machine with at least the following hardware requirements:\n\n32 CPUs\n512 GB of RAM\n100 GB of free disk space\n\nPlease note that the process can be long, taking approximately 2–3 hours depending on the machine used.\nNodeJS version 20.x or higher is required to build the setup files.\n\n\nClone the following repositories in the parent folder of the zisk folder created in the previous section:\ngit clone https://github.com/0xPolygonHermez/pil2-compiler.git\ngit clone https://github.com/0xPolygonHermez/pil2-proofman.git\ngit clone https://github.com/0xPolygonHermez/pil2-proofman-js\n\n\nInstall packages:\n(cd pil2-compiler &amp;&amp; npm i)\n(cd pil2-proofman-js &amp;&amp; npm i)\n\n\nAll subsequent commands must be executed from the zisk folder created in the previous section:\ncd ~/zisk\n\n\nAdjust memory mapped areas and JavaScript heap size:\necho &quot;vm.max_map_count=655300&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -w vm.max_map_count=655300\nexport NODE_OPTIONS=&quot;--max-old-space-size=230000&quot;\n\n\nCompile ZisK PIL: (Note that this command may take 20-30 minutes to complete)\nnode --max-old-space-size=131072 ../pil2-compiler/src/pil.js pil/zisk.pil -I pil,../pil2-proofman/pil2-components/lib/std/pil,state-machines,precompiles -o pil/zisk.pilout\nThis command will create the pil/zisk.pilout file\n\n\nGenerate fixed data:\ncargo run --release --bin keccakf_fixed_gen\ncargo run --release --bin sha256f_fixed_gen\nmkdir -p build\nmv precompiles/keccakf/src/keccakf_fixed.bin build \nmv precompiles/sha256f/src/sha256f_fixed.bin build\nThese commands generate the keccakf_fixed.bin and sha256f_fixed.bin files in the build directory.\n\n\nGenerate setup data: (Note that this command may take 2–3 hours to complete):\nnode --max-old-space-size=131072 ../pil2-proofman-js/src/main_setup.js -a ./pil/zisk.pilout -b build -i ./build/keccakf_fixed.bin ./build/sha256f_fixed.bin -r\nThis command generates the provingKey directory.\n\n\nCopy (or move) the provingKey directory to $HOME/.zisk directory:\ncp -R build/provingKey $HOME/.zisk\n\n\nGenerate constant tree files:\ncargo-zisk check-setup -a\n\n\n","title":"Build Setup","titles":["Installation Guide","Installing ZisK","Option 2: Building from Source"]},"12":{"href":"/developers/installation#uninstall-zisk","html":"\n<ol>\n<li>\n<p>Uninstall ZisK toolchain:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rustup</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> uninstall</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> zisk</span></span></code></pre>\n</li>\n<li>\n<p>Delete ZisK folder</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rm</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -rf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk</span></span></code></pre>\n</li>\n</ol>","isPage":false,"text":"\n\n\nUninstall ZisK toolchain:\nrustup uninstall zisk\n\n\nDelete ZisK folder\nrm -rf $HOME/.zisk\n\n","title":"Uninstall Zisk","titles":["Installation Guide"]},"13":{"href":"/developers/precompile#precompiles","html":"</header>\n<p>Precompiles are built-in system functions within ZisK’s operating system that accelerate computationally expensive and frequently used operations such as the Keccak-f permutation and Secp256k1 addition and doubling.</p>\n<p>These precompiles improve proving efficiency by offloading intensive computations from ZisK programs to dedicated, pre-integrated sub-processors. ZisK manages precompiles as system calls using the RISC-V <code>ecall</code> instruction.</p>\n","isPage":true,"text":"\nPrecompiles are built-in system functions within ZisK’s operating system that accelerate computationally expensive and frequently used operations such as the Keccak-f permutation and Secp256k1 addition and doubling.\nThese precompiles improve proving efficiency by offloading intensive computations from ZisK programs to dedicated, pre-integrated sub-processors. ZisK manages precompiles as system calls using the RISC-V ecall instruction.\n","title":"Precompiles","titles":[]},"14":{"href":"/developers/precompile#how-precompiles-work","html":"\n<p>Precompiles are primarily used to patch third-party crates, replacing costly operations with system calls. This ensures that commonly used cryptographic primitives like Keccak hashing and elliptic curve operations can be efficiently executed within ZisK programs.</p>\n<p>Typically, precompiles are used to patch third-party crates that implement these operations and are then used as dependencies in the Zisk programs we write.</p>\n<p>You can see <a href=\"https://github.com/0xPolygonHermez/zisk-patch-tiny-keccak/tree/zisk\">here</a> an example of the patched <code>tiny-keccak</code> crate.</p>\n","isPage":false,"text":"\nPrecompiles are primarily used to patch third-party crates, replacing costly operations with system calls. This ensures that commonly used cryptographic primitives like Keccak hashing and elliptic curve operations can be efficiently executed within ZisK programs.\nTypically, precompiles are used to patch third-party crates that implement these operations and are then used as dependencies in the Zisk programs we write.\nYou can see here an example of the patched tiny-keccak crate.\n","title":"How Precompiles Work","titles":["Precompiles"]},"15":{"href":"/developers/precompile#available-precompiles-in-zisk","html":"\n<p>Below is a summary of the precompiles currently available in ZisK:</p>\n<ul>\n<li><a href=\"https://github.com/0xPolygonHermez/zisk/tree/main/ziskos/entrypoint/src/syscalls/arith256_mod.rs\">syscall_arith256_mod</a>: Modular multiplication followed by addition over 256-bit non-negative integers.</li>\n<li><a href=\"https://github.com/0xPolygonHermez/zisk/tree/main/ziskos/entrypoint/src/syscalls/arith256.rs\">syscall_arith256</a>: Multiplication followed by addition over 256-bit non-negative integers.</li>\n<li><a href=\"https://github.com/0xPolygonHermez/zisk/tree/main/ziskos/entrypoint/src/syscalls/keccakf.rs\">syscall_keccak_f</a>: Keccak-f[1600] permutation function from the <a href=\"https://keccak.team/files/Keccak-reference-3.0.pdf\">Keccak</a> cryptographic sponge construction.</li>\n<li><a href=\"https://github.com/0xPolygonHermez/zisk/tree/main/ziskos/entrypoint/src/syscalls/sha256f.rs\">syscall_sha256_f</a>: Extend and compress function of the <a href=\"https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\">SHA-256</a> cryptographic hash algorithm.</li>\n<li><a href=\"https://github.com/0xPolygonHermez/zisk/tree/main/ziskos/entrypoint/src/syscalls/secp256k1_add.rs\">secp256k1_add</a>: Elliptic curve point addition over the <a href=\"https://en.bitcoin.it/wiki/Secp256k1\">Secp256k1</a> curve.</li>\n<li><a href=\"https://github.com/0xPolygonHermez/zisk/tree/main/ziskos/entrypoint/src/syscalls/secp256k1_dbl.rs\">secp256k1_dbl</a>: Elliptic curve point doubling over the <a href=\"https://en.bitcoin.it/wiki/Secp256k1\">Secp256k1</a> curve.</li>\n</ul>","isPage":false,"text":"\nBelow is a summary of the precompiles currently available in ZisK:\n\nsyscall_arith256_mod: Modular multiplication followed by addition over 256-bit non-negative integers.\nsyscall_arith256: Multiplication followed by addition over 256-bit non-negative integers.\nsyscall_keccak_f: Keccak-f[1600] permutation function from the Keccak cryptographic sponge construction.\nsyscall_sha256_f: Extend and compress function of the SHA-256 cryptographic hash algorithm.\nsecp256k1_add: Elliptic curve point addition over the Secp256k1 curve.\nsecp256k1_dbl: Elliptic curve point doubling over the Secp256k1 curve.\n","title":"Available Precompiles in ZisK","titles":["Precompiles","How Precompiles Work"]},"16":{"href":"/developers/quickstart#quickstart","html":"</header>\n<p>In this guide, you will learn how to install ZisK, create a simple program and run it using ZisK.</p>\n","isPage":true,"text":"\nIn this guide, you will learn how to install ZisK, create a simple program and run it using ZisK.\n","title":"Quickstart","titles":[]},"17":{"href":"/developers/quickstart#installation","html":"\n<p>ZisK currently supports <strong>Linux x86_64</strong> and <strong>macOS</strong> platforms (see note below).</p>\n<blockquote>\n<p><strong>Note:</strong> Proof generation and verification on <strong>macOS</strong> are not yet supported. We’re actively working to add this functionality.</p>\n</blockquote>\n<p><strong>Ubuntu 22.04 or higher</strong> is required.</p>\n<p><strong>macOS 14 or higher</strong> is required.</p>\n<ol>\n<li>\n<p>Make sure you have <a href=\"https://www.rust-lang.org/tools/install\">Rust</a> installed.</p>\n</li>\n<li>\n<p>Install all required dependencies with:</p>\n<ul>\n<li><strong>Ubuntu</strong>:\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> apt-get</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> xz-utils</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> jq</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build-essential</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> qemu-system</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libomp-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libgmp-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> nlohmann-json3-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> protobuf-compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> uuid-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libgrpc++-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libsecp256k1-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libsodium-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libpqxx-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> nasm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libopenmpi-dev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> openmpi-bin</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> openmpi-common</span></span></code></pre>\n</li>\n<li><strong>macOS</strong>:\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">brew</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> reinstall</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> jq</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libomp</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> protobuf</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> openssl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> nasm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pkgconf</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> open-mpi</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libffi</span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>To install ZisK using ziskup, run the following command in your terminal:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://raw.githubusercontent.com/0xPolygonHermez/zisk/main/ziskup/install.sh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> bash</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\nZisK currently supports Linux x86_64 and macOS platforms (see note below).\n\nNote: Proof generation and verification on macOS are not yet supported. We’re actively working to add this functionality.\n\nUbuntu 22.04 or higher is required.\nmacOS 14 or higher is required.\n\n\nMake sure you have Rust installed.\n\n\nInstall all required dependencies with:\n\nUbuntu:\nsudo apt-get install -y xz-utils jq curl build-essential qemu-system libomp-dev libgmp-dev nlohmann-json3-dev protobuf-compiler uuid-dev libgrpc++-dev libsecp256k1-dev libsodium-dev libpqxx-dev nasm libopenmpi-dev openmpi-bin openmpi-common\n\nmacOS:\nbrew reinstall jq curl libomp protobuf openssl nasm pkgconf open-mpi libffi\n\n\n\n\nTo install ZisK using ziskup, run the following command in your terminal:\ncurl https://raw.githubusercontent.com/0xPolygonHermez/zisk/main/ziskup/install.sh | bash\n\n\n","title":"Installation","titles":["Quickstart"]},"18":{"href":"/developers/quickstart#create-a-project","html":"\n<p>The first step is to generate a new example project using the <code>cargo-zisk sdk new &lt;name&gt;</code> command. This command creates a new directory named <code>&lt;name&gt;</code> in your current directory. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sdk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> new</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sha_hasher</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sha_hasher</span></span></code></pre>\n<p>This will create a project with the following structure:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── build.rs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── Cargo.toml</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── .gitignore</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">└── src</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    └── main.rs</span></span></code></pre>\n<p>The example program takes a number <code>n</code> as input and computes the SHA-256 hash <code>n</code> times.</p>\n<p>The <code>build.rs</code> file generates an <code>input.bin</code> file containing the value of <code>n</code> (e.g., 20). This file is used in <code>main.rs</code> as input to calculate the hash.</p>\n<p>You can run the program on your native architecture with the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span></span></code></pre>\n<p>The output will be:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">public 0: 0x98211882</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">public 1: 0xbd13089b</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">public 2: 0x6ccf1fca</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">public 3: 0x81f7f0e4</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">public 4: 0xabf6352a</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">public 5: 0x0c39c9b1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">public 6: 0x1f142cac</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">public 7: 0x233f1280</span></span></code></pre>\n","isPage":false,"text":"\nThe first step is to generate a new example project using the cargo-zisk sdk new &lt;name&gt; command. This command creates a new directory named &lt;name&gt; in your current directory. For example:\ncargo-zisk sdk new sha_hasher\ncd sha_hasher\nThis will create a project with the following structure:\n.\n├── build.rs\n├── Cargo.toml\n├── .gitignore\n└── src\n    └── main.rs\nThe example program takes a number n as input and computes the SHA-256 hash n times.\nThe build.rs file generates an input.bin file containing the value of n (e.g., 20). This file is used in main.rs as input to calculate the hash.\nYou can run the program on your native architecture with the following command:\ncargo run\nThe output will be:\npublic 0: 0x98211882\npublic 1: 0xbd13089b\npublic 2: 0x6ccf1fca\npublic 3: 0x81f7f0e4\npublic 4: 0xabf6352a\npublic 5: 0x0c39c9b1\npublic 6: 0x1f142cac\npublic 7: 0x233f1280\n","title":"Create a Project","titles":["Quickstart"]},"19":{"href":"/developers/quickstart#build","html":"\n<p>The next step is to build the program using the <code>cargo-zisk</code> command to generate an ELF file (RISC-V), which will be used later to generate the proof. Execute:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span></span></code></pre>\n<p>This command builds the program using the <code>zkvm</code> target. The resulting <code>sha_hasher</code> ELF file (without extension) is generated in the <code>./target/riscv64ima-zisk-zkvm-elf/release</code> directory.</p>\n","isPage":false,"text":"\nThe next step is to build the program using the cargo-zisk command to generate an ELF file (RISC-V), which will be used later to generate the proof. Execute:\ncargo-zisk build --release\nThis command builds the program using the zkvm target. The resulting sha_hasher ELF file (without extension) is generated in the ./target/riscv64ima-zisk-zkvm-elf/release directory.\n","title":"Build","titles":["Quickstart"]},"20":{"href":"/developers/quickstart#execute","html":"\n<p>Before generating a proof, you can test the program using the ZisK emulator to ensure its correctness. Specify the ELF file (using the <code>-e</code> or <code>--elf flag</code>) and the input file <code>input.bin</code> (using the <code>-i</code> or <code>--inputs</code> flag):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskemu</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span></span></code></pre>\n<p>The output will be:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">98211882</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bd13089b</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">6ccf1fca</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">81f7f0e4</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">abf6352a</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">0c39c9b1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">1f142cac</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">233f1280</span></span></code></pre>\n<p>Alternatively, you can build and run the program with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span></span></code></pre>\n","isPage":false,"text":"\nBefore generating a proof, you can test the program using the ZisK emulator to ensure its correctness. Specify the ELF file (using the -e or --elf flag) and the input file input.bin (using the -i or --inputs flag):\nziskemu -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher -i build/input.bin\nThe output will be:\n98211882\nbd13089b\n6ccf1fca\n81f7f0e4\nabf6352a\n0c39c9b1\n1f142cac\n233f1280\nAlternatively, you can build and run the program with:\ncargo-zisk run --release -i build/input.bin\n","title":"Execute","titles":["Quickstart"]},"21":{"href":"/developers/quickstart#prove","html":"\n<p>Before generating a proof, you need to generate the program setup files. Execute:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rom-setup</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span></span></code></pre>\n<p>Once the program setup is complete, you can generate and verify a proof using the <code>cargo-zisk prove</code> command by providing the ELF file (with the <code>-e</code> or <code>--elf</code> flag) and the input file (with the <code>-i</code> or <code>--input</code> flag).</p>\n<p>To generate and verify a proof for the previously built ELF and input files, execute:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> prove</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -a</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span></span></code></pre>\n<p>This command generates the proof in the <code>./proof</code> directory. If everything goes well, you will see a message similar to:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[INFO ] ProofMan:     ✓ Vadcop Final proof was verified</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[INFO ]      stop &lt;&lt;&lt; GENERATING_VADCOP_PROOF 91706ms</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[INFO ] ProofMan: Proofs generated successfully</span></span></code></pre>\n<p><strong>Note</strong>: You can use concurrent proof generation and GPU support to reduce proving time. For more details, refer to the <a href=\"./writing-programs.md\">Writing Programs</a> guide.</p>\n","isPage":false,"text":"\nBefore generating a proof, you need to generate the program setup files. Execute:\ncargo-zisk rom-setup -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher\nOnce the program setup is complete, you can generate and verify a proof using the cargo-zisk prove command by providing the ELF file (with the -e or --elf flag) and the input file (with the -i or --input flag).\nTo generate and verify a proof for the previously built ELF and input files, execute:\ncargo-zisk prove -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher -i build/input.bin -o proof -a -y\nThis command generates the proof in the ./proof directory. If everything goes well, you will see a message similar to:\n...\n[INFO ] ProofMan:     ✓ Vadcop Final proof was verified\n[INFO ]      stop &lt;&lt;&lt; GENERATING_VADCOP_PROOF 91706ms\n[INFO ] ProofMan: Proofs generated successfully\nNote: You can use concurrent proof generation and GPU support to reduce proving time. For more details, refer to the Writing Programs guide.\n","title":"Prove","titles":["Quickstart"]},"22":{"href":"/developers/quickstart#verify-proof","html":"\n<p>To verify a generated proof, use the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verify</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -p</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./proof/proofs/vadcop_final_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -u</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./proof/publics.json</span></span></code></pre>","isPage":false,"text":"\nTo verify a generated proof, use the following command:\ncargo-zisk verify -p ./proof/proofs/vadcop_final_proof.json -u ./proof/publics.json","title":"Verify Proof","titles":["Quickstart"]},"23":{"href":"/developers/writing-programs#writing-programs","html":"</header>\n<p>This document explains how to write or modify a Rust program for execution in ZisK.</p>\n","isPage":true,"text":"\nThis document explains how to write or modify a Rust program for execution in ZisK.\n","title":"Writing Programs","titles":[]},"24":{"href":"/developers/writing-programs#setup","html":"\n","isPage":false,"text":"\n","title":"Setup","titles":["Writing Programs"]},"25":{"href":"/developers/writing-programs#code-changes","html":"\n<p>Writing a Rust program for ZisK is similar to writing a standard Rust program, with a few minor modifications. Follow these steps:</p>\n<ol>\n<li>\n<p>Modify <code>main.rs</code> file:</p>\n<p>Add the following code to mark the main function as the entry point for ZisK:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">#![no_main]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entrypoint!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(main);</span></span></code></pre>\n</li>\n<li>\n<p>Modify <code>Cargo.toml</code> file:</p>\n<p>Add the <code>ziskos</code> crate as a dependency:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ziskos = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/0xPolygonHermez/zisk.git&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n</li>\n</ol>\n<p>Let&#x27;s show these changes using the example program from the <a href=\"./quickstart.md\">Quickstart</a> section.</p>\n","isPage":false,"text":"\nWriting a Rust program for ZisK is similar to writing a standard Rust program, with a few minor modifications. Follow these steps:\n\n\nModify main.rs file:\nAdd the following code to mark the main function as the entry point for ZisK:\n#![no_main]\nziskos::entrypoint!(main);\n\n\nModify Cargo.toml file:\nAdd the ziskos crate as a dependency:\n[dependencies]\nziskos = { git = &quot;https://github.com/0xPolygonHermez/zisk.git&quot; }\n\n\nLet&#x27;s show these changes using the example program from the Quickstart section.\n","title":"Code changes","titles":["Writing Programs","Setup"]},"26":{"href":"/developers/writing-programs#example-program","html":"\n<p><code>main.rs</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// This example program takes a number `n` as input and computes the SHA-256 hash `n` times sequentially.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mark the main function as the entry point for ZisK</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">#![no_main]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entrypoint!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(main);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> sha2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Digest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Sha256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">convert</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TryInto</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ziskos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{read_input, set_output};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> byteorder</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ByteOrder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Read the input data as a byte array from ziskos</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Vec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> read_input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Get the &#x27;n&#x27; value converting the input byte array into a u64 value</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from_le_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">try_into</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">unwrap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Compute SHA-256 hashing &#x27;n&#x27; times</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">in</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hasher </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Sha256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        hasher</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">update</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hash);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> digest </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">hasher</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">finalize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        hash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Into</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; 32]&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">into</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">digest);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Split &#x27;hash&#x27; value into chunks of 32 bits and write them to ziskos output</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">in</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> byteorder</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BigEndian</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">read_u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hash[i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        set_output</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i, val);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p><code>Cargo.toml</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">package</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">name = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sha_hasher&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0.1.0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">edition = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2021&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">default-run = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sha_hasher&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">byteorder = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.5.0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sha2 = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0.10.8&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ziskos = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/0xPolygonHermez/zisk.git&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n","isPage":false,"text":"\nmain.rs:\n// This example program takes a number `n` as input and computes the SHA-256 hash `n` times sequentially.\n \n// Mark the main function as the entry point for ZisK\n#![no_main]\nziskos::entrypoint!(main);\n \nuse sha2::{Digest, Sha256};\nuse std::convert::TryInto;\nuse ziskos::{read_input, set_output};\nuse byteorder::ByteOrder;\n \nfn main() {\n    // Read the input data as a byte array from ziskos\n    let input: Vec&lt;u8&gt; = read_input();\n \n    // Get the &#x27;n&#x27; value converting the input byte array into a u64 value\n    let n: u64 = u64::from_le_bytes(input.try_into().unwrap());\n \n    let mut hash = [0u8; 32];\n \n    // Compute SHA-256 hashing &#x27;n&#x27; times\n    for _ in 0..n {\n        let mut hasher = Sha256::new();\n        hasher.update(hash);\n        let digest = &amp;hasher.finalize();\n        hash = Into::&lt;[u8; 32]&gt;::into(*digest);\n    }\n \n    // Split &#x27;hash&#x27; value into chunks of 32 bits and write them to ziskos output\n    for i in 0..8 {\n        let val = byteorder::BigEndian::read_u32(&amp;mut hash[i * 4..i * 4 + 4]);\n        set_output(i, val);\n    }\n}\nCargo.toml:\n[package]\nname = &quot;sha_hasher&quot;\nversion = &quot;0.1.0&quot;\nedition = &quot;2021&quot;\ndefault-run = &quot;sha_hasher&quot;\n \n[dependencies]\nbyteorder = &quot;1.5.0&quot;\nsha2 = &quot;0.10.8&quot;\nziskos = { git = &quot;https://github.com/0xPolygonHermez/zisk.git&quot; }\n","title":"Example program","titles":["Writing Programs","Setup"]},"27":{"href":"/developers/writing-programs#inputoutput-data","html":"\n<p>To provide input data for ZisK, you need to write that data in a binary file (e.g., <code>input.bin</code>).</p>\n<p>If your program requires complex input data, consider using a serialization mechanism (like <a href=\"https://crates.io/crates/bincode\"><code>bincode</code></a> crate) to store it in <code>input.bin</code> file.</p>\n<p>In your program, use the <code>ziskos::read_input()</code> function to retrieve the input data from the <code>input.bin</code> file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read the input data as a byte array from ziskos</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Vec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> read_input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>To write public output data, use the <code>ziskos::set_output()</code> function. Since the function accepts <code>u32</code> values, split the output data into 32-bit chunks if necessary and increase the <code>id</code> parameter of the function in each call:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Split &#x27;hash&#x27; value into chunks of 32 bits and write them to ziskos output</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">in</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> byteorder</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BigEndian</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">read_u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hash[i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    set_output</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i, val);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTo provide input data for ZisK, you need to write that data in a binary file (e.g., input.bin).\nIf your program requires complex input data, consider using a serialization mechanism (like bincode crate) to store it in input.bin file.\nIn your program, use the ziskos::read_input() function to retrieve the input data from the input.bin file:\n// Read the input data as a byte array from ziskos\nlet input: Vec&lt;u8&gt; = read_input();\nTo write public output data, use the ziskos::set_output() function. Since the function accepts u32 values, split the output data into 32-bit chunks if necessary and increase the id parameter of the function in each call:\n// Split &#x27;hash&#x27; value into chunks of 32 bits and write them to ziskos output\nfor i in 0..8 {\n    let val = byteorder::BigEndian::read_u32(&amp;mut hash[i * 4..i * 4 + 4]);\n    set_output(i, val);\n}\n","title":"Input/Output Data","titles":["Writing Programs","Setup"]},"28":{"href":"/developers/writing-programs#build","html":"\n<p>Before compiling your program for ZisK, you can test it on the native architecture just like any regular Rust program using the <code>cargo</code> command.</p>\n<p>Once your program is ready to run on ZisK, compile it into an ELF file (RISC-V architecture), using the <code>cargo-zisk</code> CLI tool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span></span></code></pre>\n<p>This command compiles the program using the <code>zisk</code> target. The resulting <code>sha_hasher</code> ELF file (without extension) is generated in the <code>./target/riscv64ima-zisk-zkvm-elf/debug</code> directory.</p>\n<p>For production, compile the ELF file with the <code>--release</code> flag, similar to how you compile Rust projects:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span></span></code></pre>\n<p>In this case, the <code>sha_hasher</code> ELF file will be generated in the <code>./target/riscv64ima-zisk-zkvm-elf/release</code> directory.</p>\n","isPage":false,"text":"\nBefore compiling your program for ZisK, you can test it on the native architecture just like any regular Rust program using the cargo command.\nOnce your program is ready to run on ZisK, compile it into an ELF file (RISC-V architecture), using the cargo-zisk CLI tool:\ncargo-zisk build\nThis command compiles the program using the zisk target. The resulting sha_hasher ELF file (without extension) is generated in the ./target/riscv64ima-zisk-zkvm-elf/debug directory.\nFor production, compile the ELF file with the --release flag, similar to how you compile Rust projects:\ncargo-zisk build --release\nIn this case, the sha_hasher ELF file will be generated in the ./target/riscv64ima-zisk-zkvm-elf/release directory.\n","title":"Build","titles":["Writing Programs"]},"29":{"href":"/developers/writing-programs#execute","html":"\n<p>You can test your compiled program using the ZisK emulator (<code>ziskemu</code>) before generating a proof. Use the <code>-e</code> (<code>--elf</code>) flag to specify the location of the ELF file and the <code>-i</code> (<code>--inputs</code>) flag to specify the location of the input file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskemu</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span></span></code></pre>\n<p>Alternatively, you can build and execute the program in the ZisK emulator with a single command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span></span></code></pre>\n<p>If the program requires a large number of ZisK steps, you might encounter the following error:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Error during emulation: EmulationNoCompleted</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Error: Error executing Run command</span></span></code></pre>\n<p>To resolve this, you can increase the number of execution steps using the <code>-n</code> (<code>--max-steps</code>) flag. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskemu</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -n</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10000000000</span></span></code></pre>\n","isPage":false,"text":"\nYou can test your compiled program using the ZisK emulator (ziskemu) before generating a proof. Use the -e (--elf) flag to specify the location of the ELF file and the -i (--inputs) flag to specify the location of the input file:\ncargo-zisk build --release\nziskemu -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher -i build/input.bin\nAlternatively, you can build and execute the program in the ZisK emulator with a single command:\ncargo-zisk run --release -i build/input.bin\nIf the program requires a large number of ZisK steps, you might encounter the following error:\nError during emulation: EmulationNoCompleted\nError: Error executing Run command\nTo resolve this, you can increase the number of execution steps using the -n (--max-steps) flag. For example:\nziskemu -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher -i build/input.bin -n 10000000000\n","title":"Execute","titles":["Writing Programs"]},"30":{"href":"/developers/writing-programs#metrics-and-statistics","html":"\n","isPage":false,"text":"\n","title":"Metrics and Statistics","titles":["Writing Programs"]},"31":{"href":"/developers/writing-programs#performance-metrics","html":"\n<p>You can get performance metrics related to the program execution in ZisK using the <code>-m</code> (<code>--log-metrics</code>) flag in the <code>cargo-zisk run</code> command or in <code>ziskemu</code> tool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -m</span></span></code></pre>\n<p>Or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskemu</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -m</span></span></code></pre>\n<p>The output will include details such as execution time, throughput, and clock cycles per step:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">process_rom() steps=85309 duration=0.0009 tp=89.8565 Msteps/s freq=3051.0000 33.9542 clocks/step</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">98211882</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bd13089b</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">6ccf1fca</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span></code></pre>\n","isPage":false,"text":"\nYou can get performance metrics related to the program execution in ZisK using the -m (--log-metrics) flag in the cargo-zisk run command or in ziskemu tool:\ncargo-zisk run --release -i build/input.bin -m\nOr\nziskemu -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher -i build/input.bin -m\nThe output will include details such as execution time, throughput, and clock cycles per step:\nprocess_rom() steps=85309 duration=0.0009 tp=89.8565 Msteps/s freq=3051.0000 33.9542 clocks/step\n98211882\nbd13089b\n6ccf1fca\n...\n","title":"Performance Metrics","titles":["Writing Programs","Metrics and Statistics"]},"32":{"href":"/developers/writing-programs#execution-statistics","html":"\n<p>You can get statistics related to the program execution in Zisk using the <code>-x</code> (<code>--stats</code>) flag in the <code>cargo-zisk run</code> command or in <code>ziskemu</code> tool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -x</span></span></code></pre>\n<p>Or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskemu</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -x</span></span></code></pre>\n<p>The output will include details such as cost definitions, total cost, register reads/writes, opcode statistics, etc:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Cost definitions:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    AREA_PER_SEC: 1000000 steps</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    COST_MEMA_R1: 0.00002 sec</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    COST_MEMA_R2: 0.00004 sec</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    COST_MEMA_W1: 0.00004 sec</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    COST_MEMA_W2: 0.00008 sec</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    COST_USUAL: 0.000008 sec</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    COST_STEP: 0.00005 sec</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Total Cost: 12.81 sec</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Main Cost: 4.27 sec 85308 steps</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Mem Cost: 2.22 sec 222052 steps</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Mem Align: 0.05 sec 2701 steps</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Opcodes: 6.24 sec 1270 steps (81182 ops)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Usual: 0.03 sec 4127 steps</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Memory: 135563 a reads + 1625 na1 reads + 10 na2 reads + 84328 a writes + 524 na1 writes + 2 na2 writes = 137198 reads + 84854 writes = 222052 r/w</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Opcodes:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flag: 0.00 sec (0 steps/op) (89 ops)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    copyb: 0.00 sec (0 steps/op) (10568 ops)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    add: 1.12 sec (77 steps/op) (14569 ops)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ltu: 0.01 sec (77 steps/op) (101 ops)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    xor: 1.06 sec (77 steps/op) (13774 ops)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    signextend_b: 0.03 sec (109 steps/op) (320 ops)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    signextend_w: 0.03 sec (109 steps/op) (320 ops)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">98211882</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bd13089b</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">6ccf1fca</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span></code></pre>\n","isPage":false,"text":"\nYou can get statistics related to the program execution in Zisk using the -x (--stats) flag in the cargo-zisk run command or in ziskemu tool:\ncargo-zisk run --release -i build/input.bin -x\nOr\nziskemu -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher -i build/input.bin -x\nThe output will include details such as cost definitions, total cost, register reads/writes, opcode statistics, etc:\nCost definitions:\n    AREA_PER_SEC: 1000000 steps\n    COST_MEMA_R1: 0.00002 sec\n    COST_MEMA_R2: 0.00004 sec\n    COST_MEMA_W1: 0.00004 sec\n    COST_MEMA_W2: 0.00008 sec\n    COST_USUAL: 0.000008 sec\n    COST_STEP: 0.00005 sec\n \nTotal Cost: 12.81 sec\n    Main Cost: 4.27 sec 85308 steps\n    Mem Cost: 2.22 sec 222052 steps\n    Mem Align: 0.05 sec 2701 steps\n    Opcodes: 6.24 sec 1270 steps (81182 ops)\n    Usual: 0.03 sec 4127 steps\n    Memory: 135563 a reads + 1625 na1 reads + 10 na2 reads + 84328 a writes + 524 na1 writes + 2 na2 writes = 137198 reads + 84854 writes = 222052 r/w\n \nOpcodes:\n    flag: 0.00 sec (0 steps/op) (89 ops)\n    copyb: 0.00 sec (0 steps/op) (10568 ops)\n    add: 1.12 sec (77 steps/op) (14569 ops)\n    ltu: 0.01 sec (77 steps/op) (101 ops)\n    ...\n    xor: 1.06 sec (77 steps/op) (13774 ops)\n    signextend_b: 0.03 sec (109 steps/op) (320 ops)\n    signextend_w: 0.03 sec (109 steps/op) (320 ops)\n \n98211882\nbd13089b\n6ccf1fca\n...\n","title":"Execution Statistics","titles":["Writing Programs","Metrics and Statistics"]},"33":{"href":"/developers/writing-programs#prove","html":"\n","isPage":false,"text":"\n","title":"Prove","titles":["Writing Programs"]},"34":{"href":"/developers/writing-programs#program-setup","html":"\n<p>Before generating a proof (or verifying the constraints), you need to generate the program setup files. This must be done the first time after building the program ELF file, or any time it changes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rom-setup</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -k</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/provingKey</span></span></code></pre>\n<p>In this command:</p>\n<ul>\n<li><code>-e</code> (<code>--elf</code>) specifies the ELF file location.</li>\n<li><code>-k</code> (<code>--proving-key</code>) specifies the directory containing the proving key. This is optional and defaults to <code>$HOME/.zisk/provingKey</code>.</li>\n</ul>\n<p>The program setup files will be generated in the <code>cache</code> directory located at <code>$HOME/.zisk</code>.</p>\n<p>To clean the <code>cache</code> directory content, use the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clean</span></span></code></pre>\n","isPage":false,"text":"\nBefore generating a proof (or verifying the constraints), you need to generate the program setup files. This must be done the first time after building the program ELF file, or any time it changes:\ncargo-zisk rom-setup -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher -k $HOME/.zisk/provingKey\nIn this command:\n\n-e (--elf) specifies the ELF file location.\n-k (--proving-key) specifies the directory containing the proving key. This is optional and defaults to $HOME/.zisk/provingKey.\n\nThe program setup files will be generated in the cache directory located at $HOME/.zisk.\nTo clean the cache directory content, use the following command:\ncargo-zisk clean\n","title":"Program Setup","titles":["Writing Programs","Prove"]},"35":{"href":"/developers/writing-programs#verify-constraints","html":"\n<p>Before generating a proof (which can take some time), you can verify that all constraints are satisfied:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verify-constraints</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -w</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/bin/libzisk_witness.so</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -k</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/provingKey</span></span></code></pre>\n<p>In this command:</p>\n<ul>\n<li><code>-e</code> (<code>--elf</code>) specifies the ELF file location.</li>\n<li><code>-i</code> (<code>--input</code>) specifies the input file location.</li>\n<li><code>-w</code> (<code>--witness</code>) specifies the location of the witness library. This is optional and defaults to <code>$HOME/.zisk/bin/libzisk_witness.so</code>.</li>\n<li><code>-k</code> (<code>--proving-key</code>) specifies the directory containing the proving key. This is optional and defaults to <code>$HOME/.zisk/provingKey</code>.</li>\n</ul>\n<p>If everything is correct, you will see an output similar to:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[INFO ] GlCstVfy: --&gt; Checking global constraints</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[INFO ] CstrVrfy: ··· ✓ All global constraints were successfully verified</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[INFO ] CstrVrfy: ··· ✓ All constraints were verified</span></span></code></pre>\n","isPage":false,"text":"\nBefore generating a proof (which can take some time), you can verify that all constraints are satisfied:\ncargo-zisk verify-constraints -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher -i build/input.bin -w $HOME/.zisk/bin/libzisk_witness.so -k $HOME/.zisk/provingKey\nIn this command:\n\n-e (--elf) specifies the ELF file location.\n-i (--input) specifies the input file location.\n-w (--witness) specifies the location of the witness library. This is optional and defaults to $HOME/.zisk/bin/libzisk_witness.so.\n-k (--proving-key) specifies the directory containing the proving key. This is optional and defaults to $HOME/.zisk/provingKey.\n\nIf everything is correct, you will see an output similar to:\n[INFO ] GlCstVfy: --&gt; Checking global constraints\n[INFO ] CstrVrfy: ··· ✓ All global constraints were successfully verified\n[INFO ] CstrVrfy: ··· ✓ All constraints were verified\n","title":"Verify Constraints","titles":["Writing Programs","Prove"]},"36":{"href":"/developers/writing-programs#generate-proof","html":"\n<p>To generate a proof, run the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> prove</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/sha_hasher</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -w</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/bin/libzisk_witness.so</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -k</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/provingKey</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -a</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span></span></code></pre>\n<p>In this command:</p>\n<ul>\n<li><code>-e</code> (<code>--elf</code>) specifies the ELF file location.</li>\n<li><code>-i</code> (<code>--input</code>) specifies the input file location.</li>\n<li><code>-w</code> (<code>--witness</code>) specifies the location of the witness library. This is optional and defaults to <code>$HOME/.zisk/bin/libzisk_witness.so</code>.</li>\n<li><code>-k</code> (<code>--proving-key</code>) specifies the directory containing the proving key. This is optional and defaults to <code>$HOME/.zisk/provingKey</code>.</li>\n<li><code>-o</code> (<code>--output</code>) determines the output directory (in this example <code>proof</code>).</li>\n<li><code>-a</code> (<code>--aggregation</code>) indicates that a final aggregated proof (containing all generated sub-proofs) should be produced.</li>\n<li><code>-y</code> (<code>--verify-proofs</code>) instructs the tool to verify the proof immediately after it is generated (verification can also be performed later using the <code>cargo-zisk verify</code> command).</li>\n</ul>\n<p>If the process is successful, you should see a message similar to:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[INFO ] ProofMan:     ✓ Vadcop Final proof was verified</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[INFO ]      stop &lt;&lt;&lt; GENERATING_VADCOP_PROOF 91706ms</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[INFO ] ProofMan: Proofs generated successfully</span></span></code></pre>\n","isPage":false,"text":"\nTo generate a proof, run the following command:\ncargo-zisk prove -e target/riscv64ima-zisk-zkvm-elf/release/sha_hasher -i build/input.bin -w $HOME/.zisk/bin/libzisk_witness.so -k $HOME/.zisk/provingKey -o proof -a -y\nIn this command:\n\n-e (--elf) specifies the ELF file location.\n-i (--input) specifies the input file location.\n-w (--witness) specifies the location of the witness library. This is optional and defaults to $HOME/.zisk/bin/libzisk_witness.so.\n-k (--proving-key) specifies the directory containing the proving key. This is optional and defaults to $HOME/.zisk/provingKey.\n-o (--output) determines the output directory (in this example proof).\n-a (--aggregation) indicates that a final aggregated proof (containing all generated sub-proofs) should be produced.\n-y (--verify-proofs) instructs the tool to verify the proof immediately after it is generated (verification can also be performed later using the cargo-zisk verify command).\n\nIf the process is successful, you should see a message similar to:\n...\n[INFO ] ProofMan:     ✓ Vadcop Final proof was verified\n[INFO ]      stop &lt;&lt;&lt; GENERATING_VADCOP_PROOF 91706ms\n[INFO ] ProofMan: Proofs generated successfully\n","title":"Generate Proof","titles":["Writing Programs","Prove"]},"37":{"href":"/developers/writing-programs#concurrent-proof-generation","html":"\n<p>Zisk proofs can be generated using multiple processes concurrently to improve performance and scalability. The standard MPI (Message Passing Interface) approach is used to launch these processes, which can run either on the same server or across multiple servers.</p>\n<p>To execute a Zisk proof using multiple processes, use the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mpirun</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --bind-to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> none</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -np</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">num_processe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> OMP_NUM_THREADS=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">num_threads_per_proces</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/release/cargo-zisk</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> argument</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>In this command:</p>\n<ul>\n<li><code>-np &lt;num_processes&gt;</code> specifies the number of processes to launch.</li>\n<li><code>-x OMP_NUM_THREADS=&lt;num_threads_per_process&gt;</code> sets the number of threads used by each process via the <code>OMP_NUM_THREADS</code> environment variable.</li>\n<li><code>--bind-to none</code> prevents binding processes to specific cores, allowing the operating system to schedule them dynamically for better load balancing.</li>\n</ul>\n<p>Running a Zisk proof with multiple processes enables efficient workload distribution across multiple servers. <strong>On a single server with many cores, splitting execution into smaller subsets of cores generally improves performance by increasing concurrency</strong>. As a general rule, <code>&lt;number_of_processes&gt;</code> * <code>&lt;number_of_threads_per_process&gt;</code> should match the number of available CPU cores or double that if hyperthreading is enabled.</p>\n<p>The total memory requirement increases proportionally with the number of processes. If each process requires approximately 25GB of memory, running P processes will require roughly (25 * P)GB of memory. Ensure that the system has sufficient available memory to accommodate all running processes.</p>\n","isPage":false,"text":"\nZisk proofs can be generated using multiple processes concurrently to improve performance and scalability. The standard MPI (Message Passing Interface) approach is used to launch these processes, which can run either on the same server or across multiple servers.\nTo execute a Zisk proof using multiple processes, use the following command:\nmpirun --bind-to none -np &lt;num_processes&gt; -x OMP_NUM_THREADS=&lt;num_threads_per_process&gt; target/release/cargo-zisk &lt;zisk arguments&gt;\nIn this command:\n\n-np &lt;num_processes&gt; specifies the number of processes to launch.\n-x OMP_NUM_THREADS=&lt;num_threads_per_process&gt; sets the number of threads used by each process via the OMP_NUM_THREADS environment variable.\n--bind-to none prevents binding processes to specific cores, allowing the operating system to schedule them dynamically for better load balancing.\n\nRunning a Zisk proof with multiple processes enables efficient workload distribution across multiple servers. On a single server with many cores, splitting execution into smaller subsets of cores generally improves performance by increasing concurrency. As a general rule, &lt;number_of_processes&gt; * &lt;number_of_threads_per_process&gt; should match the number of available CPU cores or double that if hyperthreading is enabled.\nThe total memory requirement increases proportionally with the number of processes. If each process requires approximately 25GB of memory, running P processes will require roughly (25 * P)GB of memory. Ensure that the system has sufficient available memory to accommodate all running processes.\n","title":"Concurrent Proof Generation","titles":["Writing Programs","Prove"]},"38":{"href":"/developers/writing-programs#gpu-proof-generation","html":"\n<p>Zisk proofs can also be generated using GPUs to significantly improve performance and scalability.\nFollow these steps to enable GPU support:</p>\n<ol>\n<li>\n<p>GPU support is only available for NVIDIA GPUs.</p>\n</li>\n<li>\n<p>Make sure the <a href=\"https://developer.nvidia.com/cuda-downloads\">CUDA Toolkit</a> is installed.</p>\n</li>\n<li>\n<p>Build Zisk with GPU support enabled.\nGPU support must be enabled at compile time. Follow the instructions in the <strong>Build ZisK</strong> section under <strong>Option 2: Building from source</strong> in the <a href=\"./installation.md\">Installation</a> guide, but replace the build command with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --features</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> gpu</span></span></code></pre>\n</li>\n<li>\n<p>Build Zisk on the target GPU server.\nIt is recommended to compile Zisk directly on the server where it will be executed. The binary will be optimized for the local GPU architecture, which can lead to better runtime performance.</p>\n</li>\n</ol>\n<p>You can combine GPU-based execution with concurrent proof generation using multiple processes, as described in the <strong>Concurrent Proof Generation</strong> section. For better performance in this setup, it is recommended to enable <a href=\"https://docs.nvidia.com/deploy/mps/index.html\">NVIDIA’s Multi-Process Service (MPS)</a>. You can activate it by running:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">nvidia-cuda-mps-control</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span></span></code></pre>\n<blockquote>\n<p><strong>Note:</strong> GPU memory is typically more limited than CPU memory. When combining GPU execution with concurrent proof generation, ensure that each process has sufficient memory available on the GPU to avoid out-of-memory errors.</p>\n</blockquote>\n","isPage":false,"text":"\nZisk proofs can also be generated using GPUs to significantly improve performance and scalability.\nFollow these steps to enable GPU support:\n\n\nGPU support is only available for NVIDIA GPUs.\n\n\nMake sure the CUDA Toolkit is installed.\n\n\nBuild Zisk with GPU support enabled.\nGPU support must be enabled at compile time. Follow the instructions in the Build ZisK section under Option 2: Building from source in the Installation guide, but replace the build command with:\ncargo build --release --features gpu\n\n\nBuild Zisk on the target GPU server.\nIt is recommended to compile Zisk directly on the server where it will be executed. The binary will be optimized for the local GPU architecture, which can lead to better runtime performance.\n\n\nYou can combine GPU-based execution with concurrent proof generation using multiple processes, as described in the Concurrent Proof Generation section. For better performance in this setup, it is recommended to enable NVIDIA’s Multi-Process Service (MPS). You can activate it by running:\nnvidia-cuda-mps-control -d\n\nNote: GPU memory is typically more limited than CPU memory. When combining GPU execution with concurrent proof generation, ensure that each process has sufficient memory available on the GPU to avoid out-of-memory errors.\n\n","title":"GPU Proof Generation","titles":["Writing Programs","Prove"]},"39":{"href":"/developers/writing-programs#verify-proof","html":"\n<p>To verify a generated proof, use the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verify</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -p</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./proof/proofs/vadcop_final_proof.json</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -u</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./proof/publics.json</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -s</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/provingKey/zisk/vadcop_final/vadcop_final.starkinfo.json</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/provingKey/zisk/vadcop_final/vadcop_final.verifier.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -k</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/provingKey/zisk/vadcop_final/vadcop_final.verkey.json</span></span></code></pre>\n<p>In this command:</p>\n<ul>\n<li><code>-p</code> (<code>--proof</code>) specifies the final proof file generated with cargo-zisk prove.</li>\n<li><code>-u</code> (<code>--public-inputs</code>) provides the path to the public inputs associated with the proof.</li>\n<li>The remaining flags specify the files required for verification; they are optional, set by default to the files found in the <code>$HOME/.zisk</code> directory.</li>\n</ul>","isPage":false,"text":"\nTo verify a generated proof, use the following command:\ncargo-zisk verify -p ./proof/proofs/vadcop_final_proof.json -u ./proof/publics.json -s $HOME/.zisk/provingKey/zisk/vadcop_final/vadcop_final.starkinfo.json -e $HOME/.zisk/provingKey/zisk/vadcop_final/vadcop_final.verifier.bin -k $HOME/.zisk/provingKey/zisk/vadcop_final/vadcop_final.verkey.json\nIn this command:\n\n-p (--proof) specifies the final proof file generated with cargo-zisk prove.\n-u (--public-inputs) provides the path to the public inputs associated with the proof.\nThe remaining flags specify the files required for verification; they are optional, set by default to the files found in the $HOME/.zisk directory.\n","title":"Verify Proof","titles":["Writing Programs","Prove"]},"40":{"href":"/examples/ethereum-block-exec#ethereum-block-execution-example","html":"</header>\n<p>This example demonstrates how to perform stateless Ethereum block validation using ZisK. The program validates an Ethereum block by executing all transactions within it and verifying the state transitions without requiring the full Ethereum state.</p>\n","isPage":true,"text":"\nThis example demonstrates how to perform stateless Ethereum block validation using ZisK. The program validates an Ethereum block by executing all transactions within it and verifying the state transitions without requiring the full Ethereum state.\n","title":"Ethereum Block Execution Example","titles":[]},"41":{"href":"/examples/ethereum-block-exec#overview","html":"\n<p>Stateless block validation is a crucial component of Ethereum&#x27;s scalability roadmap. Instead of maintaining the full state, validators can verify blocks using witness data that contains only the necessary state information for validation.</p>\n<p>This example showcases:</p>\n<ul>\n<li>Stateless Ethereum block validation</li>\n<li>Integration with the Reth Ethereum client library</li>\n<li>Complex input data handling with serialization</li>\n<li>Real-world blockchain computation in zero-knowledge proofs</li>\n<li>Advanced ZisK program structure for Ethereum applications</li>\n</ul>\n","isPage":false,"text":"\nStateless block validation is a crucial component of Ethereum&#x27;s scalability roadmap. Instead of maintaining the full state, validators can verify blocks using witness data that contains only the necessary state information for validation.\nThis example showcases:\n\nStateless Ethereum block validation\nIntegration with the Reth Ethereum client library\nComplex input data handling with serialization\nReal-world blockchain computation in zero-knowledge proofs\nAdvanced ZisK program structure for Ethereum applications\n\n","title":"Overview","titles":["Ethereum Block Execution Example"]},"42":{"href":"/examples/ethereum-block-exec#program-code","html":"\n","isPage":false,"text":"\n","title":"Program Code","titles":["Ethereum Block Execution Example"]},"43":{"href":"/examples/ethereum-block-exec#mainrs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">#![no_main]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entrypoint!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(main);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">extern</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> crate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alloc;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> alloc</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Arc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> reth_chainspec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ChainSpec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> reth_evm_ethereum</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">EthEvmConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> reth_stateless</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fork_spec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ForkSpec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">validation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stateless_validation, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StatelessInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (input, fork_spec)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StatelessInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ForkSpec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        bincode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deserialize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">read_input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">unwrap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain_spec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Arc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ChainSpec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Arc</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fork_spec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">into</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> evm_config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthEvmConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(chain_spec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clone</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    stateless_validation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">block, input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">witness, chain_spec, evm_config)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">unwrap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    println!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Validation successful!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n#![no_main]\nziskos::entrypoint!(main);\n \nextern crate alloc;\n \nuse alloc::sync::Arc;\nuse reth_chainspec::ChainSpec;\nuse reth_evm_ethereum::EthEvmConfig;\nuse reth_stateless::{fork_spec::ForkSpec, validation::stateless_validation, StatelessInput};\n \nfn main() {\n    let (input, fork_spec): (StatelessInput, ForkSpec) =\n        bincode::deserialize(&amp;ziskos::read_input()).unwrap();\n    let chain_spec: Arc&lt;ChainSpec&gt; = Arc::new(fork_spec.into());\n    let evm_config = EthEvmConfig::new(chain_spec.clone());\n \n    stateless_validation(input.block, input.witness, chain_spec, evm_config).unwrap();\n    \n    println!(&quot;Validation successful!&quot;);\n}\n","title":"main.rs","titles":["Ethereum Block Execution Example","Program Code"]},"44":{"href":"/examples/ethereum-block-exec#cargotoml","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">package</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">name = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;exec_eth_block&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0.1.0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">edition = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2021&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">default-run = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;exec_eth_block&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">byteorder = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.5.0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ziskos = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/0xPolygonHermez/zisk.git&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bincode = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.3&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">reth-stateless = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/paradigmxyz/reth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rev = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;03364a836774c72f4e354de924330fee6a41be68&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">reth-ethereum-primitives = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/paradigmxyz/reth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rev = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;03364a836774c72f4e354de924330fee6a41be68&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, features = [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;serde&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;serde-bincode-compat&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">reth-primitives-traits = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/paradigmxyz/reth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rev = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;03364a836774c72f4e354de924330fee6a41be68&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, features = [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;serde&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;serde-bincode-compat&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">alloy-primitives = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.2.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, default-features = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, features = [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;map-foldhash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;serde&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;tiny-keccak&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">reth-evm-ethereum = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/paradigmxyz/reth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rev = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;03364a836774c72f4e354de924330fee6a41be68&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">reth-chainspec = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/paradigmxyz/reth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rev = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;03364a836774c72f4e354de924330fee6a41be68&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n","isPage":false,"text":"\n[package]\nname = &quot;exec_eth_block&quot;\nversion = &quot;0.1.0&quot;\nedition = &quot;2021&quot;\ndefault-run = &quot;exec_eth_block&quot;\n \n[dependencies]\nbyteorder = &quot;1.5.0&quot;\nziskos = { git = &quot;https://github.com/0xPolygonHermez/zisk.git&quot; }\n \nbincode = &quot;1.3&quot;\nreth-stateless = { git = &quot;https://github.com/paradigmxyz/reth&quot;, rev = &quot;03364a836774c72f4e354de924330fee6a41be68&quot; }\nreth-ethereum-primitives = { git = &quot;https://github.com/paradigmxyz/reth&quot;, rev = &quot;03364a836774c72f4e354de924330fee6a41be68&quot;, features = [\n    &quot;serde&quot;,\n    &quot;serde-bincode-compat&quot;,\n] }\nreth-primitives-traits = { git = &quot;https://github.com/paradigmxyz/reth&quot;, rev = &quot;03364a836774c72f4e354de924330fee6a41be68&quot;, features = [\n    &quot;serde&quot;,\n    &quot;serde-bincode-compat&quot;,\n] }\nalloy-primitives = { version = &quot;1.2.0&quot;, default-features = false, features = [\n    &quot;map-foldhash&quot;,\n    &quot;serde&quot;,\n    &quot;tiny-keccak&quot;,\n] }\nreth-evm-ethereum = { git = &quot;https://github.com/paradigmxyz/reth&quot;, rev = &quot;03364a836774c72f4e354de924330fee6a41be68&quot; }\nreth-chainspec = { git = &quot;https://github.com/paradigmxyz/reth&quot;, rev = &quot;03364a836774c72f4e354de924330fee6a41be68&quot; }\n","title":"Cargo.toml","titles":["Ethereum Block Execution Example","Program Code"]},"45":{"href":"/examples/ethereum-block-exec#key-features","html":"\n","isPage":false,"text":"\n","title":"Key Features","titles":["Ethereum Block Execution Example"]},"46":{"href":"/examples/ethereum-block-exec#stateless-validation","html":"\n<ul>\n<li><strong>No Full State Required</strong>: Validates blocks without maintaining the complete Ethereum state</li>\n<li><strong>Witness-Based</strong>: Uses cryptographic witness data to prove state transitions</li>\n<li><strong>Efficient</strong>: Reduces storage requirements while maintaining security guarantees</li>\n</ul>\n","isPage":false,"text":"\n\nNo Full State Required: Validates blocks without maintaining the complete Ethereum state\nWitness-Based: Uses cryptographic witness data to prove state transitions\nEfficient: Reduces storage requirements while maintaining security guarantees\n\n","title":"Stateless Validation","titles":["Ethereum Block Execution Example","Key Features"]},"47":{"href":"/examples/ethereum-block-exec#reth-integration","html":"\n<ul>\n<li><strong>Production-Ready</strong>: Uses the Reth Ethereum client library for robust validation</li>\n<li><strong>Fork Compatibility</strong>: Supports different Ethereum hard forks through <code>ForkSpec</code></li>\n<li><strong>EVM Execution</strong>: Full Ethereum Virtual Machine execution for transaction processing</li>\n</ul>\n","isPage":false,"text":"\n\nProduction-Ready: Uses the Reth Ethereum client library for robust validation\nFork Compatibility: Supports different Ethereum hard forks through ForkSpec\nEVM Execution: Full Ethereum Virtual Machine execution for transaction processing\n\n","title":"Reth Integration","titles":["Ethereum Block Execution Example","Key Features"]},"48":{"href":"/examples/ethereum-block-exec#input-structure","html":"\n<p>The program expects serialized input containing:</p>\n<ul>\n<li><strong>StatelessInput</strong>: Contains the block data and witness information</li>\n<li><strong>ForkSpec</strong>: Specifies which Ethereum hard fork rules to apply</li>\n</ul>\n","isPage":false,"text":"\nThe program expects serialized input containing:\n\nStatelessInput: Contains the block data and witness information\nForkSpec: Specifies which Ethereum hard fork rules to apply\n\n","title":"Input Structure","titles":["Ethereum Block Execution Example","Key Features"]},"49":{"href":"/examples/ethereum-block-exec#architecture","html":"\n","isPage":false,"text":"\n","title":"Architecture","titles":["Ethereum Block Execution Example"]},"50":{"href":"/examples/ethereum-block-exec#data-flow","html":"\n<ol>\n<li><strong>Input Deserialization</strong>: Deserializes the block and witness data using <code>bincode</code></li>\n<li><strong>Chain Specification</strong>: Converts fork specification to chain configuration</li>\n<li><strong>EVM Configuration</strong>: Sets up the Ethereum Virtual Machine with proper parameters</li>\n<li><strong>Validation</strong>: Executes stateless validation of the block</li>\n</ol>\n","isPage":false,"text":"\n\nInput Deserialization: Deserializes the block and witness data using bincode\nChain Specification: Converts fork specification to chain configuration\nEVM Configuration: Sets up the Ethereum Virtual Machine with proper parameters\nValidation: Executes stateless validation of the block\n\n","title":"Data Flow","titles":["Ethereum Block Execution Example","Architecture"]},"51":{"href":"/examples/ethereum-block-exec#validation-process","html":"\n<ol>\n<li><strong>Block Header Validation</strong>: Verifies block header consistency</li>\n<li><strong>Transaction Execution</strong>: Executes all transactions in the block</li>\n<li><strong>State Root Verification</strong>: Confirms the final state root matches the block header</li>\n<li><strong>Witness Verification</strong>: Validates that the witness data is consistent</li>\n</ol>\n","isPage":false,"text":"\n\nBlock Header Validation: Verifies block header consistency\nTransaction Execution: Executes all transactions in the block\nState Root Verification: Confirms the final state root matches the block header\nWitness Verification: Validates that the witness data is consistent\n\n","title":"Validation Process","titles":["Ethereum Block Execution Example","Architecture"]},"52":{"href":"/examples/ethereum-block-exec#input-data-format","html":"\n","isPage":false,"text":"\n","title":"Input Data Format","titles":["Ethereum Block Execution Example"]},"53":{"href":"/examples/ethereum-block-exec#creating-input-data","html":"\n<p>The input data must be a serialized combination of:</p>\n<ul>\n<li><code>StatelessInput</code>: Block and witness data</li>\n<li><code>ForkSpec</code>: Ethereum fork specification</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bincode;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> reth_stateless</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StatelessInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fork_spec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ForkSpec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example of creating input data (would typically be done outside ZisK)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateless_input </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> StatelessInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> block_data,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    witness</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> witness_data,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fork_spec </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ForkSpec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Shanghai</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// or other fork</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> serialized </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> bincode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">serialize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(stateless_input, fork_spec))</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">unwrap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Write to input.bin</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input.bin&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, serialized)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">unwrap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n","isPage":false,"text":"\nThe input data must be a serialized combination of:\n\nStatelessInput: Block and witness data\nForkSpec: Ethereum fork specification\n\nuse bincode;\nuse reth_stateless::{StatelessInput, fork_spec::ForkSpec};\n \n// Example of creating input data (would typically be done outside ZisK)\nlet stateless_input = StatelessInput {\n    block: block_data,\n    witness: witness_data,\n};\n \nlet fork_spec = ForkSpec::Shanghai; // or other fork\nlet serialized = bincode::serialize(&amp;(stateless_input, fork_spec)).unwrap();\n \n// Write to input.bin\nstd::fs::write(&quot;input.bin&quot;, serialized).unwrap();\n","title":"Creating Input Data","titles":["Ethereum Block Execution Example","Input Data Format"]},"54":{"href":"/examples/ethereum-block-exec#witness-data","html":"\n<p>The witness contains:</p>\n<ul>\n<li><strong>Account Data</strong>: Account balances, nonces, and code</li>\n<li><strong>Storage Proofs</strong>: Merkle proofs for accessed storage slots</li>\n<li><strong>Code</strong>: Smart contract bytecode accessed during execution</li>\n<li><strong>State Proofs</strong>: Merkle proofs for state transitions</li>\n</ul>\n","isPage":false,"text":"\nThe witness contains:\n\nAccount Data: Account balances, nonces, and code\nStorage Proofs: Merkle proofs for accessed storage slots\nCode: Smart contract bytecode accessed during execution\nState Proofs: Merkle proofs for state transitions\n\n","title":"Witness Data","titles":["Ethereum Block Execution Example","Input Data Format"]},"55":{"href":"/examples/ethereum-block-exec#running-the-example","html":"\n","isPage":false,"text":"\n","title":"Running the Example","titles":["Ethereum Block Execution Example"]},"56":{"href":"/examples/ethereum-block-exec#prerequisites","html":"\n<ol>\n<li>\n<p><strong>Input Data</strong>: You need a properly formatted <code>input.bin</code> file containing:</p>\n<ul>\n<li>Ethereum block data</li>\n<li>Corresponding witness data</li>\n<li>Fork specification</li>\n</ul>\n</li>\n<li>\n<p><strong>Block Data Source</strong>: Obtain block data from:</p>\n<ul>\n<li>Ethereum node RPC calls</li>\n<li>Block explorers</li>\n<li>Pre-generated test data</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nInput Data: You need a properly formatted input.bin file containing:\n\nEthereum block data\nCorresponding witness data\nFork specification\n\n\n\nBlock Data Source: Obtain block data from:\n\nEthereum node RPC calls\nBlock explorers\nPre-generated test data\n\n\n\n","title":"Prerequisites","titles":["Ethereum Block Execution Example","Running the Example"]},"57":{"href":"/examples/ethereum-block-exec#build-and-execute","html":"\n<ol>\n<li>\n<strong>Build the program:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span></span></code></pre>\n</li>\n<li>\n<strong>Run with input data:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block_build/input.bin</span></span></code></pre>\n</li>\n<li>\n<strong>For large blocks, increase max steps:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block_build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --max-steps</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100000000</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nBuild the program:\ncargo-zisk build --release\n\n\nRun with input data:\ncargo-zisk run --release -i block_build/input.bin\n\n\nFor large blocks, increase max steps:\ncargo-zisk run --release -i block_build/input.bin --max-steps 100000000\n\n\n","title":"Build and Execute","titles":["Ethereum Block Execution Example","Running the Example"]},"58":{"href":"/examples/ethereum-block-exec#performance-tuning","html":"\n<p>Block validation can be computationally intensive. Consider these optimizations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run with performance metrics</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block_build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -m</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run with execution statistics</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block_build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -x</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Increase memory and steps for large blocks</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskemu</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block_build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        -n</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000000000</span></span></code></pre>\n","isPage":false,"text":"\nBlock validation can be computationally intensive. Consider these optimizations:\n# Run with performance metrics\ncargo-zisk run --release -i block_build/input.bin -m\n \n# Run with execution statistics\ncargo-zisk run --release -i block_build/input.bin -x\n \n# Increase memory and steps for large blocks\nziskemu -e target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block \\\n        -i block_build/input.bin \\\n        -n 1000000000\n","title":"Performance Tuning","titles":["Ethereum Block Execution Example","Running the Example"]},"59":{"href":"/examples/ethereum-block-exec#use-cases","html":"\n","isPage":false,"text":"\n","title":"Use Cases","titles":["Ethereum Block Execution Example"]},"60":{"href":"/examples/ethereum-block-exec#layer-2-scaling","html":"\n<ul>\n<li><strong>Rollup Validation</strong>: Prove correct execution of Layer 2 blocks</li>\n<li><strong>Fraud Proofs</strong>: Generate proofs for disputed transactions</li>\n<li><strong>State Compression</strong>: Reduce on-chain storage requirements</li>\n</ul>\n","isPage":false,"text":"\n\nRollup Validation: Prove correct execution of Layer 2 blocks\nFraud Proofs: Generate proofs for disputed transactions\nState Compression: Reduce on-chain storage requirements\n\n","title":"Layer 2 Scaling","titles":["Ethereum Block Execution Example","Use Cases"]},"61":{"href":"/examples/ethereum-block-exec#cross-chain-bridges","html":"\n<ul>\n<li><strong>Block Verification</strong>: Prove Ethereum block validity on other chains</li>\n<li><strong>State Relay</strong>: Transfer Ethereum state information securely</li>\n<li><strong>Interoperability</strong>: Enable cross-chain applications</li>\n</ul>\n","isPage":false,"text":"\n\nBlock Verification: Prove Ethereum block validity on other chains\nState Relay: Transfer Ethereum state information securely\nInteroperability: Enable cross-chain applications\n\n","title":"Cross-Chain Bridges","titles":["Ethereum Block Execution Example","Use Cases"]},"62":{"href":"/examples/ethereum-block-exec#compliance-and-auditing","html":"\n<ul>\n<li><strong>Transaction Verification</strong>: Prove specific transactions occurred</li>\n<li><strong>Regulatory Compliance</strong>: Demonstrate adherence to rules</li>\n<li><strong>Audit Trails</strong>: Create verifiable execution records</li>\n</ul>\n","isPage":false,"text":"\n\nTransaction Verification: Prove specific transactions occurred\nRegulatory Compliance: Demonstrate adherence to rules\nAudit Trails: Create verifiable execution records\n\n","title":"Compliance and Auditing","titles":["Ethereum Block Execution Example","Use Cases"]},"63":{"href":"/examples/ethereum-block-exec#advanced-configuration","html":"\n","isPage":false,"text":"\n","title":"Advanced Configuration","titles":["Ethereum Block Execution Example"]},"64":{"href":"/examples/ethereum-block-exec#fork-specifications","html":"\n<p>Different Ethereum hard forks have different validation rules:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Examples of different fork specifications</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ForkSpec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">London</span><span style=\"color:#6A737D;--shiki-dark:#768390\">        // EIP-1559 fee market</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ForkSpec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Shanghai</span><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Beacon chain withdrawals</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ForkSpec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Cancun</span><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Blob transactions (EIP-4844)</span></span></code></pre>\n","isPage":false,"text":"\nDifferent Ethereum hard forks have different validation rules:\n// Examples of different fork specifications\nForkSpec::London        // EIP-1559 fee market\nForkSpec::Shanghai      // Beacon chain withdrawals\nForkSpec::Cancun        // Blob transactions (EIP-4844)\n","title":"Fork Specifications","titles":["Ethereum Block Execution Example","Advanced Configuration"]},"65":{"href":"/examples/ethereum-block-exec#chain-specifications","html":"\n<p>Customize for different Ethereum networks:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mainnet configuration</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ChainSpec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mainnet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Testnet configurations</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ChainSpec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">goerli</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ChainSpec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sepolia</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Custom configurations for private networks</span></span></code></pre>\n","isPage":false,"text":"\nCustomize for different Ethereum networks:\n// Mainnet configuration\nChainSpec::mainnet()\n \n// Testnet configurations\nChainSpec::goerli()\nChainSpec::sepolia()\n \n// Custom configurations for private networks\n","title":"Chain Specifications","titles":["Ethereum Block Execution Example","Advanced Configuration"]},"66":{"href":"/examples/ethereum-block-exec#generate-proof","html":"\n<p>Follow the standard ZisK proof generation process:</p>\n<ol>\n<li>\n<strong>Program setup:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rom-setup</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -k</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/provingKey</span></span></code></pre>\n</li>\n<li>\n<strong>Verify constraints:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verify-constraints</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block_build/input.bin</span></span></code></pre>\n</li>\n<li>\n<strong>Generate proof:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> prove</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block_build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -a</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\nFollow the standard ZisK proof generation process:\n\n\nProgram setup:\ncargo-zisk rom-setup -e target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block -k $HOME/.zisk/provingKey\n\n\nVerify constraints:\ncargo-zisk verify-constraints -e target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block -i block_build/input.bin\n\n\nGenerate proof:\ncargo-zisk prove -e target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block -i block_build/input.bin -o proof -a -y\n\n\n","title":"Generate Proof","titles":["Ethereum Block Execution Example"]},"67":{"href":"/examples/ethereum-block-exec#parallel-proof-generation","html":"\n<p>For complex blocks, use parallel processing:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mpirun</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --bind-to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> none</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -np</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -x</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> OMP_NUM_THREADS=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">       target/release/cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> prove</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">       -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">       -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block_build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -a</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span></span></code></pre>\n","isPage":false,"text":"\nFor complex blocks, use parallel processing:\nmpirun --bind-to none -np 4 -x OMP_NUM_THREADS=8 \\\n       target/release/cargo-zisk prove \\\n       -e target/riscv64ima-zisk-zkvm-elf/release/exec_eth_block \\\n       -i block_build/input.bin -o proof -a -y\n","title":"Parallel Proof Generation","titles":["Ethereum Block Execution Example","Generate Proof"]},"68":{"href":"/examples/ethereum-block-exec#troubleshooting","html":"\n","isPage":false,"text":"\n","title":"Troubleshooting","titles":["Ethereum Block Execution Example"]},"69":{"href":"/examples/ethereum-block-exec#common-issues","html":"\n<ol>\n<li>\n<p><strong>Serialization Errors</strong>:</p>\n<ul>\n<li>Ensure input data uses compatible <code>bincode</code> version</li>\n<li>Verify data structure matches expected format</li>\n</ul>\n</li>\n<li>\n<p><strong>Memory Issues</strong>:</p>\n<ul>\n<li>Large blocks may require more memory</li>\n<li>Consider using concurrent proof generation with appropriate memory allocation</li>\n</ul>\n</li>\n<li>\n<p><strong>Fork Compatibility</strong>:</p>\n<ul>\n<li>Ensure fork specification matches the block&#x27;s network rules</li>\n<li>Update Reth dependencies for latest fork support</li>\n</ul>\n</li>\n<li>\n<p><strong>Execution Timeouts</strong>:</p>\n<ul>\n<li>Complex blocks may require increased step limits</li>\n<li>Monitor execution with metrics flags</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nSerialization Errors:\n\nEnsure input data uses compatible bincode version\nVerify data structure matches expected format\n\n\n\nMemory Issues:\n\nLarge blocks may require more memory\nConsider using concurrent proof generation with appropriate memory allocation\n\n\n\nFork Compatibility:\n\nEnsure fork specification matches the block&#x27;s network rules\nUpdate Reth dependencies for latest fork support\n\n\n\nExecution Timeouts:\n\nComplex blocks may require increased step limits\nMonitor execution with metrics flags\n\n\n\n","title":"Common Issues","titles":["Ethereum Block Execution Example","Troubleshooting"]},"70":{"href":"/examples/ethereum-block-exec#debug-mode","html":"\n<p>Run in debug mode for detailed execution information:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">RUST_LOG</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">debug</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block_build/input.bin</span></span></code></pre>\n","isPage":false,"text":"\nRun in debug mode for detailed execution information:\nRUST_LOG=debug cargo-zisk run --release -i block_build/input.bin\n","title":"Debug Mode","titles":["Ethereum Block Execution Example","Troubleshooting"]},"71":{"href":"/examples/ethereum-block-exec#integration-ideas","html":"\n","isPage":false,"text":"\n","title":"Integration Ideas","titles":["Ethereum Block Execution Example"]},"72":{"href":"/examples/ethereum-block-exec#web3-application-integration","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example: Generating input data from web3</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> web3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Web3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-PROJECT-ID&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> prepareBlockInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> web3.eth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockNumber, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> witness</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> generateWitness</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Custom witness generation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> forkSpec</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> determineForkSpec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockNumber);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        block: block,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        witness: witness,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        forkSpec: forkSpec</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Example: Generating input data from web3\nconst web3 = new Web3(&#x27;https://mainnet.infura.io/v3/YOUR-PROJECT-ID&#x27;);\n \nasync function prepareBlockInput(blockNumber) {\n    const block = await web3.eth.getBlock(blockNumber, true);\n    const witness = await generateWitness(block); // Custom witness generation\n    const forkSpec = determineForkSpec(blockNumber);\n    \n    return {\n        block: block,\n        witness: witness,\n        forkSpec: forkSpec\n    };\n}\n","title":"Web3 Application Integration","titles":["Ethereum Block Execution Example","Integration Ideas"]},"73":{"href":"/examples/ethereum-block-exec#smart-contract-verification","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example: Verifying ZisK proofs on-chain</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlockValidator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> verifyBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> proof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> blockHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> blockNumber</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Verify ZisK proof of block execution</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ZiskVerifier.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">verify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(proof, blockHash, blockNumber);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This example demonstrates the power of ZisK for real-world Ethereum applications, enabling scalable and verifiable blockchain computation through zero-knowledge proofs.</p>","isPage":false,"text":"\n// Example: Verifying ZisK proofs on-chain\ncontract BlockValidator {\n    function verifyBlock(\n        bytes calldata proof,\n        bytes32 blockHash,\n        uint256 blockNumber\n    ) external returns (bool) {\n        // Verify ZisK proof of block execution\n        return ZiskVerifier.verify(proof, blockHash, blockNumber);\n    }\n}\nThis example demonstrates the power of ZisK for real-world Ethereum applications, enabling scalable and verifiable blockchain computation through zero-knowledge proofs.","title":"Smart Contract Verification","titles":["Ethereum Block Execution Example","Integration Ideas"]},"74":{"href":"/examples/fibonacci#fibonacci-example","html":"</header>\n<p>This example demonstrates how to compute the nth Fibonacci number using ZisK. The program takes a number <code>n</code> as input and returns the nth Fibonacci number using an iterative approach with overflow handling.</p>\n","isPage":true,"text":"\nThis example demonstrates how to compute the nth Fibonacci number using ZisK. The program takes a number n as input and returns the nth Fibonacci number using an iterative approach with overflow handling.\n","title":"Fibonacci Example","titles":[]},"75":{"href":"/examples/fibonacci#overview","html":"\n<p>The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...</p>\n<p>This example showcases:</p>\n<ul>\n<li>Reading input data from ZisK</li>\n<li>Iterative computation with wrapping arithmetic</li>\n<li>Outputting 64-bit results as two 32-bit values</li>\n<li>Basic ZisK program structure</li>\n</ul>\n","isPage":false,"text":"\nThe Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...\nThis example showcases:\n\nReading input data from ZisK\nIterative computation with wrapping arithmetic\nOutputting 64-bit results as two 32-bit values\nBasic ZisK program structure\n\n","title":"Overview","titles":["Fibonacci Example"]},"76":{"href":"/examples/fibonacci#program-code","html":"\n","isPage":false,"text":"\n","title":"Program Code","titles":["Fibonacci Example"]},"77":{"href":"/examples/fibonacci#mainrs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// This example program takes a number `n` as input and computes the nth Fibonacci number.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mark the main function as the entry point for ZisK</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">#![no_main]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entrypoint!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(main);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">convert</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TryInto</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ziskos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{read_input, set_output};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Read the input data as a byte array from ziskos</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Vec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> read_input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Convert the input data to a u64 integer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> match</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">try_into</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        Ok</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input_bytes) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from_le_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input_bytes),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> panic!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;Invalid input length. Expected 8 bytes, got {}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Compute the nth Fibonacci number</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fib_result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fibonacci</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Output the Fibonacci result as two 32-bit values (low and high parts)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> low </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (fib_result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xFFFFFFFF</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> high </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ((fib_result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xFFFFFFFF</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    set_output</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, low);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    set_output</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, high);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Set remaining outputs to 0</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">in</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        set_output</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fibonacci</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">u64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">in</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> temp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wrapping_add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> temp;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    b</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// This example program takes a number `n` as input and computes the nth Fibonacci number.\n \n// Mark the main function as the entry point for ZisK\n#![no_main]\nziskos::entrypoint!(main);\n \nuse std::convert::TryInto;\nuse ziskos::{read_input, set_output};\n \nfn main() {\n    // Read the input data as a byte array from ziskos\n    let input: Vec&lt;u8&gt; = read_input();\n \n    // Convert the input data to a u64 integer\n    let n: u64 = match input.try_into() {\n        Ok(input_bytes) =&gt; u64::from_le_bytes(input_bytes),\n        Err(input) =&gt; panic!(\n            &quot;Invalid input length. Expected 8 bytes, got {}&quot;,\n            input.len()\n        ),\n    };\n \n    // Compute the nth Fibonacci number\n    let fib_result = fibonacci(n);\n \n    // Output the Fibonacci result as two 32-bit values (low and high parts)\n    let low = (fib_result &amp; 0xFFFFFFFF) as u32;\n    let high = ((fib_result &gt;&gt; 32) &amp; 0xFFFFFFFF) as u32;\n \n    set_output(0, low);\n    set_output(1, high);\n \n    // Set remaining outputs to 0\n    for i in 2..8 {\n        set_output(i, 0);\n    }\n}\n \nfn fibonacci(n: u64) -&gt; u64 {\n    if n &lt;= 1 {\n        return n;\n    }\n \n    let mut a = 0u64;\n    let mut b = 1u64;\n \n    for _ in 2..=n {\n        let temp = a.wrapping_add(b);\n        a = b;\n        b = temp;\n    }\n \n    b\n}\n","title":"main.rs","titles":["Fibonacci Example","Program Code"]},"78":{"href":"/examples/fibonacci#cargotoml","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">package</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">name = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fibonacci&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0.1.0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">edition = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2021&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">default-run = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fibonacci&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">byteorder = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.5.0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ziskos = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/0xPolygonHermez/zisk.git&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n","isPage":false,"text":"\n[package]\nname = &quot;fibonacci&quot;\nversion = &quot;0.1.0&quot;\nedition = &quot;2021&quot;\ndefault-run = &quot;fibonacci&quot;\n \n[dependencies]\nbyteorder = &quot;1.5.0&quot;\nziskos = { git = &quot;https://github.com/0xPolygonHermez/zisk.git&quot; }\n","title":"Cargo.toml","titles":["Fibonacci Example","Program Code"]},"79":{"href":"/examples/fibonacci#buildrs","html":"\n<p>The <code>build.rs</code> script automatically generates the input file with a default value:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">io</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">path</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Define constants for the directory and input file name</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> OUTPUT_DIR</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">str</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;build/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> FILE_NAME</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">str</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;input.bin&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> io</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;()&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Ensure the output directory exists</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output_dir </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Path</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUTPUT_DIR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">output_dir</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">exists</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Create the directory and any necessary parent directories</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        fs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">create_dir_all</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output_dir)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create the file and write the &#x27;n&#x27; value in little-endian format</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file_path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output_dir</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">join</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">FILE_NAME</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> File</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">create</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">file_path)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">write_all</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">to_le_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    Ok</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe build.rs script automatically generates the input file with a default value:\nuse std::fs::{self, File};\nuse std::io::{self, Write};\nuse std::path::Path;\n \n// Define constants for the directory and input file name\nconst OUTPUT_DIR: &amp;str = &quot;build/&quot;;\nconst FILE_NAME: &amp;str = &quot;input.bin&quot;;\n \nfn main() -&gt; io::Result&lt;()&gt; {\n    let n: u64 = 20;\n \n    // Ensure the output directory exists\n    let output_dir = Path::new(OUTPUT_DIR);\n    if !output_dir.exists() {\n        // Create the directory and any necessary parent directories\n        fs::create_dir_all(output_dir)?; \n    }\n \n    // Create the file and write the &#x27;n&#x27; value in little-endian format\n    let file_path = output_dir.join(FILE_NAME);\n    let mut file = File::create(&amp;file_path)?;\n    file.write_all(&amp;n.to_le_bytes())?; \n \n    Ok(())\n}\n","title":"build.rs","titles":["Fibonacci Example","Program Code"]},"80":{"href":"/examples/fibonacci#key-features","html":"\n","isPage":false,"text":"\n","title":"Key Features","titles":["Fibonacci Example"]},"81":{"href":"/examples/fibonacci#input-handling","html":"\n<ul>\n<li>Reads an 8-byte input representing a <code>u64</code> value for <code>n</code></li>\n<li>Uses little-endian byte order for input parsing</li>\n<li>Includes error handling for invalid input lengths</li>\n</ul>\n","isPage":false,"text":"\n\nReads an 8-byte input representing a u64 value for n\nUses little-endian byte order for input parsing\nIncludes error handling for invalid input lengths\n\n","title":"Input Handling","titles":["Fibonacci Example","Key Features"]},"82":{"href":"/examples/fibonacci#fibonacci-computation","html":"\n<ul>\n<li>Uses an iterative approach for efficiency</li>\n<li>Handles edge cases (n ≤ 1)</li>\n<li>Uses <code>wrapping_add()</code> to handle potential overflow gracefully</li>\n<li>Time complexity: O(n), Space complexity: O(1)</li>\n</ul>\n","isPage":false,"text":"\n\nUses an iterative approach for efficiency\nHandles edge cases (n ≤ 1)\nUses wrapping_add() to handle potential overflow gracefully\nTime complexity: O(n), Space complexity: O(1)\n\n","title":"Fibonacci Computation","titles":["Fibonacci Example","Key Features"]},"83":{"href":"/examples/fibonacci#output-format","html":"\n<ul>\n<li>Splits the 64-bit Fibonacci result into two 32-bit parts</li>\n<li>Sets the low 32 bits to output[0] and high 32 bits to output[1]</li>\n<li>Initializes remaining output slots (2-7) to zero</li>\n</ul>\n","isPage":false,"text":"\n\nSplits the 64-bit Fibonacci result into two 32-bit parts\nSets the low 32 bits to output[0] and high 32 bits to output[1]\nInitializes remaining output slots (2-7) to zero\n\n","title":"Output Format","titles":["Fibonacci Example","Key Features"]},"84":{"href":"/examples/fibonacci#running-the-example","html":"\n","isPage":false,"text":"\n","title":"Running the Example","titles":["Fibonacci Example"]},"85":{"href":"/examples/fibonacci#build-and-execute","html":"\n<ol>\n<li>\n<strong>Build the program:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span></span></code></pre>\n</li>\n<li>\n<strong>Run with the default input (n=20):</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span></span></code></pre>\n</li>\n<li>\n<strong>Create custom input:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Create input for n=30</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">python3</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;import struct; open(&#x27;custom_input.bin&#x27;, &#x27;wb&#x27;).write(struct.pack(&#x27;&lt;Q&#x27;, 30))&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run with custom input</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> custom_input.bin</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nBuild the program:\ncargo-zisk build --release\n\n\nRun with the default input (n=20):\ncargo-zisk run --release -i build/input.bin\n\n\nCreate custom input:\n# Create input for n=30\npython3 -c &quot;import struct; open(&#x27;custom_input.bin&#x27;, &#x27;wb&#x27;).write(struct.pack(&#x27;&lt;Q&#x27;, 30))&quot;\n \n# Run with custom input\ncargo-zisk run --release -i custom_input.bin\n\n\n","title":"Build and Execute","titles":["Fibonacci Example","Running the Example"]},"86":{"href":"/examples/fibonacci#expected-results","html":"\n<p>For n=20, the 20th Fibonacci number is 6765:</p>\n<ul>\n<li>Output[0]: 6765 (low 32 bits)</li>\n<li>Output[1]: 0 (high 32 bits)</li>\n<li>Output[2-7]: 0</li>\n</ul>\n<p>For n=50, the 50th Fibonacci number is 12586269025:</p>\n<ul>\n<li>Output[0]: 3832890881 (low 32 bits)</li>\n<li>Output[1]: 2 (high 32 bits)</li>\n<li>Output[2-7]: 0</li>\n</ul>\n","isPage":false,"text":"\nFor n=20, the 20th Fibonacci number is 6765:\n\nOutput[0]: 6765 (low 32 bits)\nOutput[1]: 0 (high 32 bits)\nOutput[2-7]: 0\n\nFor n=50, the 50th Fibonacci number is 12586269025:\n\nOutput[0]: 3832890881 (low 32 bits)\nOutput[1]: 2 (high 32 bits)\nOutput[2-7]: 0\n\n","title":"Expected Results","titles":["Fibonacci Example","Running the Example"]},"87":{"href":"/examples/fibonacci#performance-considerations","html":"\n<ul>\n<li>The iterative approach is more efficient than recursive implementation</li>\n<li>Large values of <code>n</code> will require more computation steps</li>\n<li>For very large <code>n</code> values, consider using the <code>--max-steps</code> flag when running</li>\n</ul>\n","isPage":false,"text":"\n\nThe iterative approach is more efficient than recursive implementation\nLarge values of n will require more computation steps\nFor very large n values, consider using the --max-steps flag when running\n\n","title":"Performance Considerations","titles":["Fibonacci Example"]},"88":{"href":"/examples/fibonacci#generate-proof","html":"\n<p>Follow the standard ZisK proof generation process:</p>\n<ol>\n<li>\n<strong>Program setup:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rom-setup</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/fibonacci</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -k</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/provingKey</span></span></code></pre>\n</li>\n<li>\n<strong>Verify constraints:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verify-constraints</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/fibonacci</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span></span></code></pre>\n</li>\n<li>\n<strong>Generate proof:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> prove</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/fibonacci</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -a</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span></span></code></pre>\n</li>\n</ol>\n<p>This example provides a solid foundation for understanding ZisK program structure and demonstrates efficient iterative computation with proper input/output handling.</p>","isPage":false,"text":"\nFollow the standard ZisK proof generation process:\n\n\nProgram setup:\ncargo-zisk rom-setup -e target/riscv64ima-zisk-zkvm-elf/release/fibonacci -k $HOME/.zisk/provingKey\n\n\nVerify constraints:\ncargo-zisk verify-constraints -e target/riscv64ima-zisk-zkvm-elf/release/fibonacci -i build/input.bin\n\n\nGenerate proof:\ncargo-zisk prove -e target/riscv64ima-zisk-zkvm-elf/release/fibonacci -i build/input.bin -o proof -a -y\n\n\nThis example provides a solid foundation for understanding ZisK program structure and demonstrates efficient iterative computation with proper input/output handling.","title":"Generate Proof","titles":["Fibonacci Example"]},"89":{"href":"/examples/keccak#keccak-example","html":"</header>\n<p>This example demonstrates how to compute Keccak-256 hashes using ZisK. The program takes a number <code>n</code> as input and performs Keccak-256 hashing <code>n</code> times sequentially, where each iteration hashes the result of the previous iteration.</p>\n","isPage":true,"text":"\nThis example demonstrates how to compute Keccak-256 hashes using ZisK. The program takes a number n as input and performs Keccak-256 hashing n times sequentially, where each iteration hashes the result of the previous iteration.\n","title":"Keccak Example","titles":[]},"90":{"href":"/examples/keccak#overview","html":"\n<p>Keccak-256 is a cryptographic hash function that is part of the SHA-3 family. It&#x27;s widely used in blockchain applications, particularly in Ethereum for generating addresses and transaction hashes.</p>\n<p>This example showcases:</p>\n<ul>\n<li>Reading input data from ZisK</li>\n<li>Sequential cryptographic hashing operations</li>\n<li>Using the <code>tiny-keccak</code> crate for Keccak-256 computation</li>\n<li>Outputting hash results as multiple 32-bit values</li>\n<li>Iterative computation patterns in ZisK</li>\n</ul>\n","isPage":false,"text":"\nKeccak-256 is a cryptographic hash function that is part of the SHA-3 family. It&#x27;s widely used in blockchain applications, particularly in Ethereum for generating addresses and transaction hashes.\nThis example showcases:\n\nReading input data from ZisK\nSequential cryptographic hashing operations\nUsing the tiny-keccak crate for Keccak-256 computation\nOutputting hash results as multiple 32-bit values\nIterative computation patterns in ZisK\n\n","title":"Overview","titles":["Keccak Example"]},"91":{"href":"/examples/keccak#program-code","html":"\n","isPage":false,"text":"\n","title":"Program Code","titles":["Keccak Example"]},"92":{"href":"/examples/keccak#mainrs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// This example program takes a number `n` as input and computes the Keccak-256 hash `n` times sequentially.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mark the main function as the entry point for ZisK</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">#![no_main]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entrypoint!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(main);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> byteorder</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ByteOrder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">convert</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TryInto</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> tiny_keccak</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Hasher</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Keccak</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ziskos</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{read_input, set_output};</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Read the input data as a byte array from ziskos</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Vec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> read_input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Convert the input data to a u64 integer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> match</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">try_into</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        Ok</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input_bytes) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from_le_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input_bytes),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> panic!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;Invalid input length. Expected 8 bytes, got {}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">u8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Compute Keccak-256 hashing &#x27;n&#x27; times</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">in</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hasher </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Keccak</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">v256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        hasher</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">update</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">hash);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        hasher</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">finalize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hash);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Split &#x27;hash&#x27; value into chunks of 32 bits and write them to ziskos output</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">in</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> byteorder</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BigEndian</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">read_u32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hash[i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">..</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        set_output</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i, val);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// This example program takes a number `n` as input and computes the Keccak-256 hash `n` times sequentially.\n \n// Mark the main function as the entry point for ZisK\n#![no_main]\nziskos::entrypoint!(main);\n \nuse byteorder::ByteOrder;\nuse std::convert::TryInto;\nuse tiny_keccak::{Hasher, Keccak};\nuse ziskos::{read_input, set_output};\n \nfn main() {\n    // Read the input data as a byte array from ziskos\n    let input: Vec&lt;u8&gt; = read_input();\n \n    // Convert the input data to a u64 integer\n    let n: u64 = match input.try_into() {\n        Ok(input_bytes) =&gt; u64::from_le_bytes(input_bytes),\n        Err(input) =&gt; panic!(\n            &quot;Invalid input length. Expected 8 bytes, got {}&quot;,\n            input.len()\n        ),\n    };\n \n    let mut hash = [0u8; 32];\n \n    // Compute Keccak-256 hashing &#x27;n&#x27; times\n    for _ in 0..n {\n        let mut hasher = Keccak::v256();\n        hasher.update(&amp;hash);\n        hasher.finalize(&amp;mut hash);\n    }\n \n    // Split &#x27;hash&#x27; value into chunks of 32 bits and write them to ziskos output\n    for i in 0..8 {\n        let val = byteorder::BigEndian::read_u32(&amp;mut hash[i * 4..i * 4 + 4]);\n        set_output(i, val);\n    }\n}\n","title":"main.rs","titles":["Keccak Example","Program Code"]},"93":{"href":"/examples/keccak#cargotoml","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">package</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">name = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;keccak&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0.1.0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">edition = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2021&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">default-run = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;keccak&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">byteorder = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.5.0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tiny-keccak = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;2.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, features = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;keccak&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ziskos = { git = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://github.com/0xPolygonHermez/zisk.git&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n","isPage":false,"text":"\n[package]\nname = &quot;keccak&quot;\nversion = &quot;0.1.0&quot;\nedition = &quot;2021&quot;\ndefault-run = &quot;keccak&quot;\n \n[dependencies]\nbyteorder = &quot;1.5.0&quot;\ntiny-keccak = { version = &quot;2.0.0&quot;, features = [&quot;keccak&quot;] }\nziskos = { git = &quot;https://github.com/0xPolygonHermez/zisk.git&quot; }\n","title":"Cargo.toml","titles":["Keccak Example","Program Code"]},"94":{"href":"/examples/keccak#buildrs","html":"\n<p>The <code>build.rs</code> script automatically generates the input file with a default value:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">File</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">io</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">use</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> std</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">path</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Define constants for the directory and input file name</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> OUTPUT_DIR</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">str</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;build/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> FILE_NAME</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">str</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;input.bin&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> io</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;()&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> u64</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Ensure the output directory exists</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output_dir </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Path</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUTPUT_DIR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">output_dir</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">exists</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Create the directory and any necessary parent directories</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        fs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">create_dir_all</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output_dir)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create the file and write the &#x27;n&#x27; value in little-endian format</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file_path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output_dir</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">join</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">FILE_NAME</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    let</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> mut</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> File</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">create</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">file_path)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">write_all</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">to_le_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    Ok</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe build.rs script automatically generates the input file with a default value:\nuse std::fs::{self, File};\nuse std::io::{self, Write};\nuse std::path::Path;\n \n// Define constants for the directory and input file name\nconst OUTPUT_DIR: &amp;str = &quot;build/&quot;;\nconst FILE_NAME: &amp;str = &quot;input.bin&quot;;\n \nfn main() -&gt; io::Result&lt;()&gt; {\n    let n: u64 = 20;\n \n    // Ensure the output directory exists\n    let output_dir = Path::new(OUTPUT_DIR);\n    if !output_dir.exists() {\n        // Create the directory and any necessary parent directories\n        fs::create_dir_all(output_dir)?; \n    }\n \n    // Create the file and write the &#x27;n&#x27; value in little-endian format\n    let file_path = output_dir.join(FILE_NAME);\n    let mut file = File::create(&amp;file_path)?;\n    file.write_all(&amp;n.to_le_bytes())?; \n \n    Ok(())\n}\n","title":"build.rs","titles":["Keccak Example","Program Code"]},"95":{"href":"/examples/keccak#key-features","html":"\n","isPage":false,"text":"\n","title":"Key Features","titles":["Keccak Example"]},"96":{"href":"/examples/keccak#input-handling","html":"\n<ul>\n<li>Reads an 8-byte input representing a <code>u64</code> value for the number of iterations <code>n</code></li>\n<li>Uses little-endian byte order for input parsing</li>\n<li>Includes error handling for invalid input lengths</li>\n</ul>\n","isPage":false,"text":"\n\nReads an 8-byte input representing a u64 value for the number of iterations n\nUses little-endian byte order for input parsing\nIncludes error handling for invalid input lengths\n\n","title":"Input Handling","titles":["Keccak Example","Key Features"]},"97":{"href":"/examples/keccak#keccak-256-computation","html":"\n<ul>\n<li>Uses the <code>tiny-keccak</code> crate for efficient Keccak-256 hashing</li>\n<li>Performs sequential hashing where each iteration uses the previous hash as input</li>\n<li>Starts with an initial hash of all zeros (32 bytes)</li>\n<li>Each iteration creates a new hasher instance for clean computation</li>\n</ul>\n","isPage":false,"text":"\n\nUses the tiny-keccak crate for efficient Keccak-256 hashing\nPerforms sequential hashing where each iteration uses the previous hash as input\nStarts with an initial hash of all zeros (32 bytes)\nEach iteration creates a new hasher instance for clean computation\n\n","title":"Keccak-256 Computation","titles":["Keccak Example","Key Features"]},"98":{"href":"/examples/keccak#hash-chain-process","html":"\n<ol>\n<li>Initialize with a 32-byte array of zeros</li>\n<li>For each iteration:\n<ul>\n<li>Create a new Keccak-256 hasher</li>\n<li>Update the hasher with the current hash value</li>\n<li>Finalize to get the new hash</li>\n</ul>\n</li>\n<li>After <code>n</code> iterations, output the final hash</li>\n</ol>\n","isPage":false,"text":"\n\nInitialize with a 32-byte array of zeros\nFor each iteration:\n\nCreate a new Keccak-256 hasher\nUpdate the hasher with the current hash value\nFinalize to get the new hash\n\n\nAfter n iterations, output the final hash\n\n","title":"Hash Chain Process","titles":["Keccak Example","Key Features"]},"99":{"href":"/examples/keccak#output-format","html":"\n<ul>\n<li>Splits the 256-bit (32-byte) hash into eight 32-bit chunks</li>\n<li>Uses big-endian byte order for output (standard for hash representations)</li>\n<li>Sets each chunk to outputs[0] through outputs[7]</li>\n</ul>\n","isPage":false,"text":"\n\nSplits the 256-bit (32-byte) hash into eight 32-bit chunks\nUses big-endian byte order for output (standard for hash representations)\nSets each chunk to outputs[0] through outputs[7]\n\n","title":"Output Format","titles":["Keccak Example","Key Features"]},"100":{"href":"/examples/keccak#running-the-example","html":"\n","isPage":false,"text":"\n","title":"Running the Example","titles":["Keccak Example"]},"101":{"href":"/examples/keccak#build-and-execute","html":"\n<ol>\n<li>\n<strong>Build the program:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span></span></code></pre>\n</li>\n<li>\n<strong>Run with the default input (n=20):</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span></span></code></pre>\n</li>\n<li>\n<strong>Create custom input:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Create input for n=5</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">python3</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;import struct; open(&#x27;custom_input.bin&#x27;, &#x27;wb&#x27;).write(struct.pack(&#x27;&lt;Q&#x27;, 5))&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run with custom input</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> custom_input.bin</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nBuild the program:\ncargo-zisk build --release\n\n\nRun with the default input (n=20):\ncargo-zisk run --release -i build/input.bin\n\n\nCreate custom input:\n# Create input for n=5\npython3 -c &quot;import struct; open(&#x27;custom_input.bin&#x27;, &#x27;wb&#x27;).write(struct.pack(&#x27;&lt;Q&#x27;, 5))&quot;\n \n# Run with custom input\ncargo-zisk run --release -i custom_input.bin\n\n\n","title":"Build and Execute","titles":["Keccak Example","Running the Example"]},"102":{"href":"/examples/keccak#expected-results","html":"\n<p>The output will be eight 32-bit values representing the final Keccak-256 hash after <code>n</code> iterations. For example:</p>\n<ul>\n<li><strong>n=1</strong>: Keccak-256 of 32 zero bytes</li>\n<li><strong>n=2</strong>: Keccak-256 of the result from n=1</li>\n<li><strong>n=20</strong>: Keccak-256 applied 20 times sequentially</li>\n</ul>\n<p>Each run will produce different hash values due to the iterative nature of the computation.</p>\n","isPage":false,"text":"\nThe output will be eight 32-bit values representing the final Keccak-256 hash after n iterations. For example:\n\nn=1: Keccak-256 of 32 zero bytes\nn=2: Keccak-256 of the result from n=1\nn=20: Keccak-256 applied 20 times sequentially\n\nEach run will produce different hash values due to the iterative nature of the computation.\n","title":"Expected Results","titles":["Keccak Example","Running the Example"]},"103":{"href":"/examples/keccak#use-cases","html":"\n<p>This example is particularly useful for:</p>\n","isPage":false,"text":"\nThis example is particularly useful for:\n","title":"Use Cases","titles":["Keccak Example"]},"104":{"href":"/examples/keccak#blockchain-applications","html":"\n<ul>\n<li>Transaction hash computation</li>\n<li>Block hash calculations</li>\n<li>Merkle tree construction</li>\n<li>Address generation</li>\n</ul>\n","isPage":false,"text":"\n\nTransaction hash computation\nBlock hash calculations\nMerkle tree construction\nAddress generation\n\n","title":"Blockchain Applications","titles":["Keccak Example","Use Cases"]},"105":{"href":"/examples/keccak#proof-of-work-simulations","html":"\n<ul>\n<li>Demonstrating iterative hashing patterns</li>\n<li>Mining algorithm prototypes</li>\n<li>Hash-based puzzles</li>\n</ul>\n","isPage":false,"text":"\n\nDemonstrating iterative hashing patterns\nMining algorithm prototypes\nHash-based puzzles\n\n","title":"Proof of Work Simulations","titles":["Keccak Example","Use Cases"]},"106":{"href":"/examples/keccak#cryptographic-research","html":"\n<ul>\n<li>Hash chain analysis</li>\n<li>Performance benchmarking of cryptographic operations</li>\n<li>Side-channel analysis in controlled environments</li>\n</ul>\n","isPage":false,"text":"\n\nHash chain analysis\nPerformance benchmarking of cryptographic operations\nSide-channel analysis in controlled environments\n\n","title":"Cryptographic Research","titles":["Keccak Example","Use Cases"]},"107":{"href":"/examples/keccak#performance-considerations","html":"\n","isPage":false,"text":"\n","title":"Performance Considerations","titles":["Keccak Example"]},"108":{"href":"/examples/keccak#computational-complexity","html":"\n<ul>\n<li>Time complexity: O(n) where n is the number of iterations</li>\n<li>Each Keccak-256 operation has fixed computational cost</li>\n<li>Memory usage remains constant regardless of iteration count</li>\n</ul>\n","isPage":false,"text":"\n\nTime complexity: O(n) where n is the number of iterations\nEach Keccak-256 operation has fixed computational cost\nMemory usage remains constant regardless of iteration count\n\n","title":"Computational Complexity","titles":["Keccak Example","Performance Considerations"]},"109":{"href":"/examples/keccak#zisk-specific-optimizations","html":"\n<ul>\n<li>The <code>tiny-keccak</code> crate is optimized for performance</li>\n<li>Sequential hashing allows for predictable execution patterns</li>\n<li>Large values of <code>n</code> may require increasing the <code>--max-steps</code> parameter</li>\n</ul>\n","isPage":false,"text":"\n\nThe tiny-keccak crate is optimized for performance\nSequential hashing allows for predictable execution patterns\nLarge values of n may require increasing the --max-steps parameter\n\n","title":"ZisK-Specific Optimizations","titles":["Keccak Example","Performance Considerations"]},"110":{"href":"/examples/keccak#scaling-considerations","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># For large iteration counts, increase max steps</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ziskemu</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/keccak</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -n</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 50000000</span></span></code></pre>\n","isPage":false,"text":"\n# For large iteration counts, increase max steps\nziskemu -e target/riscv64ima-zisk-zkvm-elf/release/keccak -i build/input.bin -n 50000000\n","title":"Scaling Considerations","titles":["Keccak Example","Performance Considerations"]},"111":{"href":"/examples/keccak#generate-proof","html":"\n<p>Follow the standard ZisK proof generation process:</p>\n<ol>\n<li>\n<strong>Program setup:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rom-setup</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/keccak</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -k</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.zisk/provingKey</span></span></code></pre>\n</li>\n<li>\n<strong>Verify constraints:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verify-constraints</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/keccak</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span></span></code></pre>\n</li>\n<li>\n<strong>Generate proof:</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo-zisk</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> prove</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> target/riscv64ima-zisk-zkvm-elf/release/keccak</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build/input.bin</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proof</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -a</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -y</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\nFollow the standard ZisK proof generation process:\n\n\nProgram setup:\ncargo-zisk rom-setup -e target/riscv64ima-zisk-zkvm-elf/release/keccak -k $HOME/.zisk/provingKey\n\n\nVerify constraints:\ncargo-zisk verify-constraints -e target/riscv64ima-zisk-zkvm-elf/release/keccak -i build/input.bin\n\n\nGenerate proof:\ncargo-zisk prove -e target/riscv64ima-zisk-zkvm-elf/release/keccak -i build/input.bin -o proof -a -y\n\n\n","title":"Generate Proof","titles":["Keccak Example"]},"112":{"href":"/examples/keccak#advanced-usage","html":"\n","isPage":false,"text":"\n","title":"Advanced Usage","titles":["Keccak Example"]},"113":{"href":"/examples/keccak#custom-input-generation","html":"\n<p>Create more sophisticated input files for testing:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> struct</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">def</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> create_keccak_input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n, filename):</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;&quot;&quot;Create binary input file for keccak example&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    with</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filename, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;wb&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> f:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        f.write(struct.pack(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;&lt;Q&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, n))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Create inputs for different iteration counts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">create_keccak_input(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;input_1.bin&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)      </span><span style=\"color:#6A737D;--shiki-dark:#768390\"># Single hash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">create_keccak_input(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;input_100.bin&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\"># 100 iterations</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">create_keccak_input(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;input_1k.bin&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\"># 1000 iterations</span></span></code></pre>\n","isPage":false,"text":"\nCreate more sophisticated input files for testing:\nimport struct\n \ndef create_keccak_input(n, filename):\n    &quot;&quot;&quot;Create binary input file for keccak example&quot;&quot;&quot;\n    with open(filename, &#x27;wb&#x27;) as f:\n        f.write(struct.pack(&#x27;&lt;Q&#x27;, n))\n \n# Create inputs for different iteration counts\ncreate_keccak_input(1, &#x27;input_1.bin&#x27;)      # Single hash\ncreate_keccak_input(100, &#x27;input_100.bin&#x27;)  # 100 iterations\ncreate_keccak_input(1000, &#x27;input_1k.bin&#x27;)  # 1000 iterations\n","title":"Custom Input Generation","titles":["Keccak Example","Advanced Usage"]},"114":{"href":"/examples/keccak#verification-of-results","html":"\n<p>You can verify the results by running equivalent computations in other environments:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Crypto.Hash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keccak</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">def</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> verify_keccak_chain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n):</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;&quot;&quot;Verify the Keccak chain computation&quot;&quot;&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    hash_val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> b</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\x00</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 32</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  # Start with 32 zero bytes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">in</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n):</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        hasher </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keccak.new(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">digest_bits</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        hasher.update(hash_val)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        hash_val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hasher.digest()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    # Convert to 32-bit chunks (big-endian)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    chunks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">in</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        chunk </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.from_bytes(hash_val[i:i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;big&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        chunks.append(chunk)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunks</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Verify results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> verify_keccak_chain(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">print</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Expected output chunks:&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result)</span></span></code></pre>\n<p>This example demonstrates the power of ZisK for cryptographic computations and provides a foundation for more complex blockchain-related zero-knowledge applications.</p>","isPage":false,"text":"\nYou can verify the results by running equivalent computations in other environments:\nfrom Crypto.Hash import keccak\n \ndef verify_keccak_chain(n):\n    &quot;&quot;&quot;Verify the Keccak chain computation&quot;&quot;&quot;\n    hash_val = b&#x27;\\x00&#x27; * 32  # Start with 32 zero bytes\n    \n    for _ in range(n):\n        hasher = keccak.new(digest_bits=256)\n        hasher.update(hash_val)\n        hash_val = hasher.digest()\n    \n    # Convert to 32-bit chunks (big-endian)\n    chunks = []\n    for i in range(0, 32, 4):\n        chunk = int.from_bytes(hash_val[i:i+4], &#x27;big&#x27;)\n        chunks.append(chunk)\n    \n    return chunks\n \n# Verify results\nresult = verify_keccak_chain(20)\nprint(&quot;Expected output chunks:&quot;, result)\nThis example demonstrates the power of ZisK for cryptographic computations and provides a foundation for more complex blockchain-related zero-knowledge applications.","title":"Verification of Results","titles":["Keccak Example","Advanced Usage"]},"115":{"href":"/protocols/overview#zisk-overview","html":"</header>\n<p>ZisK is a high-performance zero-knowledge virtual machine (zkVM) designed to generate zero-knowledge proofs of arbitrary program execution. It enables developers to prove the correctness of computations without revealing their internal state. ZisK abstracts the complexities of cryptographic operations by providing an optimized toolstack that minimizes computational overhead, making zero-knowledge technology accessible to developers.</p>\n<p>Key features of ZisK include:</p>\n<ul>\n<li><strong>High-performance architecture</strong> optimized for low-latency proof generation</li>\n<li><strong>Rust-based zkVM</strong> with future support for additional languages</li>\n<li><strong>No recompilation required</strong> across different programs</li>\n<li><strong>Standardized prover interface</strong> (JSON-RPC, GRPC, CLI)</li>\n<li><strong>Flexible integration</strong> as standalone service or library</li>\n<li><strong>Fully open-source</strong>, backed by Polygon zkEVM and Plonky3 technology</li>\n</ul>\n<p>ZisK converts RISC-V programs into provable form through a sophisticated pipeline involving emulation, witness generation, and constraint satisfaction.</p>\n","isPage":true,"text":"\nZisK is a high-performance zero-knowledge virtual machine (zkVM) designed to generate zero-knowledge proofs of arbitrary program execution. It enables developers to prove the correctness of computations without revealing their internal state. ZisK abstracts the complexities of cryptographic operations by providing an optimized toolstack that minimizes computational overhead, making zero-knowledge technology accessible to developers.\nKey features of ZisK include:\n\nHigh-performance architecture optimized for low-latency proof generation\nRust-based zkVM with future support for additional languages\nNo recompilation required across different programs\nStandardized prover interface (JSON-RPC, GRPC, CLI)\nFlexible integration as standalone service or library\nFully open-source, backed by Polygon zkEVM and Plonky3 technology\n\nZisK converts RISC-V programs into provable form through a sophisticated pipeline involving emulation, witness generation, and constraint satisfaction.\n","title":"ZisK Overview","titles":[]},"116":{"href":"/protocols/overview#system-architecture-overview","html":"\n<p>ZisK consists of several interconnected components that work together to convert programs into provable form, execute them, generate witnesses, and create zero-knowledge proofs.</p>\n<p><img src=\"/zisk-system.png\" alt=\"ZisK System Architecture\"/></p>\n","isPage":false,"text":"\nZisK consists of several interconnected components that work together to convert programs into provable form, execute them, generate witnesses, and create zero-knowledge proofs.\n\n","title":"System Architecture Overview","titles":["ZisK Overview"]},"117":{"href":"/protocols/overview#high-level-system-architecture","html":"\n<p>The ZisK system is organized into several key areas:</p>\n<ul>\n<li><strong>Infrastructure</strong>: Core VM system and development toolchain</li>\n<li><strong>Input Processing</strong>: RISC-V ELF files and transpilation</li>\n<li><strong>Specialized State Machines</strong>: Parallel processing of different operation types</li>\n<li><strong>Witness Generation</strong>: Coordination and AIR instance creation</li>\n<li><strong>Core VM System</strong>: Fundamental execution and constraint handling</li>\n</ul>\n","isPage":false,"text":"\nThe ZisK system is organized into several key areas:\n\nInfrastructure: Core VM system and development toolchain\nInput Processing: RISC-V ELF files and transpilation\nSpecialized State Machines: Parallel processing of different operation types\nWitness Generation: Coordination and AIR instance creation\nCore VM System: Fundamental execution and constraint handling\n\n","title":"High-Level System Architecture","titles":["ZisK Overview","System Architecture Overview"]},"118":{"href":"/protocols/overview#core-components","html":"\n<table><thead><tr><th>Component</th><th>Package</th><th>Purpose</th></tr></thead><tbody><tr><td>zisk-core</td><td>zisk-core</td><td>Fundamental definitions, types, and operations. Contains ZiskRom, ZiskInst, and instruction set definitions</td></tr><tr><td>ziskemu</td><td>ziskemu</td><td>RISC-V/ZisK emulator that executes programs and generates execution traces</td></tr><tr><td>zisk-witness</td><td>zisk-witness</td><td>Witness generation library that coordinates between emulator and state machines</td></tr><tr><td>zisk-pil</td><td>zisk-pil</td><td>Polynomial Identity Language definitions for mathematical constraints</td></tr><tr><td>executor</td><td>executor</td><td>Execution orchestrator that manages the overall proof generation process</td></tr><tr><td>data-bus</td><td>data-bus</td><td>Inter-component communication system for state machine coordination</td></tr><tr><td>zisk-common</td><td>zisk-common</td><td>Shared utilities and common functionality across components</td></tr></tbody></table>\n","isPage":false,"text":"\nComponentPackagePurposezisk-corezisk-coreFundamental definitions, types, and operations. Contains ZiskRom, ZiskInst, and instruction set definitionsziskemuziskemuRISC-V/ZisK emulator that executes programs and generates execution traceszisk-witnesszisk-witnessWitness generation library that coordinates between emulator and state machineszisk-pilzisk-pilPolynomial Identity Language definitions for mathematical constraintsexecutorexecutorExecution orchestrator that manages the overall proof generation processdata-busdata-busInter-component communication system for state machine coordinationzisk-commonzisk-commonShared utilities and common functionality across components\n","title":"Core Components","titles":["ZisK Overview","System Architecture Overview"]},"119":{"href":"/protocols/overview#state-machine-packages","html":"\n<table><thead><tr><th>State Machine</th><th>Package</th><th>Operations Handled</th></tr></thead><tbody><tr><td>Main SM</td><td>sm-main</td><td>Execution coordination, register traces, memory steps</td></tr><tr><td>Binary SM</td><td>sm-binary</td><td>Binary operations (AND, OR, XOR, shifts)</td></tr><tr><td>Arithmetic SM</td><td>sm-arith</td><td>Arithmetic operations (add, sub, mul, div)</td></tr><tr><td>Memory SM</td><td>sm-mem</td><td>Memory access operations and constraints</td></tr><tr><td>ROM SM</td><td>sm-rom</td><td>Read-only memory access patterns</td></tr></tbody></table>\n","isPage":false,"text":"\nState MachinePackageOperations HandledMain SMsm-mainExecution coordination, register traces, memory stepsBinary SMsm-binaryBinary operations (AND, OR, XOR, shifts)Arithmetic SMsm-arithArithmetic operations (add, sub, mul, div)Memory SMsm-memMemory access operations and constraintsROM SMsm-romRead-only memory access patterns\n","title":"State Machine Packages","titles":["ZisK Overview","System Architecture Overview"]},"120":{"href":"/protocols/overview#key-dependencies","html":"\n<p>The witness computation system integrates multiple specialized components:</p>\n<ul>\n<li><strong>Precompiles</strong>: precomp-keccakf, precomp-sha256f, precomp-arith-eq for cryptographic operations</li>\n<li><strong>External Systems</strong>: proofman-common, proofman-util, proofman-macros for proof management</li>\n<li><strong>Field Arithmetic</strong>: p3-field, p3-goldilocks for finite field operations</li>\n</ul>\n","isPage":false,"text":"\nThe witness computation system integrates multiple specialized components:\n\nPrecompiles: precomp-keccakf, precomp-sha256f, precomp-arith-eq for cryptographic operations\nExternal Systems: proofman-common, proofman-util, proofman-macros for proof management\nField Arithmetic: p3-field, p3-goldilocks for finite field operations\n\n","title":"Key Dependencies","titles":["ZisK Overview","System Architecture Overview"]},"121":{"href":"/protocols/overview#execution-pipeline","html":"\n<p>ZisK transforms RISC-V programs into verifiable zero-knowledge proofs through a multi-stage pipeline:</p>\n","isPage":false,"text":"\nZisK transforms RISC-V programs into verifiable zero-knowledge proofs through a multi-stage pipeline:\n","title":"Execution Pipeline","titles":["ZisK Overview"]},"122":{"href":"/protocols/overview#execution-stages","html":"\n<ol>\n<li><strong>Program Conversion</strong>: RISC-V ELF files are converted to ZiskRom format using the riscv2zisk transpiler</li>\n<li><strong>Emulation</strong>: The ziskemu emulator executes the program, generating detailed EmuTrace objects</li>\n<li><strong>Witness Coordination</strong>: The zisk-witness library processes traces through the sm-main coordinator</li>\n<li><strong>Parallel Processing</strong>: Specialized state machines handle different operation types simultaneously</li>\n<li><strong>AIR Generation</strong>: State machines produce Algebraic Intermediate Representation instances</li>\n<li><strong>Proof Creation</strong>: The proofman system converts AIR instances into zero-knowledge proofs</li>\n</ol>\n<p>The data-bus component enables efficient communication between state machines during witness generation.</p>\n","isPage":false,"text":"\n\nProgram Conversion: RISC-V ELF files are converted to ZiskRom format using the riscv2zisk transpiler\nEmulation: The ziskemu emulator executes the program, generating detailed EmuTrace objects\nWitness Coordination: The zisk-witness library processes traces through the sm-main coordinator\nParallel Processing: Specialized state machines handle different operation types simultaneously\nAIR Generation: State machines produce Algebraic Intermediate Representation instances\nProof Creation: The proofman system converts AIR instances into zero-knowledge proofs\n\nThe data-bus component enables efficient communication between state machines during witness generation.\n","title":"Execution Stages","titles":["ZisK Overview","Execution Pipeline"]},"123":{"href":"/protocols/overview#state-machine-architecture","html":"\n<p>ZisK uses a system of interconnected state machines to process different aspects of program execution. These state machines collectively ensure that all operations are properly constrained and verifiable.</p>\n","isPage":false,"text":"\nZisK uses a system of interconnected state machines to process different aspects of program execution. These state machines collectively ensure that all operations are properly constrained and verifiable.\n","title":"State Machine Architecture","titles":["ZisK Overview"]},"124":{"href":"/protocols/overview#main-state-machine-sm-main","html":"\n<p>The sm-main package implements the central coordinator for witness generation. It processes execution traces from ziskemu and orchestrates interactions with specialized state machines.</p>\n<p>Key dependencies:</p>\n<ul>\n<li><strong>ziskemu</strong>: Receives execution traces</li>\n<li><strong>zisk-core</strong>: Uses core types and definitions</li>\n<li><strong>zisk-pil</strong>: Applies constraint definitions</li>\n<li><strong>sm-mem</strong>: Coordinates memory operations</li>\n<li><strong>asm-runner</strong>: Handles assembly execution</li>\n</ul>\n<p>The main state machine divides execution traces into segments for efficient parallel processing and manages the overall witness generation workflow.</p>\n","isPage":false,"text":"\nThe sm-main package implements the central coordinator for witness generation. It processes execution traces from ziskemu and orchestrates interactions with specialized state machines.\nKey dependencies:\n\nziskemu: Receives execution traces\nzisk-core: Uses core types and definitions\nzisk-pil: Applies constraint definitions\nsm-mem: Coordinates memory operations\nasm-runner: Handles assembly execution\n\nThe main state machine divides execution traces into segments for efficient parallel processing and manages the overall witness generation workflow.\n","title":"Main State Machine (sm-main)","titles":["ZisK Overview","State Machine Architecture"]},"125":{"href":"/protocols/overview#specialized-state-machines","html":"\n","isPage":false,"text":"\n","title":"Specialized State Machines","titles":["ZisK Overview","State Machine Architecture"]},"126":{"href":"/protocols/overview#binary-operations-sm-binary","html":"\n<p>Handles bitwise and logical operations through multiple sub-components:</p>\n<ul>\n<li>Binary basic operations (AND, OR, XOR)</li>\n<li>Binary extension operations (shifts, rotations)</li>\n<li>Lookup tables for operation verification</li>\n</ul>\n","isPage":false,"text":"\nHandles bitwise and logical operations through multiple sub-components:\n\nBinary basic operations (AND, OR, XOR)\nBinary extension operations (shifts, rotations)\nLookup tables for operation verification\n\n","title":"Binary Operations (sm-binary)","titles":["ZisK Overview","State Machine Architecture","Specialized State Machines"]},"127":{"href":"/protocols/overview#arithmetic-operations-sm-arith","html":"\n<p>Processes mathematical computations including:</p>\n<ul>\n<li>Addition and subtraction with overflow handling</li>\n<li>Multiplication and division operations</li>\n<li>Range checks and arithmetic constraints</li>\n</ul>\n","isPage":false,"text":"\nProcesses mathematical computations including:\n\nAddition and subtraction with overflow handling\nMultiplication and division operations\nRange checks and arithmetic constraints\n\n","title":"Arithmetic Operations (sm-arith)","titles":["ZisK Overview","State Machine Architecture","Specialized State Machines"]},"128":{"href":"/protocols/overview#memory-management-sm-mem","html":"\n<p>Ensures memory operation correctness through:</p>\n<ul>\n<li>Load and store operation tracking</li>\n<li>Memory consistency verification</li>\n<li>Address range validation</li>\n</ul>\n","isPage":false,"text":"\nEnsures memory operation correctness through:\n\nLoad and store operation tracking\nMemory consistency verification\nAddress range validation\n\n","title":"Memory Management (sm-mem)","titles":["ZisK Overview","State Machine Architecture","Specialized State Machines"]},"129":{"href":"/protocols/overview#rom-access-sm-rom","html":"\n<p>Manages program memory access including:</p>\n<ul>\n<li>Instruction fetch operations</li>\n<li>Program counter management</li>\n<li>Read-only memory constraints</li>\n</ul>\n","isPage":false,"text":"\nManages program memory access including:\n\nInstruction fetch operations\nProgram counter management\nRead-only memory constraints\n\n","title":"ROM Access (sm-rom)","titles":["ZisK Overview","State Machine Architecture","Specialized State Machines"]},"130":{"href":"/protocols/overview#communication-and-coordination","html":"\n<p>All state machines communicate through the data-bus component, which provides:</p>\n<ul>\n<li><strong>Operation Bus</strong>: Central message passing system with OPERATION_BUS_ID</li>\n<li><strong>Parallel Processing</strong>: Enables concurrent state machine execution</li>\n<li><strong>Constraint Synchronization</strong>: Coordinates PIL constraint evaluation</li>\n</ul>\n<p>The zisk-witness library serves as the top-level orchestrator, managing the flow from emulation traces to final AIR instances.</p>\n","isPage":false,"text":"\nAll state machines communicate through the data-bus component, which provides:\n\nOperation Bus: Central message passing system with OPERATION_BUS_ID\nParallel Processing: Enables concurrent state machine execution\nConstraint Synchronization: Coordinates PIL constraint evaluation\n\nThe zisk-witness library serves as the top-level orchestrator, managing the flow from emulation traces to final AIR instances.\n","title":"Communication and Coordination","titles":["ZisK Overview","State Machine Architecture"]},"131":{"href":"/protocols/overview#developer-workflow","html":"\n<p>Developers interact with ZisK through a structured workflow that abstracts the complexity of zero-knowledge proof generation:</p>\n","isPage":false,"text":"\nDevelopers interact with ZisK through a structured workflow that abstracts the complexity of zero-knowledge proof generation:\n","title":"Developer Workflow","titles":["ZisK Overview"]},"132":{"href":"/protocols/overview#core-development-tools","html":"\n<table><thead><tr><th>Tool</th><th>Purpose</th><th>Package</th></tr></thead><tbody><tr><td>ziskup</td><td>Toolchain installer and manager</td><td>Standalone installer</td></tr><tr><td>cargo-zisk</td><td>Command-line interface for ZisK projects</td><td>cli package</td></tr><tr><td>ziskemu</td><td>Emulator for testing and development</td><td>emulator package</td></tr></tbody></table>\n","isPage":false,"text":"\nToolPurposePackageziskupToolchain installer and managerStandalone installercargo-ziskCommand-line interface for ZisK projectscli packageziskemuEmulator for testing and developmentemulator package\n","title":"Core Development Tools","titles":["ZisK Overview","Developer Workflow"]},"133":{"href":"/protocols/overview#testing-and-verification","html":"\n<p>ZisK includes comprehensive testing through the Riscof framework for RISC-V compliance:</p>\n<ol>\n<li><strong>Test Generation</strong>: Docker-based riscof test generation</li>\n<li><strong>ELF Conversion</strong>: Convert test ELF files to ZisK ROMs</li>\n<li><strong>Execution</strong>: Run tests through ziskemu</li>\n<li><strong>Verification</strong>: Compare output against reference RISC-V implementation</li>\n</ol>\n<p>The testing process uses the ziskemu binary and specialized riscof configuration for automated compliance verification.</p>\n","isPage":false,"text":"\nZisK includes comprehensive testing through the Riscof framework for RISC-V compliance:\n\nTest Generation: Docker-based riscof test generation\nELF Conversion: Convert test ELF files to ZisK ROMs\nExecution: Run tests through ziskemu\nVerification: Compare output against reference RISC-V implementation\n\nThe testing process uses the ziskemu binary and specialized riscof configuration for automated compliance verification.\n","title":"Testing and Verification","titles":["ZisK Overview","Developer Workflow"]},"134":{"href":"/protocols/overview#development-status","html":"\n<p>ZisK is currently under active development and is not yet ready for production use. The system is being refined and expanded to support more features and optimize performance.</p>\n<p>Key points about the current status:</p>\n<ul>\n<li>The software is not fully tested</li>\n<li>It is not recommended for production environments</li>\n<li>Additional functionalities and optimizations are planned for future releases</li>\n<li>Future updates may introduce breaking changes</li>\n</ul>\n<p>For the most up-to-date information on ZisK&#x27;s development status, refer to the official repository and documentation.</p>","isPage":false,"text":"\nZisK is currently under active development and is not yet ready for production use. The system is being refined and expanded to support more features and optimize performance.\nKey points about the current status:\n\nThe software is not fully tested\nIt is not recommended for production environments\nAdditional functionalities and optimizations are planned for future releases\nFuture updates may introduce breaking changes\n\nFor the most up-to-date information on ZisK&#x27;s development status, refer to the official repository and documentation.","title":"Development Status","titles":["ZisK Overview"]},"135":{"href":"/protocols/airs-building/overview#procotol-overview","html":"</header>","isPage":true,"text":"","title":"Procotol Overview","titles":[]},"136":{"href":"/protocols/execution/overview#procotol-overview","html":"</header>","isPage":true,"text":"","title":"Procotol Overview","titles":[]},"137":{"href":"/protocols/final-aggregation/overview#procotol-overview","html":"</header>","isPage":true,"text":"","title":"Procotol Overview","titles":[]},"138":{"href":"/protocols/witness-generation/overview#procotol-overview","html":"</header>","isPage":true,"text":"","title":"Procotol Overview","titles":[]}},"dirtCount":0,"index":[["≤",{"2":{"82":1}}],["knowledge",{"2":{"41":1,"73":1,"114":1,"115":3,"116":1,"121":1,"122":1,"131":1}}],["k",{"2":{"34":2,"35":2,"36":2,"39":1,"66":1,"88":1,"111":1}}],["keccak",{"0":{"89":1,"97":1},"1":{"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1},"2":{"13":1,"14":2,"15":3,"44":1,"89":2,"90":3,"92":5,"93":4,"97":2,"98":1,"102":4,"108":1,"109":1,"110":1,"111":3,"113":5,"114":5}}],["keccakf",{"2":{"11":5,"120":1}}],["key",{"0":{"45":1,"80":1,"95":1,"120":1},"1":{"46":1,"47":1,"48":1,"81":1,"82":1,"83":1,"96":1,"97":1,"98":1,"99":1},"2":{"7":2,"34":2,"35":2,"36":2,"115":1,"117":1,"124":1,"134":1}}],["+",{"2":{"26":1,"27":1,"32":6,"92":1}}],["89",{"2":{"32":1}}],["84854",{"2":{"32":1}}],["84328",{"2":{"32":1}}],["85308",{"2":{"32":1}}],["8565",{"2":{"31":1}}],["81182",{"2":{"32":1}}],["81",{"2":{"32":1}}],["81f7f0e4",{"2":{"20":1}}],["8",{"2":{"26":2,"27":1,"75":1,"77":2,"81":1,"92":2,"96":1}}],["`n`",{"2":{"26":2,"77":1,"92":2}}],["=n",{"2":{"77":1}}],["=",{"2":{"25":2,"26":15,"27":2,"32":2,"43":3,"44":29,"53":3,"72":4,"77":13,"78":7,"79":6,"92":7,"93":10,"94":6,"114":6}}],["9542",{"2":{"31":1}}],["91706ms",{"2":{"21":1,"36":1}}],["98211882",{"2":{"20":1,"31":1,"32":1}}],["✓",{"2":{"21":1,"35":2,"36":1}}],["77",{"2":{"32":3}}],["7",{"2":{"18":1,"83":1,"86":2,"99":1}}],["6765",{"2":{"86":2}}],["6ccf1fca",{"2":{"20":1,"31":1,"32":1}}],["6",{"2":{"18":1,"32":1}}],["64",{"2":{"1":1,"7":2,"10":2,"17":1,"75":1,"83":1}}],["50000000",{"2":{"110":1}}],["50th",{"2":{"86":1}}],["524",{"2":{"32":1}}],["5",{"2":{"18":1,"26":1,"44":1,"75":1,"78":1,"93":1,"101":1}}],["512",{"2":{"11":1}}],["4844",{"2":{"64":1}}],["4127",{"2":{"32":1}}],["4",{"2":{"18":1,"26":3,"27":3,"32":1,"67":1,"92":3,"114":1}}],["└──",{"2":{"18":2}}],["├──",{"2":{"18":3}}],["3832890881",{"2":{"86":1}}],["34",{"2":{"75":1}}],["33",{"2":{"31":1}}],["30",{"2":{"11":1,"85":1}}],["3",{"2":{"11":2,"18":1,"44":1,"75":1,"90":1}}],["320",{"2":{"32":2}}],["32",{"2":{"11":1,"26":3,"27":2,"75":1,"77":2,"83":3,"86":4,"90":1,"92":2,"97":1,"98":1,"99":2,"102":2,"114":4}}],["$path",{"2":{"10":1}}],["$home",{"2":{"10":10,"11":2,"12":1,"34":3,"35":4,"36":4,"39":4,"66":1,"88":1,"111":1}}],["~",{"2":{"10":2,"11":1}}],["v256",{"2":{"92":1}}],["v3",{"2":{"72":1}}],["virtual",{"2":{"47":1,"50":1,"115":1}}],["via",{"2":{"37":1}}],["vec",{"2":{"26":1,"27":1,"77":1,"92":1}}],["very",{"2":{"87":1}}],["verkey",{"2":{"39":1}}],["version",{"2":{"7":1,"8":1,"11":1,"26":1,"44":2,"69":1,"78":1,"93":2}}],["verifiable",{"2":{"62":1,"73":1,"121":1,"123":1}}],["verifies",{"2":{"51":1}}],["verifier",{"2":{"39":1}}],["verified",{"2":{"21":1,"35":2,"36":1}}],["verification",{"0":{"73":1,"114":1,"133":1},"2":{"1":1,"17":1,"36":1,"39":1,"51":2,"61":1,"62":1,"126":1,"128":1,"133":2}}],["verifyblock",{"2":{"73":1}}],["verifykey",{"2":{"8":1}}],["verify",{"0":{"22":1,"35":1,"39":1},"2":{"7":4,"10":1,"21":2,"22":2,"35":2,"36":3,"39":2,"41":1,"66":2,"69":1,"73":2,"88":2,"111":2,"114":5}}],["verifying",{"2":{"7":1,"34":1,"40":1,"73":1}}],["variable",{"2":{"37":1}}],["variables",{"2":{"10":1}}],["validity",{"2":{"61":1}}],["validators",{"2":{"41":1}}],["validates",{"2":{"40":1,"46":1,"51":1}}],["validation",{"0":{"46":1,"51":1},"2":{"40":1,"41":3,"43":4,"47":1,"50":2,"51":1,"58":1,"60":1,"64":1,"128":1}}],["val",{"2":{"26":2,"27":2,"92":2,"114":4}}],["values",{"2":{"27":1,"75":1,"77":1,"87":2,"90":1,"102":2,"109":1}}],["value",{"2":{"18":1,"26":3,"27":1,"79":2,"81":1,"92":1,"94":2,"96":1,"98":1}}],["vadcop",{"2":{"21":2,"22":1,"36":2,"39":7}}],["v",{"2":{"13":1,"19":1,"28":1,"115":1,"117":1,"118":1,"121":1,"122":1,"133":2}}],["vm",{"2":{"11":2,"117":2}}],["q",{"2":{"85":1,"101":1,"113":1}}],["quickstart",{"0":{"16":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1,"22":1},"2":{"25":1}}],["quot",{"2":{"10":6,"11":4,"25":2,"26":14,"43":2,"44":50,"53":2,"77":2,"78":12,"79":4,"85":2,"92":2,"93":16,"94":4,"101":2,"113":6,"114":8}}],["qemu",{"2":{"4":1,"17":1}}],["21",{"2":{"75":1}}],["25",{"2":{"37":1}}],["25gb",{"2":{"37":1}}],["256",{"0":{"97":1},"2":{"15":3,"18":1,"26":2,"89":2,"90":2,"92":2,"97":1,"98":1,"99":1,"102":4,"108":1}}],["24",{"2":{"32":1}}],["2701",{"2":{"32":1}}],["27",{"2":{"32":1}}],["233f1280",{"2":{"20":1}}],["237",{"2":{"10":1}}],["20th",{"2":{"86":1}}],["2021",{"2":{"26":1,"44":1,"78":1,"93":1}}],["20",{"2":{"11":2,"18":1,"79":1,"94":1,"102":1,"114":1}}],["2",{"0":{"9":1,"60":1},"1":{"10":1,"11":1},"2":{"11":2,"18":1,"32":2,"38":1,"44":1,"60":1,"75":1,"77":2,"83":1,"86":3,"93":1}}],["222052",{"2":{"32":2}}],["22",{"2":{"4":1,"17":1,"32":1}}],["language",{"2":{"118":1}}],["languages",{"2":{"115":1}}],["layer",{"0":{"60":1},"2":{"60":1}}],["launch",{"2":{"37":2}}],["large",{"2":{"29":1,"57":1,"58":1,"69":1,"87":2,"109":1,"110":1}}],["latency",{"2":{"115":1}}],["later",{"2":{"19":1,"36":1}}],["latest",{"2":{"8":1,"69":1}}],["level",{"0":{"117":1},"2":{"130":1}}],["len",{"2":{"77":1,"92":1}}],["lengths",{"2":{"81":1,"96":1}}],["length",{"2":{"77":1,"92":1}}],["le",{"2":{"26":1,"77":1,"79":1,"92":1,"94":1}}],["let",{"2":{"25":1,"26":6,"27":2,"43":3,"53":3,"77":8,"79":4,"92":5,"94":4}}],["lead",{"2":{"38":1}}],["learn",{"2":{"16":1}}],["least",{"2":{"11":1}}],["ltu",{"2":{"32":1}}],["lt",{"2":{"18":2,"21":3,"26":2,"27":1,"36":3,"37":7,"43":1,"77":2,"79":1,"85":1,"92":1,"94":1,"101":1,"113":1}}],["lookup",{"2":{"126":1}}],["low",{"2":{"77":3,"83":1,"86":2,"115":1}}],["london",{"2":{"64":1}}],["long",{"2":{"11":1}}],["local",{"2":{"38":1}}],["location",{"2":{"29":2,"34":1,"35":3,"36":3}}],["located",{"2":{"10":1,"34":1}}],["locate",{"2":{"10":1}}],["load",{"2":{"37":1,"128":1}}],["logical",{"2":{"126":1}}],["log=debug",{"2":{"70":1}}],["log",{"2":{"31":1}}],["line",{"2":{"132":1}}],["linux",{"2":{"1":1,"7":2,"10":2,"17":1}}],["little",{"2":{"79":1,"81":1,"94":1,"96":1}}],["limits",{"2":{"69":1}}],["limited",{"2":{"38":1}}],["like",{"2":{"14":1,"27":1,"28":1}}],["list",{"2":{"7":1,"10":2}}],["library",{"2":{"35":1,"36":1,"41":1,"47":1,"115":1,"118":1,"122":1,"130":1}}],["libzisk",{"2":{"10":1,"35":2,"36":2}}],["lib",{"2":{"10":3,"11":1}}],["libffi",{"2":{"5":1,"17":1}}],["libclang",{"2":{"4":1}}],["libopenmpi",{"2":{"4":1,"17":1}}],["libomp",{"2":{"4":1,"5":1,"17":2}}],["libpqxx",{"2":{"4":1,"17":1}}],["libsodium",{"2":{"4":1,"17":1}}],["libsecp256k1",{"2":{"4":1,"17":1}}],["libgrpc++",{"2":{"4":1,"17":1}}],["libgmp",{"2":{"4":1,"17":1}}],["zkevm",{"2":{"115":1}}],["zkvm",{"2":{"7":1,"19":2,"20":1,"21":2,"28":2,"29":2,"31":1,"32":1,"34":1,"35":1,"36":1,"58":1,"66":3,"67":1,"88":3,"110":1,"111":3,"115":2}}],["zeros",{"2":{"97":1,"98":1}}],["zero",{"2":{"41":1,"73":1,"83":1,"102":1,"114":2,"115":3,"116":1,"121":1,"122":1,"131":1}}],["ziskcommand",{"2":{"132":1}}],["ziskinst",{"2":{"118":1}}],["ziskrom",{"2":{"118":1,"122":1}}],["ziskverifier",{"2":{"73":1}}],["ziskos",{"2":{"25":3,"26":5,"27":4,"43":2,"44":1,"77":3,"78":1,"92":4,"93":1}}],["ziskemu",{"2":{"10":1,"20":1,"29":3,"31":2,"32":2,"58":1,"110":1,"122":1,"124":2,"133":2}}],["ziskup",{"2":{"7":2,"8":1,"17":2}}],["zisk",{"0":{"6":1,"8":1,"10":1,"12":1,"15":1,"109":1,"115":1},"1":{"7":1,"8":1,"9":1,"10":1,"11":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1},"2":{"0":2,"1":1,"7":8,"8":1,"10":25,"11":11,"12":4,"13":3,"14":2,"15":1,"16":2,"17":3,"18":2,"19":3,"20":3,"21":5,"22":1,"23":1,"25":3,"26":2,"27":1,"28":8,"29":7,"31":4,"32":4,"34":6,"35":6,"36":7,"37":5,"38":5,"39":9,"40":1,"41":1,"44":1,"53":1,"57":3,"58":3,"66":8,"67":2,"70":1,"73":3,"74":1,"75":2,"77":1,"78":1,"85":3,"88":9,"89":1,"90":2,"92":1,"93":1,"101":3,"110":1,"111":8,"114":1,"115":4,"116":1,"117":1,"118":1,"121":1,"122":1,"123":1,"124":2,"130":1,"131":1,"132":1,"133":2,"134":2}}],["date",{"2":{"134":1}}],["data",{"0":{"27":1,"50":1,"52":1,"53":1,"54":1},"1":{"53":1,"54":1},"2":{"11":2,"26":1,"27":7,"41":2,"46":1,"48":1,"50":1,"51":1,"53":5,"54":1,"56":6,"57":1,"69":2,"72":1,"75":1,"77":2,"90":1,"92":2,"122":1,"130":1}}],["due",{"2":{"102":1}}],["duration=0",{"2":{"31":1}}],["during",{"2":{"7":1,"10":1,"29":1,"54":1,"122":1}}],["d",{"2":{"38":1}}],["dynamically",{"2":{"37":1}}],["docker",{"2":{"133":1}}],["documentation",{"2":{"134":1}}],["document",{"2":{"23":1}}],["double",{"2":{"37":1}}],["doubling",{"2":{"13":1,"15":1}}],["done",{"2":{"34":1,"53":1}}],["dbl",{"2":{"15":1}}],["division",{"2":{"127":1}}],["divides",{"2":{"124":1}}],["div",{"2":{"119":1}}],["dir",{"2":{"79":7,"94":7}}],["directories",{"2":{"79":1,"94":1}}],["directory",{"2":{"10":2,"11":4,"18":2,"19":1,"21":1,"28":2,"34":3,"35":1,"36":2,"39":1,"79":3,"94":3}}],["directly",{"2":{"38":1}}],["different",{"2":{"47":1,"64":3,"65":1,"102":1,"113":1,"115":1,"117":1,"122":1,"123":1}}],["disputed",{"2":{"60":1}}],["distribution",{"2":{"37":1}}],["disk",{"2":{"11":1}}],["digest",{"2":{"26":3,"114":2}}],["demonstrating",{"2":{"105":1}}],["demonstrate",{"2":{"62":1}}],["demonstrates",{"2":{"40":1,"73":1,"74":1,"88":1,"89":1,"114":1}}],["designed",{"2":{"115":1}}],["deserialization",{"2":{"50":1}}],["deserializes",{"2":{"50":1}}],["deserialize",{"2":{"43":1}}],["described",{"2":{"38":1}}],["determineforkspec",{"2":{"72":1}}],["determines",{"2":{"36":1}}],["detailed",{"2":{"70":1,"122":1}}],["details",{"2":{"21":1,"31":1,"32":1}}],["def",{"2":{"113":1,"114":1}}],["define",{"2":{"79":1,"94":1}}],["definitionsziskemuziskemurisc",{"2":{"118":1}}],["definitions",{"2":{"32":2,"118":2,"124":2}}],["defaults",{"2":{"34":1,"35":2,"36":2}}],["default",{"2":{"7":2,"26":1,"39":1,"44":2,"78":1,"79":1,"85":1,"93":1,"94":1,"101":1}}],["debug",{"0":{"70":1},"2":{"28":1,"70":1}}],["dedicated",{"2":{"13":1}}],["delete",{"2":{"12":1}}],["dependency",{"2":{"25":1}}],["dependencies",{"0":{"3":1,"120":1},"1":{"4":1,"5":1},"2":{"4":1,"5":1,"10":1,"14":1,"17":1,"25":1,"26":1,"44":1,"69":1,"78":1,"93":1,"124":1}}],["depending",{"2":{"11":1}}],["developer",{"0":{"131":1},"1":{"132":1,"133":1}}],["developers",{"2":{"115":2,"131":1}}],["developmentemulator",{"2":{"132":1}}],["development",{"0":{"132":1,"134":1},"2":{"117":1,"134":2}}],["dev",{"2":{"4":10,"17":9}}],["|",{"2":{"7":1,"11":1,"17":1}}],["0u64",{"2":{"77":1}}],["0u8",{"2":{"26":1,"92":1}}],["06",{"2":{"32":1}}],["01",{"2":{"32":1}}],["00",{"2":{"32":2}}],["00005",{"2":{"32":1}}],["000008",{"2":{"32":1}}],["00008",{"2":{"32":1}}],["00004",{"2":{"32":2}}],["00002",{"2":{"32":1}}],["0000",{"2":{"31":1}}],["0009",{"2":{"31":1}}],["03364a836774c72f4e354de924330fee6a41be68",{"2":{"44":5}}],["03",{"2":{"32":3}}],["05",{"2":{"32":1}}],["0c39c9b1",{"2":{"20":1}}],["0xffffffff",{"2":{"77":2}}],["0x233f1280",{"2":{"18":1}}],["0x1f142cac",{"2":{"18":1}}],["0x0c39c9b1",{"2":{"18":1}}],["0xabf6352a",{"2":{"18":1}}],["0x81f7f0e4",{"2":{"18":1}}],["0x6ccf1fca",{"2":{"18":1}}],["0xbd13089b",{"2":{"18":1}}],["0x98211882",{"2":{"18":1}}],["0xpolygonhermez",{"2":{"7":1,"10":1,"11":3,"17":1,"25":1,"26":1,"44":1,"78":1,"93":1}}],["0",{"2":{"18":1,"26":6,"27":1,"32":15,"44":4,"75":1,"77":3,"78":3,"83":1,"86":5,"92":2,"93":5,"99":1,"114":1}}],["04",{"2":{"4":1,"17":1}}],["1k",{"2":{"113":1}}],["1u64",{"2":{"77":1}}],["1559",{"2":{"64":1}}],["1625",{"2":{"32":1}}],["1600",{"2":{"15":1}}],["12586269025",{"2":{"86":1}}],["1270",{"2":{"32":1}}],["12",{"2":{"32":2}}],["1f142cac",{"2":{"20":1}}],["13774",{"2":{"32":1}}],["137198",{"2":{"32":1}}],["135563",{"2":{"32":1}}],["13",{"2":{"10":1,"75":1}}],["109",{"2":{"32":2}}],["101",{"2":{"32":1}}],["10568",{"2":{"32":1}}],["1000",{"2":{"113":2}}],["1000000000",{"2":{"58":1}}],["10000000000",{"2":{"29":1}}],["100000000",{"2":{"57":1}}],["1000000",{"2":{"32":1}}],["100",{"2":{"11":1,"113":3}}],["10",{"2":{"10":1,"26":1,"32":1}}],["1",{"0":{"7":1},"1":{"8":1},"2":{"18":1,"26":2,"32":2,"44":4,"75":2,"77":2,"78":2,"82":2,"83":1,"86":2,"93":2,"113":2}}],["14569",{"2":{"32":1}}],["14",{"2":{"5":1,"17":1}}],["hyperthreading",{"2":{"37":1}}],["header",{"2":{"51":3}}],["heap",{"2":{"11":1}}],["here",{"2":{"14":1}}],["how",{"0":{"14":1},"1":{"15":1},"2":{"16":1,"23":1,"28":1,"40":1,"74":1,"89":1}}],["hours",{"2":{"11":2}}],["homebrew",{"2":{"5":1}}],["handledmain",{"2":{"119":1}}],["handle",{"2":{"82":1,"122":1}}],["handles",{"2":{"82":1,"124":1,"126":1}}],["handling",{"0":{"81":1,"96":1},"2":{"41":1,"74":1,"81":1,"88":1,"96":1,"117":1,"127":1}}],["hard",{"2":{"47":1,"48":1,"64":1}}],["hardware",{"2":{"11":1}}],["has",{"2":{"37":1,"38":1,"108":1}}],["hashes",{"2":{"89":2,"90":1}}],["hasher",{"2":{"18":2,"19":1,"20":1,"21":2,"26":5,"28":2,"29":2,"31":1,"32":1,"34":1,"35":1,"36":1,"92":4,"97":1,"98":2,"114":3}}],["hash",{"0":{"98":1},"2":{"15":1,"18":2,"26":6,"27":2,"90":2,"92":6,"97":2,"98":3,"99":2,"102":2,"104":2,"105":1,"106":1,"113":1,"114":5}}],["hashing",{"2":{"14":1,"26":1,"89":1,"90":1,"92":1,"97":2,"105":1,"109":1}}],["have",{"2":{"5":1,"17":1,"64":1}}],["high",{"0":{"117":1},"2":{"77":3,"83":1,"86":2,"115":2}}],["highly",{"2":{"11":1}}],["higher",{"2":{"4":1,"5":1,"11":1,"17":2}}],["h",{"2":{"10":5}}],["https",{"2":{"7":1,"10":1,"11":3,"17":1,"25":1,"26":1,"44":6,"72":1,"78":1,"93":1}}],["mps",{"2":{"38":2}}],["mpirun",{"2":{"37":1,"67":1}}],["mpi",{"2":{"5":1,"10":1,"17":1,"37":1}}],["msteps",{"2":{"31":1}}],["m",{"2":{"31":3,"58":1}}],["might",{"2":{"29":1}}],["minimizes",{"2":{"115":1}}],["mining",{"2":{"105":1}}],["minor",{"2":{"25":1}}],["minutes",{"2":{"11":1}}],["merkle",{"2":{"54":2,"104":1}}],["memmemory",{"2":{"119":1}}],["mem",{"0":{"128":1},"2":{"32":2,"124":1}}],["mema",{"2":{"32":4}}],["memory",{"0":{"128":1},"2":{"11":2,"32":1,"37":4,"38":4,"58":1,"69":3,"108":1,"119":3,"124":1,"128":2,"129":2}}],["metrics",{"0":{"30":1,"31":1},"1":{"31":1,"32":1},"2":{"31":2,"58":1,"69":1}}],["mechanism",{"2":{"27":1}}],["message",{"2":{"21":1,"36":1,"37":1,"130":1}}],["mul",{"2":{"119":1}}],["multi",{"2":{"38":1,"121":1}}],["multiple",{"2":{"37":5,"38":1,"90":1,"120":1,"126":1}}],["multiplication",{"2":{"15":2,"127":1}}],["mut",{"2":{"26":3,"27":1,"77":2,"79":1,"92":4,"94":1}}],["must",{"2":{"5":1,"11":1,"34":1,"38":1,"53":1}}],["most",{"2":{"134":1}}],["monitor",{"2":{"69":1}}],["more",{"2":{"21":1,"38":1,"69":1,"87":2,"113":1,"114":1,"134":1}}],["mode",{"0":{"70":1},"2":{"70":1}}],["modifications",{"2":{"25":1}}],["modify",{"2":{"23":1,"25":2}}],["modular",{"2":{"15":1}}],["mod",{"2":{"15":1}}],["move",{"2":{"11":1}}],["mv",{"2":{"11":2}}],["mkdir",{"2":{"10":2,"11":1}}],["mathematical",{"2":{"118":1,"127":1}}],["matches",{"2":{"51":1,"69":2}}],["match",{"2":{"37":1,"77":1,"92":1}}],["making",{"2":{"115":1}}],["make",{"2":{"17":1,"38":1}}],["makefile",{"2":{"10":1}}],["managing",{"2":{"130":1}}],["managerstandalone",{"2":{"132":1}}],["management",{"0":{"128":1},"2":{"120":1,"129":1}}],["manages",{"2":{"13":1,"118":1,"124":1,"129":1}}],["many",{"2":{"37":1}}],["market",{"2":{"64":1}}],["mark",{"2":{"25":1,"26":1,"77":1,"92":1}}],["may",{"2":{"11":2,"69":2,"109":1,"134":1}}],["map",{"2":{"11":2,"44":1}}],["mapped",{"2":{"11":1}}],["max",{"2":{"11":5,"29":1,"57":2,"87":1,"109":1,"110":1}}],["macros",{"2":{"120":1}}],["machinepackageoperations",{"2":{"119":1}}],["machineszisk",{"2":{"118":1}}],["machines",{"0":{"125":1},"1":{"126":1,"127":1,"128":1,"129":1},"2":{"11":1,"117":1,"122":3,"123":2,"124":1,"130":1}}],["machine",{"0":{"119":1,"123":1,"124":1},"1":{"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1},"2":{"11":2,"47":1,"50":1,"115":1,"118":1,"124":1,"130":1}}],["macos",{"0":{"5":1},"2":{"1":2,"5":1,"17":4}}],["mainexecution",{"2":{"119":1}}],["mainnet",{"2":{"65":2,"72":1}}],["maintaining",{"2":{"41":1,"46":2}}],["main",{"0":{"43":1,"77":1,"92":1,"124":2},"2":{"7":1,"11":1,"17":1,"18":2,"25":4,"26":5,"32":1,"43":3,"77":4,"79":1,"92":4,"94":1,"122":1,"124":2}}],["join",{"2":{"79":1,"94":1}}],["just",{"2":{"28":1}}],["javascript",{"2":{"11":1}}],["js",{"2":{"11":5}}],["json",{"2":{"10":1,"22":2,"39":4,"115":1}}],["json3",{"2":{"4":1,"17":1}}],["jq",{"2":{"4":1,"5":1,"17":2}}],["n=2",{"2":{"102":1}}],["n=20",{"2":{"85":1,"86":1,"101":1,"102":1}}],["n=1",{"2":{"102":2}}],["n=5",{"2":{"101":1}}],["n=50",{"2":{"86":1}}],["n=30",{"2":{"85":1}}],["nth",{"2":{"74":2,"77":2}}],["nvidia",{"2":{"38":3}}],["num",{"2":{"37":7,"67":1}}],["numbers",{"2":{"75":1}}],["number",{"2":{"18":1,"26":1,"29":2,"37":6,"74":3,"75":1,"77":3,"86":2,"89":1,"92":1,"96":1,"108":1}}],["np",{"2":{"37":2,"67":1}}],["npm",{"2":{"11":2}}],["n",{"2":{"18":3,"26":4,"29":2,"58":1,"74":1,"77":5,"79":3,"81":1,"82":2,"87":2,"89":2,"92":3,"94":3,"96":1,"98":1,"102":1,"108":2,"109":1,"110":1,"113":2,"114":2}}],["network",{"2":{"69":1}}],["networks",{"2":{"65":2}}],["necessary",{"2":{"27":1,"41":1,"79":1,"94":1}}],["next",{"2":{"19":1}}],["new",{"2":{"18":4,"26":1,"43":2,"72":1,"79":1,"94":1,"97":1,"98":2,"114":1}}],["negative",{"2":{"15":2}}],["need",{"2":{"11":1,"21":1,"27":1,"34":1,"56":1}}],["needed",{"2":{"7":1}}],["nature",{"2":{"102":1}}],["native",{"2":{"18":1,"28":1}}],["na2",{"2":{"32":2}}],["na1",{"2":{"32":2}}],["named",{"2":{"18":1}}],["name",{"2":{"10":1,"18":2,"26":1,"44":1,"78":1,"79":3,"93":1,"94":3}}],["nasm",{"2":{"4":1,"5":1,"17":2}}],["nightly",{"2":{"7":1}}],["no",{"2":{"25":1,"26":1,"43":1,"46":1,"77":1,"92":1,"115":1}}],["nonces",{"2":{"54":1}}],["non",{"2":{"15":2}}],["none",{"2":{"7":1,"37":2,"67":1}}],["node",{"2":{"11":3,"56":1}}],["nodejs",{"2":{"11":1}}],["nokey",{"2":{"8":1}}],["not",{"2":{"1":1,"10":1,"17":1,"134":3}}],["note",{"2":{"1":2,"10":2,"11":3,"17":2,"21":1,"38":1}}],["nlohmann",{"2":{"4":1,"17":1}}],["emutrace",{"2":{"122":1}}],["emulationnocompleted",{"2":{"29":1}}],["emulation",{"2":{"29":1,"115":1,"122":1,"130":1}}],["emulator",{"2":{"7":1,"10":5,"20":1,"29":2,"118":2,"122":1}}],["eq",{"2":{"120":1}}],["equivalent",{"2":{"114":1}}],["edge",{"2":{"82":1}}],["edition",{"2":{"26":1,"44":1,"78":1,"93":1}}],["err",{"2":{"77":1,"92":1}}],["errors",{"2":{"38":1,"69":1}}],["error",{"2":{"10":2,"29":4,"81":1,"96":1}}],["eight",{"2":{"99":1,"102":1}}],["eip",{"2":{"64":2}}],["either",{"2":{"37":1}}],["evaluation",{"2":{"130":1}}],["evm",{"2":{"43":3,"44":1,"47":1,"50":1}}],["everything",{"2":{"21":1,"35":1}}],["eth",{"2":{"44":2,"58":1,"66":3,"67":1,"72":1}}],["ethevmconfig",{"2":{"43":2}}],["ethereum",{"0":{"40":1},"1":{"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1},"2":{"40":3,"41":4,"43":1,"44":2,"46":1,"47":3,"48":1,"50":1,"53":1,"56":2,"61":2,"64":1,"65":1,"73":1,"90":1}}],["etc",{"2":{"11":1,"32":1}}],["each",{"2":{"27":1,"37":2,"38":1,"75":1,"89":1,"97":2,"98":1,"99":1,"102":1,"108":1}}],["elf",{"2":{"19":3,"20":3,"21":5,"28":6,"29":4,"31":1,"32":1,"34":4,"35":3,"36":3,"58":1,"66":3,"67":1,"88":3,"110":1,"111":3,"117":1,"122":1,"133":2}}],["elliptic",{"2":{"14":1,"15":2}}],["efficient",{"2":{"37":1,"46":1,"87":1,"88":1,"97":1,"122":1,"124":1}}],["efficiently",{"2":{"14":1}}],["efficiency",{"2":{"13":1,"82":1}}],["ecall",{"2":{"13":1}}],["echo",{"2":{"10":2,"11":1}}],["exists",{"2":{"79":2,"94":2}}],["exec",{"2":{"44":2,"58":1,"66":3,"67":1}}],["executing",{"2":{"29":1,"40":1}}],["execution",{"0":{"32":1,"40":1,"121":1,"122":1},"1":{"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"122":1},"2":{"23":1,"29":1,"31":2,"32":1,"37":1,"38":2,"47":2,"51":1,"54":1,"58":1,"60":1,"62":1,"69":2,"70":1,"73":1,"109":1,"115":1,"117":1,"118":1,"123":1,"124":4,"130":1,"133":1}}],["executes",{"2":{"50":1,"51":1,"118":1,"122":1}}],["executed",{"2":{"11":1,"14":1,"38":1}}],["execute",{"0":{"20":1,"29":1,"57":1,"85":1,"101":1},"2":{"7":1,"19":1,"21":2,"29":1,"37":1,"116":1}}],["external",{"2":{"73":1,"120":1}}],["extern",{"2":{"43":1}}],["extension",{"2":{"19":1,"28":1,"126":1}}],["extend",{"2":{"15":1}}],["expanded",{"2":{"134":1}}],["explorers",{"2":{"56":1}}],["explains",{"2":{"23":1}}],["expected",{"0":{"86":1,"102":1},"2":{"69":1,"77":1,"92":1,"114":1}}],["expects",{"2":{"48":1}}],["expensive",{"2":{"13":1}}],["export",{"2":{"10":3,"11":1}}],["examples",{"2":{"64":1}}],["example",{"0":{"26":1,"40":1,"55":1,"74":1,"84":1,"89":1,"100":1},"1":{"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":2,"57":2,"58":2,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":2,"86":2,"87":1,"88":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":2,"102":2,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1},"2":{"10":1,"14":1,"18":3,"25":1,"26":1,"29":1,"36":1,"40":1,"41":1,"53":1,"72":1,"73":2,"74":1,"75":1,"77":1,"88":1,"89":1,"90":1,"92":1,"102":1,"103":1,"113":1,"114":1}}],["e",{"2":{"10":1,"18":1,"20":2,"21":3,"27":1,"29":3,"31":1,"32":1,"34":2,"35":2,"36":2,"39":1,"58":1,"66":3,"67":1,"88":3,"110":1,"111":3}}],["endian",{"2":{"79":1,"81":1,"94":1,"96":1,"99":1,"114":1}}],["enabling",{"2":{"73":1}}],["enable",{"2":{"38":2,"61":1}}],["enabled",{"2":{"37":1,"38":2}}],["enables",{"2":{"37":1,"115":1,"122":1,"130":1}}],["environments",{"2":{"106":1,"114":1,"134":1}}],["environment",{"2":{"10":1,"37":1}}],["encounter",{"2":{"10":1,"29":1}}],["entrypoint",{"2":{"25":1,"26":1,"43":1,"77":1,"92":1}}],["entry",{"2":{"7":1,"25":1,"26":1,"77":1,"92":1}}],["ensures",{"2":{"14":1,"128":1}}],["ensure",{"2":{"2":1,"10":1,"20":1,"37":1,"38":1,"69":2,"79":1,"94":1,"123":1}}],["essential",{"2":{"4":1,"17":1}}],["util",{"2":{"120":1}}],["utilities",{"2":{"118":1}}],["utils",{"2":{"4":1,"17":1}}],["uint256",{"2":{"73":1}}],["up",{"2":{"50":1,"134":1}}],["updates",{"2":{"134":1}}],["update",{"2":{"8":1,"26":1,"69":1,"92":1,"98":1,"114":1}}],["updating",{"0":{"8":1}}],["u32",{"2":{"26":1,"27":2,"77":2,"92":1}}],["u64",{"2":{"26":3,"77":5,"79":1,"81":1,"92":3,"94":1,"96":1}}],["u8",{"2":{"26":2,"27":1,"77":1,"92":1}}],["u",{"2":{"22":1,"39":2}}],["understanding",{"2":{"88":1}}],["under",{"2":{"38":1,"134":1}}],["unwrap",{"2":{"26":1,"43":2,"53":2}}],["uninstall",{"0":{"12":1},"2":{"12":2}}],["unknown",{"2":{"7":2}}],["usual",{"2":{"32":2}}],["usage",{"0":{"112":1},"1":{"113":1,"114":1},"2":{"11":1,"108":1}}],["usr",{"2":{"10":3}}],["useful",{"2":{"103":1}}],["uses",{"2":{"46":1,"47":1,"69":1,"81":1,"82":2,"96":1,"97":2,"99":1,"123":1,"124":1,"133":1}}],["used",{"2":{"11":1,"13":1,"14":4,"18":1,"19":1,"37":2,"90":1}}],["use",{"0":{"59":1,"103":1},"1":{"60":1,"61":1,"62":1,"104":1,"105":1,"106":1},"2":{"8":1,"21":1,"22":1,"26":4,"27":2,"29":1,"34":1,"37":1,"39":1,"43":4,"53":2,"67":1,"77":2,"79":3,"92":4,"94":3,"134":1}}],["using",{"2":{"7":2,"10":1,"13":1,"16":1,"17":1,"18":1,"19":2,"20":3,"21":1,"25":1,"27":1,"28":3,"29":2,"31":1,"32":1,"36":1,"37":2,"38":2,"40":1,"41":1,"50":1,"69":1,"74":2,"87":1,"89":1,"90":1,"122":1}}],["uuid",{"2":{"4":1,"17":1}}],["ubuntu",{"0":{"4":1},"2":{"4":1,"17":2}}],["x00",{"2":{"114":1}}],["xor",{"2":{"32":1,"119":1,"126":1}}],["x",{"2":{"11":1,"32":3,"37":2,"58":1,"67":1}}],["x27",{"2":{"10":2,"25":1,"26":6,"27":2,"41":1,"69":1,"72":2,"79":2,"85":6,"90":1,"92":4,"94":2,"101":6,"113":10,"114":4,"134":1}}],["xz",{"2":{"4":1,"17":1}}],["x86",{"2":{"1":1,"7":2,"10":2,"17":1}}],["your",{"2":{"7":1,"10":1,"17":1,"18":2,"27":2,"28":2,"29":1,"72":1}}],["you",{"2":{"5":1,"7":4,"8":1,"10":3,"11":1,"14":1,"16":1,"17":1,"18":1,"20":2,"21":4,"27":1,"28":2,"29":4,"31":1,"32":1,"34":1,"35":2,"36":1,"38":2,"56":1,"114":1}}],["y",{"2":{"4":1,"17":1,"21":1,"36":2,"66":1,"67":1,"88":1,"111":1}}],["yet",{"2":{"1":1,"17":1,"134":1}}],["i+4",{"2":{"114":1}}],["io",{"2":{"72":1,"79":2,"94":2}}],["immediately",{"2":{"36":1}}],["import",{"2":{"85":1,"101":1,"113":1,"114":1}}],["implements",{"2":{"124":1}}],["implementation",{"2":{"87":1,"133":1}}],["implement",{"2":{"14":1}}],["improves",{"2":{"37":1}}],["improve",{"2":{"13":1,"37":1,"38":1}}],["identity",{"2":{"118":1}}],["ideas",{"0":{"71":1},"1":{"72":1,"73":1}}],["id",{"2":{"27":1,"72":1,"130":1}}],["i",{"2":{"11":4,"20":3,"21":2,"26":4,"27":4,"29":4,"31":2,"32":2,"35":2,"36":2,"57":2,"58":3,"66":2,"67":1,"70":1,"77":2,"85":2,"88":2,"92":4,"101":2,"110":1,"111":2,"114":2}}],["iterations",{"2":{"96":1,"98":1,"102":1,"108":1,"113":2}}],["iteration",{"2":{"89":2,"97":2,"98":1,"108":1,"110":1,"113":1}}],["iterative",{"2":{"74":1,"75":1,"82":1,"87":1,"88":1,"90":1,"102":1,"105":1}}],["its",{"2":{"20":1}}],["it",{"2":{"10":1,"16":1,"27":1,"28":2,"34":1,"36":1,"38":4,"40":1,"90":1,"115":1,"124":1,"134":1}}],["if",{"2":{"7":2,"10":3,"21":1,"27":2,"29":1,"35":1,"36":1,"37":2,"77":1,"79":1,"94":1}}],["involving",{"2":{"115":1}}],["invalid",{"2":{"77":1,"81":1,"92":1,"96":1}}],["initialize",{"2":{"98":1}}],["initializes",{"2":{"83":1}}],["initial",{"2":{"97":1}}],["infrastructure",{"2":{"117":1}}],["infura",{"2":{"72":1}}],["information",{"2":{"41":1,"48":1,"61":1,"70":1,"134":1}}],["info",{"2":{"21":3,"35":3,"36":3}}],["indicates",{"2":{"36":1}}],["including",{"2":{"127":1,"129":1}}],["include",{"2":{"7":1,"10":6,"31":1,"32":1,"115":1}}],["includes",{"2":{"7":1,"81":1,"96":1,"133":1}}],["increasing",{"2":{"37":1,"109":1}}],["increased",{"2":{"69":1}}],["increases",{"2":{"37":1}}],["increase",{"2":{"27":1,"29":1,"57":1,"58":1,"110":1}}],["introduce",{"2":{"134":1}}],["int",{"2":{"114":1}}],["into",{"2":{"26":5,"27":2,"28":1,"37":1,"43":1,"77":1,"83":1,"92":2,"99":1,"115":1,"116":1,"117":1,"121":1,"122":1,"124":1}}],["interact",{"2":{"131":1}}],["interactions",{"2":{"124":1}}],["intermediate",{"2":{"122":1}}],["interconnected",{"2":{"116":1,"123":1}}],["internal",{"2":{"115":1}}],["interoperability",{"2":{"61":1}}],["interface",{"2":{"37":1,"115":1,"132":1}}],["integer",{"2":{"77":1,"92":1}}],["integers",{"2":{"15":2}}],["integrates",{"2":{"120":1}}],["integrated",{"2":{"13":1}}],["integration",{"0":{"47":1,"71":1,"72":1},"1":{"72":1,"73":1},"2":{"41":1,"115":1}}],["intensive",{"2":{"11":1,"13":1,"58":1}}],["inputs",{"2":{"20":1,"29":1,"39":2,"113":1}}],["input",{"0":{"27":1,"48":1,"52":1,"53":1,"81":1,"96":1,"113":1},"1":{"53":1,"54":1},"2":{"18":3,"20":4,"21":4,"26":7,"27":10,"29":4,"31":2,"32":2,"35":3,"36":3,"41":1,"43":4,"48":1,"50":1,"53":6,"56":2,"57":3,"58":3,"66":2,"67":1,"69":1,"70":1,"72":1,"74":1,"75":1,"77":12,"79":3,"81":3,"85":7,"88":3,"89":1,"90":1,"92":12,"94":3,"96":3,"97":1,"101":7,"110":1,"111":2,"113":9,"117":1}}],["instances",{"2":{"122":2,"130":1}}],["instance",{"2":{"97":1,"117":1}}],["installercargo",{"2":{"132":1}}],["installer",{"2":{"132":1}}],["installed",{"2":{"0":1,"2":1,"5":1,"10":2,"17":1,"38":1}}],["installs",{"2":{"10":1}}],["install",{"2":{"4":2,"5":1,"7":4,"10":3,"11":1,"16":1,"17":4}}],["installing",{"0":{"3":1,"6":1},"1":{"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"11":1}}],["installation",{"0":{"0":1,"17":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1},"2":{"7":1,"8":1,"10":1,"38":1}}],["instead",{"2":{"41":1}}],["instructs",{"2":{"36":1}}],["instructions",{"2":{"38":1}}],["instruction",{"2":{"13":1,"118":1,"129":1}}],["in",{"0":{"15":1},"2":{"7":1,"10":1,"11":5,"13":1,"14":1,"15":1,"16":1,"17":1,"18":2,"19":1,"21":1,"23":1,"26":2,"27":5,"28":3,"29":1,"31":3,"32":3,"34":2,"35":1,"36":2,"37":1,"38":4,"39":2,"41":1,"51":1,"70":1,"77":2,"79":1,"90":3,"92":2,"94":1,"106":1,"114":3}}],["issues",{"0":{"69":1},"2":{"69":1}}],["is",{"2":{"4":1,"5":1,"10":1,"11":2,"15":1,"17":2,"18":2,"19":2,"21":1,"25":1,"28":2,"34":1,"35":3,"36":4,"37":2,"38":5,"41":1,"51":1,"75":2,"86":2,"87":1,"90":2,"103":1,"108":1,"109":1,"115":1,"117":1,"134":5}}],["rpc",{"2":{"56":1,"115":1}}],["rotations",{"2":{"126":1}}],["rollup",{"2":{"60":1}}],["root",{"2":{"51":2}}],["robust",{"2":{"47":1}}],["roadmap",{"2":{"41":1}}],["roughly",{"2":{"37":1}}],["roms",{"2":{"133":1}}],["romread",{"2":{"119":1}}],["rom",{"0":{"129":2},"2":{"10":1,"21":1,"31":1,"34":1,"66":1,"88":1,"111":1}}],["r2",{"2":{"32":1}}],["r1",{"2":{"32":1}}],["rs",{"0":{"43":1,"77":1,"79":1,"92":1,"94":1},"2":{"18":4,"25":1,"26":1,"79":1,"94":1}}],["riscof",{"2":{"133":3}}],["risc",{"2":{"13":1,"19":1,"28":1,"115":1,"117":1,"121":1,"122":1,"133":2}}],["riscv2zisk",{"2":{"10":1,"122":1}}],["riscv64ima",{"2":{"7":1,"19":1,"20":1,"21":2,"28":2,"29":2,"31":1,"32":1,"34":1,"35":1,"36":1,"58":1,"66":3,"67":1,"88":3,"110":1,"111":3}}],["rf",{"2":{"12":1}}],["rm",{"2":{"12":1}}],["range",{"2":{"114":2,"127":1,"128":1}}],["ram",{"2":{"11":1}}],["raw",{"2":{"7":1,"17":1}}],["r",{"2":{"10":2,"11":2,"32":1}}],["rules",{"2":{"48":1,"62":1,"64":1,"69":1}}],["rule",{"2":{"37":1}}],["runner",{"2":{"124":1}}],["running",{"0":{"55":1,"84":1,"100":1},"1":{"56":1,"57":1,"58":1,"85":1,"86":1,"101":1,"102":1},"2":{"37":3,"38":1,"87":1,"114":1}}],["runtime",{"2":{"38":1}}],["run",{"2":{"7":1,"8":1,"11":2,"16":1,"17":1,"18":2,"20":2,"26":1,"28":1,"29":2,"31":2,"32":2,"36":1,"37":1,"44":1,"57":3,"58":4,"70":2,"78":1,"85":4,"93":1,"101":4,"102":1,"133":1}}],["rustup",{"2":{"7":1,"10":1,"12":1}}],["rust",{"2":{"2":1,"7":1,"10":4,"17":1,"23":1,"25":2,"28":2,"70":1,"115":1}}],["refined",{"2":{"134":1}}],["reference",{"2":{"133":1}}],["refer",{"2":{"21":1,"134":1}}],["remains",{"2":{"108":1}}],["remaining",{"2":{"39":1,"77":1,"83":1}}],["receives",{"2":{"124":1}}],["recursive",{"2":{"87":1}}],["recompilation",{"2":{"115":1}}],["recommended",{"0":{"7":1},"1":{"8":1},"2":{"0":1,"38":2,"134":1}}],["records",{"2":{"62":1}}],["revealing",{"2":{"115":1}}],["rev",{"2":{"44":5}}],["real",{"2":{"41":1,"73":1}}],["reading",{"2":{"75":1,"90":1}}],["reads",{"2":{"32":5,"81":1,"96":1}}],["ready",{"2":{"28":1,"47":1,"134":1}}],["read",{"2":{"26":4,"27":4,"43":1,"77":3,"92":4,"129":1}}],["returns",{"2":{"73":1,"74":1}}],["return",{"2":{"72":1,"73":1,"77":1,"114":1}}],["reth",{"0":{"47":1},"2":{"41":1,"43":3,"44":10,"47":1,"53":1,"69":1}}],["retrieve",{"2":{"27":1}}],["requiring",{"2":{"40":1}}],["require",{"2":{"37":1,"69":2,"87":1,"109":1}}],["requirement",{"2":{"37":1}}],["requirements",{"0":{"1":1},"1":{"2":1},"2":{"11":1,"46":1,"60":1}}],["requires",{"2":{"27":1,"29":1,"37":1}}],["required",{"0":{"2":1},"2":{"4":2,"5":2,"7":1,"10":2,"11":1,"17":3,"39":1,"46":1,"115":1}}],["regardless",{"2":{"108":1}}],["regulatory",{"2":{"62":1}}],["regular",{"2":{"28":1}}],["register",{"2":{"32":1,"119":1}}],["relay",{"2":{"61":1}}],["related",{"2":{"31":1,"32":1,"114":1}}],["releases",{"2":{"134":1}}],["release",{"2":{"10":5,"11":2,"19":2,"20":2,"21":2,"28":3,"29":4,"31":2,"32":2,"34":1,"35":1,"36":1,"37":1,"38":1,"57":3,"58":3,"66":3,"67":2,"70":1,"85":3,"88":3,"101":3,"110":1,"111":3}}],["reduces",{"2":{"46":1}}],["reduce",{"2":{"21":1,"60":1}}],["research",{"0":{"106":1}}],["result",{"2":{"77":4,"79":1,"83":1,"89":1,"94":1,"102":1,"114":2}}],["results",{"0":{"86":1,"102":1,"114":1},"2":{"75":1,"90":1,"114":2}}],["resulting",{"2":{"19":1,"28":1}}],["resolve",{"2":{"10":1,"29":1}}],["representation",{"2":{"122":1}}],["representations",{"2":{"99":1}}],["representing",{"2":{"81":1,"96":1,"102":1}}],["replace",{"2":{"38":1}}],["replacing",{"2":{"14":1}}],["repositories",{"2":{"11":1}}],["repository",{"2":{"10":1,"134":1}}],["reinstall",{"2":{"5":1,"17":1}}],["re",{"2":{"1":1,"17":1}}],["wb",{"2":{"85":1,"101":1,"113":1}}],["wrapping",{"2":{"75":1,"77":1,"82":1}}],["writing",{"0":{"23":1},"1":{"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1},"2":{"21":1,"25":2}}],["writes",{"2":{"32":5}}],["write",{"2":{"14":1,"23":1,"26":1,"27":3,"53":2,"79":3,"85":1,"92":1,"94":3,"101":1,"113":1}}],["would",{"2":{"53":1}}],["world",{"2":{"41":1,"73":1}}],["workflow",{"0":{"131":1},"1":{"132":1,"133":1},"2":{"124":1,"131":1}}],["workload",{"2":{"37":1}}],["work",{"0":{"14":1,"105":1},"1":{"15":1},"2":{"116":1}}],["working",{"2":{"1":1,"17":1}}],["w2",{"2":{"32":1}}],["w1",{"2":{"32":1}}],["was",{"2":{"21":1,"36":1}}],["want",{"2":{"7":2}}],["w",{"2":{"11":1,"32":2,"35":2,"36":2}}],["while",{"2":{"46":1}}],["which",{"2":{"7":1,"19":1,"35":1,"37":1,"38":1,"48":1,"130":1}}],["when",{"2":{"38":1,"87":1}}],["where",{"2":{"10":1,"38":1,"75":1,"89":1,"97":1,"108":1}}],["widely",{"2":{"90":1}}],["witnesswitness",{"2":{"118":1}}],["witnesszisk",{"2":{"118":1}}],["witnesses",{"2":{"116":1}}],["witness",{"0":{"54":1},"2":{"10":1,"35":4,"36":4,"41":1,"43":1,"46":2,"48":1,"50":1,"51":2,"53":3,"54":1,"56":1,"72":4,"115":1,"117":1,"120":1,"122":3,"124":2,"130":1}}],["withdrawals",{"2":{"64":1}}],["without",{"2":{"19":1,"28":1,"40":1,"46":1,"115":1}}],["within",{"2":{"13":1,"14":1,"40":1}}],["with",{"2":{"4":1,"5":1,"11":1,"14":1,"17":1,"18":2,"20":1,"21":2,"25":1,"28":1,"29":1,"37":3,"38":4,"39":2,"41":2,"50":1,"57":1,"58":2,"69":2,"74":1,"75":1,"79":1,"85":2,"88":1,"94":1,"97":1,"98":2,"101":2,"113":1,"114":1,"115":1,"124":1,"127":1,"130":1,"131":1}}],["will",{"2":{"7":1,"11":2,"16":1,"18":2,"19":1,"20":1,"21":1,"28":1,"31":1,"32":1,"34":1,"35":1,"37":1,"38":2,"87":1,"102":2}}],["web3",{"0":{"72":1},"2":{"72":4}}],["were",{"2":{"35":2}}],["well",{"2":{"21":1}}],["we",{"2":{"1":1,"14":1,"17":1}}],["air",{"2":{"117":1,"122":2,"130":1}}],["about",{"2":{"134":1}}],["abstracts",{"2":{"115":1,"131":1}}],["abf6352a",{"2":{"20":1}}],["automated",{"2":{"133":1}}],["automatically",{"2":{"79":1,"94":1}}],["audit",{"2":{"62":1}}],["auditing",{"0":{"62":1}}],["await",{"2":{"72":2}}],["avoid",{"2":{"38":1}}],["available",{"0":{"15":1},"2":{"15":1,"37":2,"38":2}}],["aggregated",{"2":{"36":1}}],["aggregation",{"2":{"36":1}}],["against",{"2":{"133":1}}],["again",{"2":{"10":1}}],["after",{"2":{"34":1,"36":1,"98":1,"102":1}}],["algebraic",{"2":{"122":1}}],["algorithm",{"2":{"15":1,"105":1}}],["also",{"2":{"36":1,"38":1}}],["align",{"2":{"32":1}}],["alternatively",{"2":{"20":1,"29":1}}],["allows",{"2":{"109":1}}],["allowing",{"2":{"37":1}}],["alloy",{"2":{"44":1}}],["allocation",{"2":{"69":1}}],["alloc",{"2":{"43":2}}],["all",{"2":{"4":1,"5":1,"10":1,"11":1,"17":1,"35":3,"36":1,"37":1,"40":1,"51":1,"79":2,"94":2,"97":1,"123":1,"130":1}}],["arbitrary",{"2":{"115":1}}],["arith",{"0":{"127":1},"2":{"120":1}}],["aritharithmetic",{"2":{"119":1}}],["arithmetic",{"0":{"127":1},"2":{"75":1,"119":1,"120":1,"127":1}}],["arith256",{"2":{"15":2}}],["arc",{"2":{"43":3}}],["architecture",{"0":{"49":1,"116":1,"117":1,"123":1},"1":{"50":1,"51":1,"117":1,"118":1,"119":1,"120":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1},"2":{"18":1,"28":2,"38":1,"115":1}}],["arguments",{"2":{"37":1}}],["array",{"2":{"26":2,"27":1,"77":1,"92":1,"98":1}}],["area",{"2":{"32":1}}],["areas",{"2":{"11":1,"117":1}}],["are",{"2":{"1":1,"2":1,"10":2,"13":1,"14":3,"17":1,"35":1,"39":1,"122":1,"123":1,"134":1}}],["assembly",{"2":{"124":1}}],["associated",{"2":{"39":1}}],["aspects",{"2":{"123":1}}],["async",{"2":{"72":1}}],["as",{"2":{"13":2,"14":1,"18":2,"25":2,"26":3,"27":1,"31":1,"32":1,"37":1,"38":1,"74":1,"75":1,"77":6,"89":1,"90":1,"92":3,"97":1,"113":1,"115":1,"130":1}}],["asm",{"2":{"10":5,"124":1}}],["active",{"2":{"134":1}}],["actively",{"2":{"1":1,"17":1}}],["activate",{"2":{"38":1}}],["account",{"2":{"54":2}}],["accommodate",{"2":{"37":1}}],["access",{"0":{"129":1},"2":{"119":2,"129":1}}],["accessible",{"2":{"115":1}}],["accessed",{"2":{"54":2}}],["accepts",{"2":{"27":1}}],["accelerate",{"2":{"13":1}}],["across",{"2":{"37":2,"115":1,"118":1}}],["adherence",{"2":{"62":1}}],["advanced",{"0":{"63":1,"112":1},"1":{"64":1,"65":1,"113":1,"114":1},"2":{"41":1}}],["adjust",{"2":{"11":1}}],["address",{"2":{"104":1,"128":1}}],["addresses",{"2":{"90":1}}],["additional",{"2":{"115":1,"134":1}}],["addition",{"2":{"13":1,"15":3,"127":1}}],["add",{"2":{"1":1,"10":1,"15":1,"17":1,"25":2,"32":1,"77":1,"82":1,"119":1}}],["at",{"2":{"11":1,"34":1,"38":1}}],["append",{"2":{"114":1}}],["appears",{"2":{"10":1}}],["applies",{"2":{"124":1}}],["applied",{"2":{"102":1}}],["application",{"0":{"72":1}}],["applications",{"0":{"104":1},"2":{"41":1,"61":1,"73":1,"90":1,"114":1}}],["apply",{"2":{"48":1}}],["appropriate",{"2":{"69":1}}],["approach",{"2":{"37":1,"74":1,"82":1,"87":1}}],["approximately",{"2":{"11":1,"37":1}}],["apt",{"2":{"4":1,"17":1}}],["amp",{"2":{"10":2,"11":4,"26":2,"27":1,"43":1,"53":1,"77":2,"79":4,"92":3,"94":4}}],["analysis",{"2":{"106":2}}],["any",{"2":{"28":1,"34":1,"79":1,"94":1}}],["an",{"2":{"7":1,"14":1,"18":1,"19":1,"28":1,"35":1,"40":1,"74":1,"81":1,"82":1,"96":1,"97":1,"115":1}}],["and",{"0":{"30":1,"57":1,"62":1,"85":1,"101":1,"130":1,"133":1},"1":{"31":1,"32":1},"2":{"0":1,"1":2,"7":2,"8":1,"10":1,"11":3,"13":3,"14":2,"15":1,"16":1,"17":2,"18":1,"20":2,"21":5,"26":2,"27":2,"29":2,"31":1,"34":1,"35":2,"36":2,"37":1,"38":1,"40":1,"48":1,"50":1,"53":1,"54":1,"58":1,"73":1,"74":1,"77":2,"79":3,"83":1,"88":1,"89":1,"90":1,"92":2,"94":3,"114":1,"115":2,"116":1,"117":4,"118":5,"119":2,"123":1,"124":3,"126":2,"127":3,"128":1,"132":2,"133":1,"134":5}}],["a",{"0":{"18":1},"2":{"7":1,"11":4,"15":1,"16":1,"18":4,"20":1,"21":5,"22":1,"23":1,"25":4,"26":3,"27":3,"29":3,"32":2,"34":1,"35":1,"36":5,"37":4,"39":1,"41":1,"53":1,"56":1,"66":1,"67":1,"74":1,"75":1,"77":6,"79":1,"81":1,"88":2,"89":1,"90":1,"92":3,"94":1,"96":1,"97":1,"98":2,"111":1,"114":1,"115":2,"121":1,"123":1,"131":1}}],["objects",{"2":{"122":1}}],["obtain",{"2":{"56":1}}],["ok",{"2":{"77":1,"79":1,"92":1,"94":1}}],["occurred",{"2":{"62":1}}],["other",{"2":{"53":1,"61":1,"114":1}}],["outside",{"2":{"53":1}}],["out",{"2":{"38":1}}],["outputs",{"2":{"77":1,"99":2}}],["outputting",{"2":{"75":1,"90":1}}],["output",{"0":{"27":1,"83":1,"99":1},"2":{"7":1,"18":1,"20":1,"26":3,"27":5,"31":1,"32":1,"35":1,"36":2,"77":5,"79":7,"83":3,"86":6,"88":1,"92":3,"94":7,"98":1,"99":1,"102":1,"114":1,"133":1}}],["omp",{"2":{"37":3,"67":1}}],["overall",{"2":{"118":1,"124":1}}],["overhead",{"2":{"115":1}}],["overflow",{"2":{"74":1,"82":1,"127":1}}],["overview",{"0":{"41":1,"75":1,"90":1,"115":1,"116":1,"135":1,"136":1,"137":1,"138":1},"1":{"116":1,"117":2,"118":2,"119":2,"120":2,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1}}],["over",{"2":{"15":4}}],["o",{"2":{"11":1,"21":1,"36":2,"66":1,"67":1,"82":2,"88":1,"108":1,"111":1}}],["old",{"2":{"11":3}}],["official",{"2":{"134":1}}],["offloading",{"2":{"13":1}}],["of",{"0":{"105":1,"114":1},"2":{"10":1,"11":4,"14":1,"15":2,"18":1,"26":1,"27":2,"29":4,"35":1,"36":1,"37":9,"38":1,"41":2,"50":1,"53":2,"60":1,"64":1,"73":2,"75":2,"87":1,"89":1,"90":1,"92":1,"96":1,"97":1,"98":1,"102":3,"106":1,"108":2,"109":1,"114":1,"115":4,"116":1,"117":1,"123":2,"131":1}}],["optimize",{"2":{"134":1}}],["optimized",{"2":{"38":1,"109":1,"115":2}}],["optimizations",{"0":{"109":1},"2":{"58":1,"134":1}}],["optional",{"2":{"34":1,"35":2,"36":2,"39":1}}],["options=",{"2":{"11":1}}],["option",{"0":{"7":1,"9":1},"1":{"8":1,"10":1,"11":1},"2":{"7":1,"38":1}}],["op",{"2":{"32":7}}],["ops",{"2":{"32":8}}],["opcodes",{"2":{"32":2}}],["opcode",{"2":{"32":1}}],["operation",{"2":{"108":1,"117":1,"122":1,"126":1,"128":2,"130":2}}],["operations",{"0":{"126":1,"127":1},"2":{"13":1,"14":3,"90":1,"106":1,"115":1,"118":1,"119":3,"120":2,"123":1,"124":1,"126":3,"127":1,"129":1}}],["operating",{"2":{"13":1,"37":1}}],["open",{"2":{"5":1,"17":1,"85":1,"101":1,"113":1,"115":1}}],["openssl",{"2":{"5":1,"17":1}}],["openmpi",{"2":{"4":2,"10":1,"17":2}}],["ones",{"2":{"75":1}}],["once",{"2":{"21":1,"28":1}}],["only",{"2":{"7":2,"38":1,"41":1,"119":1,"129":1}}],["on",{"2":{"1":1,"11":1,"17":1,"18":1,"28":2,"37":2,"38":3,"60":1,"61":1,"73":1,"134":1}}],["orchestrates",{"2":{"124":1}}],["orchestrator",{"2":{"118":1,"130":1}}],["organized",{"2":{"117":1}}],["order",{"2":{"81":1,"96":1,"99":1}}],["or",{"2":{"0":1,"4":1,"5":1,"8":1,"11":2,"17":2,"20":2,"21":2,"23":1,"31":2,"32":2,"34":2,"37":2,"53":1,"115":1,"119":1,"126":1}}],["grpc",{"2":{"115":1}}],["gracefully",{"2":{"82":1}}],["goldilocks",{"2":{"120":1}}],["got",{"2":{"77":1,"92":1}}],["goerli",{"2":{"65":1}}],["goes",{"2":{"21":1}}],["guarantees",{"2":{"46":1}}],["guide",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1},"2":{"16":1,"21":1,"38":1}}],["global",{"2":{"35":2}}],["glcstvfy",{"2":{"35":1}}],["gpus",{"2":{"38":2}}],["gpu",{"0":{"38":1},"2":{"21":1,"38":11}}],["gb",{"2":{"11":2,"37":1}}],["gt",{"2":{"10":4,"18":2,"26":2,"27":1,"35":1,"37":7,"43":1,"77":6,"79":2,"92":3,"94":2}}],["gcc",{"2":{"10":1}}],["g",{"2":{"10":1,"18":1,"27":1}}],["gnu",{"2":{"7":2,"10":2}}],["general",{"2":{"37":1}}],["generally",{"2":{"37":1}}],["generatewitness",{"2":{"72":1}}],["generated",{"2":{"19":1,"21":1,"22":1,"28":2,"34":1,"36":3,"37":1,"38":1,"39":2,"56":1}}],["generates",{"2":{"11":1,"18":1,"21":1,"79":1,"94":1,"118":1}}],["generate",{"0":{"36":1,"66":1,"88":1,"111":1},"1":{"67":1},"2":{"11":4,"18":1,"19":2,"21":3,"34":1,"36":1,"60":1,"66":1,"88":1,"111":1,"115":1,"116":1}}],["generating",{"2":{"7":1,"20":1,"21":2,"29":1,"34":1,"35":1,"36":1,"72":1,"90":1,"122":1}}],["generation",{"0":{"37":1,"38":1,"67":1,"113":1},"2":{"1":1,"17":1,"21":1,"38":3,"66":1,"69":1,"72":1,"88":1,"104":1,"111":1,"115":2,"117":1,"118":2,"122":2,"124":2,"131":1,"133":2}}],["gen",{"2":{"11":2}}],["getblock",{"2":{"72":1}}],["get",{"2":{"4":1,"17":1,"26":1,"31":1,"32":1,"98":1}}],["gitignore",{"2":{"18":1}}],["github",{"2":{"10":1,"11":3,"25":1,"26":1,"44":6,"78":1,"93":1}}],["githubusercontent",{"2":{"7":1,"17":1}}],["git",{"2":{"2":1,"10":2,"11":5,"25":2,"26":2,"44":7,"78":2,"93":2}}],["p3",{"2":{"120":2}}],["pipeline",{"0":{"121":1},"1":{"122":1},"2":{"115":1,"121":1}}],["pilpolynomial",{"2":{"118":1}}],["pilzisk",{"2":{"118":1}}],["pilout",{"2":{"11":3}}],["pil",{"2":{"11":9,"124":1,"130":1}}],["pil2",{"2":{"11":9}}],["puzzles",{"2":{"105":1}}],["publics",{"2":{"22":1,"39":1}}],["public",{"2":{"18":8,"27":1,"39":2}}],["python3",{"2":{"85":1,"101":1}}],["polygon",{"2":{"115":1}}],["potential",{"2":{"82":1}}],["power",{"2":{"73":1,"114":1}}],["points",{"2":{"134":1}}],["point",{"2":{"15":2,"25":1,"26":1,"77":1,"92":1}}],["performs",{"2":{"89":1,"97":1}}],["perform",{"2":{"40":1}}],["performed",{"2":{"36":1}}],["performance",{"0":{"31":1,"58":1,"87":1,"107":1},"1":{"108":1,"109":1,"110":1},"2":{"31":1,"37":2,"38":3,"58":1,"106":1,"109":1,"115":2,"134":1}}],["per",{"2":{"31":1,"32":1,"37":3}}],["permutation",{"2":{"13":1,"15":1}}],["pack",{"2":{"85":1,"101":1,"113":1}}],["packageziskemuemulator",{"2":{"132":1}}],["package",{"2":{"26":1,"44":1,"78":1,"93":1,"124":1,"132":1}}],["packages",{"0":{"119":1},"2":{"11":1}}],["panic",{"2":{"77":1,"92":1}}],["passing",{"2":{"37":1,"130":1}}],["parsing",{"2":{"81":1,"96":1}}],["particularly",{"2":{"90":1,"103":1}}],["part",{"2":{"90":1}}],["parts",{"2":{"77":1,"83":1}}],["party",{"2":{"14":2}}],["parallel",{"0":{"67":1},"2":{"67":1,"117":1,"122":1,"124":1,"130":1}}],["paradigmxyz",{"2":{"44":5}}],["parameters",{"2":{"50":1}}],["parameter",{"2":{"27":1,"109":1}}],["parent",{"2":{"11":1,"79":1,"94":1}}],["patterns",{"2":{"90":1,"105":1,"109":1,"119":1}}],["patched",{"2":{"14":1}}],["patch",{"2":{"14":2}}],["path",{"2":{"10":2,"39":1,"79":5,"94":5}}],["path=$c",{"2":{"10":1}}],["path=",{"2":{"10":2}}],["planned",{"2":{"134":1}}],["platforms",{"2":{"1":1,"17":1}}],["plonky3",{"2":{"115":1}}],["please",{"2":{"11":1}}],["p",{"2":{"10":2,"11":1,"22":1,"37":2,"39":2}}],["pkgconf",{"2":{"5":1,"17":1}}],["print",{"2":{"114":1}}],["println",{"2":{"43":1}}],["private",{"2":{"65":1}}],["primitives",{"2":{"14":1,"44":3}}],["primarily",{"2":{"14":1}}],["predictable",{"2":{"109":1}}],["precomp",{"2":{"120":3}}],["precompiles",{"0":{"13":1,"14":1,"15":1},"1":{"14":1,"15":2},"2":{"10":1,"11":3,"13":3,"14":2,"15":1,"120":1}}],["preceding",{"2":{"75":1}}],["prepareblockinput",{"2":{"72":1}}],["prerequisites",{"0":{"56":1}}],["prevents",{"2":{"37":1}}],["previously",{"2":{"21":1}}],["previous",{"2":{"11":2,"89":1,"97":1}}],["pre",{"2":{"13":1,"56":1}}],["prefer",{"2":{"10":1}}],["prebuilt",{"0":{"7":1},"1":{"8":1},"2":{"0":1,"10":1}}],["procotol",{"0":{"135":1,"136":1,"137":1,"138":1}}],["processdata",{"2":{"118":1}}],["processing",{"2":{"47":1,"67":1,"117":2,"122":1,"124":1,"130":1}}],["processes",{"2":{"37":12,"38":1,"122":1,"124":1,"127":1}}],["processors",{"2":{"13":1}}],["process",{"0":{"51":1,"98":1},"2":{"11":2,"31":1,"36":1,"37":5,"38":2,"66":1,"88":1,"111":1,"123":1,"133":1}}],["prototypes",{"2":{"105":1}}],["protobuf",{"2":{"4":1,"5":1,"17":2}}],["properly",{"2":{"56":1,"123":1}}],["proper",{"2":{"50":1,"88":1}}],["proportionally",{"2":{"37":1}}],["produce",{"2":{"102":1,"122":1}}],["produced",{"2":{"36":1}}],["production",{"2":{"28":1,"47":1,"134":2}}],["provable",{"2":{"115":1,"116":1}}],["provides",{"2":{"39":1,"88":1,"114":1,"130":1}}],["provide",{"2":{"27":1}}],["providing",{"2":{"21":1,"115":1}}],["provingkey",{"2":{"8":1,"11":3,"34":2,"35":2,"36":2,"39":3,"66":1,"88":1,"111":1}}],["proving",{"2":{"7":1,"13":1,"21":1,"34":2,"35":2,"36":2}}],["prover",{"2":{"115":1}}],["prove",{"0":{"21":1,"33":1},"1":{"34":1,"35":1,"36":1,"37":1,"38":1,"39":1},"2":{"21":2,"36":1,"39":1,"46":1,"60":1,"61":1,"62":1,"66":1,"67":1,"88":1,"111":1,"115":1}}],["projectscli",{"2":{"132":1}}],["projects",{"2":{"28":1}}],["project",{"0":{"18":1},"2":{"18":2,"72":1}}],["program",{"0":{"26":1,"34":1,"42":1,"76":1,"91":1},"1":{"43":1,"44":1,"77":1,"78":1,"79":1,"92":1,"93":1,"94":1},"2":{"16":1,"18":2,"19":2,"20":2,"21":2,"23":1,"25":3,"26":1,"27":2,"28":4,"29":3,"31":1,"32":1,"34":3,"40":1,"41":1,"48":1,"57":1,"66":1,"74":1,"75":1,"77":1,"85":1,"88":2,"89":1,"92":1,"101":1,"111":1,"115":1,"122":2,"123":1,"129":2}}],["programs",{"0":{"23":1},"1":{"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1},"2":{"7":1,"13":1,"14":2,"21":1,"115":2,"116":1,"118":1,"121":1}}],["prompt",{"2":{"8":1}}],["prompted",{"2":{"7":1}}],["proofman",{"2":{"11":5,"21":2,"36":2,"120":3,"122":1}}],["proofs",{"2":{"7":2,"21":1,"22":1,"36":3,"37":1,"38":1,"39":1,"41":1,"54":4,"60":2,"73":2,"115":1,"116":1,"121":1,"122":1}}],["proof",{"0":{"22":1,"36":1,"37":1,"38":1,"39":1,"66":1,"67":1,"88":1,"105":1,"111":1},"1":{"67":1},"2":{"1":1,"17":1,"19":1,"20":1,"21":9,"22":4,"29":1,"34":1,"35":1,"36":7,"37":2,"38":3,"39":7,"66":3,"67":1,"69":1,"73":3,"88":3,"111":3,"115":1,"118":1,"120":1,"122":1,"131":1}}],["central",{"2":{"124":1,"130":1}}],["custom",{"0":{"113":1},"2":{"65":1,"72":1,"85":4,"101":4}}],["customize",{"2":{"65":1}}],["cuda",{"2":{"38":2}}],["current",{"2":{"18":1,"98":1,"134":1}}],["currently",{"2":{"1":1,"15":1,"17":1,"134":1}}],["curve",{"2":{"14":1,"15":4}}],["curl",{"2":{"4":1,"5":1,"7":1,"17":3}}],["cstrvrfy",{"2":{"35":2}}],["cycles",{"2":{"31":1}}],["crypto",{"2":{"114":1}}],["cryptographic",{"0":{"106":1},"2":{"14":1,"15":2,"46":1,"90":2,"106":1,"114":1,"115":1,"120":1}}],["cross",{"0":{"61":1},"2":{"61":1}}],["creation",{"2":{"117":1,"122":1}}],["creating",{"0":{"53":1},"2":{"53":1}}],["creates",{"2":{"18":1,"97":1}}],["create",{"0":{"18":1},"2":{"11":1,"16":1,"18":1,"62":1,"79":4,"85":2,"94":4,"98":1,"101":2,"113":7,"116":1}}],["created",{"2":{"11":2}}],["crucial",{"2":{"41":1}}],["crate",{"2":{"14":1,"25":1,"27":1,"43":1,"90":1,"97":1,"109":1}}],["crates",{"2":{"14":2}}],["chunk",{"2":{"99":1,"114":2}}],["chunks",{"2":{"26":1,"27":2,"92":1,"99":1,"114":5}}],["channel",{"2":{"106":1}}],["changes",{"0":{"25":1},"2":{"25":1,"34":1,"134":1}}],["chains",{"2":{"61":1}}],["chainspec",{"2":{"43":3,"44":1,"65":3}}],["chain",{"0":{"61":1,"65":1,"98":1},"2":{"43":3,"50":2,"60":1,"61":1,"64":1,"73":1,"106":1,"114":3}}],["checks",{"2":{"127":1}}],["checking",{"2":{"35":1}}],["check",{"2":{"11":1}}],["choose",{"2":{"7":2}}],["cpus",{"2":{"11":1}}],["cpu",{"2":{"11":1,"37":1,"38":1}}],["cp",{"2":{"10":4,"11":1}}],["cplus",{"2":{"10":1}}],["collectively",{"2":{"123":1}}],["coordinator",{"2":{"122":1,"124":1}}],["coordinates",{"2":{"118":1,"124":1,"130":1}}],["coordinationzisk",{"2":{"118":1}}],["coordination",{"0":{"130":1},"2":{"117":1,"119":1,"122":1}}],["counter",{"2":{"129":1}}],["counts",{"2":{"110":1,"113":1}}],["count",{"2":{"108":1}}],["count=655300",{"2":{"11":2}}],["corefundamental",{"2":{"118":1}}],["corezisk",{"2":{"118":1}}],["core",{"0":{"118":1,"132":1},"2":{"117":2,"124":2}}],["cores",{"2":{"37":4}}],["corresponding",{"2":{"56":1}}],["correct",{"2":{"35":1,"60":1}}],["correctness",{"2":{"20":1,"115":1,"128":1}}],["cost",{"2":{"32":12,"108":1}}],["costly",{"2":{"14":1}}],["code",{"0":{"25":1,"42":1,"76":1,"91":1},"1":{"43":1,"44":1,"77":1,"78":1,"79":1,"92":1,"93":1,"94":1},"2":{"25":1,"54":2}}],["conversion",{"2":{"122":1,"133":1}}],["converted",{"2":{"122":1}}],["converts",{"2":{"50":1,"115":1,"122":1}}],["converting",{"2":{"26":1}}],["convert",{"2":{"26":1,"77":2,"92":2,"114":1,"116":1,"133":1}}],["concurrency",{"2":{"37":1}}],["concurrently",{"2":{"37":1}}],["concurrent",{"0":{"37":1},"2":{"21":1,"38":3,"69":1,"130":1}}],["contract",{"0":{"73":1},"2":{"54":1,"73":1}}],["controlled",{"2":{"106":1}}],["control",{"2":{"38":1}}],["contains",{"2":{"41":1,"48":1,"54":1,"118":1}}],["containing",{"2":{"18":1,"34":1,"35":1,"36":2,"48":1,"56":1}}],["content",{"2":{"34":1}}],["consists",{"2":{"116":1}}],["consistent",{"2":{"51":1}}],["consistency",{"2":{"51":1,"128":1}}],["considerations",{"0":{"87":1,"107":1,"110":1},"1":{"108":1,"109":1,"110":1}}],["consider",{"2":{"27":1,"58":1,"69":1,"87":1}}],["const",{"2":{"72":4,"79":2,"94":2}}],["constrained",{"2":{"123":1}}],["constraint",{"2":{"115":1,"117":1,"124":1,"130":2}}],["constraintsrom",{"2":{"119":1}}],["constraintsexecutorexecutorexecution",{"2":{"118":1}}],["constraints",{"0":{"35":1},"2":{"34":1,"35":5,"66":2,"88":2,"111":2,"127":1,"129":1}}],["construction",{"2":{"15":1,"104":1}}],["constants",{"2":{"79":1,"94":1}}],["constant",{"2":{"11":1,"108":1}}],["configurations",{"2":{"65":2}}],["configuration",{"0":{"63":1},"1":{"64":1,"65":1},"2":{"50":2,"65":1,"133":1}}],["config",{"2":{"43":2}}],["confirms",{"2":{"51":1}}],["confirm",{"2":{"10":1}}],["conf",{"2":{"11":1}}],["copyb",{"2":{"32":1}}],["copy",{"2":{"10":2,"11":1}}],["combination",{"2":{"53":1}}],["combining",{"2":{"38":1}}],["combine",{"2":{"38":1}}],["compare",{"2":{"133":1}}],["compatible",{"2":{"69":1}}],["compatibility",{"2":{"47":1,"69":1}}],["compat",{"2":{"44":2}}],["comprehensive",{"2":{"133":1}}],["compression",{"2":{"60":1}}],["compress",{"2":{"15":1}}],["compliance",{"0":{"62":1},"2":{"62":1,"133":2}}],["complexities",{"2":{"115":1}}],["complexity",{"0":{"108":1},"2":{"82":2,"108":1,"131":1}}],["complex",{"2":{"27":1,"41":1,"67":1,"69":1,"114":1}}],["complete",{"2":{"11":2,"21":1,"46":1}}],["componentpackagepurposezisk",{"2":{"118":1}}],["component",{"2":{"41":1,"118":1,"122":1,"130":1}}],["components",{"0":{"118":1},"2":{"11":1,"116":1,"118":1,"120":1,"126":1}}],["compute",{"2":{"26":1,"74":1,"77":1,"89":1,"92":1}}],["computes",{"2":{"18":1,"26":1,"77":1,"92":1}}],["computational",{"0":{"108":1},"2":{"108":1,"115":1}}],["computationally",{"2":{"13":1,"58":1}}],["computation",{"0":{"82":1,"97":1},"2":{"41":1,"73":1,"75":1,"87":1,"88":1,"90":2,"97":1,"102":1,"104":1,"114":1,"120":1}}],["computations",{"2":{"13":1,"114":2,"115":1,"127":1}}],["compiling",{"2":{"28":1}}],["compilation",{"2":{"7":1,"10":1}}],["compiled",{"2":{"29":1}}],["compiles",{"2":{"28":1}}],["compile",{"2":{"7":1,"11":1,"28":3,"38":2}}],["compiler",{"2":{"4":1,"11":3,"17":1}}],["com",{"2":{"7":1,"10":1,"11":3,"17":1,"25":1,"26":1,"44":6,"78":1,"93":1}}],["communicate",{"2":{"130":1}}],["communication",{"0":{"130":1},"2":{"118":1,"122":1}}],["commands",{"2":{"11":2}}],["command",{"2":{"7":1,"10":2,"11":4,"17":1,"18":3,"19":2,"21":2,"22":1,"28":2,"29":2,"31":1,"32":1,"34":2,"35":1,"36":3,"37":2,"38":1,"39":2}}],["commonshared",{"2":{"118":1}}],["commonzisk",{"2":{"118":1}}],["commonly",{"2":{"14":1}}],["common",{"0":{"69":1},"2":{"4":1,"17":1,"118":1,"120":1}}],["c",{"2":{"10":2,"85":1,"101":1}}],["cd",{"2":{"10":1,"11":3,"18":1}}],["clean",{"2":{"34":2,"97":1}}],["clocks",{"2":{"31":1}}],["clock",{"2":{"31":1}}],["clone",{"2":{"10":2,"11":4,"43":1}}],["client",{"2":{"41":1,"47":1}}],["cli",{"2":{"7":1,"28":1,"115":1}}],["clang",{"2":{"4":1}}],["cache",{"2":{"34":2}}],["cases",{"0":{"59":1,"103":1},"1":{"60":1,"61":1,"62":1,"104":1,"105":1,"106":1},"2":{"82":1}}],["case",{"2":{"28":1}}],["calculations",{"2":{"104":1}}],["calculate",{"2":{"18":1}}],["calldata",{"2":{"73":1}}],["call",{"2":{"27":1}}],["calls",{"2":{"13":1,"14":1,"56":1}}],["cargo",{"0":{"44":1,"78":1,"93":1},"2":{"7":2,"10":5,"11":3,"18":4,"19":2,"20":1,"21":3,"22":1,"25":1,"26":1,"28":4,"29":2,"31":2,"32":2,"34":2,"35":1,"36":2,"37":1,"38":1,"39":2,"57":3,"58":2,"66":3,"67":1,"70":1,"85":3,"88":3,"101":3,"111":3}}],["cancun",{"2":{"64":1}}],["can",{"2":{"0":1,"7":1,"8":1,"11":1,"14":2,"18":1,"20":2,"21":2,"28":1,"29":3,"31":1,"32":1,"35":2,"36":1,"37":2,"38":4,"41":1,"58":1,"114":1}}],["sm",{"0":{"124":1,"126":1,"127":1,"128":1,"129":1},"2":{"122":1,"124":2}}],["smsm",{"2":{"119":5}}],["smart",{"0":{"73":1},"2":{"54":1}}],["smaller",{"2":{"37":1}}],["slots",{"2":{"54":1,"83":1}}],["synchronization",{"2":{"130":1}}],["sync",{"2":{"43":1}}],["syscall",{"2":{"15":4}}],["sysctl",{"2":{"11":2}}],["systems",{"2":{"120":1}}],["system",{"0":{"1":1,"116":1,"117":1},"1":{"2":1,"117":1,"118":1,"119":1,"120":1},"2":{"4":1,"10":1,"13":3,"14":1,"17":1,"37":2,"117":3,"118":1,"120":1,"122":1,"123":1,"130":1,"134":1}}],["satisfaction",{"2":{"115":1}}],["satisfied",{"2":{"35":1}}],["same",{"2":{"37":1}}],["scalable",{"2":{"73":1}}],["scalability",{"2":{"37":1,"38":1,"41":1}}],["scaling",{"0":{"60":1,"110":1}}],["schedule",{"2":{"37":1}}],["script",{"2":{"10":1,"79":1,"94":1}}],["s",{"2":{"13":1,"25":1,"31":1,"38":1,"39":1,"41":1,"69":1,"90":1,"134":1}}],["side",{"2":{"106":1}}],["significantly",{"2":{"38":1}}],["signextend",{"2":{"32":2}}],["single",{"2":{"29":1,"37":1,"113":1}}],["since",{"2":{"27":1}}],["size=131072",{"2":{"11":2}}],["size=230000",{"2":{"11":1}}],["size",{"2":{"11":1}}],["simultaneously",{"2":{"122":1}}],["simulations",{"0":{"105":1}}],["simple",{"2":{"16":1}}],["simply",{"2":{"8":1}}],["similar",{"2":{"7":1,"21":1,"25":1,"28":1,"35":1,"36":1}}],["specialized",{"0":{"125":1},"1":{"126":1,"127":1,"128":1,"129":1},"2":{"117":1,"120":1,"122":1,"124":1,"133":1}}],["specifications",{"0":{"64":1,"65":1},"2":{"64":1}}],["specification",{"2":{"50":2,"53":1,"56":1,"69":1}}],["specific",{"0":{"109":1},"2":{"37":1,"62":1}}],["specifies",{"2":{"34":2,"35":4,"36":4,"37":1,"39":1,"48":1}}],["specify",{"2":{"8":1,"20":1,"29":2,"39":1}}],["spec",{"2":{"43":6,"53":3}}],["splits",{"2":{"83":1,"99":1}}],["splitting",{"2":{"37":1}}],["split",{"2":{"26":1,"27":2,"92":1}}],["sponge",{"2":{"15":1}}],["space",{"2":{"11":4,"82":1}}],["sdk",{"2":{"10":2,"18":2}}],["src",{"2":{"10":2,"11":4,"18":1}}],["software",{"2":{"134":1}}],["sophisticated",{"2":{"113":1,"115":1}}],["solid",{"2":{"88":1}}],["some",{"2":{"35":1}}],["so",{"2":{"10":1,"35":2,"36":2}}],["source",{"0":{"9":1},"1":{"10":1,"11":1},"2":{"0":1,"10":3,"38":1,"56":1,"115":1}}],["struct",{"2":{"85":2,"101":2,"113":2}}],["structured",{"2":{"131":1}}],["structure",{"0":{"48":1},"2":{"18":1,"41":1,"69":1,"75":1,"88":1}}],["str",{"2":{"79":2,"94":2}}],["storage",{"2":{"46":1,"54":2,"60":1}}],["store",{"2":{"27":1,"128":1}}],["stop",{"2":{"21":1,"36":1}}],["step",{"2":{"18":1,"19":1,"31":2,"32":1,"69":1}}],["stepsbinary",{"2":{"119":1}}],["steps=85309",{"2":{"31":1}}],["steps",{"2":{"10":2,"25":1,"29":3,"32":13,"38":1,"57":2,"58":1,"87":2,"109":1,"110":1}}],["stages",{"0":{"122":1}}],["stage",{"2":{"121":1}}],["standalone",{"2":{"115":1}}],["standardized",{"2":{"115":1}}],["standard",{"2":{"25":1,"37":1,"66":1,"88":1,"99":1,"111":1}}],["start",{"2":{"114":1}}],["starts",{"2":{"97":1}}],["starkinfo",{"2":{"39":1}}],["status",{"0":{"134":1},"2":{"134":2}}],["stats",{"2":{"32":1}}],["statistics",{"0":{"30":1,"32":1},"1":{"31":1,"32":1},"2":{"32":2,"58":1}}],["statelessinput",{"2":{"43":2,"48":1,"53":3}}],["stateless",{"0":{"46":1},"2":{"40":1,"41":2,"43":3,"44":1,"50":1,"53":3}}],["state",{"0":{"119":1,"123":1,"124":1,"125":1},"1":{"124":1,"125":1,"126":2,"127":2,"128":2,"129":2,"130":1},"2":{"11":1,"40":2,"41":2,"46":3,"51":2,"54":2,"60":1,"61":2,"115":1,"117":1,"118":2,"119":1,"122":3,"123":2,"124":2,"130":2}}],["stable",{"2":{"7":1}}],["std",{"2":{"11":1,"26":1,"53":1,"77":1,"79":3,"92":1,"94":3}}],["stddef",{"2":{"10":4}}],["stderr",{"2":{"10":1}}],["skip",{"2":{"8":1}}],["shifts",{"2":{"119":1,"126":1}}],["showcases",{"2":{"41":1,"75":1,"90":1}}],["show",{"2":{"25":1}}],["should",{"2":{"7":1,"36":2,"37":1}}],["shanghai",{"2":{"53":1,"64":1}}],["sha2",{"2":{"26":2}}],["sha256",{"2":{"15":1,"26":2}}],["sha256f",{"2":{"10":2,"11":5,"120":1}}],["sha",{"2":{"15":1,"18":3,"19":1,"20":1,"21":2,"26":4,"28":2,"29":2,"31":1,"32":1,"34":1,"35":1,"36":1,"90":1}}],["sh",{"2":{"7":1,"17":1}}],["sum",{"2":{"75":1}}],["summary",{"2":{"15":1}}],["sufficient",{"2":{"37":1,"38":1}}],["successful",{"2":{"36":1,"43":1}}],["successfully",{"2":{"21":1,"35":1,"36":1}}],["such",{"2":{"13":1,"31":1,"32":1}}],["sure",{"2":{"17":1,"38":1}}],["subtraction",{"2":{"127":1}}],["subsets",{"2":{"37":1}}],["subsequent",{"2":{"11":1}}],["sub",{"2":{"13":1,"36":1,"119":1,"126":1}}],["sudo",{"2":{"4":1,"11":2,"17":1}}],["support",{"2":{"7":1,"10":1,"21":1,"38":4,"69":1,"115":1,"134":1}}],["supported",{"2":{"1":1,"17":1}}],["supports",{"2":{"1":1,"17":1,"47":1}}],["segments",{"2":{"124":1}}],["several",{"2":{"116":1,"117":1}}],["self",{"2":{"79":2,"94":2}}],["selection",{"2":{"8":1}}],["select",{"2":{"7":1}}],["sequential",{"2":{"90":1,"97":1,"109":1}}],["sequentially",{"2":{"26":1,"89":1,"92":1,"102":1}}],["sequence",{"2":{"75":1}}],["sepolia",{"2":{"65":1}}],["series",{"2":{"75":1}}],["serialize",{"2":{"53":1}}],["serialized",{"2":{"48":1,"53":3}}],["serialization",{"2":{"27":1,"41":1,"69":1}}],["serde",{"2":{"44":5}}],["serves",{"2":{"130":1}}],["servers",{"2":{"37":2}}],["server",{"2":{"37":2,"38":2}}],["service",{"2":{"38":1,"115":1}}],["securely",{"2":{"61":1}}],["security",{"2":{"46":1}}],["sec",{"2":{"32":20}}],["secp256k1",{"2":{"13":1,"15":4}}],["section",{"2":{"11":2,"25":1,"38":2}}],["sets",{"2":{"37":1,"50":1,"83":1,"99":1}}],["set",{"2":{"10":1,"26":2,"27":2,"39":1,"77":5,"92":2,"118":1}}],["setup",{"0":{"11":1,"24":1,"34":1},"1":{"25":1,"26":1,"27":1},"2":{"0":1,"7":1,"8":1,"10":1,"11":5,"21":3,"34":3,"38":1,"66":2,"88":2,"111":2}}],["see",{"2":{"1":1,"14":1,"17":1,"21":1,"35":1,"36":1}}],["fs",{"2":{"53":1,"79":2,"94":2}}],["flexible",{"2":{"115":1}}],["flow",{"0":{"50":1},"2":{"130":1}}],["flag",{"2":{"20":2,"21":2,"28":1,"29":3,"31":1,"32":2,"87":1}}],["flags",{"2":{"8":1,"39":1,"69":1}}],["family",{"2":{"90":1}}],["false",{"2":{"44":1}}],["fatal",{"2":{"10":1}}],["fundamental",{"2":{"117":1}}],["functionalities",{"2":{"134":1}}],["functionality",{"2":{"1":1,"17":1,"118":1}}],["function",{"2":{"15":2,"25":1,"26":1,"27":4,"72":1,"73":1,"77":1,"90":1,"92":1}}],["functions",{"2":{"13":1}}],["future",{"2":{"115":1,"134":2}}],["fully",{"2":{"115":1,"134":1}}],["full",{"2":{"40":1,"41":1,"46":1,"47":1}}],["fetch",{"2":{"129":1}}],["fee",{"2":{"64":1}}],["features",{"0":{"45":1,"80":1,"95":1},"1":{"46":1,"47":1,"48":1,"81":1,"82":1,"83":1,"96":1,"97":1,"98":1,"99":1},"2":{"38":1,"44":4,"93":1,"115":1,"134":1}}],["few",{"2":{"25":1}}],["fn",{"2":{"26":1,"43":1,"77":2,"79":1,"92":1,"94":1}}],["f",{"2":{"13":1,"15":3,"113":2}}],["framework",{"2":{"133":1}}],["fraud",{"2":{"60":1}}],["freq=3051",{"2":{"31":1}}],["frequently",{"2":{"13":1}}],["free",{"2":{"11":1}}],["from",{"0":{"9":1},"1":{"10":1,"11":1},"2":{"0":2,"7":1,"10":3,"11":1,"13":1,"15":1,"25":1,"26":2,"27":2,"38":1,"56":1,"72":1,"75":1,"77":2,"90":1,"92":2,"102":1,"114":2,"124":1,"130":1}}],["field",{"2":{"120":3}}],["fib",{"2":{"77":3}}],["fibonacci",{"0":{"74":1,"82":1},"1":{"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1},"2":{"74":2,"75":1,"77":5,"78":2,"83":1,"86":2,"88":3}}],["finite",{"2":{"120":1}}],["finalize",{"2":{"26":1,"92":1,"98":1}}],["final",{"2":{"21":1,"22":1,"36":2,"39":8,"51":1,"98":1,"102":1,"130":1}}],["find",{"2":{"10":1}}],["first",{"2":{"18":1,"34":1}}],["fixed",{"2":{"11":9,"108":1}}],["filename",{"2":{"113":2}}],["file",{"2":{"10":2,"11":1,"18":3,"19":2,"20":2,"21":2,"25":2,"27":3,"28":4,"29":2,"34":2,"35":2,"36":2,"39":1,"56":1,"79":11,"94":11,"113":1}}],["files",{"2":{"0":1,"10":1,"11":3,"21":2,"34":2,"39":2,"113":1,"117":1,"122":1,"133":1}}],["foldhash",{"2":{"44":1}}],["folder",{"2":{"11":3,"12":1}}],["followed",{"2":{"15":2}}],["follow",{"2":{"10":2,"25":1,"38":2,"66":1,"88":1,"111":1}}],["following",{"2":{"2":1,"7":2,"10":1,"11":2,"17":1,"18":2,"22":1,"25":1,"29":1,"34":1,"36":1,"37":1,"39":1}}],["foundation",{"2":{"88":1,"114":1}}],["found",{"2":{"10":1,"39":1}}],["form",{"2":{"115":1,"116":1}}],["formatted",{"2":{"56":1}}],["format",{"0":{"52":1,"83":1,"99":1},"1":{"53":1,"54":1},"2":{"69":1,"79":1,"94":1,"122":1}}],["forks",{"2":{"47":1,"64":1}}],["forkspec",{"2":{"43":2,"47":1,"48":1,"53":3,"64":3,"72":3}}],["fork",{"0":{"64":1},"2":{"43":3,"47":1,"48":1,"50":1,"53":5,"56":1,"64":1,"69":3}}],["for",{"2":{"7":3,"10":1,"18":1,"21":2,"23":1,"25":2,"26":3,"27":2,"28":2,"29":1,"37":1,"38":3,"39":1,"41":2,"47":2,"54":2,"57":1,"58":1,"60":1,"65":2,"67":1,"69":1,"70":1,"73":1,"77":3,"79":1,"81":3,"82":1,"85":1,"86":2,"87":1,"88":1,"90":2,"92":3,"94":1,"96":3,"97":2,"98":1,"99":2,"101":1,"102":1,"103":1,"109":2,"110":1,"113":3,"114":4,"115":2,"118":2,"120":3,"124":2,"126":1,"132":2,"133":2,"134":4}}],["types",{"2":{"117":1,"118":1,"122":1,"124":1}}],["typically",{"2":{"14":1,"38":1,"53":1}}],["two",{"2":{"75":2,"77":1,"83":1}}],["tuning",{"0":{"58":1}}],["tp=89",{"2":{"31":1}}],["timeouts",{"2":{"69":1}}],["time",{"2":{"21":1,"31":1,"34":2,"35":1,"38":1,"82":1,"108":1}}],["times",{"2":{"18":1,"26":2,"89":1,"92":2,"102":1}}],["tiny",{"2":{"14":1,"44":1,"90":1,"92":1,"93":1,"97":1,"109":1}}],["true",{"2":{"72":1}}],["troubleshooting",{"0":{"68":1},"1":{"69":1,"70":1}}],["tracking",{"2":{"128":1}}],["traces",{"2":{"119":1,"122":1,"124":3,"130":1}}],["traceszisk",{"2":{"118":1}}],["trails",{"2":{"62":1}}],["traits",{"2":{"44":1}}],["transpiler",{"2":{"122":1}}],["transpilation",{"2":{"117":1}}],["transforms",{"2":{"121":1}}],["transfer",{"2":{"61":1}}],["transaction",{"2":{"47":1,"51":1,"62":1,"90":1,"104":1}}],["transactions",{"2":{"40":1,"51":1,"60":1,"62":1,"64":1}}],["transitions",{"2":{"40":1,"46":1,"54":1}}],["tree",{"2":{"11":1,"104":1}}],["tryinto",{"2":{"26":1,"77":1,"92":1}}],["try",{"2":{"10":1,"26":1,"77":1,"92":1}}],["technology",{"2":{"115":2}}],["temp",{"2":{"77":2}}],["tested",{"2":{"134":1}}],["tests",{"2":{"133":1}}],["testing",{"0":{"133":1},"2":{"113":1,"132":1,"133":2}}],["testnet",{"2":{"65":1}}],["test",{"2":{"20":1,"28":1,"29":1,"56":1,"133":3}}],["tee",{"2":{"11":1}}],["terms",{"2":{"11":1}}],["terminal",{"2":{"7":1,"17":1}}],["tables",{"2":{"126":1}}],["takes",{"2":{"18":1,"26":1,"74":1,"77":1,"89":1,"92":1}}],["take",{"2":{"11":2,"35":1}}],["taking",{"2":{"11":1}}],["taht",{"2":{"10":1}}],["target",{"2":{"7":1,"10":4,"19":2,"20":1,"21":2,"28":3,"29":2,"31":1,"32":1,"34":1,"35":1,"36":1,"37":1,"38":1,"58":1,"66":3,"67":2,"88":3,"110":1,"111":3}}],["than",{"2":{"38":1,"87":1}}],["that",{"2":{"11":3,"13":1,"14":2,"27":1,"35":1,"36":1,"37":2,"38":1,"41":1,"51":1,"90":1,"115":1,"116":1,"118":3,"123":1,"131":1}}],["through",{"2":{"47":1,"73":1,"99":1,"115":1,"121":1,"122":1,"126":1,"128":1,"130":1,"131":1,"133":2}}],["throughput",{"2":{"31":1}}],["threads",{"2":{"37":5}}],["threads=8",{"2":{"67":1}}],["threads=",{"2":{"37":2}}],["third",{"2":{"14":2}}],["this",{"2":{"1":1,"7":2,"10":1,"11":4,"14":1,"16":1,"17":1,"18":3,"19":1,"21":1,"23":1,"26":1,"28":2,"29":1,"34":3,"35":3,"36":4,"37":1,"38":1,"39":1,"40":1,"41":1,"73":1,"74":1,"75":1,"77":1,"88":1,"89":1,"90":1,"92":1,"103":1,"114":1}}],["their",{"2":{"115":1}}],["they",{"2":{"39":1}}],["then",{"2":{"14":1}}],["these",{"2":{"10":2,"11":1,"13":1,"14":1,"25":2,"37":1,"38":1,"58":1,"123":1}}],["them",{"2":{"7":1,"26":1,"27":1,"37":1,"92":1,"116":1}}],["the",{"0":{"55":1,"84":1,"100":1},"1":{"56":1,"57":1,"58":1,"85":1,"86":1,"101":1,"102":1},"2":{"0":1,"2":1,"7":8,"8":4,"10":13,"11":16,"13":2,"14":2,"15":5,"17":1,"18":11,"19":8,"20":8,"21":11,"22":1,"25":6,"26":6,"27":9,"28":11,"29":13,"31":4,"32":4,"34":11,"35":6,"36":12,"37":11,"38":11,"39":9,"40":3,"41":3,"46":1,"47":1,"48":2,"50":3,"51":4,"53":1,"54":1,"57":1,"66":1,"69":1,"73":1,"74":3,"75":3,"77":7,"79":7,"83":2,"85":2,"86":2,"87":2,"88":1,"89":3,"90":2,"92":5,"94":7,"96":1,"97":2,"98":4,"99":1,"101":2,"102":5,"108":1,"109":2,"111":1,"114":3,"115":2,"117":1,"118":1,"120":1,"122":7,"124":4,"130":4,"131":1,"133":3,"134":5}}],["top",{"2":{"130":1}}],["together",{"2":{"116":1}}],["total",{"2":{"32":2,"37":1}}],["toml",{"0":{"44":1,"78":1,"93":1},"2":{"18":1,"25":1,"26":1}}],["to",{"2":{"1":1,"7":5,"8":3,"10":7,"11":4,"13":1,"14":2,"16":1,"17":2,"18":2,"19":3,"20":1,"21":5,"22":1,"23":1,"25":2,"26":1,"27":6,"28":2,"29":3,"31":1,"32":1,"34":3,"35":3,"36":5,"37":9,"38":6,"39":3,"40":1,"46":1,"48":1,"50":1,"53":1,"62":1,"67":1,"74":1,"77":2,"79":1,"82":1,"83":3,"89":1,"92":2,"94":1,"98":1,"99":1,"102":1,"114":1,"115":3,"116":1,"122":1,"123":1,"130":1,"133":1,"134":3}}],["toolpurposepackageziskuptoolchain",{"2":{"132":1}}],["toolkit",{"2":{"38":1}}],["tool",{"2":{"7":1,"28":1,"31":1,"32":1,"36":1}}],["toolchains",{"2":{"10":1}}],["toolchain",{"2":{"0":1,"7":2,"10":8,"12":1,"117":1}}],["toolstack",{"2":{"115":1}}],["tools",{"0":{"2":1,"132":1},"2":{"0":1,"2":1,"10":2}}],["bool",{"2":{"73":1}}],["blob",{"2":{"64":1}}],["blockhash",{"2":{"73":2}}],["blockvalidator",{"2":{"73":1}}],["blocknumber",{"2":{"72":3,"73":2}}],["blockchain",{"0":{"104":1},"2":{"41":1,"73":1,"90":1,"114":1}}],["blocks",{"2":{"41":1,"46":1,"57":1,"58":1,"60":1,"67":1,"69":2}}],["block",{"0":{"40":1},"1":{"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1},"2":{"40":2,"41":2,"43":1,"44":2,"48":1,"50":2,"51":4,"53":3,"56":4,"57":2,"58":5,"61":2,"66":5,"67":2,"69":1,"70":1,"72":4,"73":1,"104":1}}],["breaking",{"2":{"134":1}}],["brew",{"2":{"5":1,"17":1}}],["bridges",{"0":{"61":1}}],["bus",{"2":{"122":1,"130":3}}],["businter",{"2":{"118":1}}],["busdata",{"2":{"118":1}}],["but",{"2":{"38":1}}],["built",{"2":{"13":1,"21":1}}],["builds",{"2":{"19":1}}],["build",{"0":{"10":1,"11":1,"19":1,"28":1,"57":1,"79":1,"85":1,"94":1,"101":1},"2":{"4":1,"10":6,"11":9,"17":1,"18":2,"19":2,"20":3,"21":1,"28":2,"29":5,"31":2,"32":2,"35":1,"36":1,"38":5,"57":4,"58":3,"66":2,"67":1,"70":1,"79":2,"85":3,"88":2,"94":2,"101":3,"110":1,"111":2}}],["building",{"0":{"9":1},"1":{"10":1,"11":1},"2":{"0":1,"10":1,"11":1,"34":1,"38":1}}],["backed",{"2":{"115":1}}],["balances",{"2":{"54":1}}],["balancing",{"2":{"37":1}}],["basic",{"2":{"75":1,"126":1}}],["based",{"2":{"38":1,"46":1,"105":1,"115":1,"133":1}}],["bashrc",{"2":{"10":3}}],["bash",{"2":{"7":1,"10":1,"17":1}}],["bd13089b",{"2":{"20":1,"31":1,"32":1}}],["big",{"2":{"99":1,"114":2}}],["bigendian",{"2":{"26":1,"27":1,"92":1}}],["bitwise",{"2":{"126":1}}],["bits=256",{"2":{"114":1}}],["bits",{"2":{"26":1,"27":1,"83":2,"86":4,"92":1}}],["bit",{"2":{"15":2,"27":1,"75":2,"77":1,"83":2,"90":1,"99":2,"102":1,"114":1}}],["binding",{"2":{"37":1}}],["bind",{"2":{"37":2,"67":1}}],["bincode",{"2":{"27":1,"43":1,"44":3,"50":1,"53":2,"69":1}}],["binarybinary",{"2":{"119":1}}],["binary",{"0":{"126":2},"2":{"27":1,"38":1,"113":1,"126":2,"133":1}}],["binaries",{"0":{"7":1},"1":{"8":1},"2":{"0":1,"10":1}}],["bin",{"2":{"4":1,"10":5,"11":8,"17":1,"18":1,"20":3,"21":1,"27":3,"29":3,"31":2,"32":2,"35":3,"36":3,"39":1,"53":2,"56":1,"57":2,"58":3,"66":2,"67":1,"70":1,"79":1,"85":3,"88":2,"94":1,"101":3,"110":1,"111":2,"113":3}}],["b",{"2":{"11":1,"32":1,"77":5,"114":1}}],["bytecode",{"2":{"54":1}}],["bytes32",{"2":{"73":1}}],["bytes",{"2":{"26":1,"73":1,"77":4,"79":1,"92":4,"94":1,"97":1,"102":1,"114":2}}],["byte",{"2":{"26":2,"27":1,"77":1,"81":2,"92":1,"96":2,"98":1,"99":2}}],["byteorder",{"2":{"26":4,"27":1,"44":1,"78":1,"92":3,"93":1}}],["by",{"2":{"0":1,"13":1,"15":2,"21":1,"37":2,"38":1,"39":1,"40":1,"114":1,"115":2}}],["being",{"2":{"134":1}}],["between",{"2":{"118":1,"122":1}}],["better",{"2":{"37":1,"38":2}}],["benchmarking",{"2":{"106":1}}],["beacon",{"2":{"64":1}}],["before",{"2":{"20":1,"21":1,"28":1,"29":1,"34":1,"35":1}}],["below",{"2":{"1":1,"15":1,"17":1}}],["be",{"2":{"0":1,"7":1,"11":2,"14":1,"18":1,"19":1,"20":1,"28":1,"34":2,"36":2,"37":1,"38":4,"53":2,"58":1,"102":1}}]],"serializationVersion":2}
