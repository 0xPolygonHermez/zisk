name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set test flag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "IS_TEST=true" >> $GITHUB_ENV
          else
            echo "IS_TEST=false" >> $GITHUB_ENV
          fi

      # If it's a test release, tag with the release date. Else, use the tag name as is.
      - name: Compute release name and tag
        id: release_info
        run: |
          echo "IS_TEST=$IS_TEST"
          echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"

          if [[ $IS_TEST == "true" ]]; then
            echo "IS_TEST"
            echo "tag_name=test-${GITHUB_SHA}"
            echo "release_name=Test ($(date '+%Y-%m-%d'))"
            echo "tag_name=test-${GITHUB_SHA}" >> $GITHUB_OUTPUT
            echo "release_name=Test ($(date '+%Y-%m-%d'))" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF_NAME}"
            echo "release_name=${GITHUB_REF_NAME}"
            echo "tag_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            echo "release_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

  release:
    name: Build ${{ matrix.target }} (${{ matrix.runner }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 240
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          # `runner`: GHA runner label
          # `target`: Rust build target triple
          # `platform` and `arch`: Used in tarball names
          # `svm`: target platform to use for the Solc binary: https://github.com/roynalnaruto/svm-rs/blob/84cbe0ac705becabdc13168bae28a45ad2299749/svm-builds/build.rs#L4-L24
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            svm_target_platform: linux-amd64
            platform: linux
            arch: amd64
          # - runner: warp-ubuntu-latest-arm64-4x
          #   target: aarch64-unknown-linux-gnu
          #   svm_target_platform: linux-aarch64
          #   platform: linux
          #   arch: arm64
          # - runner: macos-13
          #   target: x86_64-apple-darwin
          #   svm_target_platform: macosx-amd64
          #   platform: darwin
          #   arch: amd64
          - runner: macos-14
            target: aarch64-apple-darwin
            svm_target_platform: macosx-aarch64
            platform: darwin
            arch: arm64
          # - runner: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   svm_target_platform: windows-amd64
          #   platform: win32
          #   arch: amd64            
    steps:
      - uses: actions/checkout@v4

      - name: Install rust toolchain
        id: rustc-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: default
          override: true
          target: ${{ matrix.target }}

      - name: Install dependencies
        shell: bash
        run: |
            if [[ "${{ matrix.platform }}" == "darwin" ]]; then
                brew install libomp protobuf nasm open-mpi libffi
            else
                sudo apt-get update
                sudo apt-get install -y xz-utils jq curl build-essential qemu-system libomp-dev \
                    libgmp-dev nlohmann-json3-dev protobuf-compiler uuid-dev libgrpc++-dev \
                    libsecp256k1-dev libsodium-dev libpqxx-dev nasm libopenmpi-dev openmpi-bin openmpi-common
            fi

      - name: Setup macOS env vars
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV
          echo "LIBFFI_LIB_DIR=/opt/homebrew/opt/libffi/lib" >> $GITHUB_ENV
          echo "LIBFFI_INCLUDE_DIR=/opt/homebrew/opt/libffi/include" >> $GITHUB_ENV

      - name: Build binaries
        shell: bash
        run: |
            cargo build --release --target "${{ matrix.target }}"

      - name: Archive binaries
        id: artifacts
        env:
          PLATFORM_NAME: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
          ARCH: ${{ matrix.arch }}
        shell: bash
        run: |
          mkdir -p zisk-dist/bin

          if [[ "${PLATFORM_NAME}" == "linux" ]]; then
          mkdir -p zisk-dist/zisk/emulator-asm/src
          fi

          cp ./target/${TARGET}/release/cargo-zisk zisk-dist/bin/
          cp ./target/${TARGET}/release/ziskemu    zisk-dist/bin/
          cp ./target/${TARGET}/release/riscv2zisk zisk-dist/bin/

          if [[ "${PLATFORM_NAME}" == "linux" ]]; then
          cp ./target/${TARGET}/release/libzisk_witness.so         zisk-dist/bin/
          cp ./ziskup/ziskup                                       zisk-dist/bin/
          cp ./target/${TARGET}/release/libziskclib.a              zisk-dist/bin/
          cp -r ./emulator-asm/src                                 zisk-dist/zisk/emulator-asm/
          cp -r ./lib-c/                                           zisk-dist/zisk
          cp ./emulator-asm/Makefile                               zisk-dist/zisk/emulator-asm/
          fi

          ARCHIVE_FILE="cargo_zisk_${PLATFORM_NAME}_${ARCH}.tar.gz"
          tar -czvf "$ARCHIVE_FILE" -C zisk-dist .

          echo "file_name=$ARCHIVE_FILE" >> $GITHUB_OUTPUT       
        
      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ needs.prepare.outputs.release_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          draft: true
          make_latest: "false"
          files: |
            ${{ steps.artifacts.outputs.file_name }}          
