# Reference: https://github.com/foundry-rs/foundry/blob/master/.github/workflows/release.yml

name: release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  pull-requests: read

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
      changelog: ${{ steps.build_changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PULL_TOKEN }}

      - name: Set nightly flag
        run: |
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "IS_NIGHTLY=true" >> $GITHUB_ENV
          else
            echo "IS_NIGHTLY=false" >> $GITHUB_ENV
          fi

      # If it's a nightly release, tag with the release time. If the tag is `develop`, we want to use
      # `latest` as the tag name. Else, use the tag name as is.
      - name: Compute release name and tag
        id: release_info
        run: |
          echo "IS_NIGHTLY=$IS_NIGHTLY"
          echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"

          if [[ $IS_NIGHTLY == "true" ]]; then
            echo "IS_NIGHTLY"
            echo "tag_name=nightly-${GITHUB_SHA}"
            echo "release_name=Nightly ($(date '+%Y-%m-%d'))"
            echo "tag_name=nightly-${GITHUB_SHA}" >> $GITHUB_OUTPUT
            echo "release_name=Nightly ($(date '+%Y-%m-%d'))" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF_NAME}" == "develop" ]]; then
            echo "IS_LATEST"
            echo "tag_name=latest"
            echo "release_name=Latest"
            echo "tag_name=latest" >> $GITHUB_OUTPUT
            echo "release_name=Latest" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            echo "release_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      # Creates a `nightly-SHA` tag for this specific nightly
      # This tag is used for this specific nightly version's release
      # which allows users to roll back. It is also used to build
      # the changelog.
      - name: Create build-specific nightly tag
        if: ${{ env.IS_NIGHTLY == 'true' }}
        uses: actions/github-script@v7
        env:
          TAG_NAME: ${{ steps.release_info.outputs.tag_name }}
        with:
          script: |
            const createTag = require('./.github/scripts/create-tag.js')
            await createTag({ github, context }, process.env.TAG_NAME)

      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: "./.github/changelog.json"
          fromTag: ${{ env.IS_NIGHTLY == 'true' && 'nightly' || '' }}
          toTag: ${{ steps.release_info.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: ${{ matrix.target }} (${{ matrix.runner }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 240
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          # `runner`: GHA runner label
          # `target`: Rust build target triple
          # `platform` and `arch`: Used in tarball names
          # `svm`: target platform to use for the Solc binary: https://github.com/roynalnaruto/svm-rs/blob/84cbe0ac705becabdc13168bae28a45ad2299749/svm-builds/build.rs#L4-L24
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            svm_target_platform: linux-amd64
            platform: linux
            arch: amd64
          # - runner: warp-ubuntu-latest-arm64-4x
          #   target: aarch64-unknown-linux-gnu
          #   svm_target_platform: linux-aarch64
          #   platform: linux
          #   arch: arm64
          # - runner: macos-13
          #   target: x86_64-apple-darwin
          #   svm_target_platform: macosx-amd64
          #   platform: darwin
          #   arch: amd64
          # - runner: macos-14
          #   target: aarch64-apple-darwin
          #   svm_target_platform: macosx-aarch64
          #   platform: darwin
          #   arch: arm64
          # - runner: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   svm_target_platform: windows-amd64
          #   platform: win32
          #   arch: amd64
    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install libraries
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y \
            clang nlohmann-json3-dev build-essential libbenchmark-dev \
            libomp-dev libgmp-dev nasm libsodium-dev cmake openmpi-bin \
            openmpi-common libopenmpi-dev

      - name: Install Intel OpenMP
        shell: bash
        run: |
          # download the key to system keyring
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \
          | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null

          # add signed entry to apt sources and configure the APT client to use Intel repository:
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install -y intel-oneapi-openmp

      # - name: Verify libiomp5 installation
      #   run: |
      #     find /usr -name "libiomp5*"
      #     ls -l /usr/lib/x86_64-linux-gnu/libiomp5.*
      #     echo $LD_LIBRARY_PATH

      # - name: Set LD_LIBRARY_PATH
      #   run: echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Set LD_LIBRARY_PATH for OpenMP
        run: echo "LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/usr/lib/llvm-18/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install rust toolchain
        id: rustc-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          cache-on-failure: true

      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: "^1.22.1"

      - name: Check go installation
        run: |
          go version

      - name: Set up git private repo access
        run: |
          git config --global url."https://${{ secrets.ZISK_CI_TOKEN }}@github.com/".insteadOf ssh://git@github.com
          git config --global url."https://${{ secrets.ZISK_CI_TOKEN }}@github.com".insteadOf https://github.com

      - name: Apple M1 setup
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Linux ARM setup
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build binaries with Debugging
        env:
          SVM_TARGET_PLATFORM: ${{ matrix.svm_target_platform }}
        shell: bash
        run: |
          set -eo pipefail
          target="${{ matrix.target }}"
          flags=()

          echo "üîç Starting build process with enhanced debugging..."

          # Debug: Show system info
          echo "üñ•Ô∏è  System Info:"
          uname -a
          lsb_release -a || true

          # Debug: Check if libiomp5.so is installed
          echo "üîç Searching for libiomp5.so on the system..."
          IOMP5_PATH=$(find / -name "libiomp5.so" -type f 2>/dev/null | head -n 1 || true)

          if [ -z "$IOMP5_PATH" ]; then
            echo "‚ùå libiomp5.so not found on the system!"
            echo "Attempting to list Intel OpenMP installation..."
            dpkg -l | grep intel || echo "Intel OpenMP package not found."
            exit 1
          else
            echo "‚úÖ Found libiomp5.so at: $IOMP5_PATH"
          fi

          # Extract directory path from found libiomp5.so
          IOMP5_DIR=$(dirname "$IOMP5_PATH")
          echo "Using IOMP5_DIR: $IOMP5_DIR"

          # Set LD_LIBRARY_PATH
          export LD_LIBRARY_PATH="$IOMP5_DIR:$LD_LIBRARY_PATH"
          echo "LD_LIBRARY_PATH set to: $LD_LIBRARY_PATH"

          # Debug: Check linker search paths
          echo "üîç Verifying linker search paths for libiomp5..."
          ldconfig -p | grep libiomp5 || echo "libiomp5 not found in ldconfig cache."

          # Handle Windows executable suffix
          [[ "$target" == *windows* ]] && exe=".exe"

          # RUSTFLAGS with correct path and debugging
          export RUSTFLAGS="-L${IOMP5_DIR} -liomp5"
          echo "RUSTFLAGS set to: $RUSTFLAGS"

          # Debug: Check Rust and Cargo versions
          echo "üîç Rust and Cargo versions:"
          rustc --version
          cargo --version

          # Build with debugging
          echo "üöÄ Starting cargo build..."
          cargo build --release --target "$target" "${flags[@]}"

          # Verify built binaries
          bins=(cargo-zisk ziskemu keccakf_fixed_gen riscv2zisk rom-merkle)
          for name in "${bins[@]}"; do
            bin=./target/$target/release/$name$exe
            echo "üîç Verifying binary: $bin"
            file "$bin" || echo "‚ö†Ô∏è  file command failed on $bin"
            ldd "$bin" || echo "‚ö†Ô∏è  ldd command failed on $bin"
            if [[ "$name" != "riscv2zisk" ]]; then
              $bin --version || echo "‚ö†Ô∏è  Running $bin --version failed"
            fi
          done

          # libraries=(libzisk_witness.so)
          # for name in "${libraries[@]}"; do
          #   bin=./target/$target/release/$name
          #   echo "üîç Verifying binary library: $bin"
          #   file "$bin" || echo "‚ö†Ô∏è  file command failed on $bin"
          #   ldd "$bin" || echo "‚ö†Ô∏è  ldd command failed on $bin"
          # done

          echo "‚úÖ Build process completed."

      - name: Set VERSION_NAME
        run: echo "VERSION_NAME=$([ \"$IS_NIGHTLY\" == 'true' ] && echo 'nightly' || echo '${{ needs.prepare.outputs.tag_name }}')" >> $GITHUB_ENV

      - name: Archive binaries
        id: artifacts
        env:
          PLATFORM_NAME: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
          ARCH: ${{ matrix.arch }}
          VERSION_NAME: ${{ env.VERSION_NAME }}
        shell: bash
        run: |
          if [ "$PLATFORM_NAME" == "linux" ]; then
            tar -czvf "cargo_zisk_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release cargo-zisk ziskemu riscv2zisk libzisk_witness.so
            echo "file_name=cargo_zisk_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT
          elif [ "$PLATFORM_NAME" == "darwin" ]; then
            # We need to use gtar here otherwise the archive is corrupt.
            # See: https://github.com/actions/virtual-environments/issues/2619
            gtar -czvf "cargo_zisk_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release cargo-zisk ziskemu riscv2zisk
            echo "file_name=cargo_zisk_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT
          else
            cd ./target/${TARGET}/release
            7z a -tzip "cargo_zisk_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" cargo-zisk.exe ziskemu.exe riscv2zisk.exe
            mv "cargo_zisk_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" ../../../
            echo "file_name=cargo_zisk_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" >> $GITHUB_OUTPUT
          fi

      # Creates the release for this specific version
      - name: Create release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ needs.prepare.outputs.release_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          prerelease: ${{ env.IS_NIGHTLY == 'true' || needs.prepare.outputs.tag_name == 'latest' }}
          body: ${{ needs.prepare.outputs.changelog }}
          files: |
            ${{ steps.artifacts.outputs.file_name }}

      # If this is a nightly release, it also updates the release
      # tagged `nightly` for compatibility with `ziskup`
      - name: Update nightly release
        if: ${{ env.IS_NIGHTLY == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          name: "Nightly"
          tag_name: "nightly"
          prerelease: true
          body: ${{ needs.prepare.outputs.changelog }}
          files: |
            ${{ steps.artifacts.outputs.file_name }}

  cleanup:
    name: Release cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: release
    if: always()
    steps:
      - uses: actions/checkout@v4

      # Moves the `nightly` tag to `HEAD`
      - name: Move nightly tag
        if: ${{ env.IS_NIGHTLY }}
        uses: actions/github-script@v7
        with:
          script: |
            const moveTag = require('./.github/scripts/move-tag.js')
            await moveTag({ github, context }, 'nightly')

      - name: Delete old nightlies
        uses: actions/github-script@v7
        with:
          script: |
            const prunePrereleases = require('./.github/scripts/prune-prereleases.js')
            await prunePrereleases({github, context})
