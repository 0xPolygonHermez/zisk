name: release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set test flag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "IS_TEST=true" >> $GITHUB_ENV
          else
            echo "IS_TEST=false" >> $GITHUB_ENV
          fi

      # If it's a test release, tag with the release date. Else, use the tag name as is.
      - name: Compute release name and tag
        id: release_info
        run: |
          echo "IS_TEST=$IS_TEST"
          echo "GITHUB_REF_NAME=$GITHUB_REF_NAME"

          if [[ $IS_TEST == "true" ]]; then
            echo "IS_TEST"
            echo "tag_name=test-${GITHUB_SHA}"
            echo "release_name=Test ($(date '+%Y-%m-%d'))"
            echo "tag_name=test-${GITHUB_SHA}" >> $GITHUB_OUTPUT
            echo "release_name=Test ($(date '+%Y-%m-%d'))" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF_NAME}"
            echo "release_name=${GITHUB_REF_NAME}"
            echo "tag_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            echo "release_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

  release:
    name: Build ${{ matrix.target }} (${{ matrix.runner }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 240
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          # `runner`: GHA runner label
          # `target`: Rust build target triple
          # `platform` and `arch`: Used in tarball names
          # `svm`: target platform to use for the Solc binary: https://github.com/roynalnaruto/svm-rs/blob/84cbe0ac705becabdc13168bae28a45ad2299749/svm-builds/build.rs#L4-L24
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            svm_target_platform: linux-amd64
            platform: linux
            arch: amd64
          # - runner: warp-ubuntu-latest-arm64-4x
          #   target: aarch64-unknown-linux-gnu
          #   svm_target_platform: linux-aarch64
          #   platform: linux
          #   arch: arm64
          # - runner: macos-13
          #   target: x86_64-apple-darwin
          #   svm_target_platform: macosx-amd64
          #   platform: darwin
          #   arch: amd64
          # - runner: macos-14
          #   target: aarch64-apple-darwin
          #   svm_target_platform: macosx-aarch64
          #   platform: darwin
          #   arch: arm64
          # - runner: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   svm_target_platform: windows-amd64
          #   platform: win32
          #   arch: amd64            
    steps:
      - uses: actions/checkout@v4

      - name: Install rust toolchain
        id: rustc-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: default
          override: true
          target: x86_64-unknown-linux-gnu

      - name: Install dependencies
        shell: bash
        run: |
            sudo apt-get install -y xz-utils jq curl build-essential qemu-system libomp-dev \
                libgmp-dev nlohmann-json3-dev protobuf-compiler uuid-dev libgrpc++-dev \
                libsecp256k1-dev libsodium-dev libpqxx-dev nasm libopenmpi-dev openmpi-bin openmpi-common

      - name: Build binaries
        shell: bash
        run: |
            cargo build --release --features distributed --target "${{ matrix.target }}"
            
            # Verify built binaries
            bins=(cargo-zisk ziskemu riscv2zisk libzisk_witness.so)
            for name in "${bins[@]}"; do
                bin=./target/${TARGET}/release/$name$exe
                echo "🔍 Verifying binary: $bin"
                file "$bin" || echo "⚠️  file command failed on $bin"
                ldd "$bin" || echo "⚠️  ldd command failed on $bin"
                if [[ "$name" = "cargo-zisk" ]]; then
                $bin --version || echo "⚠️  Running $bin --version failed"
                fi
            done

      - name: Archive binaries
        id: artifacts
        env:
          PLATFORM_NAME: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
          ARCH: ${{ matrix.arch }}
        shell: bash
        run: |
          if [ "$PLATFORM_NAME" == "linux" ] || [ "$PLATFORM_NAME" == "darwin" ]; then
            ARCHIVE_FILE="cargo_zisk_${PLATFORM_NAME}_${ARCH}.tar.gz"

            TAR_CMD="tar"
            [ "$PLATFORM_NAME" == "darwin" ] && TAR_CMD="gtar"

            $TAR_CMD -czvf "$ARCHIVE_FILE" --transform 's/.*\///' \
              ./target/${TARGET}/release/cargo-zisk \
              ./target/${TARGET}/release/ziskemu \
              ./target/${TARGET}/release/riscv2zisk \
              ./target/${TARGET}/release/libzisk_witness.so \
              ./precompiles/keccakf/src/keccakf_script.json \
              ./ziskup/ziskup
          else
            ARCHIVE_FILE="cargo_zisk_${PLATFORM_NAME}_${ARCH}.zip"
            7z a -tzip -ep1 "$ARCHIVE_FILE" \
              ./target/${TARGET}/release/cargo-zisk.exe \
              ./target/${TARGET}/releaseziskemu.exe \
              ./target/${TARGET}/release/riscv2zisk.exe \
              ./precompiles/keccakf/src/keccakf_script.json \
              ./ziskup/ziskup

            mv "$ARCHIVE_FILE" ../../../
          fi

          echo "file_name=$ARCHIVE_FILE" >> $GITHUB_OUTPUT       
        
      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ needs.prepare.outputs.release_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          draft: true
          make_latest: "false"
          files: |
            ${{ steps.artifacts.outputs.file_name }}          