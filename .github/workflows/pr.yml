name: Test ZisK

on:
  push:
    branches: [develop]
  pull_request:
    branches:
      - develop
      - main
      - "pre-develop-[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:    
  merge_group:

jobs:
  cargo-tests:
    name: Cargo tests
    runs-on: ubuntu-latest
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openmpi-bin openmpi-common libopenmpi-dev nlohmann-json3-dev  build-essential libbenchmark-dev libomp-dev libgmp-dev  nasm libsodium-dev cmake

      - name: Setup CI
        uses: ./.github/actions/setup

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-targets # --all-features

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --release --features no_lib_link
        env:
          RUSTFLAGS: -Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0 -C target-cpu=native
          RUST_BACKTRACE: 1

  test-x86_64:
    name: Test on Ubuntu x86_64
    runs-on: self-hosted
    timeout-minutes: 120
    container:
      image: ziskvm/zisk-test-env:latest
      options:
        --shm-size=32g  
        -v /home/gha/cache-setup:/output:rw
    defaults:
      run:
        shell: bash        
    env:
      ZISK_GHA: "1"
      ZISK_REPO_DIR: ${{ github.workspace }}
      BLOCK_INPUTS_DISTRIBUTED: "21429020_5_0.bin"
      DISTRIBUTED_PROCESSES: "2"
      DISTRIBUTED_THREADS: "64"
      PROVE_FLAGS: "-a -y"
      TERM: xterm
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          cd "$GITHUB_WORKSPACE/tools/test-env"
          ./install_deps.sh

      - name: Build ZisK
        run: |
          cd "$GITHUB_WORKSPACE/tools/test-env"
          ./build_zisk.sh

      - name: Build setup
        env:
          USE_CACHE_SETUP: "1"
        run: |     
          cd "$GITHUB_WORKSPACE/tools/test-env"
          ./build_setup.sh

      - name: Test sha_hasher
        run: |
          cd "$GITHUB_WORKSPACE/tools/test-env"
          ./test_sha_hasher.sh

      - name: Test Ethereum block
        run: |
          cd "$GITHUB_WORKSPACE/tools/test-env"
          ./test_eth_block.sh

  test-macos:
    name: Test on macOS
    runs-on: macos-14
    timeout-minutes: 15
    defaults:
      run:
        shell: bash    
    env:
      ZISK_GHA: "1"
      ZISK_REPO_DIR: ${{ github.workspace }}
      TERM: xterm
    steps:
      - name: Check Rust version
        run: rustc --version

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          cd "$GITHUB_WORKSPACE/tools/test-env"
          ./install_deps.sh
          
      - name: Build ZisK
        run: |
          cd "$GITHUB_WORKSPACE/tools/test-env"
          ./build_zisk.sh

      - name: Test sha_hasher
        run: |
          cd "$GITHUB_WORKSPACE/tools/test-env"
          ./test_sha_hasher.sh

  lint:
    name: Formatting & Clippy
    runs-on: ubuntu-latest
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y openmpi-bin openmpi-common libopenmpi-dev

      - name: Setup CI
        uses: ./.github/actions/setup

      - name: Clean rust toolchain
        run: |
          rustup self uninstall -y || true
          rm -rf ~/.rustup ~/.cargo        

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          toolchain: stable
          command: fmt
          args: --all -- --check
        env:
          CARGO_INCREMENTAL: 1

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets -- -D warnings
          # args: --all-features --all-targets -- -D warnings -A incomplete-features
        env:
          CARGO_INCREMENTAL: 1
