require "std_lookup.pil"

const int ARITH_TABLE_ID = 331;

airtemplate ArithTable(int N = 2**7, int generate_table = 0) {

    // div m32 sa  sb  primary  secondary  opcodes             na   nb   np   nr   sext(c)
    // -----------------------------------------------------------------------------------
    //  0   0   0   0  mulu     muluh      0xb0 176  0xb1 177  =0   =0   =0   =0   =0   =0
    //  0   0   1   0  *n/a*    mulsuh     0xb2  -   0xb3 179  a3   =0   d3   =0   =0   =0  a3,      d3
    //  0   0   1   1  mul      mulh       0xb4 180  0xb5 181  a3   b3   d3   =0   =0   =0  a3,b3,   d3
    //  0   1   0   0  mul_w    *n/a*      0xb6 182  0xb7  -   =0   =0   =0   =0   c1   =0

    // div m32 sa  sb  primary  secondary  opcodes             na   nb   np   nr   sext(a,d)(*2)
    // ------------------------------------------------------------------------------------
    //  1   0   0   0  divu     remu       0xb8 184  0xb9 185  =0   =0   =0   =0   =0   =0
    //  1   0   1   1  div      rem        0xba 186  0xbb 187  a3   b3   c3   d3   =0   =0  a3,b3,c3,d3
    //  1   1   0   0  divu_w   remu_w     0xbc 188  0xbd 189  =0   =0   =0   =0   a1   d1               a1      ,d1
    //  1   1   1   1  div_w    rem_w      0xbe 190  0xbf 191  a1   b1   c1   d1   a1   d1               a1,b1,c1,d1

    const int OPS[14] = [0xb0, 0xb1, 0xb3, 0xb4, 0xb5, 0xb6, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf];

    col fixed OP;
    col fixed FLAGS;
    col fixed RANGE_AB;
    col fixed RANGE_CD;
    string code = "";

    int index = 0;
    int aborted = 0;

    if (generate_table) {
        int air.op2row[2048];
        for (int i = 0; i < 2048; ++i) {
            op2row[i] = 255;
        }
    }

    for (int opcode = 0xb0; opcode <= 0xbf; ++opcode) {
        if (opcode == 0xb2 || opcode == 0xb7) {
            continue;
        }
        int m32 = 0;    // 32 bits operation
        int div = 0;    // division operation (div,rem)
        int sa = 0;
        int sb = 0;
        int main_mul = 0;
        int main_div = 0;
        string opname = "";
        switch (opcode) {
            case 0xb0:
                opname = "mulu";
                main_mul = 1;
            case 0xb1:
                opname = "mulh";
            case 0xb3:
                opname = "mulsuh";
                sa = 1;
            case 0xb4:
                opname = "mul";
                sa = 1;
                sb = 1;
                main_mul = 1;
            case 0xb5:
                opname = "mulh";
                sa = 1;
                sb = 1;
            case 0xb6:
                opname = "mul_w";
                m32 = 1;
                main_mul = 1;
            case 0xb8:
                opname = "divu";
                div = 1;
                main_div = 1;
            case 0xb9:
                opname = "remu";
                div = 1;
            case 0xba:
                opname = "div";
                sa = 1;
                sb = 1;
                div = 1;
                main_div = 1;
            case 0xbb:
                opname = "rem";
                sa = 1;
                sb = 1;
                div = 1;
            case 0xbc:
                opname = "divu_w";
                div = 1;
                m32 = 1;
                main_div = 1;
            case 0xbd:
                opname = "remu_w";
                div = 1;
                m32 = 1;
            case 0xbe:
                opname = "div_w";
                sa = 1;
                sb = 1;
                div = 1;
                m32 = 1;
                main_div = 1;
            case 0xbf:
                opname = "rem_w";
                sa = 1;
                sb = 1;
                div = 1;
                m32 = 1;
        }

        for (int icase = 0; icase < 128; ++icase) {
            const int na = (0x01 & icase) ? 1 : 0;
            const int nb = (0x02 & icase) ? 1 : 0;
            const int np = (0x04 & icase) ? 1 : 0;
            const int nr = (0x08 & icase) ? 1 : 0;
            const int sext = (0x10 & icase) ? 1 : 0;
            const int div_by_zero = (0x20 & icase) ? 1 : 0;
            const int div_overflow = (0x40 & icase) ? 1 : 0;

            const int signed = (sa || sb) ? 1 : 0;

            // division by zero (dividend: x, divisor: 0)
            //
            // DIV,DIVU         0xFFFF_FFFF_FFFF_FFFF
            // REM,REMU         x
            // DIV_W,DIVU_W     0xFFFF_FFFF_FFFF_FFFF
            // REM_W,REMU_W     x

            // division overflow 64 (divend: 0x8000_0000_0000_0000, divisor: 0xFFFF_FFFF_FFFF_FFFF)
            //
            // DIV          0x8000_0000_0000_0000
            // REM          0

            // division overflow 32 (divend: 0x8000_0000, divisor: 0xFFFF_FFFF)
            //
            // DIV_W        0xFFFF_FFFF_8000_0000
            // REM_W        0

            // div_by_zero
            //      signed:1 => na:1 nb:0 np = nr (0,1)
            //      signed:0 => na:0 nb:0 np:0 nr:0

            // div_overflow
            //      signed:1 => na:1 nb:1 np:1 nr:0 sext:0

            if (div_by_zero && (!div || nb || np != nr || signed != na)) continue;
            if (div_by_zero && main_div && m32 && !sext) continue;
            if (div_overflow && (!div || !signed || !na || !nb || !np || nr)) continue;
            if (sext && !m32) continue;
            if (nr && !div) continue;
            if (na && !sa) continue;
            if (nb && !sb) continue;
            if (np && !sa && !sb) continue;
            if (nr && !sa && !sb) continue;
            if (np && na == nb && !div) continue;
            if (np && !na && !nb && !nr && div) continue;
            if (na && !nb && !nr && !np && div && !div_by_zero) continue;
            if (np && na && nb && !div_overflow) continue;
            if (!np & nr) continue;
            if (m32 && signed && main_div && na != sext) continue;
            if (m32 && signed && div && !main_div && nr != sext) continue;

            int range_a1 = 0;
            int range_b1 = 0;
            int range_c1 = 0;
            int range_d1 = 0;
            int range_a3 = 0;
            int range_b3 = 0;
            int range_c3 = 0;
            int range_d3 = 0;

            if (m32) {
                if (sa) {
                    range_a1 = na ? 2 : 1;
                } else if (main_div) {
                    range_a1 = sext ? 2 : 1;
                }
                if (sb) {
                    range_b1 = nb ? 2 : 1;
                }
                if (!div) {
                    range_c1 = sext ? 2 : 1;
                } else if (sa) {
                    range_c1 = np ? 2 : 1;
                }
                if (div && !main_div) {
                    range_d1 = sext ? 2 : 1;
                } else if (sa) {
                    range_d1 = nr ? 2 : 1;
                }
            } else {
                if (sa) {
                    range_a3 = na ? 2 : 1;
                    if (div) {
                        range_c3 = np ? 2 : 1;
                        range_d3 = nr ? 2 : 1;
                    } else {
                        range_d3 = np ? 2 : 1;
                    }
                }
                if (sb) {
                    range_b3 = nb ? 2 : 1;
                }
            }
            const int flags = m32 + 2 * div + 4 * na + 8 * nb + 16 * np + 32 * nr + 64 * sext +
                           128 * div_by_zero + 256 * div_overflow + 512 * main_mul +
                           1024 * main_div + 2048 * signed;

            int range_ab = (range_a3 + range_a1) * 3 + range_b3 + range_b1;
            if ((range_a1 + range_b1) > 0) {
                range_ab = range_ab + 8;
            }
            int range_cd = (range_c3 + range_c1) * 3 + range_d3 + range_d1;
            if ((range_c1 + range_d1) > 0) {
                range_cd = range_cd + 8;
            }
            // const int range_cd = range_c3 * 3 + range_d3 + m32 * 8 + range_c1 * 3 + range_d1;

            OP[index] = opcode;
            FLAGS[index] = flags;
            RANGE_AB[index] = range_ab;
            RANGE_CD[index] = range_cd;

            if (generate_table) {
                // println(`OP:${opcode} na:${na} nb:${nb} np:${np} nr:${nr} sext:${sext} m32:${m32} div:${div}`,
                //         `div_by_zero:${div_by_zero} div_overflow:${div_overflow} sa:${sa} sb:${sb} main_mul:${main_mul}`,
                //         `main_div:${main_div} signed:${signed} range_ab:${range_ab} range_cd:${range_cd} index:${(opcode - 0xb0) * 128 + icase} icase:${icase}`);

                op2row[(opcode - 0xb0) * 128 + icase] = index;
                code = code + `[${opcode}, ${flags}, ${range_ab}, ${range_cd}],`;
            }
            ++index;
        }
    }
    const int size = index;

    println("ARITH_TABLE SIZE: ", size);
    assert(size < 256);

    if (generate_table) {
        println(`pub const ROWS: usize = ${size};`);
        println("const __: u8 = 255;");
        string _op2row = "";
        for (int i = 0; i < 2048; ++i) {
            _op2row = _op2row + ((op2row[i] == 255) ? "__":string(op2row[i])) + ",";
        }
        println("pub static ARITH_TABLE_ROWS: [u8; 2048] = [", _op2row, "];");
        println(`pub static ARITH_TABLE: [[u16; 4]; ROWS] = [${code}];`);
    }

    // padding repeat first row

    const int padding_op = OP[0];
    const int padding_flags = FLAGS[0];
    const int padding_range_ab = RANGE_AB[0];
    const int padding_range_cd = RANGE_CD[0];

    for (index = size; index < N; ++index) {
        OP[index] = padding_op;
        FLAGS[index] = padding_flags;
        RANGE_AB[index] = padding_range_ab;
        RANGE_CD[index] = padding_range_cd;
    }
    col witness multiplicity;

    lookup_proves(ARITH_TABLE_ID, mul: multiplicity, expressions: [OP, FLAGS, RANGE_AB, RANGE_CD]);
}

function arith_table_assumes( const expr op, const expr flag_m32, const expr flag_div, const expr flag_na,
                              const expr flag_nb, const expr flag_np, const expr flag_nr, const expr flag_sext,
                              const expr flag_div_by_zero, const expr flag_div_overflow,
                              const expr flag_main_mul, const expr flag_main_div, const expr flag_signed,
                              const expr range_ab, const expr range_cd) {

    lookup_assumes(ARITH_TABLE_ID, expressions: [ op, flag_m32 + 2 * flag_div + 4 * flag_na + 8 * flag_nb +
                                           16 * flag_np + 32 * flag_nr + 64 * flag_sext +
                                           128 * flag_div_by_zero + 256 * flag_div_overflow +
                                           512 * flag_main_mul + 1024 * flag_main_div + 2048 * flag_signed,
                                           range_ab, range_cd]);
}
