// require "std.pil"
// require "mem.pil"
// require "operation.pil"

airtemplate Main(int N = 2**21, int RC = 2, int stack_enabled = 1, int MAIN_CONTINUATION_ID = 1000) {

    col fixed INNER_L1 = [1,0...];
    col fixed INNER_STEP = [0..(N-1)];

    const expr INNER_LAST = INNER_L1';

    // TODO: airval
    airgroupval aggregate(sum) main_first_segment;   // first
    airgroupval aggregate(sum) main_last_segment;    // final
    airgroupval aggregate(sum) main_segment;         // serial

    const expr L1 = INNER_L1 * main_first_segment;
    const expr LAST = INNER_LAST * main_last_segment;
    const expr STEP = main_segment * N + INNER_STEP;

    // Registers

    col witness a[RC];
    col witness b[RC];
    col witness c[RC];
    col witness last_c[RC];
    col witness flag;

    col witness pc;      // Program counter

    // continuations


    // continuations_setup(MAIN_CONTINUATION_ID, chunk, end);

    // Instruction

    // Source A

    col witness a_src_imm;         // Selector
    col witness a_src_mem;         // Selector
    col witness a_offset_imm0;


    if (stack_enabled == 1) {
        col witness air.sp;
        col witness air.a_src_sp;
        col witness air.a_use_sp_imm1;
        col witness air.a_src_step;
    } else {
        col witness air.a_src_step_imm1;
    }

    // Source B

    col witness b_src_imm;         // Selector
    col witness b_src_mem;         // Selector
    col witness b_offset_imm0;

    if (stack_enabled) {
        col witness air.b_use_sp_imm1;
        col witness air.b_src_ind;
    } else {
        col witness air.b_src_ind_imm1;
    }

    col witness ind_width;  // 8 , 4, 2, 1

    // Operations related

    col witness is_external_op;    // 1 If it's an op proved by a different coprocessor (1 clock op).
    col witness op;                // if is_external_op1== is_external_op2 == 0 if op=0  then a->c, flag->1
                                   //                                           if op=1 then  b->c, flag->0;
                                   // else then this op is passed to the bus.

    // Destination C

    // What to store
    col witness store_ra;  // Store the return address instead of the C register.

    // Where to store
    col witness store_mem;  // 1 of the registers are read/write from memory
    col witness store_ind;

    col witness store_offset;

    col witness set_pc;


    if (stack_enabled) {
        col witness air.store_use_sp;
        col witness air.set_sp;
        col witness air.inc_sp;
    }


    col witness jmp_offset1, jmp_offset2;  // if flag, goto2, else goto 1


    // const expr addr_step = STEP * 3;

    // const expr sel_mem_b;
    // const expr addr[3];

    // if (stack_enabled) {
    //     sel_mem_b = b_src_mem + b_src_ind;
    //     addr[0] = a_offset_imm0 + a_use_sp_imm1 * sp;
    //     addr[1] = b_offset_imm0 + b_src_ind * (a[0] + 2**32 * a[1]) +  b_use_sp_imm1 * sp;
    //     addr[2] = store_offset + store_ind * a[0] + store_use_sp * sp;
    // } else {
    //     sel_mem_b = b_src_mem + b_src_ind_imm1;
    //     addr[0] = a_offset_imm0;
    //     addr[1] = b_offset_imm0 + b_src_ind_imm1 * (a[0] + 2**32 * a[1]);
    //     addr[2] = store_offset + store_ind * a[0];
    // }

    // // Mem.load
    // mem_load(sel: a_src_mem,
    //          step: addr_step,
    //          addr: addr[0],
    //          value: a);

    // // Mem.load
    // mem_load(sel: sel_mem_b,
    //          step: addr_step + 1,
    //          bytes: ind_width,
    //          addr: addr[1],
    //          value: b);

    // // Mem.store
    // mem_store(sel: store_mem + store_ind,
    //           step: addr_step + 2,
    //           bytes: ind_width,
    //           addr: addr[2],
    //           value: [store_ra*(pc + jmp_offset2) + c[0], 0]);


    // // Operation.assume => how organize software
    // operation_assume(OPERATION_ID + op, sel: is_external_op,
    //                                     a: a,
    //                                     b: b,
    //                                     c: c,
    //                                     flag: flag);


    // const expr a_src_c;
    // const expr b_src_c;

    // const expr a_imm[2];
    // const expr b_imm[2];

    // a_imm[0] = a_offset_imm0;
    // b_imm[0] = b_offset_imm0;

    // if (stack_enabled) {
    //     a_src_c = 1 - a_src_step - a_src_mem - a_src_imm - a_src_sp;
    //     b_src_c = 1 - b_src_mem - b_src_imm - b_src_ind;
    //     a_imm[1] = a_use_sp_imm1;
    //     b_imm[1] = b_use_sp_imm1;
    // } else {
    //     a_src_c = 1 - a_src_step_imm1 - a_src_mem - a_src_imm;
    //     b_src_c = 1 - b_src_mem - b_src_imm - b_src_ind_imm1;
    //     a_imm[1] = a_src_step_imm1;
    //     b_imm[1] = b_src_ind_imm1;
    // }

    // for (int index = 0; index < RC; ++index) {
    //     if (stack_enabled) {
    //         // a_src_sp ===> set a = sp (only less significant index, rest must be 0)
    //         a_src_sp*(a[index] - (index == 0 ? sp: 0 )) === 0;

    //         // a_src_step ===> set a = STEP (only less significant index, rest must be 0)
    //         a_src_step *( a[index] - (index == 0 ? STEP : 0)) === 0;
    //     } else {
    //         a_src_step_imm1 *( a[index] - (index == 0 ? STEP : 0)) === 0;
    //     }


    //     a_src_c*(a[index] - last_c[index]) === 0;
    //     b_src_c*(b[index] - last_c[index]) === 0;

    //     a_src_imm*(a[index] - a_imm[index]) === 0;
    //     b_src_imm*(b[index] - b_imm[index]) === 0;

    //     // continuations_transition(last_c[index], c[index]); // last_c[index]' = c[index];

    //     // if is not an external op and op=0 set c = 0
    //     (1 - is_external_op) * (1 - op) * c[index] === 0;

    //     // if is not an external op and op=1 set c = b
    //     (1 - is_external_op) * op * (b[index] - c[index]) === 0;
    // }


    // // if is not an external op and op=0 set flag = 1
    // (1 - is_external_op) * (1 - op) * (1 - flag) === 0;

    // // if is not an external op and op=1 set flag = 0
    // (1 - is_external_op) * op * (flag) === 0;

    // if (stack_enabled) {
    //     // continuations_transition(sp, set_sp*(c - sp) + sp + inc_sp);
    // }


    // // sp' === set_sp*(c - sp) + sp + inc_sp + end * L1'*(0 - sp);  // assume that when end=1 then set_sp=0 and inc_sp=0
    // // sp * L1 === 0;     // Force sp == 0 at the begining

    // // step is a constant
    // // step * (1-L1) === 'step +  1;
    // // step * L1 === 0;

    // const expr new_pc = pc + flag*(jmp_offset1 - jmp_offset2) + jmp_offset2;

    // // continuations_transition(pc, set_pc * (c[0] + jmp_offset1  - new_pc) + new_pc);


    // // pc' === set_pc * ( c[0] + jmp_offset1  - new_pc) + new_pc  + end * L1'*(0x8000_0000 - (pc + jmp_offset1 ));  // Assume that when end=1 then  set_pc = 0 and flag = 0
    // L1 * (pc - 0x8000_0000) === 0; // when end of program jump to this address

    // flag*(flag -1) === 0;
}