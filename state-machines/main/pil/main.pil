require "std_lookup.pil"
require "std_permutation.pil"
require "std_direct.pil"

const int BOOT_ADDR = 0x1000;
const int END_PC_ADDR = 0x1000_0000;
const int INITIAL_SP = 0;
const int END_SP = 0;

airtemplate Main(int N = 2**21, int RC = 2, int stack_enabled = 0, const int operation_bus_id, int MAIN_CONTINUATION_ID = 1000) {

    col fixed SEGMENT_L1 = [1,0...];
    col fixed SEGMENT_STEP = [0..(N-1)];

    const expr SEGMENT_LAST = SEGMENT_L1';

    airval main_last_segment;
    airval main_segment;
    airval segment_initial_pc;
    airval segment_previous_c[RC];
    airval segment_next_pc;
    airval segment_last_c[RC];

    if (stack_enabled) {
        airval segment_initial_sp;
        airval segment_next_sp;
    }

    // continuations
    //
    // first row of each segment is its initial state and must match with last
    // row of previous segment. This first row it's a valid rom line, same that
    // last of previous segment. This way to do continuations implies that:
    //
    // - each segment only has N-1 valid rows.
    //
    // - it's possible reference previous row, but no next row.
    //
    // - the first two rows has same SEGMENT_STEP 0.
    //
    // - global bus constraint with initial state of main (as initial PC)
    //          [segment:0, is_last_segment: 0, pc: INITIAL_PC, a, b, c, flag]
    //
    // - global bus constraint with final state of main (as expected PC)
    //          [segment:0, is_last_segment: 1, pc: FINAL_PC, a, b, c, flag]
    //
    // - is_last_segment it's used for security to avoid used to do more cycles of main.
    //
    // - registers a,b could be removed from main continuations.
    //

    main_last_segment * (1 - main_last_segment) === 0;

    const expr STEP = main_segment * N + SEGMENT_STEP;

    // Registers

    col witness a[RC];
    col witness b[RC];
    col witness c[RC];
    col witness flag;

    col witness pc;      // Program counter

    // Source A

    col witness a_src_imm;         // Selector
    col witness a_src_mem;         // Selector
    col witness a_offset_imm0;

    if (stack_enabled == 1) {
        col witness air.sp;
        col witness air.a_src_sp;
        col witness air.a_use_sp_imm1;
    } else {
        col witness air.a_imm1;
    }
    col witness a_src_step;

    // Source B

    col witness b_src_imm;         // Selector
    col witness b_src_mem;         // Selector
    col witness b_offset_imm0;

    if (stack_enabled) {
        col witness air.b_use_sp_imm1;
    } else {
        col witness air.b_imm1;
    }
    col witness b_src_ind;
    col witness ind_width;  // 8, 4, 2, 1

    // Operations related

    col witness is_external_op;    // 1 If it's an op proved by a different coprocessor (1 clock op).
    col witness op;                // if is_external_op1== is_external_op2 == 0 if op=0  then a->c, flag->1
                                   //                                           if op=1 then  b->c, flag->0;
                                   // else then this op is passed to the bus.

    // Destination C

    // What to store
    col witness store_ra;  // Store the return address instead of the C register.

    // Where to store
    col witness store_mem;  // 1 of the registers are read/write from memory
    col witness store_ind;

    col witness store_offset;

    col witness set_pc;


    if (stack_enabled) {
        col witness air.store_use_sp;
        col witness air.set_sp;
        col witness air.inc_sp;
    }


    col witness jmp_offset1, jmp_offset2;  // if flag, goto2, else goto 1
    col witness m32;

    const expr sel_mem_b;

    sel_mem_b = b_src_mem + b_src_ind;
    if (stack_enabled) {
        col witness air.addr0;
        col witness air.addr1;
        col witness air.addr2;

        addr0 === a_offset_imm0 + a_use_sp_imm1 * sp;
        addr1 === b_offset_imm0 + b_src_ind * (a[0] + 2**32 * a[1]) +  b_use_sp_imm1 * sp;
        addr2 === store_offset + store_ind * a[0] + store_use_sp * sp;
    } else {
        const expr air.addr0;
        col witness air.addr1;
        const expr air.addr2;
        addr0 = a_offset_imm0;
        addr1 === b_offset_imm0 + b_src_ind * (a[0] + 2**32 * a[1]);
        addr2 = store_offset + store_ind * a[0];
    }

    // Mem.load
    mem_load(sel: a_src_mem,
             step: STEP,
             addr: addr0,
             value: a);

    // Mem.load
    mem_load(sel: sel_mem_b,
             step: STEP,
             step_offset: 1,
             bytes: b_src_ind * (ind_width - 8) + 8,
             addr: addr1,
             value: b);

    const expr store_value[2];

    store_value[0] = store_ra*(pc + jmp_offset2 - c[0]) + c[0];
    store_value[1] = (1 - store_ra) * c[1];

    // Mem.store
    mem_store(sel: store_mem + store_ind,
              step: STEP,
              step_offset: 2,
              bytes: store_ind * (ind_width - 8) + 8,
              addr: addr2,
              value: store_value);

    lookup_assumes(operation_bus_id, [op, a[0], (1 - m32) * a[1], b[0], (1 - m32) * b[1], ...c, flag], sel: is_external_op);

    const expr a_src_c;
    const expr b_src_c;

    const expr a_imm[2];
    const expr b_imm[2];

    a_imm[0] = a_offset_imm0;
    b_imm[0] = b_offset_imm0;

    if (stack_enabled) {
        a_src_c = 1 - a_src_step - a_src_mem - a_src_imm - a_src_sp;
        b_src_c = 1 - b_src_mem - b_src_imm - b_src_ind;
        a_imm[1] = a_use_sp_imm1;
        b_imm[1] = b_use_sp_imm1;
    } else {
        a_src_c = 1 - a_src_step - a_src_mem - a_src_imm;
        b_src_c = 1 - b_src_mem - b_src_imm - b_src_ind;
        a_imm[1] = a_imm1;
        b_imm[1] = b_imm1;
    }


    for (int index = 0; index < RC; ++index) {
        const expr previous_c = SEGMENT_L1 * (segment_previous_c[index] - 'c[index]) + 'c[index];

        if (stack_enabled) {
            // a_src_sp ===> set a = sp (only less significant index, rest must be 0)
            a_src_sp * (a[index] - (index == 0 ? sp: 0 )) === 0;
        }
        a_src_step * (a[index] - (index == 0 ? STEP : 0)) === 0;
        a_src_c * (a[index] - previous_c) === 0;
        b_src_c * (b[index] - previous_c) === 0;

        a_src_imm * (a[index] - a_imm[index]) === 0;
        b_src_imm * (b[index] - b_imm[index]) === 0;

        // continuations_transition(last_c[index], c[index]); // last_c[index]' = c[index];

        // if is not an external op and op=0 set c = 0
        (1 - is_external_op) * (1 - op) * c[index] === 0;

        // if is not an external op and op=1 set c = b
        (1 - is_external_op) * op * (b[index] - c[index]) === 0;
    }


    // if is not an external op and op=0 set flag = 1
    (1 - is_external_op) * (1 - op) * (1 - flag) === 0;

    // if is not an external op and op=1 set flag = 0
    (1 - is_external_op) * op * (flag) === 0;


    flag * set_pc === 0;
    // TODO! The following constraint is correct but something is not working in the compiler

    const expr expected_current_pc = 'set_pc * ('c[0] + 'jmp_offset1) + (1 - 'set_pc) * ('pc + 'jmp_offset2) + 'flag * ('jmp_offset1 - 'jmp_offset2);
    (1 - SEGMENT_L1) * (pc - expected_current_pc) === 0;


    if (stack_enabled) {
        const expr expected_current_sp = 'set_sp * ('c[0] - 'sp) + 'sp + 'inc_sp;
        const expr next_sp = expected_current_sp';

        SEGMENT_L1 * (sp - segment_initial_sp) === 0;
        (1 - SEGMENT_L1) * (sp - expected_current_sp) === 0;
        SEGMENT_LAST * (next_sp - segment_next_sp) === 0;
    }

    const expr next_pc = expected_current_pc';
    SEGMENT_LAST * (segment_next_pc - next_pc) === 0;

    for (int index = 0; index < RC; ++index) {
        SEGMENT_LAST * (segment_last_c[index] - c[index]) === 0;
    }

    const expr main_next_segment = (main_segment + 1) * (1 - main_last_segment);

    if (stack_enabled) {
        direct_update_assumes(MAIN_CONTINUATION_ID, [main_segment, 0, segment_initial_pc, ...segment_previous_c, segment_initial_sp]);
        direct_update_proves(MAIN_CONTINUATION_ID, [main_next_segment, main_last_segment, segment_next_pc, ...segment_last_c, segment_next_sp]);
    } else {
        direct_update_assumes(MAIN_CONTINUATION_ID, [main_segment, 0, segment_initial_pc, ...segment_previous_c]);
        direct_update_proves(MAIN_CONTINUATION_ID, [main_next_segment, main_last_segment, segment_next_pc, ...segment_last_c]);
    }

    flag * (1 - flag) === 0;

    // set lsb of rom_flags always to 1 to force that padding rom rows (all values to zero), doesn't
    // match with main trace.
    const expr rom_flags = 1 + 2 * a_src_imm + 4 * a_src_mem + 8 * a_src_step + 16 * b_src_imm + 32 * b_src_mem
                           + 64 * is_external_op + 128 * store_ra + 256 * store_mem + 512 * store_ind +
                           + 1024 * set_pc + 2048 * m32 + 4096 * b_src_ind;


    lookup_assumes(ROM_BUS_ID, [pc, a_offset_imm0, a_imm1, b_offset_imm0, b_imm1, ind_width,
                                op, store_offset, jmp_offset1, jmp_offset2, rom_flags]);

    const int zeros[RC];
    for (int index = 0; index < RC; ++index) {
        zeros[index] = 0;
    }

    if (stack_enabled) {
        direct_global_update_proves(MAIN_CONTINUATION_ID, expressions: [0, 0, BOOT_ADDR, ...zeros, INITIAL_SP]);
        direct_global_update_assumes(MAIN_CONTINUATION_ID, expressions: [0, 1, END_PC_ADDR, ...zeros, END_SP]);
    } else {
        direct_global_update_proves(MAIN_CONTINUATION_ID, expressions: [0, 0, BOOT_ADDR, ...zeros]);
        direct_global_update_assumes(MAIN_CONTINUATION_ID, expressions: [0, 1, END_PC_ADDR, ...zeros]);
    }
}
