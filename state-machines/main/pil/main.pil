// require "std_permutation.pil"
// require "std_lookup.pil"
// require "mem.pil"
// require "operation.pil"

const int BOOT_ADDR = 0x1000;

airtemplate Main(int N = 2**21, int RC = 2, int stack_enabled = 0, const int operation_bus_id, int MAIN_CONTINUATION_ID = 1000) {

    col fixed SEGMENT_L1 = [1,0...];
    col fixed SEGMENT_STEP = [0..(N-1)];

    const expr SEGMENT_LAST = SEGMENT_L1';

    // TODO: airval
    // airgroupval aggregate(sum) main_first_segment;   // first
    // airgroupval aggregate(sum) main_last_segment;    // final
    // airgroupval aggregate(sum) main_segment;         // serial

    col witness main_first_segment;   // first
    col witness main_last_segment;    // final
    col witness main_segment;         // serial

    main_first_segment * (1 - main_first_segment) === 0;    
    main_last_segment * (1 - main_last_segment) === 0;  
    main_first_segment * main_segment === 0;

    const expr L1 = SEGMENT_L1 * main_first_segment;
    const expr LAST = SEGMENT_LAST * main_last_segment;
    const expr STEP = main_segment * N + SEGMENT_STEP;

    // Registers

    col witness a[RC];
    col witness b[RC];
    col witness c[RC];
    col witness last_c[RC];
    col witness flag;

    col witness pc;      // Program counter

    // continuations

    // continuations_setup(MAIN_CONTINUATION_ID, main_segment, main_end);

    // Instruction

    // a_src_step
    // a_src_mem 
    // a_src_imm
    // a_src_sp
    // b_src_mem
    // b_src_imm
    // b_src_ind

    // Source A

    col witness a_src_imm;         // Selector
    col witness a_src_mem;         // Selector
    col witness a_offset_imm0;

    if (stack_enabled == 1) {
        col witness air.sp;
        col witness air.a_src_sp;
        col witness air.a_use_sp_imm1;
    } else {
        col witness air.a_imm1;
    }
    col witness a_src_step;

    // Source B

    col witness b_src_imm;         // Selector
    col witness b_src_mem;         // Selector
    col witness b_offset_imm0;

    if (stack_enabled) {
        col witness air.b_use_sp_imm1;
    } else {
        col witness air.b_imm1;
    }
    col witness b_src_ind;
    col witness ind_width;  // 8 , 4, 2, 1

    // Operations related

    col witness is_external_op;    // 1 If it's an op proved by a different coprocessor (1 clock op).
    col witness op;                // if is_external_op1== is_external_op2 == 0 if op=0  then a->c, flag->1
                                   //                                           if op=1 then  b->c, flag->0;
                                   // else then this op is passed to the bus.

    // Destination C

    // What to store
    col witness store_ra;  // Store the return address instead of the C register.

    // Where to store
    col witness store_mem;  // 1 of the registers are read/write from memory
    col witness store_ind;

    col witness store_offset;

    col witness set_pc;


    if (stack_enabled) {
        col witness air.store_use_sp;
        col witness air.set_sp;
        col witness air.inc_sp;
    }


    col witness jmp_offset1, jmp_offset2;  // if flag, goto2, else goto 1
    col witness end;                     
    col witness m32;

    const expr sel_mem_b;
    const expr addr[3];

    sel_mem_b = b_src_mem + b_src_ind;
    if (stack_enabled) {
        addr[0] = a_offset_imm0 + a_use_sp_imm1 * sp;
        addr[1] = b_offset_imm0 + b_src_ind * (a[0] + 2**32 * a[1]) +  b_use_sp_imm1 * sp;
        addr[2] = store_offset + store_ind * a[0] + store_use_sp * sp;
    } else {
        addr[0] = a_offset_imm0;
        addr[1] = b_offset_imm0 + b_src_ind * (a[0] + 2**32 * a[1]);
        addr[2] = store_offset + store_ind * a[0];
    }

    mem_load(sel: a_src_mem, 
             step: STEP, 
             step_offset: 0,
             addr: addr[0],
             value: a);

    mem_load(sel: sel_mem_b,
             step: STEP, 
             step_offset: 1,
             bytes: ind_width,
             addr: addr[1],
             value: b);

    mem_store(sel: store_mem + store_ind, 
              step: STEP,
              step_offset: 2, 
              bytes: ind_width,
              addr: addr[2],
              value: [store_ra*(pc + jmp_offset2 - c[0]) + c[0], (1 - store_ra) * c[1]]);


    // Operation.assume => how organize software
    col witness operation_bus_enabled;
    // lookup_assumes(operation_bus_id, [STEP, op, a[0], (1 - m32) * a[1], b[0], (1 - m32) * b[1], ...c, flag], sel: is_external_op * operation_bus_enabled);

    const expr a_src_c;
    const expr b_src_c;

    const expr a_imm[2];
    const expr b_imm[2];

    a_imm[0] = a_offset_imm0;
    b_imm[0] = b_offset_imm0;

    if (stack_enabled) {
        a_src_c = 1 - a_src_step - a_src_mem - a_src_imm - a_src_sp;
        b_src_c = 1 - b_src_mem - b_src_imm - b_src_ind;
        a_imm[1] = a_use_sp_imm1;
        b_imm[1] = b_use_sp_imm1;
    } else {
        a_src_c = 1 - a_src_step - a_src_mem - a_src_imm;
        b_src_c = 1 - b_src_mem - b_src_imm - b_src_ind;
        a_imm[1] = a_imm1;
        b_imm[1] = b_imm1;
    }

    for (int index = 0; index < RC; ++index) {
        if (stack_enabled) {
            // a_src_sp ===> set a = sp (only less significant index, rest must be 0)
            a_src_sp * (a[index] - (index == 0 ? sp: 0 )) === 0;
        }
        a_src_step * (a[index] - (index == 0 ? STEP : 0)) === 0;
        a_src_c * (a[index] - last_c[index]) === 0;
        b_src_c * (b[index] - last_c[index]) === 0;

        a_src_imm * (a[index] - a_imm[index]) === 0;
        b_src_imm * (b[index] - b_imm[index]) === 0;

        // continuations_transition(last_c[index], c[index]); // last_c[index]' = c[index];

        // if is not an external op and op=0 set c = 0
        (1 - is_external_op) * (1 - op) * c[index] === 0;

        // if is not an external op and op=1 set c = b
        (1 - is_external_op) * op * (b[index] - c[index]) === 0;
    }


    // if is not an external op and op=0 set flag = 1
    (1 - is_external_op) * (1 - op) * (1 - flag) === 0;

    // if is not an external op and op=1 set flag = 0
    (1 - is_external_op) * op * (flag) === 0;


    // continuations
    // continuations_transition(pc, set_pc * (c[0] + jmp_offset1  - new_pc) + new_pc);
    // continuations_transition(last_c[0], c[0]); // last_c[0]' = c[0];        
    // continuations_transition(last_c[1], c[1]); // last_c[1]' = c[1];        

    // const expr new_pc = pc + flag*(jmp_offset1 - jmp_offset2) + jmp_offset2;
    // const expr next_pc = set_pc * (c[0] + jmp_offset1  - new_pc) + new_pc  + end * L1' * (0x8000_0000 - (pc + jmp_offset1));

    // (1 - SEGMENT_LAST) * (pc' - next_pc) === 0;
    // (1 - SEGMENT_LAST) * (last_c[0]' - c[0]) === 0;
    // (1 - SEGMENT_LAST) * (last_c[1]' - c[1]) === 0;

    if (stack_enabled) {
        // sp' === set_sp*(c - sp) + sp + inc_sp + end * L1'*(0 - sp);  // assume that when end=1 then set_sp=0 and inc_sp=0
        // sp * L1 === 0;     // Force sp == 0 at the begining
        // continuations_transition(sp, set_sp*(c - sp) + sp + inc_sp);
        const expr next_sp = set_sp * (c[0] - sp) + sp + inc_sp;;
        (1 - SEGMENT_LAST) * (sp' - next_sp) === 0;
        // permutation_proves(MAIN_CONTINUATION_ID, sel: SEGMENT_LAST, cols: [next_pc, ...c, next_sp]);
        // permutation_assumes(MAIN_CONTINUATION_ID, sel: SEGMENT_L1, cols: [pc, ...last_c, sp]); 
    } else {
        // permutation_proves(MAIN_CONTINUATION_ID, sel: SEGMENT_LAST, cols: [next_pc, ...c]);
        // permutation_assumes(MAIN_CONTINUATION_ID, sel: SEGMENT_L1, cols: [pc, ...last_c]); 
    }

    // pc' === set_pc * ( c[0] + jmp_offset1  - new_pc) + new_pc  + end * L1'*(0x8000_0000 - (pc + jmp_offset1 ));  // Assume that when end=1 then  set_pc = 0 and flag = 0

    L1 * (pc - BOOT_ADDR) === 0; // when end of program jump to this address

    flag * (1 - flag) === 0;

    /*
    if (stack_enabled) {    
        const expr rom_flags =  a_src_imm + 2 * a_src_mem + 4 * b_src_imm + 8 * b_src_mem + 16 * store_ra + 32 * store_mem + 64 * store_ind + 128 * set_pc + 256 * m32 + 512 * end + 1024 * is_external_op +
                               2**11 * a_src_sp + 2**12 * a_use_sp_imm1 + 2**13 * a_src_step + 2**14 * b_src_ind + 2**15 * store_use_sp;
        // lookup_assumes(ROM_ID, cols: [pc, rom_flags, op, a_offset_imm0, b_offset_imm0, ind_width, store_offset, jmp_offset1, jmp_offset2, inc_sp, b_use_sp_imm1]);
    } else {
        const expr rom_flags = a_src_imm + 2 * a_src_mem + 4 * b_src_imm + 8 * b_src_mem + 16 * store_ra + 32 * store_mem + 64 * store_ind + 128 * set_pc + 256 * m32 + 512 * end + 1024 * is_external_op;
        // lookup_assumes(ROM_ID, cols: [pc, rom_flags, op, a_offset_imm0, b_offset_imm0, ind_width, store_offset, jmp_offset1, jmp_offset2, a_src_step_imm1, b_src_ind_imm1]);
    }
    */
}