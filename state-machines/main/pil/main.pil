require "std_lookup.pil"
require "std_permutation.pil"
require "std_direct.pil"

const int BOOT_ADDR = 0x1000;
const int END_PC_ADDR = 0x1004;
const int INITIAL_SP = 0;
const int END_SP = 0;
const int MAX_RANGE = (1 << 24) - 1;
const int REG_BASE_ADDR = 0xA000_0000;

airtemplate Main(int N = 2**21, int RC = 2, int stack_enabled = 0, const int operation_bus_id,
                 const int MAIN_CONTINUATION_ID = 1000,
                 const int REGS_IN_MAIN_FROM = 1, const int REGS_IN_MAIN_TO = 31) {

    const int REGS_IN_MAIN = REGS_IN_MAIN_TO - REGS_IN_MAIN_FROM + 1;

    col fixed SEGMENT_L1 = [1,0...];
    col fixed SEGMENT_STEP = [0..(N-1)];

    const expr SEGMENT_LAST = SEGMENT_L1';

    // CONTINUATIONS
    //
    // Main continuations use air values to define constraints in a one-dimensional space
    // between air segments. Additionally, constraints involving these air values
    // and two-dimensional elements (trace, with rows and columns) are defined in air,
    // usually affecting values in the first and last rows of each segment.
    //
    //                       ┌── segment/next_segment
    //                       │   ┌── 0/is_last_segment
    //                       │   │     ┌── inicial_pc/next_pc
    //                       │   │     │          ┌── previous_c/last_c
    //                       │   │     │          │
    //                       │   │     │          │             BUS
    //  global constraint  [  0|  0|INITIAL_PC|0         ]   => | | ╌┐
    //                                                          | |  ┆
    //  segment-0          [  0|  0|INITIAL_PC|0         ]   <= | | <┘
    //  segment-0          [  1|  0|pc_1      |last_c    ]   => | | ╌┐
    //  segment-1          [  1|  0|pc_1      |previous_c]   <= | | <┘
    //  segment-1          [  2|  0|pc_2      |last_c    ]   => | | ╌┐
    //                     :   :   :          :          :      : :  :
    //                     :   :   :          :          :      : :  :
    //  segment-i          [  i|  0|pc_i      |previous_c]   <= | | <┘
    //  segment-i          [i+1|  0|pc_i+1    |last_c    ]   => | | ╌┐
    //                     :   :   :          :          :      : :  :
    //                     :   :   :          :          :      : :  :
    //  segment-n          [  n|  0|pc_n      |previous_c]   <= | | <┘
    //  segment-n          [  0|  1|END_PC    |0         ]   => | | ╌┐
    //                                                          | |  ┆
    //  global constraint  [  0|  1|END_PC    |0         ]   <= | | <┘
    //
    // One segment "assumes" the state/values of the previous segment and "proves" the state/values
    // of the next segment. To prevent an insecure cycle, we enforce that the beginning and end
    // of the cycle are defined by global constraints. With this mechanism, we ensure that only one
    // cycle is executed and what is exactly the initial and final state of the main trace.
    //
    // In the "assumed" state of the segment we put a 0 on second column (is_last_segment), while in
    // "proved" state we put the value of is_last_segment, with this we ensure that the end of last
    // segment cannot be used to init a new cycle.
    //
    // In main continuations, the `pc` of the next step is determined by the current state
    // (flags, register values, etc.). For this reason, in the last row, the next `pc` value is
    // calculated and then sent to the bus. In the first row of the next segment, it is verified
    // that these two values match.
    //
    // In the case of `c`, the current value of `c` is sent in the last row of a segment.
    // Within a segment, when `last_c` is referenced, if we are in the first row,
    // we take the value received from the bus; otherwise, we take the value from the previous row.

    airval main_last_segment;          // Selector to indicate that this is last main segment
    airval main_segment;               // Id of current main segment
    airval segment_initial_pc;         // Initial value of `pc`, it matches the `pc` value at row 0.
    airval segment_previous_c[RC];     // Last value stored in previous instance.
    airval segment_next_pc;            // The initial `pc` of next instance.
    airval segment_last_c[RC];         // Last value stored in current instance.

    if (stack_enabled) {
        airval segment_initial_sp;     // Initial value of `sp`, it matches the `sp` value at row 0.
        airval segment_next_sp;        // The initial `sp` of next instance.
    }

    // main_last_segment is a boolean value

    main_last_segment * (1 - main_last_segment) === 0;

    // STEP is a composed value of SEGMENT_STEP (relative to segment) and main_segment

    const expr STEP = main_segment * N + SEGMENT_STEP;

    // Registers

    col witness a[RC];
    col witness b[RC];
    col witness c[RC];
    col witness flag;                  // Conditional flag modified by operations

    col witness pc;                    // Program counter

    // Source A

    col witness a_src_imm;             // Selector indicating that 'a' uses an immediate value.
    col witness a_src_mem;             // Selector indicating that 'a' is read from memory.
    col witness a_offset_imm0;         // Depending on the flag values, this witness contains either
                                       // the lower 32-bit part of an immediate value or the memory
                                       // address offset.
    if (stack_enabled == 1) {
        col witness air.sp;
        col witness air.a_src_sp;
        col witness air.a_use_sp_imm1;
    } else {
        col witness air.a_imm1;        // The higher 32-bit part of a immediate value
    }
    col witness a_src_step;            // Selector to load the `step` in register `a`

    // Source B

    col witness b_src_imm;             // Selector indicating that 'b' uses an immediate value.
    col witness b_src_mem;             // Selector indicating that 'b' is read from memory.
    col witness b_offset_imm0;         // Depending on the flag values, this witness contains either
                                       // the lower 32-bit part of an immediate value or the memory
                                       // address offset.

    if (stack_enabled) {
        col witness air.b_use_sp_imm1;
    } else {
        col witness air.b_imm1;        // The higher 32-bit part of a immediate value
    }
    col witness b_src_ind;             // Selector to indicate take value in a as address to
                                       // read b form memory (b = mem[a])
    col witness ind_width;             // bytes: 8, 4, 2, 1

    // Operations related

    col witness is_external_op;        // [is_external_op == 1] => operation op sent to bus
    col witness op;                    // [is_external_op == 0 && op=0] ==>  a=last_c, flag=1
                                       // [is_external_op == 0 && op=0] ==>  b=last_c, flag=0
                                       // else then this op is sent to the bus.

    // Destination C

    col witness store_ra;              // Store the return address instead of the C register.

    col witness store_mem;             // Selector for store c to memory
    col witness store_ind;             // Selector for store c to memory address in a

    col witness store_offset;          // Memory address offset used on c

    col witness set_pc;                // Selector to set to pc the value in c

    if (stack_enabled) {
        col witness air.store_use_sp;  // Selector to calculate store address use sp
        col witness air.set_sp;        // Selector to set result as new value of sp
        col witness air.inc_sp;        // Increment of sp (negative or positive)
    }


    col witness jmp_offset1;           // Next default pc if flag = 0
    col witness jmp_offset2;           // Next default pc if flag = 1
    col witness m32;                   // Selector to indicate the high part of operands (a,b) send
                                       // to bus must be 0, because it's a 32 bits operation. Used
                                       // to avoid sent to bus dirty values.

    const expr sel_mem_b;
    sel_mem_b = b_src_mem + b_src_ind;

    // Some of these values are expressions while others are witness + constraint. The expressions
    // are "converted" to witness to avoid increase the degree on stage 2 with extension.

    if (stack_enabled) {
        col witness air.addr0;
        col witness air.addr1;
        col witness air.addr2;

        addr0 === a_offset_imm0 + a_use_sp_imm1 * sp;
        addr1 === b_offset_imm0 + b_src_ind * (a[0] + 2**32 * a[1]) +  b_use_sp_imm1 * sp;
        addr2 === store_offset + store_ind * a[0] + store_use_sp * sp;
    } else {
        const expr air.addr0;
        col witness air.addr1;
        const expr air.addr2;
        addr0 = a_offset_imm0;
        addr1 === b_offset_imm0 + b_src_ind * (a[0] + 2**32 * a[1]);
        addr2 = store_offset + store_ind * a[0];
    }

    //
    // Timestamp: main_step, mem_step
    //
    // A step of the main is like a timestamp. We use the concepts of main_step and mem_step.
    // The mem_step is a smaller unit than the main_step because, in the same main_step, multiple
    // memory operations can occur. We have 4 mem_steps for each main_step to do two reads and one
    // write. These reads and writes could be unaligned, or we could call to a precompiled operation,
    // and we need space for them (unaligned, precompiled make read and write).
    //
    // The conversion is like mem_step = 1 + main_step * 4 + mem_slot.
    // The mem_slot is the position of operation inside de main_step, 0,1 for read, 2,3 for write.

    //
    // Registers on Main
    //
    // Move registers from memory to main, using a linked operations list to guarantee the
    // integrity of register operations:
    //
    // - List must be ordered.
    //
    //   To check it, on each operation, we verify with a range check that the previous operation
    //   is older than the current; this means the difference between current mem_step and
    //   previous_reg_mem_step is greater than 1.
    //
    // - Link operations
    //
    //   We assume that the register on the previous mem_step has a previous value, and we prove
    //   the register has a value in the current mem_step. The previous value and value are the
    //   same for a read operation because they use the same column. To reduce number of columns,
    //   we reuse the actual assume used by memory. For this reason really we use prove for previous
    //   operation and assume for current operation.
    //
    // - Large Range Check
    //
    //   When we verify that prev_reg_mem_step is less than reg_mem_step, use a range check,
    //   but this range check is limited to 2^24, but it isn't enough. For example, if we read
    //   a register on the first row of an instance and read again at the same row but eight
    //   instances after, the difference between range_checks was 4 * 8 * sizeo_of_instance.
    //
    //   For example: 4 * 8 * 2^21 = 2^26.
    //
    //   To avoid this situation, we sent to bus the read of all registers on the last mem_step
    //   of the current instance (final reload); with this, we limit the máximum difference to
    //   size_of_instance * 4, in this case 2^23 with instances of 2^21 rows, or 2^24 with
    //   instances of 2^22 rows.
    //
    // - Initial and Final Cycle
    //
    //   In the global constraints, we prove (assume) that the initial values of registers were
    //   zero. At each end of the instance, we send to the bus a proves and assumes for each
    //   register, but in the last segment, we don't send the assume, only send provers, and
    //   with this, we close the cycle.
    //
    // - The register region and normal memory are non-overlapping.
    //
    //   The register area is mapped to a separate "address range", ensuring it does not
    //   interfere with normal memory. Registers use indexes as their addresses to prevent overlap
    //   with regular memory. The area allocated for registers does not overlap with any memory
    //   region. As a result, no memory state machine can validate memory access in this area;
    //   only the main state machine can 'prove' such memory access.

    col witness a_reg_prev_mem_step;      // Previous mem_step where register a_offset_imm0 is used
    col witness b_reg_prev_mem_step;      // Previous mem_step where register b_offset_imm0 is used
    col witness store_reg_prev_mem_step;  // Previous mem_step where register store_offset is used
    col witness store_reg_prev_value[RC]; // Previous value of register store_offset is used
    col witness a_src_reg;                // Selector indicating that 'a' is read from register
    col witness b_src_reg;                // Selector indicating that 'b' is read from register
    col witness store_reg;                // Selector to store result to register

    // Calculate the memory step from the main step

    const expr a_mem_step = main_step_to_mem_step(STEP, 0);
    const expr b_mem_step = main_step_to_mem_step(STEP, 1);
    const expr store_mem_step = main_step_to_mem_step(STEP, 2);

    // Memory function to prove that previous register a_offset_imm0 access.

    reg_pre_load(sel: a_src_reg,
             prev_mem_step: a_reg_prev_mem_step,
             addr: a_offset_imm0,
             value: a);

    // Memory function to assume current register a_offset_imm0 access or memory access to addr0.

    mem_op(sel: a_src_mem + a_src_reg,
           op: MEMORY_LOAD_OP * a_src_mem + MEMORY_REG_OP * a_src_reg,
           mem_step: a_mem_step,
           addr: addr0,
           value: a);


    // Memory function to prove that previous register b_offset_imm0 access.

    reg_pre_load(sel: b_src_reg,
             prev_mem_step: b_reg_prev_mem_step,
             addr: b_offset_imm0,
             value: b);

    // Memory function to assume current register b_offset_imm0 access or memory access to addr1.

    mem_op(sel: sel_mem_b + b_src_reg,
           op: MEMORY_LOAD_OP * sel_mem_b + MEMORY_REG_OP * b_src_reg,
           mem_step: b_mem_step,
           bytes: b_src_ind * (ind_width - 8) + 8,
           addr: addr1,
           value: b);

    // Calculate the value to store in memory

    const expr store_value[2];

    store_value[0] = store_ra*(pc + jmp_offset2 - c[0]) + c[0];
    store_value[1] = (1 - store_ra) * c[1];

    // Memory function to prove that previous register store_offset access.

    reg_pre_store(sel: store_reg,
              prev_mem_step: store_reg_prev_mem_step,
              addr: store_offset,
              value: store_reg_prev_value);

    // Memory function to assume current register store_offset access or memory access to addr2.

    mem_op(sel: store_mem + store_ind + store_reg,
           op: MEMORY_STORE_OP * (store_mem + store_ind) + MEMORY_REG_OP * store_reg,
           mem_step: store_mem_step,
           bytes: store_ind * (ind_width - 8) + 8,
           addr: addr2,
           value: store_value);

    // Range check for register operations, to check that previous register access is greater than
    // the current register access.

    range_check(expression: a_mem_step - a_reg_prev_mem_step - 1, min: 0, max: MAX_RANGE, sel: a_src_reg);
    range_check(expression: b_mem_step - b_reg_prev_mem_step - 1, min: 0, max: MAX_RANGE, sel: b_src_reg);
    range_check(expression: store_mem_step - store_reg_prev_mem_step -1 , min: 0, max: MAX_RANGE, sel: store_reg);

    // Sent to bus the external operation

    lookup_assumes(operation_bus_id, [op, a[0], (1 - m32) * a[1], b[0], (1 - m32) * b[1], ...c, flag], sel: is_external_op);

    const expr a_src_c;
    const expr b_src_c;

    const expr a_imm[2];
    const expr b_imm[2];

    a_imm[0] = a_offset_imm0;
    b_imm[0] = b_offset_imm0;

    // Optimization to avoid use extra columns when c is source for a or b.

    if (stack_enabled) {
        a_src_c = 1 - a_src_step - a_src_mem - a_src_imm - a_src_sp;
        b_src_c = 1 - b_src_mem - b_src_imm - b_src_ind - b_src_reg;
        a_imm[1] = a_use_sp_imm1;
        b_imm[1] = b_use_sp_imm1;
    } else {
        a_src_c = 1 - a_src_step - a_src_mem - a_src_imm - a_src_reg;
        b_src_c = 1 - b_src_mem - b_src_imm - b_src_ind - b_src_reg;
        a_imm[1] = a_imm1;
        b_imm[1] = b_imm1;
    }


    for (int index = 0; index < RC; ++index) {
        const expr previous_c = SEGMENT_L1 * (segment_previous_c[index] - 'c[index]) + 'c[index];

        if (stack_enabled) {
            // a_src_sp ===> set a = sp (only less significant index, rest must be 0)
            a_src_sp * (a[index] - (index == 0 ? sp: 0 )) === 0;
        }

        // If source is step, value must be same as STEP
        a_src_step * (a[index] - (index == 0 ? STEP : 0)) === 0;

        // If source is c, value must be same as previous_c
        a_src_c * (a[index] - previous_c) === 0;
        b_src_c * (b[index] - previous_c) === 0;

        // If source is immediate, value must immediate value
        a_src_imm * (a[index] - a_imm[index]) === 0;
        b_src_imm * (b[index] - b_imm[index]) === 0;

        // if is not an external op and op=0 set c = 0
        (1 - is_external_op) * (1 - op) * c[index] === 0;

        // if is not an external op and op=1 set c = b
        (1 - is_external_op) * op * (b[index] - c[index]) === 0;
    }


    // if is not an external op and op=0 set flag = 1
    (1 - is_external_op) * (1 - op) * (1 - flag) === 0;

    // if is not an external op and op=1 set flag = 0
    (1 - is_external_op) * op * (flag) === 0;

    // The selectors flag an set_pc are disjoint, meaning they cannot be active simultaneously.
    flag * set_pc === 0;

    const expr expected_current_pc = 'set_pc * ('c[0] + 'jmp_offset1) + (1 - 'set_pc) * ('pc + 'jmp_offset2) + 'flag * ('jmp_offset1 - 'jmp_offset2);
    (1 - SEGMENT_L1) * (pc - expected_current_pc) === 0;


    if (stack_enabled) {
        const expr expected_current_sp = 'set_sp * ('c[0] - 'sp) + 'sp + 'inc_sp;
        const expr next_sp = expected_current_sp';

        SEGMENT_L1 * (sp - segment_initial_sp) === 0;
        (1 - SEGMENT_L1) * (sp - expected_current_sp) === 0;
        SEGMENT_LAST * (next_sp - segment_next_sp) === 0;
    }

    const expr next_pc = expected_current_pc';
    SEGMENT_LAST * (segment_next_pc - next_pc) === 0;

    for (int index = 0; index < RC; ++index) {
        SEGMENT_LAST * (segment_last_c[index] - c[index]) === 0;
    }

    // Constraints for registers on main

    airval last_reg_value[REGS_IN_MAIN][RC];    // last value in the segment for each register.
    airval last_reg_mem_step[REGS_IN_MAIN];     // last mem_step in the segment for each register.

    // Calculate the last `mem_step` of the current segment. If the last rows have stored a value
    // in a register, the `mem_offset` is 2. For this reason, `mem_offset` 3 is safe and available.
    // The `mem_offset` is only used by precompiled or unaligned memory writes, which exclude a
    // register write.

    const expr last_segment_reg_mem_step = main_step_to_special_mem_step((main_segment + 1) * N - 1);

    // Reload all registers to prevent a large range check, this reload ensures that the range check
    // verifies the validity of both the previous and current accesses in this last `reg_mem_step`.
    // In the case of the last segment, the current access isn't send to closed the cycle.

    for (int ireg = 0; ireg < REGS_IN_MAIN; ++ireg) {
        // Range check to verify that the previous access was before the last access.
        range_check(expression: last_segment_reg_mem_step - last_reg_mem_step[ireg] - 1, min: 0, max: MAX_RANGE);

        // Proves the last access.
        reg_pre_load(prev_mem_step: last_reg_mem_step[ireg], addr: ireg + REGS_IN_MAIN_FROM, value: last_reg_value[ireg]);

        // Send to the bus current access, it will the previous access in the next segment.
        // Selector because this must not be send in the last segment.
        mem_op(op: MEMORY_REG_OP, mem_step: last_segment_reg_mem_step, addr: ireg + REGS_IN_MAIN_FROM, value: last_reg_value[ireg], sel: (1 - main_last_segment));
    }

    // flag must be boolean

    flag * (1 - flag) === 0;

    // set lsb of rom_flags always to 1 to force that padding rom rows (all values to zero), doesn't
    // match with main trace.

    // To compress flags into a single value and optimize ROM, we must ensure that all these flags
    // are boolean.

    a_src_imm * (1 - a_src_imm) === 0;
    a_src_mem * (1 - a_src_mem) === 0;
    a_src_step * (1 - a_src_step) === 0;
    b_src_imm * (1 - b_src_imm) === 0;
    b_src_mem * (1 - b_src_mem) === 0;
    is_external_op * (1 - is_external_op) === 0;
    store_ra * (1 - store_ra) === 0;
    store_mem * (1 - store_mem) === 0;
    store_ind * (1 - store_ind) === 0;
    set_pc * (1 - set_pc) === 0;
    m32 * (1 - m32) === 0;
    b_src_ind * (1 - b_src_ind) === 0;
    a_src_reg * (1 - a_src_reg) === 0;
    b_src_reg * (1 - b_src_reg) === 0;
    store_reg * (1 - store_reg) === 0;

    const expr rom_flags = 1 + 2 * a_src_imm + 4 * a_src_mem + 8 * a_src_step + 16 * b_src_imm
                           + 32 * b_src_mem + 64 * is_external_op + 128 * store_ra + 256 * store_mem
                           + 512 * store_ind + 1024 * set_pc + 2048 * m32 + 4096 * b_src_ind
                           + 8192 * a_src_reg + 16384 * b_src_reg + 32768 * store_reg;

    // Lookup in ROM to ensure that only program instructions are executed.

    lookup_assumes(ROM_BUS_ID, [pc, a_offset_imm0, a_imm1, b_offset_imm0, b_imm1, ind_width,
                                op, store_offset, jmp_offset1, jmp_offset2, rom_flags]);

    // Continuations between segments, we assume initial state and proves the final state.

    // The next segment increments the current segment by one, except for the last segment, which
    // closes the cycle at the known main_segment_id.

    const expr main_next_segment = (main_segment + 1) * (1 - main_last_segment);

    if (stack_enabled) {
        direct_update_assumes(MAIN_CONTINUATION_ID, [main_segment, 0, segment_initial_pc, ...segment_previous_c, segment_initial_sp]);
        direct_update_proves(MAIN_CONTINUATION_ID, [main_next_segment, main_last_segment, segment_next_pc, ...segment_last_c, segment_next_sp]);
    } else {
        direct_update_assumes(MAIN_CONTINUATION_ID, [main_segment, 0, segment_initial_pc, ...segment_previous_c]);
        direct_update_proves(MAIN_CONTINUATION_ID, [main_next_segment, main_last_segment, segment_next_pc, ...segment_last_c]);
    }

    // This global constraint is sent to the bus to define the initial and final values of
    // continuations. A global constraint is used to ensure there is only one initial and one final
    // value, preventing multiple cycles of `main`.

    // In the initial state define the initial `pc` and final  `pc`. Before finish a execution the
    // value of "c" must be 0.

    const int zeros[RC];
    for (int index = 0; index < RC; ++index) {
        zeros[index] = 0;
    }

    // These constraints define the state at the beginning and end of a main continuation.

    if (stack_enabled) {
        direct_global_update_proves(MAIN_CONTINUATION_ID, expressions: [0, 0, BOOT_ADDR, ...zeros, INITIAL_SP]);
        direct_global_update_assumes(MAIN_CONTINUATION_ID, expressions: [0, 1, END_PC_ADDR, ...zeros, END_SP]);
    } else {
        direct_global_update_proves(MAIN_CONTINUATION_ID, expressions: [0, 0, BOOT_ADDR, ...zeros]);
        direct_global_update_assumes(MAIN_CONTINUATION_ID, expressions: [0, 1, END_PC_ADDR, ...zeros]);
    }

    // The initialization of the main registers cycle, these constraints that defines the beginning
    // of a cycle of register access. Their initial value is set to zero.

    for (int ireg = 0; ireg < REGS_IN_MAIN; ++ireg) {
        global_init_mem(sel: 1, addr: ireg + REGS_IN_MAIN_FROM, value: zeros);
    }

}