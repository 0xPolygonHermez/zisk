require "std_lookup.pil"
require "constants.pil"

// Operations Table:
//                                                                   Running Total
// SLL/SLL_W  *  (OP:0x0d)    2^8 (A) * 2^3 (OFFSET) * 2^6 (B)  = 2^17 |        2^17
// SRL/SRL_W  *  (OP:0x0e)    2^8 (A) * 2^3 (OFFSET) * 2^6 (B)  = 2^17 | 2^18
// SRA/SRA_W  *  (OP:0x0f)    2^8 (A) * 2^3 (OFFSET) * 2^6 (B)  = 2^17 | 2^18 + 2^17
// SE_B          (OP:0x23)    2^8 (A) * 2^3 (OFFSET)            = 2^11 | 2^18 + 2^17                   + 2^11
// SE_H          (OP:0x24)    2^8 (A) * 2^3 (OFFSET)            = 2^11 | 2^18 + 2^17            + 2^12
// SE_W          (OP:0x25)    2^8 (A) * 2^3 (OFFSET)            = 2^11 | 2^18 + 2^17            + 2^12 + 2^11
// EXT           (OP:0x26)    2^8 (A) * 2^3 (OFFSET)            = 2^11 | 2^18 + 2^17     + 2^13               => 2^19
// ------------------------------------------------------------------------------------------------------------------
// (*) The W variant has the second operand as a 5-bit value instead of 6-bit, but this is controlled outside

const int EXT_OP = 0x27;
const int BINARY_EXTENSION_TABLE_ID = 124;

airtemplate BinaryExtensionTable(const int N = 2**19, const int disable_fixed = 0) {
    
    col witness multiplicity;

    if (disable_fixed) {
        col fixed _K = [0...];
        // FORCE ONE TRACE
        multiplicity * _K === 0;
        
        println("*** DISABLE_FIXED ***"); 
        return;
    }

    if (N < 2**19) {
        error("N must be at least 2^19");
    }

    const int bits = 64;
    const int bytes = bits / 8;

    col fixed A = [0..255]...;                              // Input A    (8 bits)

    col fixed OFFSET = [0:P2_8..(bytes-1):P2_8]...;         // Offset     (3 bits)

    col fixed B = [[0:P2_11..63:P2_11]:3,                   // Input B    (6 bits)
                    0:(P2_11*4)]...;                    

    col fixed OP = [0x0d:P2_17, 0x0e:P2_17, 0x0f:P2_17,     // SLL/SLL_W, SRL/SRL_W, SRA/SRA_W
                    0x23:P2_11, 0x24:P2_11, 0x25:P2_11,     // SE_B, SE_H, SE_W
                    0x26:P2_11]...;                         // EXT_32

    col fixed C0;                                           // Output C0  (32 bits)
    col fixed C1;                                           // Output C1  (32 bits)
    for (int i = 0; i < N; i++) {
        println(i);
        int [op, offset, a, b] = [OP[i], OFFSET[i], A[i], B[i]];
        int _out = 0;
        switch (op) {
            case 0x0d: // SLL,SLL_W
                _out = a << b;
                _out = _out << 8*offset;

            case 0x0e: // SRL,SRL_W
                _out = a << 8*offset;
                _out = _out >> b;

            case 0x0f: // SRA,SRA_W
                // Compute two's complement
                _out = a & 0x80 ? a - 0x100 : a;

                // Compute the shift
                _out = _out << 8*offset;
                _out = _out >> b;

                // Convert back to two's complement
                _out = _out < 0 ? ((_out & (P2_63 - 1)) + P2_63) : _out;

            case 0x23: // SE_B
                if (offset == 0) {
                    _out = a & P2_7 ? (P2_7 | (a & (P2_7-1))) : (a & (P2_7-1));
                } else {
                    _out = a & P2_7 ? 0xFF00 << (8*(offset - 1)) : 0;
                }

            case 0x24: // SE_H
                if (offset == 0) {
                    _out = a
                } else if (offset == 1) {
                    _out = a & P2_7 ? (P2_7 | (a & (P2_7-1))) : (a & (P2_7-1));
                    _out = _out << 8;
                } else {
                    _out = a & P2_7 ? 0xFF0000 << (8*(offset - 2)) : 0;
                }

            case 0x25: // SE_W
                if (offset < 3) {
                    _out = a << (8*offset);
                } else if (offset == 3) {
                    _out = a & P2_7 ? (P2_7 | (a & (P2_7-1))) : (a & (P2_7-1));
                    _out = _out << 24;
                } else {
                    _out = a & P2_7 ? 0xFF00000000 << (8*(offset - 4)) : 0;
                }

            case 0x26: // EXT
                _out = (a & 0x80) ? 0xFF : 0x00;
                _out = _out << 8*offset;

            default:
                error(`Invalid operation ${op}`);
        }

        C0[i] = _out & (P2_32-1);
        C1[i] = (_out >> 32) & (P2_32-1);
    }

    // lookup_proves(BINARY_EXTENSION_TABLE_ID, [OP, OFFSET, A, B, C0, C1], multiplicity);
}