require "std_lookup.pil"
require "std_range_check.pil"

// Coprocessor in charge of performing standard RISCV binary operations

/*
List:
    ┼────────┼────────┼──────────┼
    │  name  │  bits  │   op     │
    ┼────────┼────────┼──────────┼
    │  SLL   │   64   │   0x31   │
    │  SRL   │   64   │   0x32   │
    │  SRA   │   64   │   0x33   │
    │  SLL_W │   32   │   0x34   │
    │  SRL_W │   32   │   0x35   │
    │  SRA_W │   32   │   0x36   │
    │  SE_B  │   32   │   0x37   │
    │  SE_H  │   32   │   0x38   │
    │  SE_W  │   32   │   0x39   │
    ┼────────┼────────┼──────────┼

Examples:
=======================================

SLL 28
x    in1[x]    out[x][0]     out[x][1]
---------------------------------------
0    0x11      0x10000000    0x00000001
1    0x22      0x00000000    0x00000220
2    0x33      0x00000000    0x00033000
3    0x44      0x00000000    0x04400000
4    0x55      0x00000000    0x50000000
5    0x66      0x00000000    0x00000000
6    0x77      0x00000000    0x00000000
7    0x88      0x00000000    0x00000000
---------------------------------------
Result:        0x10000000    0x54433221

SLL_W 8
x    in1[x]    out[x][0]     out[x][1]
---------------------------------------
0    0x11      0x00001100    0x00000000
1    0x22      0x00220000    0x00000000
2    0x33      0x33000000    0x00000000
3    0x44      0x00000000    0x00000044
4    0x55      0x00000000    0x00000000 (since 0x44 & 0x80 = 0, we stop here and set the remaining bytes to 0x00)
5    0x66      0x00000000    0x00000000 (bytes of in1 are ignored from here)
6    0x77      0x00000000    0x00000000
7    0x88      0x00000000    0x00000000
---------------------------------------
Result:        0x33221100    0x00000000

SE_H
x    in2[x]    out[x][0]     out[x][1]
---------------------------------------
0    0xbc      0x000000bc    0x00000000
1    0x8a      0xFFFF8a00    0xFFFFFFFF (since 0x8a & 0x80 = 0x80, we stop here and set the remaining bytes to 0xFF)
2    0x33      0x00000000    0x00000000 (bytes of in2 are ignored from here)
3    0x44      0x00000000    0x00000000
4    0x55      0x00000000    0x00000000
5    0x66      0x00000000    0x00000000
6    0x77      0x00000000    0x00000000
7    0x88      0x00000000    0x00000000
---------------------------------------
Result:        0xFFFF8abc    0xFFFFFFFF
*/

airtemplate BinaryExtension(const int N = 2**18, const int operation_bus_id) {
    const int bits = 64;
    const int bytes = bits / 8;

    col witness op;
    col witness in1[bytes];
    col witness in2_low;       // Note:  if in2_low∊[0,2^5-1], else in2_low∊[0,2^6-1] (checked by the table)
    col witness out[bytes][2];
    col witness op_is_shift;   // 1 if op is shift, 0 otherwise

    // Constraints to check the correctness of each binary operation
    for (int j = 0; j < bytes; j++) {
       lookup_assumes(BINARY_EXTENSION_TABLE_ID, [op, j, in1[j], in2_low, out[j][0], out[j][1], op_is_shift]);
    }

    // Constraints to make sure that this component is called from the main component
    col witness in2[2];

    expr in1_low = in1[0] + in1[1]*2**8 + in1[2]*2**16 + in1[3]*2**24;
    expr in1_high = in1[4] + in1[5]*2**8 + in1[6]*2**16 + in1[7]*2**24;

    col witness multiplicity;
    lookup_proves(
        operation_bus_id,
        [
            op,
            op_is_shift * (in1_low - in2[0]) + in2[0],
            op_is_shift * (in1_high - in2[1]) + in2[1],
            op_is_shift * (in2_low + 256 * in2[0] - in1_low) + in1_low,
            op_is_shift * (in2[1] - in1_high) + in1_high,
            out[0][0] + out[1][0] + out[2][0] + out[3][0] + out[4][0] + out[5][0] + out[6][0] + out[7][0],
            out[0][1] + out[1][1] + out[2][1] + out[3][1] + out[4][1] + out[5][1] + out[6][1] + out[7][1],
            0
        ],
        multiplicity
    );

    range_check(expression: in2[0], min: 0, max: 2**24 - 1, sel: op_is_shift);
}
