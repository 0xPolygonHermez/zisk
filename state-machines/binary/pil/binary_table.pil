require "constants.pil";

// PIL Binary Operations Table used by Binary
//                                                                                                     Running Total
// MINU/MINU_W  (OP:0x09)   *   2^16 (AxB) x 2^1 (LAST) x 2^1 (CIN) x 2^1 (RESULT_IS_A)     = 2^19 |               2^19      
// MIN/MIN_W    (OP:0x0a)   *   2^16 (AxB) x 2^1 (LAST) x 2^1 (CIN) x 2^1 (RESULT_IS_A)     = 2^19 |        2^20                   
// MAXU/MAXU_W  (OP:0x0b)   *   2^16 (AxB) x 2^1 (LAST) x 2^1 (CIN) x 2^1 (RESULT_IS_A)     = 2^19 |        2^20 + 2^19            
// MAX/MAX_W    (OP:0x0c)   *   2^16 (AxB) x 2^1 (LAST) x 2^1 (CIN) x 2^1 (RESULT_IS_A)     = 2^19 | 2^21
// LTU/LTU_W    (OP:0x04)   *   2^16 (AxB) x 2^1 (LAST) x 2^1 (CIN)                         = 2^18 | 2^21               + 2^18
// LT/LT_W      (OP:0x05)   *   2^16 (AxB) x 2^1 (LAST) x 2^1 (CIN)                         = 2^18 | 2^21        + 2^19           
// EQ/EQ_W      (OP:0x08)   *   2^16 (AxB) x 2^1 (LAST) x 2^1 (CIN)                         = 2^18 | 2^21        + 2^19 + 2^18
// ADD/ADD_W    (OP:0x02)  **   2^16 (AxB) x 2^1 (LAST) x 2^1 (CIN)                         = 2^18 | 2^21 + 2^20
// SUB/SUB_W    (OP:0x03)  **   2^16 (AxB) x 2^1 (LAST) x 2^1 (CIN)                         = 2^18 | 2^21 + 2^20        + 2^18
// LEU/LEU_W    (OP:0x06)   *   2^16 (AxB) x 2^1 (LAST)                                     = 2^17 | 2^21 + 2^20        + 2^18 + 2^17
// LE/LE_W      (OP:0x07)   *   2^16 (AxB) x 2^1 (LAST)                                     = 2^17 | 2^21 + 2^20 + 2^19      
// AND/AND_W    (OP:0x20)       2^16 (AxB) x 2^1 (LAST)                                     = 2^17 | 2^21 + 2^20 + 2^19        + 2^17
// OR/OR_W      (OP:0x21)       2^16 (AxB) x 2^1 (LAST)                                     = 2^17 | 2^21 + 2^20 + 2^19 + 2^18
// XOR/XOR_W    (OP:0x22)       2^16 (AxB) x 2^1 (LAST)                                     = 2^17 | 2^21 + 2^20 + 2^19 + 2^18 + 2^17
// EXT_32       (OP:0x23)       2^16 (AxB)                                                  = 2^16 | 2^21 + 2^20 + 2^19 + 2^18 + 2^17 + 2^16 => 2^22
// --------------------------------------------------------------------------------------------------------------------------
// (*) Use carry
// (**) Do not use last indicator, but it is used for simplicity of the lookup
// Note: EXT_32 is the only unary operation

const int EXT_32_OP = 0x23;
const int BINARY_TABLE_ID = 125;

airtemplate BinaryTable(const int N = 2**22, const int disable_fixed = 0) {

    #pragma memory m1 start
    col witness multiplicity;

    if (disable_fixed) {
        col fixed _K = [0...];
        // FORCE ONE TRACE
        multiplicity * _K === 0;

        println("*** DISABLE_FIXED ***");
        return;
    }

    if (N < 2**22) {
        error(`N must be at least 2^22, but N=${N} was provided`);
    }

    #pragma timer tt start
    #pragma timer t1 start

    col fixed A = [0..255]...;                          // Input A (8 bits)

    col fixed B = [0:P2_8..255:P2_8]...;                // Input B (8 bits)

    col fixed LAST = [[0:P2_16, 1:P2_16]:(4*4),         // Indicator of the last byte (1 bit)
                      [0:P2_16, 1:P2_16]:(5*2),
                      [0:P2_16, 1:P2_16]:5,
                       0:P2_16]...;

    col fixed CIN = [[0:P2_17, 1:P2_17]:(4*2),          // Input carry (1 bit)
                     [0:P2_17, 1:P2_17]:5,
                      0:(P2_17*5),
                      0:P2_16]...;

    col fixed RESULT_IS_A = [[0:P2_18, 1:P2_18]:4,      // If one, then the result of the operation
                              0:(P2_18*5),              // is the value of A; otherwise, it is B (1 bit)
                              0:(P2_17*5),
                              0:P2_16]...;

    col fixed OP = [0x09:P2_19, 0x0a:P2_19, 0x0b:P2_19, 0x0c:P2_19, // MINU,MIN,MAXU,MAX
                    0x04:P2_18, 0x05:P2_18, 0x08:P2_18,             // LTU,LT,EQ
                    0x02:P2_18, 0x03:P2_18,                         // ADD,SUB
                    0x06:P2_17, 0x07:P2_17,                         // LEU,LE
                    0x20:P2_17, 0x21:P2_17, 0x22:P2_17,             // AND,OR,XOR
                    0x23:P2_16]...;                                 // EXT_32

    #pragma timer t1 end
    #pragma timer t2 start

    col fixed C;             // Output C (8 bits)
    col fixed COUT;          // Output carry (1 bit)
    col fixed OP_IS_MIN_MAX; // Min,Max indicator (1 bit)
    col fixed FLAGS;

    #pragma transpile
    for (int i = 0; i < N; i++) {
        const int [plast, op, a, b, cin, result_is_a] = [LAST[i], OP[i], A[i], B[i], CIN[i], RESULT_IS_A[i]];
        int c = 0;
        int cout = 0;
        int op_is_min_max = 0;
        int use_last_carry = 0;
        switch (op) {
            case 0x02: // ADD,ADD_W
                c = (cin + a + b) & 0xFF;
                cout = plast ? 0 : (cin + a + b) >> 8;
                
            case 0x03: // SUB,SUB_W
                sign = (a - cin) >= b ? 0 : 1;
                c = 256 * sign + a - cin - b;
                cout = plast ? 0 : sign;

            case 0x04,0x05: // LTU,LTU_W,LT,LT_W
                if (a < b) {
                    cout = 1;
                    c = plast;
                } else if (a == b) {
                    cout = cin;
                    c = plast * cin;
                }

                // If the chunk is signed, then the result is the sign of a
                if (op == 0x05 && plast && (a & 0x80) != (b & 0x80)) {
                    c = (a & 0x80) ? 1 : 0;
                    cout = c;
                }

                use_last_carry = plast;

            case 0x06,0x07: // LEU,LEU_W,LE,LE_W
                if (a <= b) {
                    cout = 1;
                    c = plast;
                }

                if (op == 0x07 && plast && (a & 0x80) != (b & 0x80)) {
                    c = (a & 0x80) ? 1 : 0;
                    cout = c;
                }

                use_last_carry = plast;

            case 0x08: // EQ,EQ_W
                if (a == b && !cin) c = plast;
                else cout = 1;
                if (plast) cout = 1 - cout;

                use_last_carry = plast;

            case 0x09,0x0a: // MINU,MINU_W,MIN,MIN_W
                // cout = 1 indicates that a is lower than b
                if (a < b) {
                    cout = 1;
                } else if (a == b) {
                    cout = cin;
                }

                if (result_is_a) {
                    c = a;
                } else {
                    c = b;
                }

                if (op == 0x0a && plast && (a & 0x80) != (b & 0x80)) {
                    cout = (a & 0x80) ? 1 : 0;
                }

                op_is_min_max = 1;

            case 0x0b,0x0c: // MAXU,MAXU_W,MAX,MAX_W
                // cout = 1 indicates that a is greater than b
                if (a > b) {
                    cout = 1;
                } else if (a == b) {
                    cout = cin;
                }

                if (result_is_a) {
                    c = a;
                } else {
                    c = b;
                }

                if (op == 0x0c && plast && (a & 0x80) != (b & 0x80)) {
                    cout = (a & 0x80) ? 0 : 1;
                }

                op_is_min_max = 1;

            case 0x20: // AND
                c = a & b;

            case 0x21: // OR
                c = a | b;

            case 0x22: // XOR
                c = a ^ b;

            case 0x23: // EXT_32
                c = (a & 0x80) ? 0xFF : 0x00;

            default:
                error(`Invalid operation opcode: ${op} in row ${i}`);
        }
        C[i] = c;
        COUT[i] = cout;
        OP_IS_MIN_MAX[i] = op_is_min_max;
        FLAGS[i] = cout + 2*op_is_min_max + 4*result_is_a + 8*use_last_carry;
    }
    #pragma timer t2 end
    #pragma timer tt end

    lookup_proves(BINARY_TABLE_ID, [LAST, OP, A, B, CIN, C, FLAGS], multiplicity);
    #pragma memory m1 end
}