require "std_lookup.pil"

// Coprocessor in charge of performing standard RISCV binary operations

/*
    List 64-bit operations:
      name  │    op    │   m_op   │ carry │ use_last_carry │ NOTES
    ────────┼──────────┼──────────┼───────┼────────────────┼───────────────────────────────────
      ADD   │   0x02   │   0x02   │   X   │                │
      SUB   │   0x03   │   0x03   │   X   │                │
      LTU   │   0x04   │   0x04   │   X   │        X       │
      LT    │   0x05   │   0x05   │   X   │        X       │
      LEU   │   0x06   │   0x06   │   X   │        X       │
      LE    │   0x07   │   0x07   │   X   │        X       │
      EQ    │   0x08   │   0x08   │   X   │        X       │
      MINU  │   0x09   │   0x09   │   X   │                │
      MIN   │   0x0a   │   0x0a   │   X   │                │
      MAXU  │   0x0b   │   0x0b   │   X   │                │
      MAX   │   0x0c   │   0x0c   │   X   │                │
      AND   │   0x20   │   0x20   │       │                │
      OR    │   0x21   │   0x21   │       │                │
      XOR   │   0x22   │   0x22   │       │                │
    ────────┼──────────┼──────────┼───────┼────────────────┼───────────────────────────────────

    List 32-bit operations:
     name   │    op    │   m_op   │ carry │ use_last_carry │ NOTES
    ────────┼──────────┼──────────┼───────┼────────────────┼───────────────────────────────────
     ADD_W  │   0x12   │   0x02   │   X   │                │
     SUB_W  │   0x13   │   0x03   │   X   │                │
     LTU_W  │   0x14   │   0x04   │   X   │       X        │
     LT_W   │   0x15   │   0x05   │   X   │       X        │
     LEU_W  │   0x16   │   0x06   │   X   │       X        │
     LE_W   │   0x17   │   0x07   │   X   │       X        │
     EQ_W   │   0x18   │   0x08   │   X   │       X        │
     MINU_W │   0x19   │   0x09   │   X   │                │
     MIN_W  │   0x1a   │   0x0a   │   X   │                │
     MAXU_W │   0x1b   │   0x0b   │   X   │                │
     MAX_W  │   0x1c   │   0x0c   │   X   │                │
    ────────┼──────────┼──────────┼───────┼────────────────┼───────────────────────────────────

    Opcodes:
    ---------------------------------------
    expr op = m_op + 16*mode32

    mode32  64bits   32bits     m_op    op
     0/1     ADD      ADD_W     0x02    (0x02,0x12)
     0/1     SUB      SUB_W     0x03    (0x03,0x13)
     0/1     LTU      LTU_W     0x04    (0x04,0x14)
     0/1     LT       LT_W      0x05    (0x05,0x15)
     0/1     LEU      LEU_W     0x06    (0x06,0x16)
     0/1     LE       LE_W      0x07    (0x07,0x17)
     0/1     EQ       EQ_W      0x08    (0x08,0x18)
     0/1     MINU     MINU_W    0x09    (0x09,0x19)
     0/1     MIN      MIN_W     0x0a    (0x0a,0x1a)
     0/1     MAXU     MAXU_W    0x0b    (0x0b,0x1b)
     0/1     MAX      MAX_W     0x0c    (0x0c,0x1c)
     0/1     AND                0x20     0x20
      0      OR                 0x21     0x21
      0      XOR                0x22     0x22
*/

const int BINARY_ID = 20;

airtemplate Binary(const int N = 2**21, const int operation_bus_id = BINARY_ID) {
    // Default values
    const int bits = 64;
    const int bytes = bits / 8;
    const int half_bytes = bytes / 2;

    // Main values
    const int input_chunks = 2;
    const int input_chunk_bytes = bytes / input_chunks;

    // Primary columns
    col witness m_op;             // micro operation code of the binary table (e.g. add)
    col witness mode32;           // 1 if the operation is 32 bits, 0 otherwise
    col witness free_in_a[bytes]; // input1
    col witness free_in_b[bytes]; // input2
    col witness free_in_c[bytes]; // output
    col witness carry[bytes];     // bytes chunks carries [0,cout:0],[cin:0,cout:1],...,[cin:bytes-2,cout:bytes-1]

    // Secondary columns
    col witness use_last_carry;   // 1 if the operation uses the last carry as its result
    col witness op_is_min_max;    // 1 if the operation is any of the MIN/MAX operations

    const expr mode64 = 1 - mode32;
    const expr cout32 = carry[half_bytes-1];
    const expr cout64 = carry[bytes-1];

    use_last_carry * (1 - use_last_carry) === 0;
    op_is_min_max * (1 - op_is_min_max) === 0;
    cout32*(1 - cout32) === 0;
    cout64*(1 - cout64) === 0;

    // Auxiliary columns (primarily used to optimize lookups, but can be substituted with expressions)
    col witness cout;
    col witness result_is_a;
    col witness use_last_carry_mode32;
    col witness use_last_carry_mode64;
    cout === mode64 * (cout64 - cout32) + cout32;
    result_is_a === op_is_min_max * cout;
    use_last_carry_mode32 === mode32 * use_last_carry;
    use_last_carry_mode64 === mode64 * use_last_carry;

    /*
    Constraints to check the correctness of each binary operation
        opid        last    a      b     c   cin     cout + flags
        ───────────────────────────────────────────────────────────────-------------------------------------------------
        m_op         0      a0     b0    c0       0  carry0 + 2*op_is_min_max + 4*result_is_a
        m_op         0      a1     b1    c1  carry0  carry1 + 2*op_is_min_max + 4*result_is_a
        m_op         0      a2     b2    c2  carry1  carry2 + 2*op_is_min_max + 4*result_is_a
        m_op         0|1    a3     b3    c3  carry2  carry3 + 2*op_is_min_max + 4*result_is_a + 8*use_last_carry_mode32
        m_op|EXT_32  0      a4|c3  b4|0  c4  carry3  carry4 + 2*op_is_min_max + 4*result_is_a
        m_op|EXT_32  0      a5|c3  b5|0  c5  carry4  carry5 + 2*op_is_min_max + 4*result_is_a
        m_op|EXT_32  0      a6|c3  b6|0  c6  carry5  carry6 + 2*op_is_min_max + 4*result_is_a
        m_op|EXT_32  0|1    a7|c3  b7|0  c7  carry6  carry7 + 2*op_is_min_max + 4*result_is_a + 8*use_last_carry_mode64
        ───────────────────────────────────────────────────────────────-------------------------------------------------
    Perform, at the byte level, lookups against the binary table on inputs:
                  [last, m_op, a, b, cin, c, cout + flags]
    where last indicates whether the byte is the last one in the operation
    */

    lookup_assumes(BINARY_TABLE_ID, [0, m_op, free_in_a[0], free_in_b[0], 0, free_in_c[0], carry[0] + 2*op_is_min_max + 4*result_is_a]);

    // More auxiliary columns
    col witness m_op_or_ext;
    col witness free_in_a_or_c[half_bytes];
    col witness free_in_b_or_zero[half_bytes];
    m_op_or_ext === mode64 * (m_op - EXT_32_OP) + EXT_32_OP;
    int j = 0;
    for (int i = 1; i < bytes; i++) {
        if (i >= half_bytes) {
            free_in_a_or_c[j] === mode64 * (free_in_a[i] - free_in_c[half_bytes-1]) + free_in_c[half_bytes-1];
            free_in_b_or_zero[j] === mode64 * free_in_b[i];
        }

        if (i < half_bytes - 1) {
            lookup_assumes(BINARY_TABLE_ID, [0, m_op, free_in_a[i], free_in_b[i], carry[i-1], free_in_c[i], carry[i] + 2*op_is_min_max + 4*result_is_a]);
        } else if (i == half_bytes - 1) {
            lookup_assumes(BINARY_TABLE_ID, [mode32, m_op, free_in_a[i], free_in_b[i], carry[i-1], free_in_c[i], cout32 + 2*op_is_min_max + 4*result_is_a + 8*use_last_carry_mode32]);
        } else if (i < bytes - 1) {
            lookup_assumes(BINARY_TABLE_ID, [0, m_op_or_ext, free_in_a_or_c[j], free_in_b_or_zero[j], carry[i-1], free_in_c[i], carry[i] + 2*op_is_min_max + 4*result_is_a]);
            j++;
        } else  {
            lookup_assumes(BINARY_TABLE_ID, [mode64, m_op_or_ext, free_in_a_or_c[j], free_in_b_or_zero[j], carry[i-1], free_in_c[i], cout64 + 2*op_is_min_max + 4*result_is_a + 8*use_last_carry_mode64]);
            j++;
        }
    }

    // Constraints to make sure that this component is called from the main component
    expr a[input_chunks];
    expr b[input_chunks];
    expr c[input_chunks];
    for (int i = 0; i < input_chunks; i++) {
        a[i] = 0;
        b[i] = 0;
        c[i] = 0;
    }

    int i_byte = 0;
    int i_chunk = 0;
    int factor = 0;
    for (int i = 0; i < bytes; i++) {
        factor = 256 ** i_byte;
        a[i_chunk] += (factor * free_in_a[i]);
        b[i_chunk] += (factor * free_in_b[i]);
        c[i_chunk] += (factor * free_in_c[i]);
        i_byte++;
        if (i_byte == input_chunk_bytes) {
            i_byte = 0;
            i_chunk++;
        }
    }

    // in logical functions like EQ the result is known at the last chunk,
    // which means that c[0] = 0 and c[input_chunks-1] = cout, but need to swap them
    // e.g.: A = 0x12_34_56_78, B = 0x12_34_56_78
    // the lookup table ensures that C = 0x01_00_00_00 (since until the last chunk it cannot decide whether the EQ is true or not)
    // but we want C = 0x00_00_00_01
    c[0] += use_last_carry * cout;
    c[input_chunks - 1] -= use_last_carry * cout * factor;

    expr op = m_op + 16 * mode32;

    col witness multiplicity;
    col witness debug_main_step;
    lookup_proves(OPERATION_BUS_ID, [debug_main_step, op, ...a, ...b, ...c, cout - result_is_a], multiplicity);
}