use p3_field::PrimeField;
use pil_std_lib::Std;
use proofman::WitnessManager;
use proofman_common::{ExecutionCtx, ProofCtx, SetupCtx};
use proofman_util::{timer_start_debug, timer_stop_and_log_debug};

use rayon::prelude::*;

use sm_arith::ArithSM;
use sm_binary::BinarySM;
use sm_common::{create_prover_buffer, PlannerProvider};
use sm_main::{InstanceExtensionCtx, MainSM};
use sm_mem::MemSM;
use sm_rom::{RomPlan, RomSM};
use std::{
    fs,
    path::{Path, PathBuf},
    sync::{Arc, Mutex},
};
use zisk_core::{Riscv2zisk, ZiskRom};
use zisk_pil::{MAIN_AIR_IDS, ZISK_AIRGROUP_ID};
use ziskemu::{EmuOptions, EmuTrace, ZiskEmulator};

use crate::PlannerRegistry;

pub struct ZiskExecutor<F: PrimeField> {
    /// Witness Manager
    pub wcm: Arc<WitnessManager<F>>,

    /// ZisK ROM, a binary file that contains the ZisK program to be executed
    pub zisk_rom: Arc<ZiskRom>,

    /// Main State Machine
    pub main_sm: Arc<MainSM<F>>,

    /// ROM State Machine
    pub rom_sm: Arc<RomSM<F>>,

    /// Memory State Machine
    pub mem_sm: Arc<MemSM>,

    /// Binary State Machine
    pub binary_sm: Arc<BinarySM<F>>,

    /// Arithmetic State Machine
    pub arith_sm: Arc<ArithSM>,
}

impl<F: PrimeField> ZiskExecutor<F> {
    const NUM_THREADS: usize = 8;

    pub fn new(wcm: Arc<WitnessManager<F>>, rom_path: PathBuf) -> Self {
        let std = Std::new(wcm.clone());

        let rom_sm = RomSM::new(wcm.clone());
        let mem_sm = MemSM::new(wcm.clone());
        let binary_sm = BinarySM::new(wcm.clone(), std.clone());
        let arith_sm = ArithSM::new(wcm.clone());

        // If rom_path has an .elf extension it must be converted to a ZisK ROM
        let zisk_rom = if rom_path.extension().unwrap() == "elf" {
            // Create an instance of the RISCV -> ZisK program converter
            let rv2zk = Riscv2zisk::new(
                rom_path.display().to_string(),
                String::new(),
                String::new(),
                String::new(),
            );

            // Convert program to rom
            match rv2zk.run() {
                Ok(rom) => rom,
                Err(e) => {
                    panic!("Application error: {}", e);
                }
            }
        } else {
            // TODO - Remove this when the ZisK ROM is able to be loaded from a file
            panic!("ROM file must be an ELF file");
        };

        let zisk_rom = Arc::new(zisk_rom);

        // TODO - Compute MAX_ACCUMULATED having the num_rows of the Main AIR
        // TODO - If there is more than one Main AIR available, the MAX_ACCUMULATED will be the one
        // with the highest num_rows. It has to be a power of 2.

        let main_sm = MainSM::new(wcm.clone(), arith_sm.clone(), binary_sm.clone(), mem_sm.clone());

        Self { wcm, zisk_rom, main_sm, rom_sm, mem_sm, binary_sm, arith_sm }
    }

    /// Executes the MainSM state machine and processes the inputs in batches when the maximum
    /// number of accumulated inputs is reached. The MainSM state machine uses the emulator to
    /// execute the a program and using a callback the main state machine receives batches of
    /// inputs generated by the emulator. The inputs are processed in batches when the maximum
    /// number of accumulated inputs is reached
    /// # Arguments
    /// * `pctx` - Proof context to interact with the proof system
    /// * `ectx` - Execution context to interact with the execution environment
    pub fn execute(
        &self,
        rom_path: &Path,
        public_inputs_path: &Path,
        pctx: Arc<ProofCtx<F>>,
        ectx: Arc<ExecutionCtx<F>>,
        sctx: Arc<SetupCtx<F>>,
    ) {
        let air_main = pctx.pilout.get_air(ZISK_AIRGROUP_ID, MAIN_AIR_IDS[0]);

        // Prepare the settings for the emulator
        let emu_options = EmuOptions {
            elf: Some(rom_path.to_path_buf().display().to_string()),
            inputs: Some(public_inputs_path.display().to_string()),
            trace_steps: Some(air_main.num_rows() as u64 - 1),
            ..EmuOptions::default()
        };

        // Call emulate with these options
        let public_inputs = {
            // Read inputs data from the provided inputs path
            let path = PathBuf::from(public_inputs_path.display().to_string());
            fs::read(path).expect("Could not read inputs file")
        };

        let mut planner_registry = PlannerRegistry::new();
        let binary_planner = self.binary_sm.get_planner();
        let rom_planner = self.rom_sm.get_planner();
        planner_registry.register_planner(binary_planner);
        planner_registry.register_planner(rom_planner);

        planner_registry.new_session(&pctx.pilout);

        // STEP 1. Fast execution of the ROM to get the Minimal Trace
        // ----------------------------------------------
        timer_start_debug!(FAST_PROCESS_ROM);
        let minimal_traces = ZiskEmulator::par_process_rom::<F>(
            &self.zisk_rom,
            &public_inputs,
            &emu_options,
            Self::NUM_THREADS,
        )
        .expect("Error during emulator execution");
        timer_stop_and_log_debug!(FAST_PROCESS_ROM);
        let minimal_traces = Arc::new(minimal_traces);

        // STEP 2. Create Instances for the Main
        // ----------------------------------------------
        let iectx = Arc::new(Mutex::new({
            let mut iectx = Vec::new();
            self.create_main_instances(&mut iectx, &minimal_traces);
            iectx
        }));

        let main_task = {
            let main_sm = self.main_sm.clone();
            let zisk_rom = self.zisk_rom.clone();
            let minimal_traces = minimal_traces.clone();
            let iectx = Arc::clone(&iectx);
            let pctx = pctx.clone();

            std::thread::spawn(move || {
                iectx.lock().unwrap().par_iter_mut().for_each(|iectx| {
                    main_sm.prove_main(&zisk_rom, &minimal_traces, iectx, &pctx);
                });
            })
        };

        // STEP 3. Process the Slices with the Observers
        // ----------------------------------------------
        timer_start_debug!(PROCESS_OBSERVER);

        let sec_task = {
            let zisk_rom = self.zisk_rom.clone();
            let minimal_traces = minimal_traces.clone();
            let rom_sm = self.rom_sm.clone();

            std::thread::spawn(move || {
                ZiskEmulator::process_slice_observer::<F>(
                    &zisk_rom,
                    &minimal_traces,
                    &mut planner_registry,
                )
                .expect("Error emulation not completed while executing process_slice_observer()");

                let pc_histogram = planner_registry.planners[1].get_plan();
                let pc_histogram = pc_histogram
                    .as_any()
                    .downcast_ref::<RomPlan>()
                    .expect("Error downcasting to ZiskPcHistogram");

                let _ = rom_sm.prove(&zisk_rom, &pc_histogram.histogram);
            })
        };

        timer_stop_and_log_debug!(PROCESS_OBSERVER);

        // // FIXME: Move InstanceExtensionCtx form main SM to another place
        // let mut instances_extension_ctx: Vec<InstanceExtensionCtx<F>> =
        //     Vec::with_capacity(emu_slices.points.len());

        // let mut dctx = ectx.dctx.write().unwrap();
        // let mut main_segnent_id = 0;
        // for emu_slice in emu_slices.points.iter() {
        //     let (airgroup_id, air_id) = match emu_slice.op_type {
        //         ZiskOperationType::None => (ZISK_AIRGROUP_ID, MAIN_AIR_IDS[0]),
        //         ZiskOperationType::Binary => (ZISK_AIRGROUP_ID, BINARY_AIR_IDS[0]),
        //         ZiskOperationType::BinaryE => (ZISK_AIRGROUP_ID, BINARY_EXTENSION_AIR_IDS[0]),
        //         _ => panic!("Invalid operation type"),
        //     };
        //     let segment_id = match emu_slice.op_type {
        //         ZiskOperationType::None => {
        //             main_segnent_id += 1;
        //             Some(main_segnent_id - 1)
        //         }
        //         _ => None,
        //     };

        //     if let (true, global_idx) = dctx.add_instance(airgroup_id, air_id, 1) {
        //         let (buffer, offset) = create_prover_buffer::<F>(&ectx, &sctx, airgroup_id, air_id);
        //         instances_extension_ctx.push(InstanceExtensionCtx::new(
        //             buffer,
        //             offset,
        //             emu_slice.op_type,
        //             emu_slice.emu_trace_start.clone(),
        //             segment_id,
        //             global_idx,
        //             None,
        //         ));
        //     }
        // }
        // drop(dctx);

        // instances_extension_ctx.par_iter_mut().for_each(|iectx| match iectx.op_type {
        //     ZiskOperationType::None => {
        //         self.main_sm.prove_main(&self.zisk_rom, &minimal_traces, iectx, &pctx);
        //     }
        //     ZiskOperationType::Binary => {
        //         self.main_sm.prove_binary(&self.zisk_rom, &minimal_traces, iectx, &pctx);
        //     }
        //     ZiskOperationType::BinaryE => {
        //         self.main_sm.prove_binary_extension(&self.zisk_rom, &minimal_traces, iectx, &pctx);
        //     }
        //     _ => panic!("Invalid operation type"),
        // });

        std::thread::spawn(move || {
            drop(minimal_traces);
        });

        main_task.join().unwrap();
        sec_task.join().unwrap();

        timer_start_debug!(ADD_INSTANCES_TO_THE_REPO);
        let mut instances_extension_ctx = iectx.lock().unwrap();
        let instances_extension_ctx = std::mem::take(&mut *instances_extension_ctx);

        for iectx in instances_extension_ctx {
            if let Some(air_instance) = iectx.air_instance {
                pctx.air_instance_repo
                    .add_air_instance(air_instance, Some(iectx.instance_global_idx));
            }
        }
        timer_stop_and_log_debug!(ADD_INSTANCES_TO_THE_REPO);

        // self.mem_sm.unregister_predecessor(scope);
        self.binary_sm.unregister_predecessor();
        // self.arith_sm.register_predecessor(scope);
    }

    fn create_main_instances(
        &self,
        instances_extension_ctx: &mut Vec<InstanceExtensionCtx<F>>,
        minimal_traces: &[EmuTrace],
    ) {
        let ectx = self.wcm.get_ectx();
        let sctx = self.wcm.get_sctx();

        let mut dctx = ectx.dctx.write().unwrap();
        for (segment_id, minimal_trace) in minimal_traces.iter().enumerate() {
            if let (true, global_idx) = dctx.add_instance(ZISK_AIRGROUP_ID, MAIN_AIR_IDS[0], 1) {
                let (buffer, offset) =
                    create_prover_buffer::<F>(&ectx, &sctx, ZISK_AIRGROUP_ID, MAIN_AIR_IDS[0]);
                instances_extension_ctx.push(InstanceExtensionCtx::new(
                    buffer,
                    offset,
                    minimal_trace.start_state.clone(),
                    Some(segment_id),
                    global_idx,
                    None,
                ));
            }
        }
    }
}
