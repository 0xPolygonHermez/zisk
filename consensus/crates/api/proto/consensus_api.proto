syntax = "proto3";

package consensus.api.v1;

import "google/protobuf/timestamp.proto";

// ============================================================================
// gRPC Service Definition
// ============================================================================

service ConsensusApi {
  // Bidirectional stream for prover communication
  rpc ProverStream(stream ProverMessage) returns (stream CoordinatorMessage);
  
  // Admin endpoints (optional, for monitoring)
  rpc StatusInfo(StatusInfoRequest) returns (StatusInfoResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  rpc JobsList(JobsListRequest) returns (JobsListResponse);
  rpc ProversList(ProversListRequest) returns (ProversListResponse);
  rpc JobStatus(JobStatusRequest) returns (JobStatusResponse);
  rpc SystemStatus(SystemStatusRequest) returns (SystemStatusResponse);
  
  // Coordinator control
  rpc StartProof(StartProofRequest) returns (StartProofResponse);
}

// Standardized error response
message ErrorResponse {
  string code = 1;      // Error code (e.g., "JOB_NOT_FOUND", "PROVER_UNAVAILABLE")
  string message = 2;   // Human-readable error message
}

// ============================================================================
// Admin Commands Request Messages
// ============================================================================

// Service info requests
message StatusInfoRequest {}

message HealthCheckRequest {}

message JobsListRequest {
  bool active_only = 1;
}

message ProversListRequest {
  bool available_only = 1;
}

message JobStatusRequest {
  string job_id = 1;
}

message SystemStatusRequest {}

message StartProofRequest {
  string block_id = 1;
  uint32 compute_units = 2;
  string input_path = 3;
}

// ============================================================================
// Admin Commands Response Messages
// ============================================================================

message StatusInfoResponse {
  string service_name = 1;
  string version = 2;
  uint64 uptime_seconds = 3;
  google.protobuf.Timestamp start_time = 4;
  Metrics metrics = 5;
}

// Metrics information
message Metrics {
  uint32 active_connections = 2;
}

// Health check response
message HealthCheckResponse {}

message JobsListResponse {
  oneof result {
    JobsList jobs_list = 1;         // Success case
    ErrorResponse error = 2;   // Error case (e.g., system unavailable)
  }
}

message JobsList {
  repeated JobStatus jobs = 1;
}

message JobStatusResponse {
  oneof result {
    JobStatus job = 1;          // Success case
    ErrorResponse error = 2;   // Error case (e.g., job not found)
  }
}

message JobStatus {
  string job_id = 1;
  string block_id = 2;
  string phase = 3;
  string status = 4;
  repeated string assigned_provers = 5;
  uint64 start_time = 6;
  uint64 duration_ms = 7;
}

message ProversListResponse {
  oneof result {
    ProversList provers_list = 1;
    ErrorResponse error = 2;
  }
}

message ProversList {
  repeated ProverStatus provers = 1;
}

message ProverStatus {
  string prover_id = 1;
  string state = 2;
  string current_job_id = 3;
  ComputeCapacity allocated_capacity = 4;
  uint64 last_heartbeat = 5;
  uint32 jobs_completed = 6;
}

message SystemStatusResponse {
  oneof result {
    SystemStatus status = 1;
    ErrorResponse error = 2;
  }
}

message SystemStatus {
  uint32 total_provers = 1;
  uint32 compute_capacity = 2;
  uint32 idle_provers = 3;
  uint32 busy_provers = 4;
  uint32 active_jobs = 5;
  uint32 pending_jobs = 6;
  uint32 completed_jobs_last_minute = 7;
  double job_completion_rate = 8;
  double prover_utilization = 9;
}

message StartProofResponse {
  oneof result {
    string job_id = 1;
    ErrorResponse error = 2;
  }
}

// ============================================================================
// Proof Coordinator Messages (NEW)
// ============================================================================

// Messages from coordinator to prover
message CoordinatorMessage {
  oneof payload {
    Heartbeat heartbeat = 1;
    Shutdown shutdown = 2;
    ProverRegisterResponse register_response = 3;
    ProvePhase1 prove_phase1 = 4;
    ProvePhase2 prove_phase2 = 5;
    JobCancelled job_cancelled = 6;
  }
}

// Messages from prover to coordinator
message ProverMessage {
  oneof payload {
    HeartbeatAck heartbeat_ack = 1;
    ProverError error = 2;
    ProverRegisterRequest register = 3;
    ProvePhase1Result phase1_result = 4;
    FinalProof final_proof = 5;
    ProverReconnectRequest reconnect = 6;
  }
}

message Heartbeat {
  google.protobuf.Timestamp timestamp = 1;
}

message Shutdown {
  string reason = 1;
  uint32 grace_period_seconds = 2;
}

message ProverRegisterResponse {
  string prover_id = 1;
  bool accepted = 2;
  string message = 3;
  google.protobuf.Timestamp registered_at = 4;
}

message ProvePhase1 {
  string job_id = 1;
  string block_id = 2;
  string input_path = 3;
  uint32 rank_id = 4;
  uint32 total_provers = 5;
}

message ProvePhase2 {
  string job_id = 1;
  repeated uint64 global_challenge = 2;
}

message HeartbeatAck {
  google.protobuf.Timestamp timestamp = 1;
  string prover_id = 2;
}

message ProverError {
  string prover_id = 1;
  string job_id = 2;
  string error_message = 3;
  string error_type = 4;
}

message ProverRegisterRequest {
  string prover_id = 1;
  ComputeCapacity compute_capacity = 2; // Maximum compute capacity of a node/cluster
}

message ComputeCapacity {
  uint32 compute_units = 1;
}

message ProvePhase1Result {
  string job_id = 1;
  string prover_id = 2;
  uint32 rank_id = 3;
  repeated uint64 result_data = 4;
  bool success = 5;
  string error_message = 6;
}

message FinalProof {
  string job_id = 1;
  string prover_id = 2;
  uint32 rank_id = 3;
  repeated uint64 proof_data = 4;
  bool success = 5;
  string error_message = 6;
}

message JobCancelled {
  string job_id = 1;
  string reason = 2;
}

message ProverReconnectRequest {
  string prover_id = 1;
  ComputeCapacity compute_capacity = 2;
  string last_known_job_id = 3;
  string last_known_phase = 4; // "phase1", "phase2", "completed", "none"
  uint32 last_known_rank_id = 5;
}
