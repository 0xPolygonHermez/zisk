use serde::{de, Deserialize, Deserializer};

#[allow(dead_code)]
#[derive(Debug)]
pub enum ZiskOperator {
    Flag,
    CopyB,
    SignExtendB,
    SignExtendH,
    SignExtendW,
    Add,
    AddW,
    Sub,
    SubW,
    Sll,
    SllW,
    Sra,
    Srl,
    SraW,
    SrlW,
    Eq,
    EqW,
    Ltu,
    Lt,
    LtuW,
    LtW,
    Leu,
    Le,
    LeuW,
    LeW,
    And,
    Or,
    Xor,
    Mulu,
    Mul,
    MulW,
    MulUh,
    MulH,
    MulSuh,
    Divu,
    Div,
    DivuW,
    DivW,
    Remu,
    Rem,
    RemuW,
    RemW,
    Minu,
    Min,
    MinuW,
    MinW,
    Maxu,
    Max,
    MaxuW,
    MaxW,
}

impl<'de> Deserialize<'de> for ZiskOperator {
    fn deserialize<D>(deserializer: D) -> Result<ZiskOperator, D::Error>
    where
        D: Deserializer<'de>,
    {
        let value: u8 = Deserialize::deserialize(deserializer)?;
        match value {
            0x00 => Ok(ZiskOperator::Flag),
            0x01 => Ok(ZiskOperator::CopyB),
            0x02 => Ok(ZiskOperator::SignExtendB),
            0x03 => Ok(ZiskOperator::SignExtendH),
            0x04 => Ok(ZiskOperator::SignExtendW),
            0x10 => Ok(ZiskOperator::Add),
            0x14 => Ok(ZiskOperator::AddW),
            0x20 => Ok(ZiskOperator::Sub),
            0x24 => Ok(ZiskOperator::SubW),
            0x30 => Ok(ZiskOperator::Sll),
            0x34 => Ok(ZiskOperator::SllW),
            0x40 => Ok(ZiskOperator::Sra),
            0x41 => Ok(ZiskOperator::Srl),
            0x44 => Ok(ZiskOperator::SraW),
            0x45 => Ok(ZiskOperator::SrlW),
            0x50 => Ok(ZiskOperator::Eq),
            0x54 => Ok(ZiskOperator::EqW),
            0x60 => Ok(ZiskOperator::Ltu),
            0x61 => Ok(ZiskOperator::Lt),
            0x64 => Ok(ZiskOperator::LtuW),
            0x65 => Ok(ZiskOperator::LtW),
            0x70 => Ok(ZiskOperator::Leu),
            0x71 => Ok(ZiskOperator::Le),
            0x74 => Ok(ZiskOperator::LeuW),
            0x75 => Ok(ZiskOperator::LeW),
            0x80 => Ok(ZiskOperator::And),
            0x90 => Ok(ZiskOperator::Or),
            0xa0 => Ok(ZiskOperator::Xor),
            0xb0 => Ok(ZiskOperator::Mulu),
            0xb1 => Ok(ZiskOperator::Mul),
            0xb5 => Ok(ZiskOperator::MulW),
            0xb8 => Ok(ZiskOperator::MulUh),
            0xb9 => Ok(ZiskOperator::MulH),
            0xbb => Ok(ZiskOperator::MulSuh),
            0xc0 => Ok(ZiskOperator::Divu),
            0xc1 => Ok(ZiskOperator::Div),
            0xc4 => Ok(ZiskOperator::DivuW),
            0xc5 => Ok(ZiskOperator::DivW),
            0xc8 => Ok(ZiskOperator::Remu),
            0xc9 => Ok(ZiskOperator::Rem),
            0xcc => Ok(ZiskOperator::RemuW),
            0xcd => Ok(ZiskOperator::RemW),
            0xd0 => Ok(ZiskOperator::Minu),
            0xd1 => Ok(ZiskOperator::Min),
            0xd4 => Ok(ZiskOperator::MinuW),
            0xd5 => Ok(ZiskOperator::MinW),
            0xe0 => Ok(ZiskOperator::Maxu),
            0xe1 => Ok(ZiskOperator::Max),
            0xe4 => Ok(ZiskOperator::MaxuW),
            0xe5 => Ok(ZiskOperator::MaxW),
            _ => Err(de::Error::custom(format!("Unknown ZiskOperator code: {}", value))),
        }
    }
}
